
CAN_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003384  08003384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800338c  0800338c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  2000000c  080033a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  080033a0  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac3b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0d  00000000  00000000  0002ac77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002d298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7b3  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4ab  00000000  00000000  0004c283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7e60  00000000  00000000  0005772e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002524  00000000  00000000  0010f5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800335c 	.word	0x0800335c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800335c 	.word	0x0800335c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fafe 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f852 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f940 	bl	8000798 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000518:	f000 f8bc 	bl	8000694 <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f90c 	bl	8000738 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000520:	4820      	ldr	r0, [pc, #128]	; (80005a4 <main+0x9c>)
 8000522:	f000 fd65 	bl	8000ff0 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	481e      	ldr	r0, [pc, #120]	; (80005a4 <main+0x9c>)
 800052a:	f000 ff92 	bl	8001452 <HAL_CAN_ActivateNotification>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2104      	movs	r1, #4
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <main+0xa0>)
 8000534:	f001 fc70 	bl	8001e18 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053c:	f000 fb58 	bl	8000bf0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2104      	movs	r1, #4
 8000544:	4818      	ldr	r0, [pc, #96]	; (80005a8 <main+0xa0>)
 8000546:	f001 fc67 	bl	8001e18 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054e:	f000 fb4f 	bl	8000bf0 <HAL_Delay>
  TxHeader.DLC = 2;  // data length
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xa4>)
 8000554:	2202      	movs	r2, #2
 8000556:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <main+0xa4>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <main+0xa4>)
 8000560:	2200      	movs	r2, #0
 8000562:	60da      	str	r2, [r3, #12]
  TxData[0] = 0x10;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <main+0xa8>)
 8000566:	2210      	movs	r2, #16
 8000568:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x11;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <main+0xa8>)
 800056c:	2211      	movs	r2, #17
 800056e:	705a      	strb	r2, [r3, #1]

#ifdef MASTER
  TxHeader.StdId = 0x103;  // ID
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0xa4>)
 8000572:	f240 1203 	movw	r2, #259	; 0x103
 8000576:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2104      	movs	r1, #4
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <main+0xa0>)
 800057e:	f001 fc4b 	bl	8001e18 <HAL_GPIO_WritePin>
  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <main+0xac>)
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <main+0xa8>)
 8000586:	4909      	ldr	r1, [pc, #36]	; (80005ac <main+0xa4>)
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x9c>)
 800058a:	f000 fd75 	bl	8001078 <HAL_CAN_AddTxMessage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
#ifdef MASTER
	  HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fb2d 	bl	8000bf0 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <main+0xac>)
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <main+0xa8>)
 800059a:	4904      	ldr	r1, [pc, #16]	; (80005ac <main+0xa4>)
 800059c:	4801      	ldr	r0, [pc, #4]	; (80005a4 <main+0x9c>)
 800059e:	f000 fd6b 	bl	8001078 <HAL_CAN_AddTxMessage>
	  HAL_Delay(1000);
 80005a2:	e7f4      	b.n	800058e <main+0x86>
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40020000 	.word	0x40020000
 80005ac:	2000055c 	.word	0x2000055c
 80005b0:	20000590 	.word	0x20000590
 80005b4:	200005a0 	.word	0x200005a0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fec0 	bl	800334c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a29      	ldr	r2, [pc, #164]	; (800068c <SystemClock_Config+0xd4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xd4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a23      	ldr	r2, [pc, #140]	; (8000690 <SystemClock_Config+0xd8>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000614:	2303      	movs	r3, #3
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000630:	230f      	movs	r3, #15
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000634:	2390      	movs	r3, #144	; 0x90
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800063c:	2305      	movs	r3, #5
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f8db 	bl	8002804 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000654:	f000 f90a 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fd4c 	bl	8002110 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067e:	f000 f8f5 	bl	800086c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_CAN1_Init+0x9c>)
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <MX_CAN1_Init+0xa0>)
 800069e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006a2:	2208      	movs	r2, #8
 80006a4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ac:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e4:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_CAN1_Init+0x9c>)
 80006e6:	f000 faa7 	bl	8000c38 <HAL_CAN_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f8bc 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006f8:	2312      	movs	r3, #18
 80006fa:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
#ifdef MASTER
	canfilterconfig.FilterIdHigh = 0x800<<5;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdHigh = 0x103<<5;
	canfilterconfig.FilterIdLow = 0;
	canfilterconfig.FilterMaskIdHigh = 0x103<<5;

#endif
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000716:	2301      	movs	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800071a:	2314      	movs	r3, #20
 800071c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <MX_CAN1_Init+0x9c>)
 8000724:	f000 fb84 	bl	8000e30 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000028 	.word	0x20000028
 8000734:	40006400 	.word	0x40006400

08000738 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800073e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000742:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000746:	2206      	movs	r2, #6
 8000748:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800074c:	2202      	movs	r2, #2
 800074e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000758:	2202      	movs	r2, #2
 800075a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000782:	f001 fb7c 	bl	8001e7e <HAL_PCD_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800078c:	f000 f86e 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000050 	.word	0x20000050

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0x98>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0x98>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0x98>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0x98>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0x98>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0x98>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_GPIO_Init+0x98>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_GPIO_Init+0x98>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_GPIO_Init+0x98>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_Led_GPIO_Port, Status_Led_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2104      	movs	r1, #4
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0x9c>)
 8000808:	f001 fb06 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_Led_Pin */
  GPIO_InitStruct.Pin = Status_Led_Pin;
 800080c:	2304      	movs	r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Status_Led_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x9c>)
 8000824:	f001 f97c 	bl	8001b20 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000

08000838 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_2);
 8000840:	2104      	movs	r1, #4
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000844:	f001 fb01 	bl	8001e4a <HAL_GPIO_TogglePin>
	HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0, &RxHeader, RxData);
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800084c:	2100      	movs	r1, #0
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000850:	f000 fced 	bl	800122e <HAL_CAN_GetRxMessage>
	//HAL_Delay(10);
	//HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox);
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40020000 	.word	0x40020000
 8000860:	20000598 	.word	0x20000598
 8000864:	20000574 	.word	0x20000574
 8000868:	20000028 	.word	0x20000028

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_CAN_MspInit+0x94>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d134      	bne.n	8000954 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_CAN_MspInit+0x98>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_CAN_MspInit+0x98>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_CAN_MspInit+0x98>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_CAN_MspInit+0x98>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8000934:	2308      	movs	r3, #8
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <HAL_CAN_MspInit+0x9c>)
 8000940:	f001 f8ee 	bl	8001b20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2014      	movs	r0, #20
 800094a:	f001 f8b2 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800094e:	2014      	movs	r0, #20
 8000950:	f001 f8cb 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40006400 	.word	0x40006400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400

08000968 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b098      	sub	sp, #96	; 0x60
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	223c      	movs	r2, #60	; 0x3c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f002 fcdf 	bl	800334c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000996:	d140      	bne.n	8000a1a <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000998:	2320      	movs	r3, #32
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fd5f 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ff5c 	bl	800086c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009ea:	4619      	mov	r1, r3
 80009ec:	480e      	ldr	r0, [pc, #56]	; (8000a28 <HAL_PCD_MspInit+0xc0>)
 80009ee:	f001 f897 	bl	8001b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6353      	str	r3, [r2, #52]	; 0x34
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_PCD_MspInit+0xbc>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3760      	adds	r7, #96	; 0x60
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f89a 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <CAN1_RX0_IRQHandler+0x10>)
 8000a86:	f000 fd0a 	bl	800149e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000028 	.word	0x20000028

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fc0d 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd0d 	bl	8000508 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000af0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000afc:	08003394 	.word	0x08003394
  ldr r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b04:	200005a8 	.word	0x200005a8

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 ffb1 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe9a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ffc9 	bl	8001b06 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 ff91 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	200005a4 	.word	0x200005a4

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200005a4 	.word	0x200005a4

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e0ed      	b.n	8000e26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fe36 	bl	80008c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0201 	orr.w	r2, r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c6c:	f7ff ffb4 	bl	8000bd8 <HAL_GetTick>
 8000c70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c72:	e012      	b.n	8000c9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c74:	f7ff ffb0 	bl	8000bd8 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b0a      	cmp	r3, #10
 8000c80:	d90b      	bls.n	8000c9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2205      	movs	r2, #5
 8000c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0c5      	b.n	8000e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0e5      	beq.n	8000c74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0202 	bic.w	r2, r2, #2
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb8:	f7ff ff8e 	bl	8000bd8 <HAL_GetTick>
 8000cbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cbe:	e012      	b.n	8000ce6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc0:	f7ff ff8a 	bl	8000bd8 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b0a      	cmp	r3, #10
 8000ccc:	d90b      	bls.n	8000ce6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2205      	movs	r2, #5
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e09f      	b.n	8000e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1e5      	bne.n	8000cc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7e1b      	ldrb	r3, [r3, #24]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d108      	bne.n	8000d0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e007      	b.n	8000d1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7e5b      	ldrb	r3, [r3, #25]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d108      	bne.n	8000d38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e007      	b.n	8000d48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7e9b      	ldrb	r3, [r3, #26]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d108      	bne.n	8000d62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f042 0220 	orr.w	r2, r2, #32
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e007      	b.n	8000d72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0220 	bic.w	r2, r2, #32
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7edb      	ldrb	r3, [r3, #27]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0210 	bic.w	r2, r2, #16
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e007      	b.n	8000d9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0210 	orr.w	r2, r2, #16
 8000d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7f1b      	ldrb	r3, [r3, #28]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d108      	bne.n	8000db6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0208 	orr.w	r2, r2, #8
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e007      	b.n	8000dc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0208 	bic.w	r2, r2, #8
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7f5b      	ldrb	r3, [r3, #29]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d108      	bne.n	8000de0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0204 	orr.w	r2, r2, #4
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e007      	b.n	8000df0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	ea42 0103 	orr.w	r1, r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e46:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e48:	7cfb      	ldrb	r3, [r7, #19]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d003      	beq.n	8000e56 <HAL_CAN_ConfigFilter+0x26>
 8000e4e:	7cfb      	ldrb	r3, [r7, #19]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	f040 80be 	bne.w	8000fd2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e56:	4b65      	ldr	r3, [pc, #404]	; (8000fec <HAL_CAN_ConfigFilter+0x1bc>)
 8000e58:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	431a      	orrs	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2201      	movs	r2, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d123      	bne.n	8000f00 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3248      	adds	r2, #72	; 0x48
 8000ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ef6:	6979      	ldr	r1, [r7, #20]
 8000ef8:	3348      	adds	r3, #72	; 0x48
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d122      	bne.n	8000f4e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3248      	adds	r2, #72	; 0x48
 8000f2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f44:	6979      	ldr	r1, [r7, #20]
 8000f46:	3348      	adds	r3, #72	; 0x48
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d109      	bne.n	8000f6a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f68:	e007      	b.n	8000f7a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	431a      	orrs	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f94:	e007      	b.n	8000fa6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d107      	bne.n	8000fbe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fc4:	f023 0201 	bic.w	r2, r3, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e006      	b.n	8000fe0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
  }
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40006400 	.word	0x40006400

08000ff0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d12e      	bne.n	8001062 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2202      	movs	r2, #2
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800101c:	f7ff fddc 	bl	8000bd8 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff fdd8 	bl	8000bd8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e012      	b.n	8001070 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e5      	bne.n	8001024 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e006      	b.n	8001070 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
  }
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800108c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001096:	7ffb      	ldrb	r3, [r7, #31]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d003      	beq.n	80010a4 <HAL_CAN_AddTxMessage+0x2c>
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	f040 80b8 	bne.w	8001214 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10a      	bne.n	80010c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80a0 	beq.w	8001204 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	0e1b      	lsrs	r3, r3, #24
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d907      	bls.n	80010e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e09e      	b.n	8001222 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010e4:	2201      	movs	r2, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	409a      	lsls	r2, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10d      	bne.n	8001112 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	6809      	ldr	r1, [r1, #0]
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3318      	adds	r3, #24
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	440b      	add	r3, r1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e00f      	b.n	8001132 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800111c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001122:	68f9      	ldr	r1, [r7, #12]
 8001124:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001126:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3318      	adds	r3, #24
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	440b      	add	r3, r1
 8001130:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3318      	adds	r3, #24
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	440b      	add	r3, r1
 8001142:	3304      	adds	r3, #4
 8001144:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	7d1b      	ldrb	r3, [r3, #20]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d111      	bne.n	8001172 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3318      	adds	r3, #24
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	3304      	adds	r3, #4
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3318      	adds	r3, #24
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	440b      	add	r3, r1
 800116e:	3304      	adds	r3, #4
 8001170:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3307      	adds	r3, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	061a      	lsls	r2, r3, #24
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3306      	adds	r3, #6
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3305      	adds	r3, #5
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4313      	orrs	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	3204      	adds	r2, #4
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	4610      	mov	r0, r2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	6811      	ldr	r1, [r2, #0]
 800119a:	ea43 0200 	orr.w	r2, r3, r0
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	440b      	add	r3, r1
 80011a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3303      	adds	r3, #3
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	061a      	lsls	r2, r3, #24
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3302      	adds	r3, #2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	041b      	lsls	r3, r3, #16
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3301      	adds	r3, #1
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	4313      	orrs	r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	4610      	mov	r0, r2
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	6811      	ldr	r1, [r2, #0]
 80011d0:	ea43 0200 	orr.w	r2, r3, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	440b      	add	r3, r1
 80011da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3318      	adds	r3, #24
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	6811      	ldr	r1, [r2, #0]
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3318      	adds	r3, #24
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	e00e      	b.n	8001222 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e006      	b.n	8001222 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
  }
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800122e:	b480      	push	{r7}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001242:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d003      	beq.n	8001252 <HAL_CAN_GetRxMessage+0x24>
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b02      	cmp	r3, #2
 800124e:	f040 80f3 	bne.w	8001438 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10e      	bne.n	8001276 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0e7      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0d8      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	331b      	adds	r3, #27
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0204 	and.w	r2, r3, #4
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	331b      	adds	r3, #27
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0d5b      	lsrs	r3, r3, #21
 80012c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	331b      	adds	r3, #27
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	331b      	adds	r3, #27
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0202 	and.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	331b      	adds	r3, #27
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 020f 	and.w	r2, r3, #15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	331b      	adds	r3, #27
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	331b      	adds	r3, #27
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	3304      	adds	r3, #4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0a1a      	lsrs	r2, r3, #8
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0c1a      	lsrs	r2, r3, #16
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0e1a      	lsrs	r2, r3, #24
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3303      	adds	r3, #3
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0a1a      	lsrs	r2, r3, #8
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3305      	adds	r3, #5
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1a      	lsrs	r2, r3, #16
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3306      	adds	r3, #6
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0e1a      	lsrs	r2, r3, #24
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3307      	adds	r3, #7
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	e007      	b.n	8001434 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0220 	orr.w	r2, r2, #32
 8001432:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e006      	b.n	8001446 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
  }
}
 8001446:	4618      	mov	r0, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d002      	beq.n	8001470 <HAL_CAN_ActivateNotification+0x1e>
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d109      	bne.n	8001484 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6959      	ldr	r1, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	e006      	b.n	8001492 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08a      	sub	sp, #40	; 0x28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d07c      	beq.n	80015de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d023      	beq.n	8001536 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f983 	bl	800180c <HAL_CAN_TxMailbox0CompleteCallback>
 8001506:	e016      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e00c      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e002      	b.n	8001536 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f989 	bl	8001848 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	2b00      	cmp	r3, #0
 800153e:	d024      	beq.n	800158a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f963 	bl	8001820 <HAL_CAN_TxMailbox1CompleteCallback>
 800155a:	e016      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e00c      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e002      	b.n	800158a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f969 	bl	800185c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d024      	beq.n	80015de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f943 	bl	8001834 <HAL_CAN_TxMailbox2CompleteCallback>
 80015ae:	e016      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e00c      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e002      	b.n	80015de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f949 	bl	8001870 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2210      	movs	r2, #16
 8001600:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d006      	beq.n	8001624 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2208      	movs	r2, #8
 800161c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f930 	bl	8001884 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d009      	beq.n	8001642 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d002      	beq.n	8001642 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff f8fb 	bl	8000838 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2210      	movs	r2, #16
 8001664:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00b      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2208      	movs	r2, #8
 8001680:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f912 	bl	80018ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f8f9 	bl	8001898 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016a6:	6a3b      	ldr	r3, [r7, #32]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d006      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8fc 	bl	80018c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2208      	movs	r2, #8
 80016e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8f5 	bl	80018d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d07b      	beq.n	80017ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d072      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	2b00      	cmp	r3, #0
 800175a:	d043      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03e      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800176c:	2b60      	cmp	r3, #96	; 0x60
 800176e:	d02b      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x32a>
 8001770:	2b60      	cmp	r3, #96	; 0x60
 8001772:	d82e      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 8001774:	2b50      	cmp	r3, #80	; 0x50
 8001776:	d022      	beq.n	80017be <HAL_CAN_IRQHandler+0x320>
 8001778:	2b50      	cmp	r3, #80	; 0x50
 800177a:	d82a      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 800177c:	2b40      	cmp	r3, #64	; 0x40
 800177e:	d019      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x316>
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d826      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 8001784:	2b30      	cmp	r3, #48	; 0x30
 8001786:	d010      	beq.n	80017aa <HAL_CAN_IRQHandler+0x30c>
 8001788:	2b30      	cmp	r3, #48	; 0x30
 800178a:	d822      	bhi.n	80017d2 <HAL_CAN_IRQHandler+0x334>
 800178c:	2b10      	cmp	r3, #16
 800178e:	d002      	beq.n	8001796 <HAL_CAN_IRQHandler+0x2f8>
 8001790:	2b20      	cmp	r3, #32
 8001792:	d005      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001794:	e01d      	b.n	80017d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800179e:	e019      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017a8:	e014      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b2:	e00f      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017bc:	e00a      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c6:	e005      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d0:	e000      	b.n	80017d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80017d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2204      	movs	r2, #4
 80017ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f872 	bl	80018e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e153      	b.n	8001de4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8142 	bne.w	8001dde <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d005      	beq.n	8001b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d130      	bne.n	8001bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 0201 	and.w	r2, r3, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d017      	beq.n	8001c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d123      	bne.n	8001c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 809c 	beq.w	8001dde <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a53      	ldr	r2, [pc, #332]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x2dc>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x1f6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x1f2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a44      	ldr	r2, [pc, #272]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a43      	ldr	r2, [pc, #268]	; (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x1ea>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e004      	b.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001d16:	2300      	movs	r3, #0
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f002 0203 	and.w	r2, r2, #3
 8001d1e:	0092      	lsls	r2, r2, #2
 8001d20:	4093      	lsls	r3, r2
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <HAL_GPIO_Init+0x2e0>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d84:	4a23      	ldr	r2, [pc, #140]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3301      	adds	r3, #1
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f67f aea8 	bls.w	8001b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40013800 	.word	0x40013800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e80:	b08f      	sub	sp, #60	; 0x3c
 8001e82:	af0a      	add	r7, sp, #40	; 0x28
 8001e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e116      	b.n	80020be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fd5c 	bl	8000968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 ff7d 	bl	8002dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	687e      	ldr	r6, [r7, #4]
 8001edc:	466d      	mov	r5, sp
 8001ede:	f106 0410 	add.w	r4, r6, #16
 8001ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef2:	1d33      	adds	r3, r6, #4
 8001ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef6:	6838      	ldr	r0, [r7, #0]
 8001ef8:	f000 ff08 	bl	8002d0c <USB_CoreInit>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2202      	movs	r2, #2
 8001f06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0d7      	b.n	80020be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 ff6b 	bl	8002df0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e04a      	b.n	8001fb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	333d      	adds	r3, #61	; 0x3d
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	333c      	adds	r3, #60	; 0x3c
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3344      	adds	r3, #68	; 0x44
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3340      	adds	r3, #64	; 0x40
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3348      	adds	r3, #72	; 0x48
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	334c      	adds	r3, #76	; 0x4c
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3354      	adds	r3, #84	; 0x54
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3af      	bcc.n	8001f20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e044      	b.n	8002050 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3301      	adds	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3b5      	bcc.n	8001fc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	687e      	ldr	r6, [r7, #4]
 8002062:	466d      	mov	r5, sp
 8002064:	f106 0410 	add.w	r4, r6, #16
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002074:	e885 0003 	stmia.w	r5, {r0, r1}
 8002078:	1d33      	adds	r3, r6, #4
 800207a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f000 ff03 	bl	8002e88 <USB_DevInit>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e014      	b.n	80020be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d102      	bne.n	80020b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f80a 	bl	80020c6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 f8c1 	bl	800323e <USB_DevDisconnect>

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	f043 0303 	orr.w	r3, r3, #3
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0cc      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d90c      	bls.n	800214c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d044      	beq.n	8002230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d119      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e067      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 0203 	bic.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4934      	ldr	r1, [pc, #208]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe fcea 	bl	8000bd8 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	e00a      	b.n	800221e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002208:	f7fe fce6 	bl	8000bd8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 020c 	and.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	429a      	cmp	r2, r3
 800222e:	d1eb      	bne.n	8002208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d20c      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fc4a 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08003374 	.word	0x08003374
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e0:	b090      	sub	sp, #64	; 0x40
 80022e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
 80022e8:	2300      	movs	r3, #0
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d00d      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002300:	2b08      	cmp	r3, #8
 8002302:	f200 80a1 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x16c>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x34>
 800230a:	2b04      	cmp	r3, #4
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x3a>
 800230e:	e09b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_GetSysClockFreq+0x184>)
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002314:	e09b      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800231a:	e098      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800231c:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	627a      	str	r2, [r7, #36]	; 0x24
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002344:	2100      	movs	r1, #0
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002348:	fb03 f201 	mul.w	r2, r3, r1
 800234c:	2300      	movs	r3, #0
 800234e:	fb00 f303 	mul.w	r3, r0, r3
 8002352:	4413      	add	r3, r2
 8002354:	4a43      	ldr	r2, [pc, #268]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002356:	fba0 1202 	umull	r1, r2, r0, r2
 800235a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800235c:	460a      	mov	r2, r1
 800235e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	4413      	add	r3, r2
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	2200      	movs	r2, #0
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	61fa      	str	r2, [r7, #28]
 800236e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002376:	f7fd ff45 	bl	8000204 <__aeabi_uldivmod>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4613      	mov	r3, r2
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	e053      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	2200      	movs	r2, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	617a      	str	r2, [r7, #20]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002396:	f04f 0b00 	mov.w	fp, #0
 800239a:	4652      	mov	r2, sl
 800239c:	465b      	mov	r3, fp
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ac:	0150      	lsls	r0, r2, #5
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ebb2 080a 	subs.w	r8, r2, sl
 80023b6:	eb63 090b 	sbc.w	r9, r3, fp
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ce:	ebb2 0408 	subs.w	r4, r2, r8
 80023d2:	eb63 0509 	sbc.w	r5, r3, r9
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	00eb      	lsls	r3, r5, #3
 80023e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e4:	00e2      	lsls	r2, r4, #3
 80023e6:	4614      	mov	r4, r2
 80023e8:	461d      	mov	r5, r3
 80023ea:	eb14 030a 	adds.w	r3, r4, sl
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	eb45 030b 	adc.w	r3, r5, fp
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	2200      	movs	r2, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	60fa      	str	r2, [r7, #12]
 800241c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002420:	f7fd fef0 	bl	8000204 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800243c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002450:	4618      	mov	r0, r3
 8002452:	3740      	adds	r7, #64	; 0x40
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	017d7840 	.word	0x017d7840

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d010      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002488:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800248a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	4984      	ldr	r1, [pc, #528]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80024a6:	2301      	movs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d010      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024b6:	4b7c      	ldr	r3, [pc, #496]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024bc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4978      	ldr	r1, [pc, #480]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80024d4:	2301      	movs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8083 	beq.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a69      	ldr	r2, [pc, #420]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800250e:	f7fe fb63 	bl	8000bd8 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe fb5f 	bl	8000bd8 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e162      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002528:	4b60      	ldr	r3, [pc, #384]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002534:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02f      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d028      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002552:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002562:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b01      	cmp	r3, #1
 8002578:	d114      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fb2d 	bl	8000bd8 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7fe fb29 	bl	8000bd8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e12a      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025b0:	d10d      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c6:	4938      	ldr	r1, [pc, #224]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
 80025cc:	e005      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x172>
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4a35      	ldr	r2, [pc, #212]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025d8:	6093      	str	r3, [r2, #8]
 80025da:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	4930      	ldr	r1, [pc, #192]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002600:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	4922      	ldr	r1, [pc, #136]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d011      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	491a      	ldr	r1, [pc, #104]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264e:	d101      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002666:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d004      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	f040 8091 	bne.w	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe faa4 	bl	8000bd8 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002692:	e013      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002694:	f7fe faa0 	bl	8000bd8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d90c      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0a3      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x386>
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42470e40 	.word	0x42470e40
 80026b4:	424711e0 	.word	0x424711e0
 80026b8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026bc:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e5      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80026c8:	4a4c      	ldr	r2, [pc, #304]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ce:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d019      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d00e      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002716:	2b00      	cmp	r3, #0
 8002718:	d019      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272a:	d110      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	071b      	lsls	r3, r3, #28
 8002746:	492c      	ldr	r1, [pc, #176]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	019b      	lsls	r3, r3, #6
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	071b      	lsls	r3, r3, #28
 8002774:	4920      	ldr	r1, [pc, #128]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002782:	f7fe fa29 	bl	8000bd8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800278a:	f7fe fa25 	bl	8000bd8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e028      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	490d      	ldr	r1, [pc, #52]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027dc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	424710d8 	.word	0x424710d8
 8002800:	42470068 	.word	0x42470068

08002804 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e273      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d075      	beq.n	800290e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002822:	4b88      	ldr	r3, [pc, #544]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00c      	beq.n	8002848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800282e:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002836:	2b08      	cmp	r3, #8
 8002838:	d112      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283a:	4b82      	ldr	r3, [pc, #520]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002846:	d10b      	bne.n	8002860 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05b      	beq.n	800290c <HAL_RCC_OscConfig+0x108>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d157      	bne.n	800290c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e24e      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0x74>
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a75      	ldr	r2, [pc, #468]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e01d      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x98>
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a6f      	ldr	r2, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6c      	ldr	r2, [pc, #432]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0xb0>
 800289c:	4b69      	ldr	r3, [pc, #420]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe f98c 	bl	8000bd8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe f988 	bl	8000bd8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e213      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0xc0>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe f978 	bl	8000bd8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe f974 	bl	8000bd8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1ff      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0xe8>
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d063      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800292e:	2b08      	cmp	r3, #8
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d116      	bne.n	800296c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1d3      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4937      	ldr	r1, [pc, #220]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	e03a      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe f92d 	bl	8000bd8 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002982:	f7fe f929 	bl	8000bd8 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1b4      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4925      	ldr	r1, [pc, #148]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCC_OscConfig+0x244>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe f90c 	bl	8000bd8 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c4:	f7fe f908 	bl	8000bd8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e193      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d036      	beq.n	8002a5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe f8ec 	bl	8000bd8 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a04:	f7fe f8e8 	bl	8000bd8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e173      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x240>)
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x200>
 8002a22:	e01b      	b.n	8002a5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_OscConfig+0x248>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe f8d5 	bl	8000bd8 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	e00e      	b.n	8002a50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe f8d1 	bl	8000bd8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d907      	bls.n	8002a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e15c      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ea      	bne.n	8002a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8097 	beq.w	8002b98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4a7e      	ldr	r2, [pc, #504]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8a:	4b7c      	ldr	r3, [pc, #496]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	4b79      	ldr	r3, [pc, #484]	; (8002c80 <HAL_RCC_OscConfig+0x47c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d118      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_RCC_OscConfig+0x47c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_RCC_OscConfig+0x47c>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe f891 	bl	8000bd8 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe f88d 	bl	8000bd8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e118      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_RCC_OscConfig+0x47c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x2ea>
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e01c      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b05      	cmp	r3, #5
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x30c>
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	4a5d      	ldr	r2, [pc, #372]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0x324>
 8002b10:	4b5a      	ldr	r3, [pc, #360]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a59      	ldr	r2, [pc, #356]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b22:	f023 0304 	bic.w	r3, r3, #4
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe f852 	bl	8000bd8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe f84e 	bl	8000bd8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0d7      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x334>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe f83c 	bl	8000bd8 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe f838 	bl	8000bd8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0c1      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	4a3a      	ldr	r2, [pc, #232]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80ad 	beq.w	8002cfc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d060      	beq.n	8002c70 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d145      	bne.n	8002c42 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_RCC_OscConfig+0x480>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f80c 	bl	8000bd8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe f808 	bl	8000bd8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e093      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	491b      	ldr	r1, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x480>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fd ffdd 	bl	8000bd8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fd ffd9 	bl	8000bd8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e064      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x41e>
 8002c40:	e05c      	b.n	8002cfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_OscConfig+0x480>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fd ffc6 	bl	8000bd8 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c50:	f7fd ffc2 	bl	8000bd8 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e04d      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_RCC_OscConfig+0x478>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x44c>
 8002c6e:	e045      	b.n	8002cfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e040      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d030      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d129      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d122      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d119      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	f107 001c 	add.w	r0, r7, #28
 8002d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d122      	bne.n	8002d6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa9c 	bl	800329c <USB_CoreReset>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e01a      	b.n	8002da0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa90 	bl	800329c <USB_CoreReset>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
 8002d92:	e005      	b.n	8002da0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10b      	bne.n	8002dbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f043 0206 	orr.w	r2, r3, #6
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dca:	b004      	add	sp, #16
 8002dcc:	4770      	bx	lr

08002dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0201 	bic.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d115      	bne.n	8002e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f7fd fee6 	bl	8000bf0 <HAL_Delay>
      ms++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa28 	bl	8003280 <USB_GetMode>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d01e      	beq.n	8002e74 <USB_SetCurrentMode+0x84>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b31      	cmp	r3, #49	; 0x31
 8002e3a:	d9f0      	bls.n	8002e1e <USB_SetCurrentMode+0x2e>
 8002e3c:	e01a      	b.n	8002e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7fd fecd 	bl	8000bf0 <HAL_Delay>
      ms++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fa0f 	bl	8003280 <USB_GetMode>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <USB_SetCurrentMode+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b31      	cmp	r3, #49	; 0x31
 8002e6c:	d9f0      	bls.n	8002e50 <USB_SetCurrentMode+0x60>
 8002e6e:	e001      	b.n	8002e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e005      	b.n	8002e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b32      	cmp	r3, #50	; 0x32
 8002e78:	d101      	bne.n	8002e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e88:	b084      	sub	sp, #16
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e009      	b.n	8002ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	3340      	adds	r3, #64	; 0x40
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0e      	cmp	r3, #14
 8002ec0:	d9f2      	bls.n	8002ea8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11c      	bne.n	8002f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e005      	b.n	8002f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f20:	4619      	mov	r1, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	461a      	mov	r2, r3
 8002f2a:	680b      	ldr	r3, [r1, #0]
 8002f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10c      	bne.n	8002f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f965 	bl	800320c <USB_SetDevSpeed>
 8002f42:	e008      	b.n	8002f56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f44:	2101      	movs	r1, #1
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f960 	bl	800320c <USB_SetDevSpeed>
 8002f4c:	e003      	b.n	8002f56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f4e:	2103      	movs	r1, #3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f95b 	bl	800320c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f56:	2110      	movs	r1, #16
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8f3 	bl	8003144 <USB_FlushTxFifo>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f91f 	bl	80031ac <USB_FlushRxFifo>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f96:	461a      	mov	r2, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e043      	b.n	800302a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fb8:	d118      	bne.n	8002fec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e013      	b.n	8002ffe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e008      	b.n	8002ffe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3301      	adds	r3, #1
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d3b7      	bcc.n	8002fa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e043      	b.n	80030c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800304a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800304e:	d118      	bne.n	8003082 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003062:	461a      	mov	r2, r3
 8003064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e013      	b.n	8003094 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003078:	461a      	mov	r2, r3
 800307a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	e008      	b.n	8003094 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b2:	461a      	mov	r2, r3
 80030b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3301      	adds	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3b7      	bcc.n	8003038 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <USB_DevInit+0x2b8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f043 0208 	orr.w	r2, r3, #8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d107      	bne.n	8003130 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800313c:	b004      	add	sp, #16
 800313e:	4770      	bx	lr
 8003140:	803c3800 	.word	0x803c3800

08003144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <USB_FlushTxFifo+0x64>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d901      	bls.n	8003164 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e01b      	b.n	800319c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	daf2      	bge.n	8003152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <USB_FlushTxFifo+0x64>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e006      	b.n	800319c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b20      	cmp	r3, #32
 8003198:	d0f0      	beq.n	800317c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	00030d40 	.word	0x00030d40

080031ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3301      	adds	r3, #1
 80031bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <USB_FlushRxFifo+0x5c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e018      	b.n	80031fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	daf2      	bge.n	80031b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2210      	movs	r2, #16
 80031da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a08      	ldr	r2, [pc, #32]	; (8003208 <USB_FlushRxFifo+0x5c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e006      	b.n	80031fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d0f0      	beq.n	80031dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	00030d40 	.word	0x00030d40

0800320c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003258:	f023 0303 	bic.w	r3, r3, #3
 800325c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0301 	and.w	r3, r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a13      	ldr	r2, [pc, #76]	; (8003300 <USB_CoreReset+0x64>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e01b      	b.n	80032f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	daf2      	bge.n	80032a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <USB_CoreReset+0x64>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e006      	b.n	80032f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d0f0      	beq.n	80032d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	00030d40 	.word	0x00030d40

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4d0d      	ldr	r5, [pc, #52]	; (800333c <__libc_init_array+0x38>)
 8003308:	4c0d      	ldr	r4, [pc, #52]	; (8003340 <__libc_init_array+0x3c>)
 800330a:	1b64      	subs	r4, r4, r5
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	2600      	movs	r6, #0
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	4d0b      	ldr	r5, [pc, #44]	; (8003344 <__libc_init_array+0x40>)
 8003316:	4c0c      	ldr	r4, [pc, #48]	; (8003348 <__libc_init_array+0x44>)
 8003318:	f000 f820 	bl	800335c <_init>
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	2600      	movs	r6, #0
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	0800338c 	.word	0x0800338c
 8003340:	0800338c 	.word	0x0800338c
 8003344:	0800338c 	.word	0x0800338c
 8003348:	08003390 	.word	0x08003390

0800334c <memset>:
 800334c:	4402      	add	r2, r0
 800334e:	4603      	mov	r3, r0
 8003350:	4293      	cmp	r3, r2
 8003352:	d100      	bne.n	8003356 <memset+0xa>
 8003354:	4770      	bx	lr
 8003356:	f803 1b01 	strb.w	r1, [r3], #1
 800335a:	e7f9      	b.n	8003350 <memset+0x4>

0800335c <_init>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr

08003368 <_fini>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr
