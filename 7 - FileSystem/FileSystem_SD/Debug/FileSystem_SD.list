
FileSystem_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005058  08005058  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08005060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000024  08005084  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200000e4  08005084  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab8e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec2  00000000  00000000  0002abe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002caa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffab  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc65  00000000  00000000  0004dcdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9ae7  00000000  00000000  0005b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  00115478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004f10 	.word	0x08004f10

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08004f10 	.word	0x08004f10

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	f5ad 6dd6 	sub.w	sp, sp, #1712	; 0x6b0
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  FRESULT res;
  FATFS SDFatFS;
  FIL SDFile;
  uint8_t SDPath[] = "";
 8000520:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8000524:	f5a3 638d 	sub.w	r3, r3, #1128	; 0x468
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
  uint32_t WrittenBytes, ReadBytes;
  uint8_t WriteBuffer[] = "Text Example Lets see if this works /n ans if /n works fine";
 800052c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8000530:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8000534:	4a3a      	ldr	r2, [pc, #232]	; (8000620 <main+0x108>)
 8000536:	461c      	mov	r4, r3
 8000538:	4615      	mov	r5, r2
 800053a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa55 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f86b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8fd 	bl	8000754 <MX_GPIO_Init>
  MX_FATFS_Init();
 800055a:	f001 fc63 	bl	8001e24 <MX_FATFS_Init>
  MX_SPI1_Init();
 800055e:	f000 f8c3 	bl	80006e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if (f_mount(&SDFatFS, "",1) != FR_OK)
 8000562:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8000566:	2201      	movs	r2, #1
 8000568:	492e      	ldr	r1, [pc, #184]	; (8000624 <main+0x10c>)
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fee8 	bl	8004340 <f_mount>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <main+0x62>
	  Error_Handler();
 8000576:	f000 f945 	bl	8000804 <Error_Handler>

  // Open a File
  if (f_open(&SDFile, "STM32_SDText.txt",FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800057a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800057e:	220a      	movs	r2, #10
 8000580:	4929      	ldr	r1, [pc, #164]	; (8000628 <main+0x110>)
 8000582:	4618      	mov	r0, r3
 8000584:	f003 ff22 	bl	80043cc <f_open>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x7a>
	  Error_Handler();
 800058e:	f000 f939 	bl	8000804 <Error_Handler>

  // Write Text
  res = f_write(&SDFile,WriteBuffer,strlen((char*)WriteBuffer),(void *)& WrittenBytes);
 8000592:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe34 	bl	8000204 <strlen>
 800059c:	4602      	mov	r2, r0
 800059e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80005a2:	f507 7101 	add.w	r1, r7, #516	; 0x204
 80005a6:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 80005aa:	f004 fa0c 	bl	80049c6 <f_write>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af

  if (res != FR_OK)
 80005b4:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0xa8>
	  Error_Handler();
 80005bc:	f000 f922 	bl	8000804 <Error_Handler>

  f_close(&SDFile);
 80005c0:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80005c4:	4618      	mov	r0, r3
 80005c6:	f004 fbf1 	bl	8004dac <f_close>

  // Read from File
  if (f_open(&SDFile, "STM32_SDText.txt",FA_READ) != FR_OK)
 80005ca:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80005ce:	2201      	movs	r2, #1
 80005d0:	4915      	ldr	r1, [pc, #84]	; (8000628 <main+0x110>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fefa 	bl	80043cc <f_open>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <main+0xca>
	  Error_Handler();
 80005de:	f000 f911 	bl	8000804 <Error_Handler>

  memset(ReadBuffer,0,sizeof(ReadBuffer)); // Reset Buffer
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fc88 	bl	8004f00 <memset>
  res = f_read(&SDFile,ReadBuffer,sizeof(ReadBuffer),(UINT *)&ReadBytes);
 80005f0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	f507 7013 	add.w	r0, r7, #588	; 0x24c
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	f004 f8a3 	bl	8004748 <f_read>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 36af 	strb.w	r3, [r7, #1711]	; 0x6af

  if(res != FR_OK)
 8000608:	f897 36af 	ldrb.w	r3, [r7, #1711]	; 0x6af
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <main+0xfc>
	  Error_Handler();
 8000610:	f000 f8f8 	bl	8000804 <Error_Handler>

  f_close(&SDFile);
 8000614:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fbc7 	bl	8004dac <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x106>
 8000620:	08004f40 	.word	0x08004f40
 8000624:	08004f28 	.word	0x08004f28
 8000628:	08004f2c 	.word	0x08004f2c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fc60 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xb4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xb4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemClock_Config+0xb8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1b      	ldr	r2, [pc, #108]	; (80006e4 <SystemClock_Config+0xb8>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe47 	bl	8001330 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006a8:	f000 f8ac 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fc86 	bl	8000fd8 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006d2:	f000 f897 	bl	8000804 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_SPI1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	; (8000750 <MX_SPI1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_SPI1_Init+0x64>)
 80006f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_SPI1_Init+0x64>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_SPI1_Init+0x64>)
 800071c:	2230      	movs	r2, #48	; 0x30
 800071e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_SPI1_Init+0x64>)
 8000734:	220a      	movs	r2, #10
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_SPI1_Init+0x64>)
 800073a:	f001 f87d 	bl	8001838 <HAL_SPI_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f85e 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000040 	.word	0x20000040
 8000750:	40013000 	.word	0x40013000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_GPIO_Init+0xa8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a22      	ldr	r2, [pc, #136]	; (80007fc <MX_GPIO_Init+0xa8>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_GPIO_Init+0xa8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_GPIO_Init+0xa8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_GPIO_Init+0xa8>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0xa8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_GPIO_Init+0xa8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xac>)
 80007ee:	f000 fa5d 	bl	8000cac <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020800 	.word	0x40020800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <HAL_SPI_MspInit+0xc0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d149      	bne.n	8000916 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	4a26      	ldr	r2, [pc, #152]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 800088c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000890:	6453      	str	r3, [r2, #68]	; 0x44
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_SPI_MspInit+0xc4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008d6:	23a0      	movs	r3, #160	; 0xa0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008e6:	2305      	movs	r3, #5
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <HAL_SPI_MspInit+0xc8>)
 80008f2:	f000 f9db 	bl	8000cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008f6:	2310      	movs	r3, #16
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <HAL_SPI_MspInit+0xcc>)
 8000912:	f000 f9cb 	bl	8000cac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40013000 	.word	0x40013000
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	40020400 	.word	0x40020400

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f890 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SystemInit+0x20>)
 800098a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemInit+0x20>)
 8000990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80009a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d2:	f7ff ffd7 	bl	8000984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d6:	f004 fa6f 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009da:	f7ff fd9d 	bl	8000518 <main>
  bx  lr    
 80009de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80009e0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009ec:	08005060 	.word	0x08005060
  ldr r2, =_sbss
 80009f0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009f4:	200000e4 	.word	0x200000e4

080009f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_Init+0x40>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_Init+0x40>)
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x40>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x40>)
 8000a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f90d 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff feee 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023c00 	.word	0x40023c00

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f917 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	f000 f8ed 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000098 	.word	0x20000098

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	f7ff ff8e 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff47 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff5c 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff8e 	bl	8000b98 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffb0 	bl	8000c00 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e153      	b.n	8000f70 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 8142 	bne.w	8000f6a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 809c 	beq.w	8000f6a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <HAL_GPIO_Init+0x2dc>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a53      	ldr	r2, [pc, #332]	; (8000f88 <HAL_GPIO_Init+0x2dc>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_GPIO_Init+0x2dc>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a4f      	ldr	r2, [pc, #316]	; (8000f8c <HAL_GPIO_Init+0x2e0>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a46      	ldr	r2, [pc, #280]	; (8000f90 <HAL_GPIO_Init+0x2e4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x1f6>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <HAL_GPIO_Init+0x2e8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x1f2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a44      	ldr	r2, [pc, #272]	; (8000f98 <HAL_GPIO_Init+0x2ec>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x1ee>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x1ea>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e96:	2307      	movs	r3, #7
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb4:	4935      	ldr	r1, [pc, #212]	; (8000f8c <HAL_GPIO_Init+0x2e0>)
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee6:	4a2e      	ldr	r2, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f10:	4a23      	ldr	r2, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	f67f aea8 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e0cc      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d90c      	bls.n	8001014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffa:	4b65      	ldr	r3, [pc, #404]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001002:	4b63      	ldr	r3, [pc, #396]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0b8      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a58      	ldr	r2, [pc, #352]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001044:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a52      	ldr	r2, [pc, #328]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800104e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001050:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	494d      	ldr	r1, [pc, #308]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	4313      	orrs	r3, r2
 8001060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d044      	beq.n	80010f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d119      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e07f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d003      	beq.n	8001096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001092:	2b03      	cmp	r3, #3
 8001094:	d107      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e06f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e067      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f023 0203 	bic.w	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4934      	ldr	r1, [pc, #208]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010c8:	f7ff fcfe 	bl	8000ac8 <HAL_GetTick>
 80010cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ce:	e00a      	b.n	80010e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d0:	f7ff fcfa 	bl	8000ac8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f241 3288 	movw	r2, #5000	; 0x1388
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e04f      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 020c 	and.w	r2, r3, #12
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d1eb      	bne.n	80010d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d20c      	bcs.n	8001120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_RCC_ClockConfig+0x1b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d001      	beq.n	8001120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e032      	b.n	8001186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4916      	ldr	r1, [pc, #88]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800113a:	4313      	orrs	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	490e      	ldr	r1, [pc, #56]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800115e:	f000 f821 	bl	80011a4 <HAL_RCC_GetSysClockFreq>
 8001162:	4602      	mov	r2, r0
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	490a      	ldr	r1, [pc, #40]	; (8001198 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	5ccb      	ldrb	r3, [r1, r3]
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_RCC_ClockConfig+0x1c8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fc5e 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40023800 	.word	0x40023800
 8001198:	08004fc0 	.word	0x08004fc0
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a8:	b090      	sub	sp, #64	; 0x40
 80011aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d00d      	beq.n	80011e4 <HAL_RCC_GetSysClockFreq+0x40>
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	f200 80a1 	bhi.w	8001310 <HAL_RCC_GetSysClockFreq+0x16c>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <HAL_RCC_GetSysClockFreq+0x34>
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d003      	beq.n	80011de <HAL_RCC_GetSysClockFreq+0x3a>
 80011d6:	e09b      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_RCC_GetSysClockFreq+0x184>)
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80011dc:	e09b      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011de:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_RCC_GetSysClockFreq+0x188>)
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80011e2:	e098      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011e4:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ee:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d028      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fa:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	099b      	lsrs	r3, r3, #6
 8001200:	2200      	movs	r2, #0
 8001202:	623b      	str	r3, [r7, #32]
 8001204:	627a      	str	r2, [r7, #36]	; 0x24
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800120c:	2100      	movs	r1, #0
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_GetSysClockFreq+0x188>)
 8001210:	fb03 f201 	mul.w	r2, r3, r1
 8001214:	2300      	movs	r3, #0
 8001216:	fb00 f303 	mul.w	r3, r0, r3
 800121a:	4413      	add	r3, r2
 800121c:	4a43      	ldr	r2, [pc, #268]	; (800132c <HAL_RCC_GetSysClockFreq+0x188>)
 800121e:	fba0 1202 	umull	r1, r2, r0, r2
 8001222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001224:	460a      	mov	r2, r1
 8001226:	62ba      	str	r2, [r7, #40]	; 0x28
 8001228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800122a:	4413      	add	r3, r2
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001230:	2200      	movs	r2, #0
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	61fa      	str	r2, [r7, #28]
 8001236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800123a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800123e:	f7fe ffe9 	bl	8000214 <__aeabi_uldivmod>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4613      	mov	r3, r2
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800124a:	e053      	b.n	80012f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	099b      	lsrs	r3, r3, #6
 8001252:	2200      	movs	r2, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	617a      	str	r2, [r7, #20]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800125e:	f04f 0b00 	mov.w	fp, #0
 8001262:	4652      	mov	r2, sl
 8001264:	465b      	mov	r3, fp
 8001266:	f04f 0000 	mov.w	r0, #0
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	0159      	lsls	r1, r3, #5
 8001270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001274:	0150      	lsls	r0, r2, #5
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	ebb2 080a 	subs.w	r8, r2, sl
 800127e:	eb63 090b 	sbc.w	r9, r3, fp
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800128e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001292:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001296:	ebb2 0408 	subs.w	r4, r2, r8
 800129a:	eb63 0509 	sbc.w	r5, r3, r9
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	00eb      	lsls	r3, r5, #3
 80012a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012ac:	00e2      	lsls	r2, r4, #3
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	eb14 030a 	adds.w	r3, r4, sl
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	eb45 030b 	adc.w	r3, r5, fp
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012ca:	4629      	mov	r1, r5
 80012cc:	028b      	lsls	r3, r1, #10
 80012ce:	4621      	mov	r1, r4
 80012d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012d4:	4621      	mov	r1, r4
 80012d6:	028a      	lsls	r2, r1, #10
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012de:	2200      	movs	r2, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	60fa      	str	r2, [r7, #12]
 80012e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e8:	f7fe ff94 	bl	8000214 <__aeabi_uldivmod>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4613      	mov	r3, r2
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_GetSysClockFreq+0x180>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	0c1b      	lsrs	r3, r3, #16
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	3301      	adds	r3, #1
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	fbb2 f3f3 	udiv	r3, r2, r3
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800130e:	e002      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetSysClockFreq+0x184>)
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001318:	4618      	mov	r0, r3
 800131a:	3740      	adds	r7, #64	; 0x40
 800131c:	46bd      	mov	sp, r7
 800131e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	00f42400 	.word	0x00f42400
 800132c:	017d7840 	.word	0x017d7840

08001330 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e273      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d075      	beq.n	800143a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b04      	cmp	r3, #4
 8001358:	d00c      	beq.n	8001374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d112      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b82      	ldr	r3, [pc, #520]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001372:	d10b      	bne.n	800138c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d05b      	beq.n	8001438 <HAL_RCC_OscConfig+0x108>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d157      	bne.n	8001438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e24e      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d106      	bne.n	80013a4 <HAL_RCC_OscConfig+0x74>
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e01d      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x98>
 80013ae:	4b70      	ldr	r3, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a6f      	ldr	r2, [pc, #444]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6c      	ldr	r2, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0xb0>
 80013c8:	4b69      	ldr	r3, [pc, #420]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a68      	ldr	r2, [pc, #416]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb6e 	bl	8000ac8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fb6a 	bl	8000ac8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e213      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b5b      	ldr	r3, [pc, #364]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0xc0>
 800140e:	e014      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb5a 	bl	8000ac8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb56 	bl	8000ac8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e1ff      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0xe8>
 8001436:	e000      	b.n	800143a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d063      	beq.n	800150e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00b      	beq.n	800146a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001452:	4b47      	ldr	r3, [pc, #284]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800145a:	2b08      	cmp	r3, #8
 800145c:	d11c      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b44      	ldr	r3, [pc, #272]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d116      	bne.n	8001498 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e1d3      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	e03a      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x244>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb0f 	bl	8000ac8 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ae:	f7ff fb0b 	bl	8000ac8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e1b4      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4925      	ldr	r1, [pc, #148]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e015      	b.n	800150e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_RCC_OscConfig+0x244>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff faee 	bl	8000ac8 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f0:	f7ff faea 	bl	8000ac8 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e193      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d036      	beq.n	8001588 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d016      	beq.n	8001550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_RCC_OscConfig+0x248>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff face 	bl	8000ac8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff faca 	bl	8000ac8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e173      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_RCC_OscConfig+0x240>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x200>
 800154e:	e01b      	b.n	8001588 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x248>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fab7 	bl	8000ac8 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	e00e      	b.n	800157c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155e:	f7ff fab3 	bl	8000ac8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d907      	bls.n	800157c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e15c      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b8a      	ldr	r3, [pc, #552]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ea      	bne.n	800155e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8097 	beq.w	80016c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b83      	ldr	r3, [pc, #524]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fa73 	bl	8000ac8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fa6f 	bl	8000ac8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e118      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x47c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x2ea>
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	; 0x70
 8001618:	e01c      	b.n	8001654 <HAL_RCC_OscConfig+0x324>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x30c>
 8001622:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	4a60      	ldr	r2, [pc, #384]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
 800162e:	4b5e      	ldr	r3, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5d      	ldr	r2, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0x324>
 800163c:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800163e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001640:	4a59      	ldr	r2, [pc, #356]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6713      	str	r3, [r2, #112]	; 0x70
 8001648:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800164e:	f023 0304 	bic.w	r3, r3, #4
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d015      	beq.n	8001688 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fa34 	bl	8000ac8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff fa30 	bl	8000ac8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0d7      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167a:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0ee      	beq.n	8001664 <HAL_RCC_OscConfig+0x334>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fa1e 	bl	8000ac8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fa1a 	bl	8000ac8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0c1      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1ee      	bne.n	8001690 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80016be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80ad 	beq.w	8001828 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d060      	beq.n	800179c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d145      	bne.n	800176e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9ee 	bl	8000ac8 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f9ea 	bl	8000ac8 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e093      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	019b      	lsls	r3, r3, #6
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	3b01      	subs	r3, #1
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	071b      	lsls	r3, r3, #28
 800173a:	491b      	ldr	r1, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 8001742:	2201      	movs	r2, #1
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff f9bf 	bl	8000ac8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff f9bb 	bl	8000ac8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e064      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x41e>
 800176c:	e05c      	b.n	8001828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_RCC_OscConfig+0x480>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f9a8 	bl	8000ac8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff f9a4 	bl	8000ac8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04d      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_OscConfig+0x478>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x44c>
 800179a:	e045      	b.n	8001828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e040      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d030      	beq.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d129      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d122      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e4:	4013      	ands	r3, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d119      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d10f      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07b      	b.n	8001942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800185a:	d009      	beq.n	8001870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
 8001862:	e005      	b.n	8001870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe ffe8 	bl	8000860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f4:	ea42 0103 	orr.w	r1, r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	f003 0104 	and.w	r1, r3, #4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f003 0210 	and.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b08c      	sub	sp, #48	; 0x30
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_SPI_TransmitReceive+0x26>
 800196c:	2302      	movs	r3, #2
 800196e:	e18a      	b.n	8001c86 <HAL_SPI_TransmitReceive+0x33c>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001978:	f7ff f8a6 	bl	8000ac8 <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00f      	beq.n	80019ba <HAL_SPI_TransmitReceive+0x70>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019a0:	d107      	bne.n	80019b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <HAL_SPI_TransmitReceive+0x68>
 80019aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80019b8:	e15b      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_SPI_TransmitReceive+0x82>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_SPI_TransmitReceive+0x82>
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80019d2:	e14e      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d003      	beq.n	80019e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2205      	movs	r2, #5
 80019e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d007      	beq.n	8001a3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a44:	d178      	bne.n	8001b38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_SPI_TransmitReceive+0x10a>
 8001a4e:	8b7b      	ldrh	r3, [r7, #26]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d166      	bne.n	8001b22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	1c9a      	adds	r2, r3, #2
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a78:	e053      	b.n	8001b22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_SPI_TransmitReceive+0x176>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d016      	beq.n	8001ac0 <HAL_SPI_TransmitReceive+0x176>
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d113      	bne.n	8001ac0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	881a      	ldrh	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	1c9a      	adds	r2, r3, #2
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d119      	bne.n	8001b02 <HAL_SPI_TransmitReceive+0x1b8>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d014      	beq.n	8001b02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aea:	1c9a      	adds	r2, r3, #2
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001afe:	2301      	movs	r3, #1
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b02:	f7fe ffe1 	bl	8000ac8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d807      	bhi.n	8001b22 <HAL_SPI_TransmitReceive+0x1d8>
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b18:	d003      	beq.n	8001b22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b20:	e0a7      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1a6      	bne.n	8001a7a <HAL_SPI_TransmitReceive+0x130>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1a1      	bne.n	8001a7a <HAL_SPI_TransmitReceive+0x130>
 8001b36:	e07c      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_SPI_TransmitReceive+0x1fc>
 8001b40:	8b7b      	ldrh	r3, [r7, #26]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d16b      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b6c:	e057      	b.n	8001c1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d11c      	bne.n	8001bb6 <HAL_SPI_TransmitReceive+0x26c>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d017      	beq.n	8001bb6 <HAL_SPI_TransmitReceive+0x26c>
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d114      	bne.n	8001bb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	330c      	adds	r3, #12
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d119      	bne.n	8001bf8 <HAL_SPI_TransmitReceive+0x2ae>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d014      	beq.n	8001bf8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001bf8:	f7fe ff66 	bl	8000ac8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d803      	bhi.n	8001c10 <HAL_SPI_TransmitReceive+0x2c6>
 8001c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c0e:	d102      	bne.n	8001c16 <HAL_SPI_TransmitReceive+0x2cc>
 8001c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c1c:	e029      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1a2      	bne.n	8001b6e <HAL_SPI_TransmitReceive+0x224>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d19d      	bne.n	8001b6e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f8b2 	bl	8001da0 <SPI_EndRxTxTransaction>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001c4e:	e010      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	e000      	b.n	8001c72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001c70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3730      	adds	r7, #48	; 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ca0:	f7fe ff12 	bl	8000ac8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001cb0:	f7fe ff0a 	bl	8000ac8 <HAL_GetTick>
 8001cb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	015b      	lsls	r3, r3, #5
 8001cbc:	0d1b      	lsrs	r3, r3, #20
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	fb02 f303 	mul.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cc6:	e054      	b.n	8001d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cce:	d050      	beq.n	8001d72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cd0:	f7fe fefa 	bl	8000ac8 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d902      	bls.n	8001ce6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d13d      	bne.n	8001d62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cfe:	d111      	bne.n	8001d24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d08:	d004      	beq.n	8001d14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d107      	bne.n	8001d24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2c:	d10f      	bne.n	8001d4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e017      	b.n	8001d92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	bf0c      	ite	eq
 8001d82:	2301      	moveq	r3, #1
 8001d84:	2300      	movne	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d19b      	bne.n	8001cc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <SPI_EndRxTxTransaction+0x7c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <SPI_EndRxTxTransaction+0x80>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0d5b      	lsrs	r3, r3, #21
 8001db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dca:	d112      	bne.n	8001df2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff ff5a 	bl	8001c90 <SPI_WaitFlagStateUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e00f      	b.n	8001e12 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d0f2      	beq.n	8001df2 <SPI_EndRxTxTransaction+0x52>
 8001e0c:	e000      	b.n	8001e10 <SPI_EndRxTxTransaction+0x70>
        break;
 8001e0e:	bf00      	nop
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	165e9f81 	.word	0x165e9f81

08001e24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001e28:	4904      	ldr	r1, [pc, #16]	; (8001e3c <MX_FATFS_Init+0x18>)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_FATFS_Init+0x1c>)
 8001e2c:	f003 f834 	bl	8004e98 <FATFS_LinkDriver>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <MX_FATFS_Init+0x20>)
 8001e36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200000a0 	.word	0x200000a0
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	2000009c 	.word	0x2000009c

08001e48 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001e4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
		return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f9d9 	bl	800221c <USER_SPI_initialize>
 8001e6a:	4603      	mov	r3, r0
	/* USER CODE END INIT */
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */
		return USER_SPI_status(pdrv); //ADD THIS LINE
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fab7 	bl	80023f4 <USER_SPI_status>
 8001e86:	4603      	mov	r3, r0
	/* USER CODE END STATUS */
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
		return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8001ea0:	7bf8      	ldrb	r0, [r7, #15]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	f000 faba 	bl	8002420 <USER_SPI_read>
 8001eac:	4603      	mov	r3, r0
	 /* USER CODE END READ */
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
		return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8001ec6:	7bf8      	ldrb	r0, [r7, #15]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	f000 fb0d 	bl	80024ec <USER_SPI_write>
 8001ed2:	4603      	mov	r3, r0
	  /* USER CODE END WRITE */
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	603a      	str	r2, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
		return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8001eec:	79b9      	ldrb	r1, [r7, #6]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fb76 	bl	80025e4 <USER_SPI_ioctl>
 8001ef8:	4603      	mov	r3, r0
	  /* USER CODE END IOCTL */
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8001f0c:	f7fe fddc 	bl	8000ac8 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <SPI_Timer_On+0x20>)
 8001f14:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <SPI_Timer_On+0x24>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000a8 	.word	0x200000a8
 8001f28:	200000ac 	.word	0x200000ac

08001f2c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001f30:	f7fe fdca 	bl	8000ac8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SPI_Timer_Status+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SPI_Timer_Status+0x28>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	bf34      	ite	cc
 8001f44:	2301      	movcc	r3, #1
 8001f46:	2300      	movcs	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200000a8 	.word	0x200000a8
 8001f54:	200000ac 	.word	0x200000ac

08001f58 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8001f62:	f107 020f 	add.w	r2, r7, #15
 8001f66:	1df9      	adds	r1, r7, #7
 8001f68:	2332      	movs	r3, #50	; 0x32
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <xchg_spi+0x28>)
 8001f70:	f7ff fceb 	bl	800194a <HAL_SPI_TransmitReceive>
    return rxDat;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000040 	.word	0x20000040

08001f84 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e00a      	b.n	8001faa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	18d4      	adds	r4, r2, r3
 8001f9a:	20ff      	movs	r0, #255	; 0xff
 8001f9c:	f7ff ffdc 	bl	8001f58 <xchg_spi>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d3f0      	bcc.n	8001f94 <rcvr_spi_multi+0x10>
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e009      	b.n	8001fe0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffbf 	bl	8001f58 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3f1      	bcc.n	8001fcc <xmit_spi_multi+0x10>
	}
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001ffa:	f7fe fd65 	bl	8000ac8 <HAL_GetTick>
 8001ffe:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002004:	20ff      	movs	r0, #255	; 0xff
 8002006:	f7ff ffa7 	bl	8001f58 <xchg_spi>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2bff      	cmp	r3, #255	; 0xff
 8002012:	d007      	beq.n	8002024 <wait_ready+0x32>
 8002014:	f7fe fd58 	bl	8000ac8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8ef      	bhi.n	8002004 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800203c:	2201      	movs	r2, #1
 800203e:	2120      	movs	r1, #32
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <despiselect+0x18>)
 8002042:	f7fe ffaf 	bl	8000fa4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002046:	20ff      	movs	r0, #255	; 0xff
 8002048:	f7ff ff86 	bl	8001f58 <xchg_spi>

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40020800 	.word	0x40020800

08002054 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002058:	2200      	movs	r2, #0
 800205a:	2120      	movs	r1, #32
 800205c:	4809      	ldr	r0, [pc, #36]	; (8002084 <spiselect+0x30>)
 800205e:	f7fe ffa1 	bl	8000fa4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002062:	20ff      	movs	r0, #255	; 0xff
 8002064:	f7ff ff78 	bl	8001f58 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800206c:	f7ff ffc1 	bl	8001ff2 <wait_ready>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <spiselect+0x26>
 8002076:	2301      	movs	r3, #1
 8002078:	e002      	b.n	8002080 <spiselect+0x2c>

	despiselect();
 800207a:	f7ff ffdd 	bl	8002038 <despiselect>
	return 0;	/* Timeout */
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40020800 	.word	0x40020800

08002088 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002092:	20c8      	movs	r0, #200	; 0xc8
 8002094:	f7ff ff36 	bl	8001f04 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002098:	20ff      	movs	r0, #255	; 0xff
 800209a:	f7ff ff5d 	bl	8001f58 <xchg_spi>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2bff      	cmp	r3, #255	; 0xff
 80020a6:	d104      	bne.n	80020b2 <rcvr_datablock+0x2a>
 80020a8:	f7ff ff40 	bl	8001f2c <SPI_Timer_Status>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2bfe      	cmp	r3, #254	; 0xfe
 80020b6:	d001      	beq.n	80020bc <rcvr_datablock+0x34>
 80020b8:	2300      	movs	r3, #0
 80020ba:	e00a      	b.n	80020d2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff60 	bl	8001f84 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80020c4:	20ff      	movs	r0, #255	; 0xff
 80020c6:	f7ff ff47 	bl	8001f58 <xchg_spi>
 80020ca:	20ff      	movs	r0, #255	; 0xff
 80020cc:	f7ff ff44 	bl	8001f58 <xchg_spi>

	return 1;						/* Function succeeded */
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80020e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ea:	f7ff ff82 	bl	8001ff2 <wait_ready>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <xmit_datablock+0x1e>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e01e      	b.n	8002136 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff2c 	bl	8001f58 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2bfd      	cmp	r3, #253	; 0xfd
 8002104:	d016      	beq.n	8002134 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff56 	bl	8001fbc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002110:	20ff      	movs	r0, #255	; 0xff
 8002112:	f7ff ff21 	bl	8001f58 <xchg_spi>
 8002116:	20ff      	movs	r0, #255	; 0xff
 8002118:	f7ff ff1e 	bl	8001f58 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800211c:	20ff      	movs	r0, #255	; 0xff
 800211e:	f7ff ff1b 	bl	8001f58 <xchg_spi>
 8002122:	4603      	mov	r3, r0
 8002124:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2b05      	cmp	r3, #5
 800212e:	d001      	beq.n	8002134 <xmit_datablock+0x5a>
 8002130:	2300      	movs	r3, #0
 8002132:	e000      	b.n	8002136 <xmit_datablock+0x5c>
	}
	return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	6039      	str	r1, [r7, #0]
 8002148:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da0e      	bge.n	8002170 <send_cmd+0x32>
		cmd &= 0x7F;
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002158:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800215a:	2100      	movs	r1, #0
 800215c:	2037      	movs	r0, #55	; 0x37
 800215e:	f7ff ffee 	bl	800213e <send_cmd>
 8002162:	4603      	mov	r3, r0
 8002164:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002166:	7bbb      	ldrb	r3, [r7, #14]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d901      	bls.n	8002170 <send_cmd+0x32>
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	e051      	b.n	8002214 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d008      	beq.n	8002188 <send_cmd+0x4a>
		despiselect();
 8002176:	f7ff ff5f 	bl	8002038 <despiselect>
		if (!spiselect()) return 0xFF;
 800217a:	f7ff ff6b 	bl	8002054 <spiselect>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <send_cmd+0x4a>
 8002184:	23ff      	movs	r3, #255	; 0xff
 8002186:	e045      	b.n	8002214 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fee1 	bl	8001f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	0e1b      	lsrs	r3, r3, #24
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fedb 	bl	8001f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fed5 	bl	8001f58 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fecf 	bl	8001f58 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff feca 	bl	8001f58 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <send_cmd+0x94>
 80021ce:	2395      	movs	r3, #149	; 0x95
 80021d0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d101      	bne.n	80021dc <send_cmd+0x9e>
 80021d8:	2387      	movs	r3, #135	; 0x87
 80021da:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff feba 	bl	8001f58 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d102      	bne.n	80021f0 <send_cmd+0xb2>
 80021ea:	20ff      	movs	r0, #255	; 0xff
 80021ec:	f7ff feb4 	bl	8001f58 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80021f0:	230a      	movs	r3, #10
 80021f2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80021f4:	20ff      	movs	r0, #255	; 0xff
 80021f6:	f7ff feaf 	bl	8001f58 <xchg_spi>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80021fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da05      	bge.n	8002212 <send_cmd+0xd4>
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	3b01      	subs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8002212:	7bbb      	ldrb	r3, [r7, #14]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <USER_SPI_initialize+0x14>
 800222c:	2301      	movs	r3, #1
 800222e:	e0d6      	b.n	80023de <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <USER_SPI_initialize+0x2a>
 800223e:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e0cb      	b.n	80023de <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8002246:	4b69      	ldr	r3, [pc, #420]	; (80023ec <USER_SPI_initialize+0x1d0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002250:	4b66      	ldr	r3, [pc, #408]	; (80023ec <USER_SPI_initialize+0x1d0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002258:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800225a:	230a      	movs	r3, #10
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e005      	b.n	800226c <USER_SPI_initialize+0x50>
 8002260:	20ff      	movs	r0, #255	; 0xff
 8002262:	f7ff fe79 	bl	8001f58 <xchg_spi>
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	3b01      	subs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f6      	bne.n	8002260 <USER_SPI_initialize+0x44>

	ty = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8002276:	2100      	movs	r1, #0
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff ff60 	bl	800213e <send_cmd>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	f040 808b 	bne.w	800239c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8002286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228a:	f7ff fe3b 	bl	8001f04 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800228e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002292:	2008      	movs	r0, #8
 8002294:	f7ff ff53 	bl	800213e <send_cmd>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d151      	bne.n	8002342 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	e00d      	b.n	80022c0 <USER_SPI_initialize+0xa4>
 80022a4:	7bfc      	ldrb	r4, [r7, #15]
 80022a6:	20ff      	movs	r0, #255	; 0xff
 80022a8:	f7ff fe56 	bl	8001f58 <xchg_spi>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	f104 0310 	add.w	r3, r4, #16
 80022b4:	443b      	add	r3, r7
 80022b6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9ee      	bls.n	80022a4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80022c6:	7abb      	ldrb	r3, [r7, #10]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d167      	bne.n	800239c <USER_SPI_initialize+0x180>
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	2baa      	cmp	r3, #170	; 0xaa
 80022d0:	d164      	bne.n	800239c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80022d2:	bf00      	nop
 80022d4:	f7ff fe2a 	bl	8001f2c <SPI_Timer_Status>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <USER_SPI_initialize+0xd2>
 80022de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022e2:	20a9      	movs	r0, #169	; 0xa9
 80022e4:	f7ff ff2b 	bl	800213e <send_cmd>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f2      	bne.n	80022d4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80022ee:	f7ff fe1d 	bl	8001f2c <SPI_Timer_Status>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d051      	beq.n	800239c <USER_SPI_initialize+0x180>
 80022f8:	2100      	movs	r1, #0
 80022fa:	203a      	movs	r0, #58	; 0x3a
 80022fc:	f7ff ff1f 	bl	800213e <send_cmd>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d14a      	bne.n	800239c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e00d      	b.n	8002328 <USER_SPI_initialize+0x10c>
 800230c:	7bfc      	ldrb	r4, [r7, #15]
 800230e:	20ff      	movs	r0, #255	; 0xff
 8002310:	f7ff fe22 	bl	8001f58 <xchg_spi>
 8002314:	4603      	mov	r3, r0
 8002316:	461a      	mov	r2, r3
 8002318:	f104 0310 	add.w	r3, r4, #16
 800231c:	443b      	add	r3, r7
 800231e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d9ee      	bls.n	800230c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800232e:	7a3b      	ldrb	r3, [r7, #8]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <USER_SPI_initialize+0x120>
 8002338:	230c      	movs	r3, #12
 800233a:	e000      	b.n	800233e <USER_SPI_initialize+0x122>
 800233c:	2304      	movs	r3, #4
 800233e:	737b      	strb	r3, [r7, #13]
 8002340:	e02c      	b.n	800239c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8002342:	2100      	movs	r1, #0
 8002344:	20a9      	movs	r0, #169	; 0xa9
 8002346:	f7ff fefa 	bl	800213e <send_cmd>
 800234a:	4603      	mov	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d804      	bhi.n	800235a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8002350:	2302      	movs	r3, #2
 8002352:	737b      	strb	r3, [r7, #13]
 8002354:	23a9      	movs	r3, #169	; 0xa9
 8002356:	73bb      	strb	r3, [r7, #14]
 8002358:	e003      	b.n	8002362 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800235a:	2301      	movs	r3, #1
 800235c:	737b      	strb	r3, [r7, #13]
 800235e:	2301      	movs	r3, #1
 8002360:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8002362:	bf00      	nop
 8002364:	f7ff fde2 	bl	8001f2c <SPI_Timer_Status>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <USER_SPI_initialize+0x162>
 800236e:	7bbb      	ldrb	r3, [r7, #14]
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fee3 	bl	800213e <send_cmd>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f2      	bne.n	8002364 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800237e:	f7ff fdd5 	bl	8001f2c <SPI_Timer_Status>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <USER_SPI_initialize+0x17c>
 8002388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800238c:	2010      	movs	r0, #16
 800238e:	f7ff fed6 	bl	800213e <send_cmd>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <USER_SPI_initialize+0x180>
				ty = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <USER_SPI_initialize+0x1d4>)
 800239e:	7b7b      	ldrb	r3, [r7, #13]
 80023a0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80023a2:	f7ff fe49 	bl	8002038 <despiselect>

	if (ty) {			/* OK */
 80023a6:	7b7b      	ldrb	r3, [r7, #13]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <USER_SPI_initialize+0x1d0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <USER_SPI_initialize+0x1d0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0208 	orr.w	r2, r2, #8
 80023be:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f023 0301 	bic.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e002      	b.n	80023d8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <USER_SPI_initialize+0x1cc>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000020 	.word	0x20000020
 80023ec:	20000040 	.word	0x20000040
 80023f0:	200000a4 	.word	0x200000a4

080023f4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <USER_SPI_status+0x14>
 8002404:	2301      	movs	r3, #1
 8002406:	e002      	b.n	800240e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <USER_SPI_status+0x28>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000020 	.word	0x20000020

08002420 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <USER_SPI_read+0x1c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <USER_SPI_read+0x20>
 800243c:	2304      	movs	r3, #4
 800243e:	e04d      	b.n	80024dc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002440:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <USER_SPI_read+0xc4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <USER_SPI_read+0x32>
 800244e:	2303      	movs	r3, #3
 8002450:	e044      	b.n	80024dc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <USER_SPI_read+0xc8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <USER_SPI_read+0x44>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d111      	bne.n	800248e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2011      	movs	r0, #17
 800246e:	f7ff fe66 	bl	800213e <send_cmd>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d129      	bne.n	80024cc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8002478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f7ff fe03 	bl	8002088 <rcvr_datablock>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d021      	beq.n	80024cc <USER_SPI_read+0xac>
			count = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	e01e      	b.n	80024cc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	2012      	movs	r0, #18
 8002492:	f7ff fe54 	bl	800213e <send_cmd>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d117      	bne.n	80024cc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800249c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a0:	68b8      	ldr	r0, [r7, #8]
 80024a2:	f7ff fdf1 	bl	8002088 <rcvr_datablock>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <USER_SPI_read+0xa2>
				buff += 512;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ed      	bne.n	800249c <USER_SPI_read+0x7c>
 80024c0:	e000      	b.n	80024c4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80024c2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80024c4:	2100      	movs	r1, #0
 80024c6:	200c      	movs	r0, #12
 80024c8:	f7ff fe39 	bl	800213e <send_cmd>
		}
	}
	despiselect();
 80024cc:	f7ff fdb4 	bl	8002038 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000020 	.word	0x20000020
 80024e8:	200000a4 	.word	0x200000a4

080024ec <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d102      	bne.n	8002508 <USER_SPI_write+0x1c>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <USER_SPI_write+0x20>
 8002508:	2304      	movs	r3, #4
 800250a:	e063      	b.n	80025d4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <USER_SPI_write+0xf0>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <USER_SPI_write+0x32>
 800251a:	2303      	movs	r3, #3
 800251c:	e05a      	b.n	80025d4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800251e:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <USER_SPI_write+0xf0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <USER_SPI_write+0x44>
 800252c:	2302      	movs	r3, #2
 800252e:	e051      	b.n	80025d4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002530:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <USER_SPI_write+0xf4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <USER_SPI_write+0x56>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	025b      	lsls	r3, r3, #9
 8002540:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d110      	bne.n	800256a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	2018      	movs	r0, #24
 800254c:	f7ff fdf7 	bl	800213e <send_cmd>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d136      	bne.n	80025c4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8002556:	21fe      	movs	r1, #254	; 0xfe
 8002558:	68b8      	ldr	r0, [r7, #8]
 800255a:	f7ff fdbe 	bl	80020da <xmit_datablock>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02f      	beq.n	80025c4 <USER_SPI_write+0xd8>
			count = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	e02c      	b.n	80025c4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800256a:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <USER_SPI_write+0xf4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f003 0306 	and.w	r3, r3, #6
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <USER_SPI_write+0x92>
 8002576:	6839      	ldr	r1, [r7, #0]
 8002578:	2097      	movs	r0, #151	; 0x97
 800257a:	f7ff fde0 	bl	800213e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	2019      	movs	r0, #25
 8002582:	f7ff fddc 	bl	800213e <send_cmd>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d11b      	bne.n	80025c4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800258c:	21fc      	movs	r1, #252	; 0xfc
 800258e:	68b8      	ldr	r0, [r7, #8]
 8002590:	f7ff fda3 	bl	80020da <xmit_datablock>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <USER_SPI_write+0xc4>
				buff += 512;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025a0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1ee      	bne.n	800258c <USER_SPI_write+0xa0>
 80025ae:	e000      	b.n	80025b2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80025b0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80025b2:	21fd      	movs	r1, #253	; 0xfd
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff fd90 	bl	80020da <xmit_datablock>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <USER_SPI_write+0xd8>
 80025c0:	2301      	movs	r3, #1
 80025c2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80025c4:	f7ff fd38 	bl	8002038 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000020 	.word	0x20000020
 80025e0:	200000a4 	.word	0x200000a4

080025e4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	603a      	str	r2, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	460b      	mov	r3, r1
 80025f2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <USER_SPI_ioctl+0x1a>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e15a      	b.n	80028b4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80025fe:	4baf      	ldr	r3, [pc, #700]	; (80028bc <USER_SPI_ioctl+0x2d8>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <USER_SPI_ioctl+0x2c>
 800260c:	2303      	movs	r3, #3
 800260e:	e151      	b.n	80028b4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



	#endif /* TARGET_USER_DISKIO_SPI_H_ */

	switch (cmd) {
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	2b04      	cmp	r3, #4
 800261a:	f200 8136 	bhi.w	800288a <USER_SPI_ioctl+0x2a6>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <USER_SPI_ioctl+0x40>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002639 	.word	0x08002639
 8002628:	0800264d 	.word	0x0800264d
 800262c:	0800288b 	.word	0x0800288b
 8002630:	080026f9 	.word	0x080026f9
 8002634:	080027ef 	.word	0x080027ef
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002638:	f7ff fd0c 	bl	8002054 <spiselect>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8127 	beq.w	8002892 <USER_SPI_ioctl+0x2ae>
 8002644:	2300      	movs	r3, #0
 8002646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800264a:	e122      	b.n	8002892 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800264c:	2100      	movs	r1, #0
 800264e:	2009      	movs	r0, #9
 8002650:	f7ff fd75 	bl	800213e <send_cmd>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 811d 	bne.w	8002896 <USER_SPI_ioctl+0x2b2>
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	2110      	movs	r1, #16
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fd10 	bl	8002088 <rcvr_datablock>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8113 	beq.w	8002896 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002670:	7b3b      	ldrb	r3, [r7, #12]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d111      	bne.n	800269e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800267a:	7d7b      	ldrb	r3, [r7, #21]
 800267c:	461a      	mov	r2, r3
 800267e:	7d3b      	ldrb	r3, [r7, #20]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	4413      	add	r3, r2
 8002684:	461a      	mov	r2, r3
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	041b      	lsls	r3, r3, #16
 800268a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800268e:	4413      	add	r3, r2
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	029a      	lsls	r2, r3, #10
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e028      	b.n	80026f0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800269e:	7c7b      	ldrb	r3, [r7, #17]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	7dbb      	ldrb	r3, [r7, #22]
 80026a8:	09db      	lsrs	r3, r3, #7
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	7d7b      	ldrb	r3, [r7, #21]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 0306 	and.w	r3, r3, #6
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4413      	add	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	3302      	adds	r3, #2
 80026c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80026c6:	7d3b      	ldrb	r3, [r7, #20]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	441a      	add	r2, r3
 80026d4:	7cbb      	ldrb	r3, [r7, #18]
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026dc:	4413      	add	r3, r2
 80026de:	3301      	adds	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80026e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80026e6:	3b09      	subs	r3, #9
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	409a      	lsls	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80026f6:	e0ce      	b.n	8002896 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80026f8:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <USER_SPI_ioctl+0x2dc>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d031      	beq.n	8002768 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002704:	2100      	movs	r1, #0
 8002706:	208d      	movs	r0, #141	; 0x8d
 8002708:	f7ff fd19 	bl	800213e <send_cmd>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 80c3 	bne.w	800289a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8002714:	20ff      	movs	r0, #255	; 0xff
 8002716:	f7ff fc1f 	bl	8001f58 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2110      	movs	r1, #16
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fcb1 	bl	8002088 <rcvr_datablock>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80b6 	beq.w	800289a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800272e:	2330      	movs	r3, #48	; 0x30
 8002730:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002734:	e007      	b.n	8002746 <USER_SPI_ioctl+0x162>
 8002736:	20ff      	movs	r0, #255	; 0xff
 8002738:	f7ff fc0e 	bl	8001f58 <xchg_spi>
 800273c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002740:	3b01      	subs	r3, #1
 8002742:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002746:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f3      	bne.n	8002736 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	2310      	movs	r3, #16
 8002758:	fa03 f202 	lsl.w	r2, r3, r2
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002766:	e098      	b.n	800289a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002768:	2100      	movs	r1, #0
 800276a:	2009      	movs	r0, #9
 800276c:	f7ff fce7 	bl	800213e <send_cmd>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 8091 	bne.w	800289a <USER_SPI_ioctl+0x2b6>
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	2110      	movs	r1, #16
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fc82 	bl	8002088 <rcvr_datablock>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8087 	beq.w	800289a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <USER_SPI_ioctl+0x2dc>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002798:	7dbb      	ldrb	r3, [r7, #22]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80027a0:	7dfa      	ldrb	r2, [r7, #23]
 80027a2:	09d2      	lsrs	r2, r2, #7
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	4413      	add	r3, r2
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	7e7b      	ldrb	r3, [r7, #25]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e013      	b.n	80027e6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80027be:	7dbb      	ldrb	r3, [r7, #22]
 80027c0:	109b      	asrs	r3, r3, #2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	3301      	adds	r3, #1
 80027ca:	7dfa      	ldrb	r2, [r7, #23]
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	f002 0218 	and.w	r2, r2, #24
 80027d2:	7df9      	ldrb	r1, [r7, #23]
 80027d4:	0949      	lsrs	r1, r1, #5
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	440a      	add	r2, r1
 80027da:	3201      	adds	r2, #1
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80027ec:	e055      	b.n	800289a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <USER_SPI_ioctl+0x2dc>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	f003 0306 	and.w	r3, r3, #6
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d051      	beq.n	800289e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80027fa:	f107 020c 	add.w	r2, r7, #12
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	210b      	movs	r1, #11
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff feee 	bl	80025e4 <USER_SPI_ioctl>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d149      	bne.n	80028a2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800280e:	7b3b      	ldrb	r3, [r7, #12]
 8002810:	099b      	lsrs	r3, r3, #6
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <USER_SPI_ioctl+0x23e>
 8002818:	7dbb      	ldrb	r3, [r7, #22]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d041      	beq.n	80028a6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002832:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <USER_SPI_ioctl+0x2dc>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800284a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284c:	2020      	movs	r0, #32
 800284e:	f7ff fc76 	bl	800213e <send_cmd>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d128      	bne.n	80028aa <USER_SPI_ioctl+0x2c6>
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	2021      	movs	r0, #33	; 0x21
 800285c:	f7ff fc6f 	bl	800213e <send_cmd>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d121      	bne.n	80028aa <USER_SPI_ioctl+0x2c6>
 8002866:	2100      	movs	r1, #0
 8002868:	2026      	movs	r0, #38	; 0x26
 800286a:	f7ff fc68 	bl	800213e <send_cmd>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11a      	bne.n	80028aa <USER_SPI_ioctl+0x2c6>
 8002874:	f247 5030 	movw	r0, #30000	; 0x7530
 8002878:	f7ff fbbb 	bl	8001ff2 <wait_ready>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d013      	beq.n	80028aa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002882:	2300      	movs	r3, #0
 8002884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8002888:	e00f      	b.n	80028aa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800288a:	2304      	movs	r3, #4
 800288c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002890:	e00c      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		break;
 8002892:	bf00      	nop
 8002894:	e00a      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		break;
 8002896:	bf00      	nop
 8002898:	e008      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		break;
 800289a:	bf00      	nop
 800289c:	e006      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800289e:	bf00      	nop
 80028a0:	e004      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <USER_SPI_ioctl+0x2c8>
		break;
 80028aa:	bf00      	nop
	}

	despiselect();
 80028ac:	f7ff fbc4 	bl	8002038 <despiselect>

	return res;
 80028b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000020 	.word	0x20000020
 80028c0:	200000a4 	.word	0x200000a4

080028c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <disk_status+0x30>)
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	79fa      	ldrb	r2, [r7, #7]
 80028dc:	4905      	ldr	r1, [pc, #20]	; (80028f4 <disk_status+0x30>)
 80028de:	440a      	add	r2, r1
 80028e0:	7a12      	ldrb	r2, [r2, #8]
 80028e2:	4610      	mov	r0, r2
 80028e4:	4798      	blx	r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200000d8 	.word	0x200000d8

080028f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <disk_initialize+0x48>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <disk_initialize+0x48>)
 8002914:	2101      	movs	r1, #1
 8002916:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <disk_initialize+0x48>)
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	79fa      	ldrb	r2, [r7, #7]
 8002926:	4906      	ldr	r1, [pc, #24]	; (8002940 <disk_initialize+0x48>)
 8002928:	440a      	add	r2, r1
 800292a:	7a12      	ldrb	r2, [r2, #8]
 800292c:	4610      	mov	r0, r2
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
 8002932:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200000d8 	.word	0x200000d8

08002944 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4603      	mov	r3, r0
 8002952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <disk_read+0x3c>)
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	689c      	ldr	r4, [r3, #8]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <disk_read+0x3c>)
 8002964:	4413      	add	r3, r2
 8002966:	7a18      	ldrb	r0, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	47a0      	blx	r4
 8002970:	4603      	mov	r3, r0
 8002972:	75fb      	strb	r3, [r7, #23]
  return res;
 8002974:	7dfb      	ldrb	r3, [r7, #23]
}
 8002976:	4618      	mov	r0, r3
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	200000d8 	.word	0x200000d8

08002984 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <disk_write+0x3c>)
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	68dc      	ldr	r4, [r3, #12]
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <disk_write+0x3c>)
 80029a4:	4413      	add	r3, r2
 80029a6:	7a18      	ldrb	r0, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	47a0      	blx	r4
 80029b0:	4603      	mov	r3, r0
 80029b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	200000d8 	.word	0x200000d8

080029c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	603a      	str	r2, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	460b      	mov	r3, r1
 80029d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <disk_ioctl+0x38>)
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	79fa      	ldrb	r2, [r7, #7]
 80029e2:	4906      	ldr	r1, [pc, #24]	; (80029fc <disk_ioctl+0x38>)
 80029e4:	440a      	add	r2, r1
 80029e6:	7a10      	ldrb	r0, [r2, #8]
 80029e8:	79b9      	ldrb	r1, [r7, #6]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4798      	blx	r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200000d8 	.word	0x200000d8

08002a00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002a22:	89fb      	ldrh	r3, [r7, #14]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	3202      	adds	r2, #2
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	3201      	adds	r2, #1
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
	return rv;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	1c53      	adds	r3, r2, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	1c59      	adds	r1, r3, #1
 8002b28:	6179      	str	r1, [r7, #20]
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f1      	bne.n	8002b1e <mem_cpy+0x1a>
	}
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	617a      	str	r2, [r7, #20]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f3      	bne.n	8002b56 <mem_set+0x10>
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	61fa      	str	r2, [r7, #28]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	61ba      	str	r2, [r7, #24]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	1acb      	subs	r3, r1, r3
 8002ba8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <mem_cmp+0x40>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0eb      	beq.n	8002b94 <mem_cmp+0x18>

	return r;
 8002bbc:	697b      	ldr	r3, [r7, #20]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002bd4:	e002      	b.n	8002bdc <chk_chr+0x12>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <chk_chr+0x26>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d1f2      	bne.n	8002bd6 <chk_chr+0xc>
	return *str;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e029      	b.n	8002c68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <chk_lock+0xb4>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01d      	beq.n	8002c5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <chk_lock+0xb4>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	4413      	add	r3, r2
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d116      	bne.n	8002c62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <chk_lock+0xb4>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d10c      	bne.n	8002c62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <chk_lock+0xb4>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	3308      	adds	r3, #8
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d102      	bne.n	8002c62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002c5c:	e007      	b.n	8002c6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d9d2      	bls.n	8002c14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d109      	bne.n	8002c88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <chk_lock+0x80>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d101      	bne.n	8002c84 <chk_lock+0x84>
 8002c80:	2300      	movs	r3, #0
 8002c82:	e010      	b.n	8002ca6 <chk_lock+0xa6>
 8002c84:	2312      	movs	r3, #18
 8002c86:	e00e      	b.n	8002ca6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <chk_lock+0xa0>
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <chk_lock+0xb4>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	4413      	add	r3, r2
 8002c96:	330c      	adds	r3, #12
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9e:	d101      	bne.n	8002ca4 <chk_lock+0xa4>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	e000      	b.n	8002ca6 <chk_lock+0xa6>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200000b8 	.word	0x200000b8

08002cb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	e002      	b.n	8002cca <enq_lock+0x12>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d806      	bhi.n	8002cde <enq_lock+0x26>
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <enq_lock+0x40>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	4413      	add	r3, r2
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f2      	bne.n	8002cc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200000b8 	.word	0x200000b8

08002cfc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e01f      	b.n	8002d4c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002d0c:	4a41      	ldr	r2, [pc, #260]	; (8002e14 <inc_lock+0x118>)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	4413      	add	r3, r2
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d113      	bne.n	8002d46 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002d1e:	4a3d      	ldr	r2, [pc, #244]	; (8002e14 <inc_lock+0x118>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	4413      	add	r3, r2
 8002d26:	3304      	adds	r3, #4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d109      	bne.n	8002d46 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002d32:	4a38      	ldr	r2, [pc, #224]	; (8002e14 <inc_lock+0x118>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d006      	beq.n	8002d54 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d9dc      	bls.n	8002d0c <inc_lock+0x10>
 8002d52:	e000      	b.n	8002d56 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002d54:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d132      	bne.n	8002dc2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e002      	b.n	8002d68 <inc_lock+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3301      	adds	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d806      	bhi.n	8002d7c <inc_lock+0x80>
 8002d6e:	4a29      	ldr	r2, [pc, #164]	; (8002e14 <inc_lock+0x118>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4413      	add	r3, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f2      	bne.n	8002d62 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d101      	bne.n	8002d86 <inc_lock+0x8a>
 8002d82:	2300      	movs	r3, #0
 8002d84:	e040      	b.n	8002e08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4922      	ldr	r1, [pc, #136]	; (8002e14 <inc_lock+0x118>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	491e      	ldr	r1, [pc, #120]	; (8002e14 <inc_lock+0x118>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	440b      	add	r3, r1
 8002da0:	3304      	adds	r3, #4
 8002da2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	491a      	ldr	r1, [pc, #104]	; (8002e14 <inc_lock+0x118>)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	440b      	add	r3, r1
 8002db0:	3308      	adds	r3, #8
 8002db2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002db4:	4a17      	ldr	r2, [pc, #92]	; (8002e14 <inc_lock+0x118>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4413      	add	r3, r2
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <inc_lock+0xe0>
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <inc_lock+0x118>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <inc_lock+0xe0>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e015      	b.n	8002e08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d108      	bne.n	8002df4 <inc_lock+0xf8>
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <inc_lock+0x118>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	330c      	adds	r3, #12
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	3301      	adds	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	e001      	b.n	8002df8 <inc_lock+0xfc>
 8002df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df8:	4906      	ldr	r1, [pc, #24]	; (8002e14 <inc_lock+0x118>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	440b      	add	r3, r1
 8002e00:	330c      	adds	r3, #12
 8002e02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	200000b8 	.word	0x200000b8

08002e18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d825      	bhi.n	8002e78 <dec_lock+0x60>
		n = Files[i].ctr;
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <dec_lock+0x74>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	4413      	add	r3, r2
 8002e34:	330c      	adds	r3, #12
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	d101      	bne.n	8002e46 <dec_lock+0x2e>
 8002e42:	2300      	movs	r3, #0
 8002e44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <dec_lock+0x3a>
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002e52:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <dec_lock+0x74>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	89fa      	ldrh	r2, [r7, #14]
 8002e5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <dec_lock+0x5a>
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <dec_lock+0x74>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	737b      	strb	r3, [r7, #13]
 8002e76:	e001      	b.n	8002e7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002e78:	2302      	movs	r3, #2
 8002e7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002e7c:	7b7b      	ldrb	r3, [r7, #13]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	200000b8 	.word	0x200000b8

08002e90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e010      	b.n	8002ec0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002e9e:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <clear_lock+0x44>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d105      	bne.n	8002eba <clear_lock+0x2a>
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <clear_lock+0x44>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d9eb      	bls.n	8002e9e <clear_lock+0xe>
	}
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	200000b8 	.word	0x200000b8

08002ed8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	78db      	ldrb	r3, [r3, #3]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d034      	beq.n	8002f56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7858      	ldrb	r0, [r3, #1]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002efc:	2301      	movs	r3, #1
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	f7ff fd40 	bl	8002984 <disk_write>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	e022      	b.n	8002f56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	1ad2      	subs	r2, r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d217      	bcs.n	8002f56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	789b      	ldrb	r3, [r3, #2]
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e010      	b.n	8002f50 <sync_window+0x78>
					wsect += fs->fsize;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7858      	ldrb	r0, [r3, #1]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002f42:	2301      	movs	r3, #1
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	f7ff fd1d 	bl	8002984 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d8eb      	bhi.n	8002f2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d01b      	beq.n	8002fb0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ffad 	bl	8002ed8 <sync_window>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d113      	bne.n	8002fb0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7858      	ldrb	r0, [r3, #1]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002f92:	2301      	movs	r3, #1
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	f7ff fcd5 	bl	8002944 <disk_read>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d004      	beq.n	8002faa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fa4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff87 	bl	8002ed8 <sync_window>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d158      	bne.n	8003086 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d148      	bne.n	800306e <sync_fs+0xb2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d144      	bne.n	800306e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3330      	adds	r3, #48	; 0x30
 8002fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fda9 	bl	8002b46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3330      	adds	r3, #48	; 0x30
 8002ff8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002ffc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fd38 	bl	8002a76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3330      	adds	r3, #48	; 0x30
 800300a:	4921      	ldr	r1, [pc, #132]	; (8003090 <sync_fs+0xd4>)
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fd4d 	bl	8002aac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3330      	adds	r3, #48	; 0x30
 8003016:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800301a:	491e      	ldr	r1, [pc, #120]	; (8003094 <sync_fs+0xd8>)
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fd45 	bl	8002aac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3330      	adds	r3, #48	; 0x30
 8003026:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7ff fd3b 	bl	8002aac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3330      	adds	r3, #48	; 0x30
 800303a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7ff fd31 	bl	8002aac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7858      	ldrb	r0, [r3, #1]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	2301      	movs	r3, #1
 8003064:	f7ff fc8e 	bl	8002984 <disk_write>
			fs->fsi_flag = 0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fca4 	bl	80029c4 <disk_ioctl>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <sync_fs+0xca>
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	41615252 	.word	0x41615252
 8003094:	61417272 	.word	0x61417272

08003098 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3b02      	subs	r3, #2
 80030a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	3b02      	subs	r3, #2
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d301      	bcc.n	80030b8 <clust2sect+0x20>
 80030b4:	2300      	movs	r3, #0
 80030b6:	e008      	b.n	80030ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	895b      	ldrh	r3, [r3, #10]
 80030bc:	461a      	mov	r2, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	fb03 f202 	mul.w	r2, r3, r2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	4413      	add	r3, r2
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d904      	bls.n	80030f6 <get_fat+0x20>
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e08f      	b.n	800321c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003100:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d062      	beq.n	80031d0 <get_fat+0xfa>
 800310a:	2b03      	cmp	r3, #3
 800310c:	dc7c      	bgt.n	8003208 <get_fat+0x132>
 800310e:	2b01      	cmp	r3, #1
 8003110:	d002      	beq.n	8003118 <get_fat+0x42>
 8003112:	2b02      	cmp	r3, #2
 8003114:	d042      	beq.n	800319c <get_fat+0xc6>
 8003116:	e077      	b.n	8003208 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0a5b      	lsrs	r3, r3, #9
 800312e:	4413      	add	r3, r2
 8003130:	4619      	mov	r1, r3
 8003132:	6938      	ldr	r0, [r7, #16]
 8003134:	f7ff ff14 	bl	8002f60 <move_window>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d167      	bne.n	800320e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	60fa      	str	r2, [r7, #12]
 8003144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003150:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0a5b      	lsrs	r3, r3, #9
 800315a:	4413      	add	r3, r2
 800315c:	4619      	mov	r1, r3
 800315e:	6938      	ldr	r0, [r7, #16]
 8003160:	f7ff fefe 	bl	8002f60 <move_window>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d153      	bne.n	8003212 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
 8003180:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <get_fat+0xbc>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	e002      	b.n	8003198 <get_fat+0xc2>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	617b      	str	r3, [r7, #20]
			break;
 800319a:	e03f      	b.n	800321c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	4413      	add	r3, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	6938      	ldr	r0, [r7, #16]
 80031aa:	f7ff fed9 	bl	8002f60 <move_window>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d130      	bne.n	8003216 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80031c2:	4413      	add	r3, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fc1b 	bl	8002a00 <ld_word>
 80031ca:	4603      	mov	r3, r0
 80031cc:	617b      	str	r3, [r7, #20]
			break;
 80031ce:	e025      	b.n	800321c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	09db      	lsrs	r3, r3, #7
 80031d8:	4413      	add	r3, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	6938      	ldr	r0, [r7, #16]
 80031de:	f7ff febf 	bl	8002f60 <move_window>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d118      	bne.n	800321a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80031f6:	4413      	add	r3, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc19 	bl	8002a30 <ld_dword>
 80031fe:	4603      	mov	r3, r0
 8003200:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003204:	617b      	str	r3, [r7, #20]
			break;
 8003206:	e009      	b.n	800321c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003208:	2301      	movs	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	e006      	b.n	800321c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800320e:	bf00      	nop
 8003210:	e004      	b.n	800321c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800321a:	bf00      	nop
		}
	}

	return val;
 800321c:	697b      	ldr	r3, [r7, #20]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003226:	b590      	push	{r4, r7, lr}
 8003228:	b089      	sub	sp, #36	; 0x24
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	f240 80d2 	bls.w	80033e2 <put_fat+0x1bc>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	f080 80cc 	bcs.w	80033e2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b03      	cmp	r3, #3
 8003250:	f000 8096 	beq.w	8003380 <put_fat+0x15a>
 8003254:	2b03      	cmp	r3, #3
 8003256:	f300 80cd 	bgt.w	80033f4 <put_fat+0x1ce>
 800325a:	2b01      	cmp	r3, #1
 800325c:	d002      	beq.n	8003264 <put_fat+0x3e>
 800325e:	2b02      	cmp	r3, #2
 8003260:	d06e      	beq.n	8003340 <put_fat+0x11a>
 8003262:	e0c7      	b.n	80033f4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4413      	add	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	0a5b      	lsrs	r3, r3, #9
 800327a:	4413      	add	r3, r2
 800327c:	4619      	mov	r1, r3
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fe6e 	bl	8002f60 <move_window>
 8003284:	4603      	mov	r3, r0
 8003286:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 80ab 	bne.w	80033e6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1c59      	adds	r1, r3, #1
 800329a:	61b9      	str	r1, [r7, #24]
 800329c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a0:	4413      	add	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <put_fat+0xa4>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b25a      	sxtb	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e001      	b.n	80032ce <put_fat+0xa8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	0a5b      	lsrs	r3, r3, #9
 80032e0:	4413      	add	r3, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fe3b 	bl	8002f60 <move_window>
 80032ea:	4603      	mov	r3, r0
 80032ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80032ee:	7ffb      	ldrb	r3, [r7, #31]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d17a      	bne.n	80033ea <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <put_fat+0xf0>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00e      	b.n	8003334 <put_fat+0x10e>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b25b      	sxtb	r3, r3
 800331c:	f023 030f 	bic.w	r3, r3, #15
 8003320:	b25a      	sxtb	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	b25b      	sxtb	r3, r3
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	b25b      	sxtb	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b25b      	sxtb	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	70da      	strb	r2, [r3, #3]
			break;
 800333e:	e059      	b.n	80033f4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	4413      	add	r3, r2
 800334a:	4619      	mov	r1, r3
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fe07 	bl	8002f60 <move_window>
 8003352:	4603      	mov	r3, r0
 8003354:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d148      	bne.n	80033ee <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800336a:	4413      	add	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	b292      	uxth	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fb7f 	bl	8002a76 <st_word>
			fs->wflag = 1;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	70da      	strb	r2, [r3, #3]
			break;
 800337e:	e039      	b.n	80033f4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	09db      	lsrs	r3, r3, #7
 8003388:	4413      	add	r3, r2
 800338a:	4619      	mov	r1, r3
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff fde7 	bl	8002f60 <move_window>
 8003392:	4603      	mov	r3, r0
 8003394:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003396:	7ffb      	ldrb	r3, [r7, #31]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12a      	bne.n	80033f2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80033b0:	4413      	add	r3, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fb3c 	bl	8002a30 <ld_dword>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033be:	4323      	orrs	r3, r4
 80033c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80033d0:	4413      	add	r3, r2
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fb69 	bl	8002aac <st_dword>
			fs->wflag = 1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	70da      	strb	r2, [r3, #3]
			break;
 80033e0:	e008      	b.n	80033f4 <put_fat+0x1ce>
		}
	}
 80033e2:	bf00      	nop
 80033e4:	e006      	b.n	80033f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80033e6:	bf00      	nop
 80033e8:	e004      	b.n	80033f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80033f2:	bf00      	nop
	return res;
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}

080033fe <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b088      	sub	sp, #32
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d904      	bls.n	8003424 <remove_chain+0x26>
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	429a      	cmp	r2, r3
 8003422:	d301      	bcc.n	8003428 <remove_chain+0x2a>
 8003424:	2302      	movs	r3, #2
 8003426:	e04b      	b.n	80034c0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800342e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	69b8      	ldr	r0, [r7, #24]
 8003436:	f7ff fef6 	bl	8003226 <put_fat>
 800343a:	4603      	mov	r3, r0
 800343c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800343e:	7ffb      	ldrb	r3, [r7, #31]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <remove_chain+0x4a>
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	e03b      	b.n	80034c0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff fe43 	bl	80030d6 <get_fat>
 8003450:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d031      	beq.n	80034bc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <remove_chain+0x64>
 800345e:	2302      	movs	r3, #2
 8003460:	e02e      	b.n	80034c0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d101      	bne.n	800346e <remove_chain+0x70>
 800346a:	2301      	movs	r3, #1
 800346c:	e028      	b.n	80034c0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800346e:	2200      	movs	r2, #0
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	69b8      	ldr	r0, [r7, #24]
 8003474:	f7ff fed7 	bl	8003226 <put_fat>
 8003478:	4603      	mov	r3, r0
 800347a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <remove_chain+0x88>
 8003482:	7ffb      	ldrb	r3, [r7, #31]
 8003484:	e01c      	b.n	80034c0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	3b02      	subs	r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d20b      	bcs.n	80034ac <remove_chain+0xae>
			fs->free_clst++;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	791b      	ldrb	r3, [r3, #4]
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d3c6      	bcc.n	8003448 <remove_chain+0x4a>
 80034ba:	e000      	b.n	80034be <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80034bc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <create_chain+0x2c>
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d31b      	bcc.n	800352c <create_chain+0x64>
 80034f4:	2301      	movs	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e018      	b.n	800352c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80034fa:	6839      	ldr	r1, [r7, #0]
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fdea 	bl	80030d6 <get_fat>
 8003502:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d801      	bhi.n	800350e <create_chain+0x46>
 800350a:	2301      	movs	r3, #1
 800350c:	e070      	b.n	80035f0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003514:	d101      	bne.n	800351a <create_chain+0x52>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	e06a      	b.n	80035f0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d201      	bcs.n	8003528 <create_chain+0x60>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	e063      	b.n	80035f0 <create_chain+0x128>
		scl = clst;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d307      	bcc.n	8003550 <create_chain+0x88>
				ncl = 2;
 8003540:	2302      	movs	r3, #2
 8003542:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d901      	bls.n	8003550 <create_chain+0x88>
 800354c:	2300      	movs	r3, #0
 800354e:	e04f      	b.n	80035f0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003550:	69f9      	ldr	r1, [r7, #28]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fdbf 	bl	80030d6 <get_fat>
 8003558:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d003      	beq.n	800356e <create_chain+0xa6>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356c:	d101      	bne.n	8003572 <create_chain+0xaa>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	e03e      	b.n	80035f0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	429a      	cmp	r2, r3
 8003578:	d1da      	bne.n	8003530 <create_chain+0x68>
 800357a:	2300      	movs	r3, #0
 800357c:	e038      	b.n	80035f0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800357e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003584:	69f9      	ldr	r1, [r7, #28]
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fe4d 	bl	8003226 <put_fat>
 800358c:	4603      	mov	r3, r0
 800358e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <create_chain+0xe2>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	6938      	ldr	r0, [r7, #16]
 80035a2:	f7ff fe40 	bl	8003226 <put_fat>
 80035a6:	4603      	mov	r3, r0
 80035a8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d116      	bne.n	80035de <create_chain+0x116>
		fs->last_clst = ncl;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	3b02      	subs	r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d804      	bhi.n	80035ce <create_chain+0x106>
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	711a      	strb	r2, [r3, #4]
 80035dc:	e007      	b.n	80035ee <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d102      	bne.n	80035ea <create_chain+0x122>
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e8:	e000      	b.n	80035ec <create_chain+0x124>
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80035ee:	69fb      	ldr	r3, [r7, #28]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	3304      	adds	r3, #4
 800360e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	0a5b      	lsrs	r3, r3, #9
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	8952      	ldrh	r2, [r2, #10]
 8003618:	fbb3 f3f2 	udiv	r3, r3, r2
 800361c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1d1a      	adds	r2, r3, #4
 8003622:	613a      	str	r2, [r7, #16]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <clmt_clust+0x3a>
 800362e:	2300      	movs	r3, #0
 8003630:	e010      	b.n	8003654 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d307      	bcc.n	800364a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3304      	adds	r3, #4
 8003646:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003648:	e7e9      	b.n	800361e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800364a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4413      	add	r3, r2
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003676:	d204      	bcs.n	8003682 <dir_sdi+0x22>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003682:	2302      	movs	r3, #2
 8003684:	e063      	b.n	800374e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <dir_sdi+0x46>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d902      	bls.n	80036a6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10c      	bne.n	80036c6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	8912      	ldrh	r2, [r2, #8]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d301      	bcc.n	80036bc <dir_sdi+0x5c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e048      	b.n	800374e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	61da      	str	r2, [r3, #28]
 80036c4:	e029      	b.n	800371a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	895b      	ldrh	r3, [r3, #10]
 80036ca:	025b      	lsls	r3, r3, #9
 80036cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80036ce:	e019      	b.n	8003704 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fcfe 	bl	80030d6 <get_fat>
 80036da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e2:	d101      	bne.n	80036e8 <dir_sdi+0x88>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d904      	bls.n	80036f8 <dir_sdi+0x98>
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d301      	bcc.n	80036fc <dir_sdi+0x9c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e028      	b.n	800374e <dir_sdi+0xee>
			ofs -= csz;
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d2e1      	bcs.n	80036d0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800370c:	6979      	ldr	r1, [r7, #20]
 800370e:	6938      	ldr	r0, [r7, #16]
 8003710:	f7ff fcc2 	bl	8003098 <clust2sect>
 8003714:	4602      	mov	r2, r0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <dir_sdi+0xcc>
 8003728:	2302      	movs	r3, #2
 800372a:	e010      	b.n	800374e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	0a5b      	lsrs	r3, r3, #9
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003746:	441a      	add	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	3320      	adds	r3, #32
 800376c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <dir_next+0x28>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377c:	d301      	bcc.n	8003782 <dir_next+0x2c>
 800377e:	2304      	movs	r3, #4
 8003780:	e0aa      	b.n	80038d8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	2b00      	cmp	r3, #0
 800378a:	f040 8098 	bne.w	80038be <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	8912      	ldrh	r2, [r2, #8]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f0c0 8088 	bcc.w	80038be <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	61da      	str	r2, [r3, #28]
 80037b4:	2304      	movs	r3, #4
 80037b6:	e08f      	b.n	80038d8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	0a5b      	lsrs	r3, r3, #9
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	8952      	ldrh	r2, [r2, #10]
 80037c0:	3a01      	subs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d17a      	bne.n	80038be <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7ff fc80 	bl	80030d6 <get_fat>
 80037d6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d801      	bhi.n	80037e2 <dir_next+0x8c>
 80037de:	2302      	movs	r3, #2
 80037e0:	e07a      	b.n	80038d8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e8:	d101      	bne.n	80037ee <dir_next+0x98>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e074      	b.n	80038d8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d358      	bcc.n	80038aa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	61da      	str	r2, [r3, #28]
 8003804:	2304      	movs	r3, #4
 8003806:	e067      	b.n	80038d8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7ff fe59 	bl	80034c8 <create_chain>
 8003816:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <dir_next+0xcc>
 800381e:	2307      	movs	r3, #7
 8003820:	e05a      	b.n	80038d8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <dir_next+0xd6>
 8003828:	2302      	movs	r3, #2
 800382a:	e055      	b.n	80038d8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003832:	d101      	bne.n	8003838 <dir_next+0xe2>
 8003834:	2301      	movs	r3, #1
 8003836:	e04f      	b.n	80038d8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7ff fb4d 	bl	8002ed8 <sync_window>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <dir_next+0xf2>
 8003844:	2301      	movs	r3, #1
 8003846:	e047      	b.n	80038d8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3330      	adds	r3, #48	; 0x30
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff f977 	bl	8002b46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fc1a 	bl	8003098 <clust2sect>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
 800386a:	e012      	b.n	8003892 <dir_next+0x13c>
						fs->wflag = 1;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fb30 	bl	8002ed8 <sync_window>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <dir_next+0x12c>
 800387e:	2301      	movs	r3, #1
 8003880:	e02a      	b.n	80038d8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	3301      	adds	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	895b      	ldrh	r3, [r3, #10]
 8003896:	461a      	mov	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4293      	cmp	r3, r2
 800389c:	d3e6      	bcc.n	800386c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad2      	subs	r2, r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff fbf0 	bl	8003098 <clust2sect>
 80038b8:	4602      	mov	r2, r0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d0:	441a      	add	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80038f0:	2100      	movs	r1, #0
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff feb4 	bl	8003660 <dir_sdi>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d12b      	bne.n	800395a <dir_alloc+0x7a>
		n = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4619      	mov	r1, r3
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fb27 	bl	8002f60 <move_window>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11d      	bne.n	8003958 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2be5      	cmp	r3, #229	; 0xe5
 8003924:	d004      	beq.n	8003930 <dir_alloc+0x50>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	3301      	adds	r3, #1
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d102      	bne.n	8003944 <dir_alloc+0x64>
 800393e:	e00c      	b.n	800395a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003944:	2101      	movs	r1, #1
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff05 	bl	8003756 <dir_next>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0d7      	beq.n	8003906 <dir_alloc+0x26>
 8003956:	e000      	b.n	800395a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003958:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d101      	bne.n	8003964 <dir_alloc+0x84>
 8003960:	2307      	movs	r3, #7
 8003962:	75fb      	strb	r3, [r7, #23]
	return res;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	331a      	adds	r3, #26
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f83f 	bl	8002a00 <ld_word>
 8003982:	4603      	mov	r3, r0
 8003984:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d109      	bne.n	80039a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3314      	adds	r3, #20
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f834 	bl	8002a00 <ld_word>
 8003998:	4603      	mov	r3, r0
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	331a      	adds	r3, #26
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	b292      	uxth	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f857 	bl	8002a76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d109      	bne.n	80039e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f103 0214 	add.w	r2, r3, #20
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7ff f849 	bl	8002a76 <st_word>
	}
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80039fa:	2100      	movs	r1, #0
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe2f 	bl	8003660 <dir_sdi>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <dir_find+0x24>
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	e03e      	b.n	8003a8e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4619      	mov	r1, r3
 8003a16:	6938      	ldr	r0, [r7, #16]
 8003a18:	f7ff faa2 	bl	8002f60 <move_window>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d12f      	bne.n	8003a86 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <dir_find+0x4e>
 8003a34:	2304      	movs	r3, #4
 8003a36:	75fb      	strb	r3, [r7, #23]
 8003a38:	e028      	b.n	8003a8c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	330b      	adds	r3, #11
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	330b      	adds	r3, #11
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <dir_find+0x86>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a18      	ldr	r0, [r3, #32]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	220b      	movs	r2, #11
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7ff f888 	bl	8002b7c <mem_cmp>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003a72:	2100      	movs	r1, #0
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fe6e 	bl	8003756 <dir_next>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0c5      	beq.n	8003a10 <dir_find+0x24>
 8003a84:	e002      	b.n	8003a8c <dir_find+0xa0>
		if (res != FR_OK) break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003a8a:	bf00      	nop

	return res;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff1a 	bl	80038e0 <dir_alloc>
 8003aac:	4603      	mov	r3, r0
 8003aae:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d11c      	bne.n	8003af0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4619      	mov	r1, r3
 8003abc:	68b8      	ldr	r0, [r7, #8]
 8003abe:	f7ff fa4f 	bl	8002f60 <move_window>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f836 	bl	8002b46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a18      	ldr	r0, [r3, #32]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3324      	adds	r3, #36	; 0x24
 8003ae2:	220b      	movs	r2, #11
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7ff f80d 	bl	8002b04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2201      	movs	r2, #1
 8003aee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3324      	adds	r3, #36	; 0x24
 8003b10:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003b12:	220b      	movs	r2, #11
 8003b14:	2120      	movs	r1, #32
 8003b16:	68b8      	ldr	r0, [r7, #8]
 8003b18:	f7ff f815 	bl	8002b46 <mem_set>
	si = i = 0; ni = 8;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	2308      	movs	r3, #8
 8003b26:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003b36:	7efb      	ldrb	r3, [r7, #27]
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d94e      	bls.n	8003bda <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003b3c:	7efb      	ldrb	r3, [r7, #27]
 8003b3e:	2b2f      	cmp	r3, #47	; 0x2f
 8003b40:	d006      	beq.n	8003b50 <create_name+0x54>
 8003b42:	7efb      	ldrb	r3, [r7, #27]
 8003b44:	2b5c      	cmp	r3, #92	; 0x5c
 8003b46:	d110      	bne.n	8003b6a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003b48:	e002      	b.n	8003b50 <create_name+0x54>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b2f      	cmp	r3, #47	; 0x2f
 8003b5a:	d0f6      	beq.n	8003b4a <create_name+0x4e>
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b5c      	cmp	r3, #92	; 0x5c
 8003b66:	d0f0      	beq.n	8003b4a <create_name+0x4e>
			break;
 8003b68:	e038      	b.n	8003bdc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003b6a:	7efb      	ldrb	r3, [r7, #27]
 8003b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6e:	d003      	beq.n	8003b78 <create_name+0x7c>
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d30c      	bcc.n	8003b92 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b0b      	cmp	r3, #11
 8003b7c:	d002      	beq.n	8003b84 <create_name+0x88>
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	2b2e      	cmp	r3, #46	; 0x2e
 8003b82:	d001      	beq.n	8003b88 <create_name+0x8c>
 8003b84:	2306      	movs	r3, #6
 8003b86:	e044      	b.n	8003c12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003b88:	2308      	movs	r3, #8
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	230b      	movs	r3, #11
 8003b8e:	617b      	str	r3, [r7, #20]
			continue;
 8003b90:	e022      	b.n	8003bd8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003b92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da04      	bge.n	8003ba4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003b9a:	7efb      	ldrb	r3, [r7, #27]
 8003b9c:	3b80      	subs	r3, #128	; 0x80
 8003b9e:	4a1f      	ldr	r2, [pc, #124]	; (8003c1c <create_name+0x120>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003ba4:	7efb      	ldrb	r3, [r7, #27]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	481d      	ldr	r0, [pc, #116]	; (8003c20 <create_name+0x124>)
 8003baa:	f7ff f80e 	bl	8002bca <chk_chr>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <create_name+0xbc>
 8003bb4:	2306      	movs	r3, #6
 8003bb6:	e02c      	b.n	8003c12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003bb8:	7efb      	ldrb	r3, [r7, #27]
 8003bba:	2b60      	cmp	r3, #96	; 0x60
 8003bbc:	d905      	bls.n	8003bca <create_name+0xce>
 8003bbe:	7efb      	ldrb	r3, [r7, #27]
 8003bc0:	2b7a      	cmp	r3, #122	; 0x7a
 8003bc2:	d802      	bhi.n	8003bca <create_name+0xce>
 8003bc4:	7efb      	ldrb	r3, [r7, #27]
 8003bc6:	3b20      	subs	r3, #32
 8003bc8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	613a      	str	r2, [r7, #16]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	7efa      	ldrb	r2, [r7, #27]
 8003bd6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003bd8:	e7a6      	b.n	8003b28 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003bda:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	441a      	add	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <create_name+0xf4>
 8003bec:	2306      	movs	r3, #6
 8003bee:	e010      	b.n	8003c12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2be5      	cmp	r3, #229	; 0xe5
 8003bf6:	d102      	bne.n	8003bfe <create_name+0x102>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003bfe:	7efb      	ldrb	r3, [r7, #27]
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d801      	bhi.n	8003c08 <create_name+0x10c>
 8003c04:	2204      	movs	r2, #4
 8003c06:	e000      	b.n	8003c0a <create_name+0x10e>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	330b      	adds	r3, #11
 8003c0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003c10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08004fd0 	.word	0x08004fd0
 8003c20:	08004f7c 	.word	0x08004f7c

08003c24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c38:	e002      	b.n	8003c40 <follow_path+0x1c>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b2f      	cmp	r3, #47	; 0x2f
 8003c46:	d0f8      	beq.n	8003c3a <follow_path+0x16>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c4e:	d0f4      	beq.n	8003c3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b1f      	cmp	r3, #31
 8003c5c:	d80a      	bhi.n	8003c74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003c66:	2100      	movs	r1, #0
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fcf9 	bl	8003660 <dir_sdi>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
 8003c72:	e043      	b.n	8003cfc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003c74:	463b      	mov	r3, r7
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ff3f 	bl	8003afc <create_name>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d134      	bne.n	8003cf2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff feaf 	bl	80039ec <dir_find>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003c98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d127      	bne.n	8003cf6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d122      	bne.n	8003cf6 <follow_path+0xd2>
 8003cb0:	2305      	movs	r3, #5
 8003cb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003cb4:	e01f      	b.n	8003cf6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11c      	bne.n	8003cfa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	799b      	ldrb	r3, [r3, #6]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003ccc:	2305      	movs	r3, #5
 8003cce:	75fb      	strb	r3, [r7, #23]
 8003cd0:	e014      	b.n	8003cfc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fe42 	bl	800396e <ld_clust>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003cf0:	e7c0      	b.n	8003c74 <follow_path+0x50>
			if (res != FR_OK) break;
 8003cf2:	bf00      	nop
 8003cf4:	e002      	b.n	8003cfc <follow_path+0xd8>
				break;
 8003cf6:	bf00      	nop
 8003cf8:	e000      	b.n	8003cfc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003cfa:	bf00      	nop
			}
		}
	}

	return res;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d031      	beq.n	8003d80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e002      	b.n	8003d2a <get_ldnumber+0x24>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3301      	adds	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d903      	bls.n	8003d3a <get_ldnumber+0x34>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b3a      	cmp	r3, #58	; 0x3a
 8003d38:	d1f4      	bne.n	8003d24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b3a      	cmp	r3, #58	; 0x3a
 8003d40:	d11c      	bne.n	8003d7c <get_ldnumber+0x76>
			tp = *path;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	60fa      	str	r2, [r7, #12]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	3b30      	subs	r3, #48	; 0x30
 8003d52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b09      	cmp	r3, #9
 8003d58:	d80e      	bhi.n	8003d78 <get_ldnumber+0x72>
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10a      	bne.n	8003d78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <get_ldnumber+0x72>
					vol = (int)i;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	e002      	b.n	8003d82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003d80:	693b      	ldr	r3, [r7, #16]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	371c      	adds	r7, #28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	70da      	strb	r2, [r3, #3]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff f8d8 	bl	8002f60 <move_window>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <check_fs+0x2a>
 8003db6:	2304      	movs	r3, #4
 8003db8:	e038      	b.n	8003e2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3330      	adds	r3, #48	; 0x30
 8003dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fe1c 	bl	8002a00 <ld_word>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <check_fs+0x48>
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e029      	b.n	8003e2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dde:	2be9      	cmp	r3, #233	; 0xe9
 8003de0:	d009      	beq.n	8003df6 <check_fs+0x66>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003de8:	2beb      	cmp	r3, #235	; 0xeb
 8003dea:	d11e      	bne.n	8003e2a <check_fs+0x9a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003df2:	2b90      	cmp	r3, #144	; 0x90
 8003df4:	d119      	bne.n	8003e2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3330      	adds	r3, #48	; 0x30
 8003dfa:	3336      	adds	r3, #54	; 0x36
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fe17 	bl	8002a30 <ld_dword>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <check_fs+0xa4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <check_fs+0x82>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e00c      	b.n	8003e2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3330      	adds	r3, #48	; 0x30
 8003e16:	3352      	adds	r3, #82	; 0x52
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fe09 	bl	8002a30 <ld_dword>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <check_fs+0xa8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <check_fs+0x9a>
 8003e26:	2300      	movs	r3, #0
 8003e28:	e000      	b.n	8003e2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003e2a:	2302      	movs	r3, #2
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00544146 	.word	0x00544146
 8003e38:	33544146 	.word	0x33544146

08003e3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b096      	sub	sp, #88	; 0x58
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7ff ff58 	bl	8003d06 <get_ldnumber>
 8003e56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	da01      	bge.n	8003e62 <find_volume+0x26>
 8003e5e:	230b      	movs	r3, #11
 8003e60:	e22d      	b.n	80042be <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003e62:	4aa1      	ldr	r2, [pc, #644]	; (80040e8 <find_volume+0x2ac>)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <find_volume+0x3a>
 8003e72:	230c      	movs	r3, #12
 8003e74:	e223      	b.n	80042be <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01a      	beq.n	8003ec2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fd17 	bl	80028c4 <disk_status>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003e9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10c      	bne.n	8003ec2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d007      	beq.n	8003ebe <find_volume+0x82>
 8003eae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003eba:	230a      	movs	r3, #10
 8003ebc:	e1ff      	b.n	80042be <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e1fd      	b.n	80042be <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	785b      	ldrb	r3, [r3, #1]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fe fd0f 	bl	80028f8 <disk_initialize>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003ee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1e6      	b.n	80042be <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <find_volume+0xca>
 8003ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003f02:	230a      	movs	r3, #10
 8003f04:	e1db      	b.n	80042be <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f0e:	f7ff ff3f 	bl	8003d90 <check_fs>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d149      	bne.n	8003fb4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f20:	2300      	movs	r3, #0
 8003f22:	643b      	str	r3, [r7, #64]	; 0x40
 8003f24:	e01e      	b.n	8003f64 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003f34:	4413      	add	r3, r2
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d006      	beq.n	8003f50 <find_volume+0x114>
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	3308      	adds	r3, #8
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fd72 	bl	8002a30 <ld_dword>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	e000      	b.n	8003f52 <find_volume+0x116>
 8003f50:	2200      	movs	r2, #0
 8003f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	3358      	adds	r3, #88	; 0x58
 8003f58:	443b      	add	r3, r7
 8003f5a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f60:	3301      	adds	r3, #1
 8003f62:	643b      	str	r3, [r7, #64]	; 0x40
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d9dd      	bls.n	8003f26 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <find_volume+0x13e>
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	3b01      	subs	r3, #1
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3358      	adds	r3, #88	; 0x58
 8003f80:	443b      	add	r3, r7
 8003f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003f86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <find_volume+0x15e>
 8003f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f92:	f7ff fefd 	bl	8003d90 <check_fs>
 8003f96:	4603      	mov	r3, r0
 8003f98:	e000      	b.n	8003f9c <find_volume+0x160>
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d905      	bls.n	8003fb4 <find_volume+0x178>
 8003fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003faa:	3301      	adds	r3, #1
 8003fac:	643b      	str	r3, [r7, #64]	; 0x40
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d9e2      	bls.n	8003f7a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d101      	bne.n	8003fc0 <find_volume+0x184>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e17e      	b.n	80042be <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d901      	bls.n	8003fcc <find_volume+0x190>
 8003fc8:	230d      	movs	r3, #13
 8003fca:	e178      	b.n	80042be <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	3330      	adds	r3, #48	; 0x30
 8003fd0:	330b      	adds	r3, #11
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fd14 	bl	8002a00 <ld_word>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fde:	d001      	beq.n	8003fe4 <find_volume+0x1a8>
 8003fe0:	230d      	movs	r3, #13
 8003fe2:	e16c      	b.n	80042be <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	3330      	adds	r3, #48	; 0x30
 8003fe8:	3316      	adds	r3, #22
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fd08 	bl	8002a00 <ld_word>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <find_volume+0x1cc>
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	3330      	adds	r3, #48	; 0x30
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fd15 	bl	8002a30 <ld_dword>
 8004006:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	789b      	ldrb	r3, [r3, #2]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <find_volume+0x1f0>
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	789b      	ldrb	r3, [r3, #2]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d001      	beq.n	800402c <find_volume+0x1f0>
 8004028:	230d      	movs	r3, #13
 800402a:	e148      	b.n	80042be <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	461a      	mov	r2, r3
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b29a      	uxth	r2, r3
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	895b      	ldrh	r3, [r3, #10]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <find_volume+0x224>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	895b      	ldrh	r3, [r3, #10]
 8004052:	461a      	mov	r2, r3
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	895b      	ldrh	r3, [r3, #10]
 8004058:	3b01      	subs	r3, #1
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <find_volume+0x228>
 8004060:	230d      	movs	r3, #13
 8004062:	e12c      	b.n	80042be <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	3330      	adds	r3, #48	; 0x30
 8004068:	3311      	adds	r3, #17
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fcc8 	bl	8002a00 <ld_word>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	891b      	ldrh	r3, [r3, #8]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <find_volume+0x24e>
 8004086:	230d      	movs	r3, #13
 8004088:	e119      	b.n	80042be <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	3330      	adds	r3, #48	; 0x30
 800408e:	3313      	adds	r3, #19
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fcb5 	bl	8002a00 <ld_word>
 8004096:	4603      	mov	r3, r0
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <find_volume+0x272>
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	3330      	adds	r3, #48	; 0x30
 80040a4:	3320      	adds	r3, #32
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fcc2 	bl	8002a30 <ld_dword>
 80040ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	3330      	adds	r3, #48	; 0x30
 80040b2:	330e      	adds	r3, #14
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fca3 	bl	8002a00 <ld_word>
 80040ba:	4603      	mov	r3, r0
 80040bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80040be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <find_volume+0x28c>
 80040c4:	230d      	movs	r3, #13
 80040c6:	e0fa      	b.n	80042be <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80040c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80040ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040cc:	4413      	add	r3, r2
 80040ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d0:	8912      	ldrh	r2, [r2, #8]
 80040d2:	0912      	lsrs	r2, r2, #4
 80040d4:	b292      	uxth	r2, r2
 80040d6:	4413      	add	r3, r2
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80040da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	429a      	cmp	r2, r3
 80040e0:	d204      	bcs.n	80040ec <find_volume+0x2b0>
 80040e2:	230d      	movs	r3, #13
 80040e4:	e0eb      	b.n	80042be <find_volume+0x482>
 80040e6:	bf00      	nop
 80040e8:	200000b0 	.word	0x200000b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80040ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f4:	8952      	ldrh	r2, [r2, #10]
 80040f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <find_volume+0x2ca>
 8004102:	230d      	movs	r3, #13
 8004104:	e0db      	b.n	80042be <find_volume+0x482>
		fmt = FS_FAT32;
 8004106:	2303      	movs	r3, #3
 8004108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <find_volume+0x2e0>
 8004116:	2302      	movs	r3, #2
 8004118:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004122:	4293      	cmp	r3, r2
 8004124:	d802      	bhi.n	800412c <find_volume+0x2f0>
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004138:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800413a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800413c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413e:	441a      	add	r2, r3
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	441a      	add	r2, r3
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800414e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004152:	2b03      	cmp	r3, #3
 8004154:	d11e      	bne.n	8004194 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	3330      	adds	r3, #48	; 0x30
 800415a:	332a      	adds	r3, #42	; 0x2a
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fc4f 	bl	8002a00 <ld_word>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <find_volume+0x330>
 8004168:	230d      	movs	r3, #13
 800416a:	e0a8      	b.n	80042be <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	891b      	ldrh	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <find_volume+0x33c>
 8004174:	230d      	movs	r3, #13
 8004176:	e0a2      	b.n	80042be <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	3330      	adds	r3, #48	; 0x30
 800417c:	332c      	adds	r3, #44	; 0x2c
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fc56 	bl	8002a30 <ld_dword>
 8004184:	4602      	mov	r2, r0
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	e01f      	b.n	80041d4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	891b      	ldrh	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <find_volume+0x364>
 800419c:	230d      	movs	r3, #13
 800419e:	e08e      	b.n	80042be <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	6a1a      	ldr	r2, [r3, #32]
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	441a      	add	r2, r3
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80041ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d103      	bne.n	80041bc <find_volume+0x380>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	e00a      	b.n	80041d2 <find_volume+0x396>
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	085a      	lsrs	r2, r3, #1
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80041d2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041de:	0a5b      	lsrs	r3, r3, #9
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d201      	bcs.n	80041e8 <find_volume+0x3ac>
 80041e4:	230d      	movs	r3, #13
 80041e6:	e06a      	b.n	80042be <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ee:	611a      	str	r2, [r3, #16]
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80041fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004202:	2b03      	cmp	r3, #3
 8004204:	d149      	bne.n	800429a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	3330      	adds	r3, #48	; 0x30
 800420a:	3330      	adds	r3, #48	; 0x30
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fbf7 	bl	8002a00 <ld_word>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d140      	bne.n	800429a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421a:	3301      	adds	r3, #1
 800421c:	4619      	mov	r1, r3
 800421e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004220:	f7fe fe9e 	bl	8002f60 <move_window>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d137      	bne.n	800429a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	2200      	movs	r2, #0
 800422e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	3330      	adds	r3, #48	; 0x30
 8004234:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fbe1 	bl	8002a00 <ld_word>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004246:	429a      	cmp	r2, r3
 8004248:	d127      	bne.n	800429a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	3330      	adds	r3, #48	; 0x30
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fbee 	bl	8002a30 <ld_dword>
 8004254:	4603      	mov	r3, r0
 8004256:	4a1c      	ldr	r2, [pc, #112]	; (80042c8 <find_volume+0x48c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d11e      	bne.n	800429a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	3330      	adds	r3, #48	; 0x30
 8004260:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fbe3 	bl	8002a30 <ld_dword>
 800426a:	4603      	mov	r3, r0
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <find_volume+0x490>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d113      	bne.n	800429a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	3330      	adds	r3, #48	; 0x30
 8004276:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fbd8 	bl	8002a30 <ld_dword>
 8004280:	4602      	mov	r2, r0
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	3330      	adds	r3, #48	; 0x30
 800428a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fbce 	bl	8002a30 <ld_dword>
 8004294:	4602      	mov	r2, r0
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80042a0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <find_volume+0x494>)
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <find_volume+0x494>)
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <find_volume+0x494>)
 80042b0:	881a      	ldrh	r2, [r3, #0]
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80042b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042b8:	f7fe fdea 	bl	8002e90 <clear_lock>
#endif
	return FR_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3758      	adds	r7, #88	; 0x58
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	41615252 	.word	0x41615252
 80042cc:	61417272 	.word	0x61417272
 80042d0:	200000b4 	.word	0x200000b4

080042d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80042de:	2309      	movs	r3, #9
 80042e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01c      	beq.n	8004322 <validate+0x4e>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <validate+0x4e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d013      	beq.n	8004322 <validate+0x4e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	889a      	ldrh	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	88db      	ldrh	r3, [r3, #6]
 8004304:	429a      	cmp	r2, r3
 8004306:	d10c      	bne.n	8004322 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fad8 	bl	80028c4 <disk_status>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <validate+0x4e>
			res = FR_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <validate+0x5a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	e000      	b.n	8004330 <validate+0x5c>
 800432e:	2300      	movs	r3, #0
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	6013      	str	r3, [r2, #0]
	return res;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004352:	f107 0310 	add.w	r3, r7, #16
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fcd5 	bl	8003d06 <get_ldnumber>
 800435c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da01      	bge.n	8004368 <f_mount+0x28>
 8004364:	230b      	movs	r3, #11
 8004366:	e02b      	b.n	80043c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004368:	4a17      	ldr	r2, [pc, #92]	; (80043c8 <f_mount+0x88>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004378:	69b8      	ldr	r0, [r7, #24]
 800437a:	f7fe fd89 	bl	8002e90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	490d      	ldr	r1, [pc, #52]	; (80043c8 <f_mount+0x88>)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <f_mount+0x66>
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <f_mount+0x6a>
 80043a6:	2300      	movs	r3, #0
 80043a8:	e00a      	b.n	80043c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80043aa:	f107 010c 	add.w	r1, r7, #12
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	2200      	movs	r2, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fd41 	bl	8003e3c <find_volume>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3720      	adds	r7, #32
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	200000b0 	.word	0x200000b0

080043cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b098      	sub	sp, #96	; 0x60
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <f_open+0x18>
 80043e0:	2309      	movs	r3, #9
 80043e2:	e1ad      	b.n	8004740 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80043ec:	79fa      	ldrb	r2, [r7, #7]
 80043ee:	f107 0110 	add.w	r1, r7, #16
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fd20 	bl	8003e3c <find_volume>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 8191 	bne.w	800472e <f_open+0x362>
		dj.obj.fs = fs;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fc03 	bl	8003c24 <follow_path>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11a      	bne.n	8004462 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800442c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004430:	b25b      	sxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	da03      	bge.n	800443e <f_open+0x72>
				res = FR_INVALID_NAME;
 8004436:	2306      	movs	r3, #6
 8004438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800443c:	e011      	b.n	8004462 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fbd2 	bl	8002c00 <chk_lock>
 800445c:	4603      	mov	r3, r0
 800445e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	f003 031c 	and.w	r3, r3, #28
 8004468:	2b00      	cmp	r3, #0
 800446a:	d07f      	beq.n	800456c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800446c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004470:	2b00      	cmp	r3, #0
 8004472:	d017      	beq.n	80044a4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004478:	2b04      	cmp	r3, #4
 800447a:	d10e      	bne.n	800449a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800447c:	f7fe fc1c 	bl	8002cb8 <enq_lock>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d006      	beq.n	8004494 <f_open+0xc8>
 8004486:	f107 0314 	add.w	r3, r7, #20
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fb03 	bl	8003a96 <dir_register>
 8004490:	4603      	mov	r3, r0
 8004492:	e000      	b.n	8004496 <f_open+0xca>
 8004494:	2312      	movs	r3, #18
 8004496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	71fb      	strb	r3, [r7, #7]
 80044a2:	e010      	b.n	80044c6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80044a4:	7ebb      	ldrb	r3, [r7, #26]
 80044a6:	f003 0311 	and.w	r3, r3, #17
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <f_open+0xea>
					res = FR_DENIED;
 80044ae:	2307      	movs	r3, #7
 80044b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80044b4:	e007      	b.n	80044c6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <f_open+0xfa>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80044c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d168      	bne.n	80045a0 <f_open+0x1d4>
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d063      	beq.n	80045a0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80044d8:	f7fd fcb6 	bl	8001e48 <get_fattime>
 80044dc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	330e      	adds	r3, #14
 80044e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe fae1 	bl	8002aac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	3316      	adds	r3, #22
 80044ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fadb 	bl	8002aac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	330b      	adds	r3, #11
 80044fa:	2220      	movs	r2, #32
 80044fc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fa32 	bl	800396e <ld_clust>
 800450a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004510:	2200      	movs	r2, #0
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fa4a 	bl	80039ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	331c      	adds	r3, #28
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fac4 	bl	8002aac <st_dword>
					fs->wflag = 1;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2201      	movs	r2, #1
 8004528:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800452a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d037      	beq.n	80045a0 <f_open+0x1d4>
						dw = fs->winsect;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004536:	f107 0314 	add.w	r3, r7, #20
 800453a:	2200      	movs	r2, #0
 800453c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe ff5d 	bl	80033fe <remove_chain>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800454a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800454e:	2b00      	cmp	r3, #0
 8004550:	d126      	bne.n	80045a0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fd02 	bl	8002f60 <move_window>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004566:	3a01      	subs	r2, #1
 8004568:	60da      	str	r2, [r3, #12]
 800456a:	e019      	b.n	80045a0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800456c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004570:	2b00      	cmp	r3, #0
 8004572:	d115      	bne.n	80045a0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004574:	7ebb      	ldrb	r3, [r7, #26]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <f_open+0x1ba>
					res = FR_NO_FILE;
 800457e:	2304      	movs	r3, #4
 8004580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004584:	e00c      	b.n	80045a0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <f_open+0x1d4>
 8004590:	7ebb      	ldrb	r3, [r7, #26]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <f_open+0x1d4>
						res = FR_DENIED;
 800459a:	2307      	movs	r3, #7
 800459c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80045a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d128      	bne.n	80045fa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80045c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	bf14      	ite	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	2300      	moveq	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fb8b 	bl	8002cfc <inc_lock>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <f_open+0x22e>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80045fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 8095 	bne.w	800472e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f9af 	bl	800396e <ld_clust>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	331c      	adds	r3, #28
 800461a:	4618      	mov	r0, r3
 800461c:	f7fe fa08 	bl	8002a30 <ld_dword>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	88da      	ldrh	r2, [r3, #6]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	79fa      	ldrb	r2, [r7, #7]
 800463e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3330      	adds	r3, #48	; 0x30
 8004656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fa72 	bl	8002b46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b00      	cmp	r3, #0
 800466a:	d060      	beq.n	800472e <f_open+0x362>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d05c      	beq.n	800472e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	895b      	ldrh	r3, [r3, #10]
 8004680:	025b      	lsls	r3, r3, #9
 8004682:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
 8004690:	e016      	b.n	80046c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fd1d 	bl	80030d6 <get_fat>
 800469c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800469e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d802      	bhi.n	80046aa <f_open+0x2de>
 80046a4:	2302      	movs	r3, #2
 80046a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80046aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b0:	d102      	bne.n	80046b8 <f_open+0x2ec>
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80046b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	657b      	str	r3, [r7, #84]	; 0x54
 80046c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <f_open+0x304>
 80046c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d8e0      	bhi.n	8004692 <f_open+0x2c6>
				}
				fp->clust = clst;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80046d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d127      	bne.n	800472e <f_open+0x362>
 80046de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe fcd3 	bl	8003098 <clust2sect>
 80046f2:	6478      	str	r0, [r7, #68]	; 0x44
 80046f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <f_open+0x336>
						res = FR_INT_ERR;
 80046fa:	2302      	movs	r3, #2
 80046fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004700:	e015      	b.n	800472e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004704:	0a5a      	lsrs	r2, r3, #9
 8004706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	7858      	ldrb	r0, [r3, #1]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	2301      	movs	r3, #1
 800471e:	f7fe f911 	bl	8002944 <disk_read>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <f_open+0x362>
 8004728:	2301      	movs	r3, #1
 800472a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800472e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <f_open+0x370>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800473c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004740:	4618      	mov	r0, r3
 8004742:	3760      	adds	r7, #96	; 0x60
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f107 0214 	add.w	r2, r7, #20
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fdb3 	bl	80042d4 <validate>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004774:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004778:	2b00      	cmp	r3, #0
 800477a:	d107      	bne.n	800478c <f_read+0x44>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	7d5b      	ldrb	r3, [r3, #21]
 8004780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <f_read+0x4a>
 800478c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004790:	e115      	b.n	80049be <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	7d1b      	ldrb	r3, [r3, #20]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <f_read+0x5a>
 800479e:	2307      	movs	r3, #7
 80047a0:	e10d      	b.n	80049be <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	f240 80fe 	bls.w	80049b4 <f_read+0x26c>
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80047bc:	e0fa      	b.n	80049b4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80c6 	bne.w	8004958 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0a5b      	lsrs	r3, r3, #9
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	8952      	ldrh	r2, [r2, #10]
 80047d6:	3a01      	subs	r2, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d12f      	bne.n	8004842 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
 80047f0:	e013      	b.n	800481a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7fe fef9 	bl	80035f8 <clmt_clust>
 8004806:	6338      	str	r0, [r7, #48]	; 0x30
 8004808:	e007      	b.n	800481a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fe fc5f 	bl	80030d6 <get_fat>
 8004818:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2b01      	cmp	r3, #1
 800481e:	d804      	bhi.n	800482a <f_read+0xe2>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2202      	movs	r2, #2
 8004824:	755a      	strb	r2, [r3, #21]
 8004826:	2302      	movs	r3, #2
 8004828:	e0c9      	b.n	80049be <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004830:	d104      	bne.n	800483c <f_read+0xf4>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	755a      	strb	r2, [r3, #21]
 8004838:	2301      	movs	r3, #1
 800483a:	e0c0      	b.n	80049be <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004840:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f7fe fc24 	bl	8003098 <clust2sect>
 8004850:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <f_read+0x11a>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2202      	movs	r2, #2
 800485c:	755a      	strb	r2, [r3, #21]
 800485e:	2302      	movs	r3, #2
 8004860:	e0ad      	b.n	80049be <f_read+0x276>
			sect += csect;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0a5b      	lsrs	r3, r3, #9
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	d039      	beq.n	80048ea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	4413      	add	r3, r2
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	8952      	ldrh	r2, [r2, #10]
 8004880:	4293      	cmp	r3, r2
 8004882:	d905      	bls.n	8004890 <f_read+0x148>
					cc = fs->csize - csect;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	895b      	ldrh	r3, [r3, #10]
 8004888:	461a      	mov	r2, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	7858      	ldrb	r0, [r3, #1]
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800489a:	f7fe f853 	bl	8002944 <disk_read>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <f_read+0x166>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	755a      	strb	r2, [r3, #21]
 80048aa:	2301      	movs	r3, #1
 80048ac:	e087      	b.n	80049be <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	7d1b      	ldrb	r3, [r3, #20]
 80048b2:	b25b      	sxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	da14      	bge.n	80048e2 <f_read+0x19a>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d90d      	bls.n	80048e2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a1a      	ldr	r2, [r3, #32]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	025b      	lsls	r3, r3, #9
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	18d0      	adds	r0, r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3330      	adds	r3, #48	; 0x30
 80048d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048dc:	4619      	mov	r1, r3
 80048de:	f7fe f911 	bl	8002b04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	025b      	lsls	r3, r3, #9
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80048e8:	e050      	b.n	800498c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d02e      	beq.n	8004952 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	7d1b      	ldrb	r3, [r3, #20]
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	da18      	bge.n	8004930 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	7858      	ldrb	r0, [r3, #1]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	2301      	movs	r3, #1
 800490e:	f7fe f839 	bl	8002984 <disk_write>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <f_read+0x1da>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	755a      	strb	r2, [r3, #21]
 800491e:	2301      	movs	r3, #1
 8004920:	e04d      	b.n	80049be <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	7d1b      	ldrb	r3, [r3, #20]
 8004926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	7858      	ldrb	r0, [r3, #1]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800493a:	2301      	movs	r3, #1
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	f7fe f801 	bl	8002944 <disk_read>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <f_read+0x20a>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2201      	movs	r2, #1
 800494c:	755a      	strb	r2, [r3, #21]
 800494e:	2301      	movs	r3, #1
 8004950:	e035      	b.n	80049be <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d901      	bls.n	8004972 <f_read+0x22a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	4413      	add	r3, r2
 8004982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004984:	4619      	mov	r1, r3
 8004986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004988:	f7fe f8bc 	bl	8002b04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004990:	4413      	add	r3, r2
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	441a      	add	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	441a      	add	r2, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f47f af01 	bne.w	80047be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3738      	adds	r7, #56	; 0x38
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08c      	sub	sp, #48	; 0x30
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f107 0210 	add.w	r2, r7, #16
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fc74 	bl	80042d4 <validate>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80049f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <f_write+0x44>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	7d5b      	ldrb	r3, [r3, #21]
 80049fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <f_write+0x4a>
 8004a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a0e:	e14b      	b.n	8004ca8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	7d1b      	ldrb	r3, [r3, #20]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <f_write+0x5a>
 8004a1c:	2307      	movs	r3, #7
 8004a1e:	e143      	b.n	8004ca8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	699a      	ldr	r2, [r3, #24]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	441a      	add	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	f080 812d 	bcs.w	8004c8c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	43db      	mvns	r3, r3
 8004a38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004a3a:	e127      	b.n	8004c8c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f040 80e3 	bne.w	8004c10 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	0a5b      	lsrs	r3, r3, #9
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	8952      	ldrh	r2, [r2, #10]
 8004a54:	3a01      	subs	r2, #1
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d143      	bne.n	8004ae8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10c      	bne.n	8004a82 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d11a      	bne.n	8004aaa <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2100      	movs	r1, #0
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe fd25 	bl	80034c8 <create_chain>
 8004a7e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004a80:	e013      	b.n	8004aaa <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7fe fdb1 	bl	80035f8 <clmt_clust>
 8004a96:	62b8      	str	r0, [r7, #40]	; 0x28
 8004a98:	e007      	b.n	8004aaa <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fe fd10 	bl	80034c8 <create_chain>
 8004aa8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80f2 	beq.w	8004c96 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d104      	bne.n	8004ac2 <f_write+0xfc>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2202      	movs	r2, #2
 8004abc:	755a      	strb	r2, [r3, #21]
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e0f2      	b.n	8004ca8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac8:	d104      	bne.n	8004ad4 <f_write+0x10e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	755a      	strb	r2, [r3, #21]
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0e9      	b.n	8004ca8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <f_write+0x122>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	7d1b      	ldrb	r3, [r3, #20]
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	da18      	bge.n	8004b24 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	7858      	ldrb	r0, [r3, #1]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	2301      	movs	r3, #1
 8004b02:	f7fd ff3f 	bl	8002984 <disk_write>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <f_write+0x150>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	755a      	strb	r2, [r3, #21]
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0c8      	b.n	8004ca8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	7d1b      	ldrb	r3, [r3, #20]
 8004b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fe fab3 	bl	8003098 <clust2sect>
 8004b32:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <f_write+0x17e>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	755a      	strb	r2, [r3, #21]
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0b1      	b.n	8004ca8 <f_write+0x2e2>
			sect += csect;
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4413      	add	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0a5b      	lsrs	r3, r3, #9
 8004b50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03c      	beq.n	8004bd2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	8952      	ldrh	r2, [r2, #10]
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d905      	bls.n	8004b72 <f_write+0x1ac>
					cc = fs->csize - csect;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	895b      	ldrh	r3, [r3, #10]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	7858      	ldrb	r0, [r3, #1]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	69f9      	ldr	r1, [r7, #28]
 8004b7c:	f7fd ff02 	bl	8002984 <disk_write>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <f_write+0x1ca>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	755a      	strb	r2, [r3, #21]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e08b      	b.n	8004ca8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d915      	bls.n	8004bca <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	025b      	lsls	r3, r3, #9
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f7fd ffa4 	bl	8002b04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	7d1b      	ldrb	r3, [r3, #20]
 8004bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	025b      	lsls	r3, r3, #9
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004bd0:	e03f      	b.n	8004c52 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d016      	beq.n	8004c0a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d210      	bcs.n	8004c0a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	7858      	ldrb	r0, [r3, #1]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	f7fd fea5 	bl	8002944 <disk_read>
 8004bfa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	755a      	strb	r2, [r3, #21]
 8004c06:	2301      	movs	r3, #1
 8004c08:	e04e      	b.n	8004ca8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d901      	bls.n	8004c2a <f_write+0x264>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	4413      	add	r3, r2
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	69f9      	ldr	r1, [r7, #28]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fd ff60 	bl	8002b04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	7d1b      	ldrb	r3, [r3, #20]
 8004c48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	4413      	add	r3, r2
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	619a      	str	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf38      	it	cc
 8004c72:	461a      	movcc	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	441a      	add	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f47f aed4 	bne.w	8004a3c <f_write+0x76>
 8004c94:	e000      	b.n	8004c98 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004c96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	7d1b      	ldrb	r3, [r3, #20]
 8004c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3730      	adds	r7, #48	; 0x30
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f107 0208 	add.w	r2, r7, #8
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fb07 	bl	80042d4 <validate>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d168      	bne.n	8004da2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7d1b      	ldrb	r3, [r3, #20]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d062      	beq.n	8004da2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	7d1b      	ldrb	r3, [r3, #20]
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da15      	bge.n	8004d12 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	7858      	ldrb	r0, [r3, #1]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f7fd fe45 	bl	8002984 <disk_write>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <f_sync+0x54>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e04f      	b.n	8004da4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7d1b      	ldrb	r3, [r3, #20]
 8004d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004d12:	f7fd f899 	bl	8001e48 <get_fattime>
 8004d16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe f91d 	bl	8002f60 <move_window>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d138      	bne.n	8004da2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	330b      	adds	r3, #11
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	330b      	adds	r3, #11
 8004d40:	f042 0220 	orr.w	r2, r2, #32
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	f7fe fe2a 	bl	80039ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f103 021c 	add.w	r2, r3, #28
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fd fea1 	bl	8002aac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3316      	adds	r3, #22
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fd fe9b 	bl	8002aac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3312      	adds	r3, #18
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd fe7a 	bl	8002a76 <st_word>
					fs->wflag = 1;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2201      	movs	r2, #1
 8004d86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe f916 	bl	8002fbc <sync_fs>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7d1b      	ldrb	r3, [r3, #20]
 8004d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ff7b 	bl	8004cb0 <f_sync>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d118      	bne.n	8004df6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f107 0208 	add.w	r2, r7, #8
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff fa81 	bl	80042d4 <validate>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10c      	bne.n	8004df6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe f819 	bl	8002e18 <dec_lock>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e18:	7a5b      	ldrb	r3, [r3, #9]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d131      	bne.n	8004e84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004e20:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e22:	7a5b      	ldrb	r3, [r3, #9]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004e2e:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e30:	7a5b      	ldrb	r3, [r3, #9]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e40:	7a5b      	ldrb	r3, [r3, #9]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	79fa      	ldrb	r2, [r7, #7]
 8004e4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e50:	7a5b      	ldrb	r3, [r3, #9]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	b2d1      	uxtb	r1, r2
 8004e58:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <FATFS_LinkDriverEx+0x94>)
 8004e5a:	7251      	strb	r1, [r2, #9]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004e5e:	7dbb      	ldrb	r3, [r7, #22]
 8004e60:	3330      	adds	r3, #48	; 0x30
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	223a      	movs	r2, #58	; 0x3a
 8004e6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	3302      	adds	r3, #2
 8004e74:	222f      	movs	r2, #47	; 0x2f
 8004e76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	3303      	adds	r3, #3
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200000d8 	.word	0x200000d8

08004e98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ffaa 	bl	8004e00 <FATFS_LinkDriverEx>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4d0d      	ldr	r5, [pc, #52]	; (8004ef0 <__libc_init_array+0x38>)
 8004ebc:	4c0d      	ldr	r4, [pc, #52]	; (8004ef4 <__libc_init_array+0x3c>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	4d0b      	ldr	r5, [pc, #44]	; (8004ef8 <__libc_init_array+0x40>)
 8004eca:	4c0c      	ldr	r4, [pc, #48]	; (8004efc <__libc_init_array+0x44>)
 8004ecc:	f000 f820 	bl	8004f10 <_init>
 8004ed0:	1b64      	subs	r4, r4, r5
 8004ed2:	10a4      	asrs	r4, r4, #2
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	08005058 	.word	0x08005058
 8004ef4:	08005058 	.word	0x08005058
 8004ef8:	08005058 	.word	0x08005058
 8004efc:	0800505c 	.word	0x0800505c

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <_init>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr

08004f1c <_fini>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr
