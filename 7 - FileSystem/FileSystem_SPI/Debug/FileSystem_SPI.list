
FileSystem_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007114  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c4c  20000024  0800780c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c70  0800780c  00022c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9b6  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285f  00000000  00000000  0002fa0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00032270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00033010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c3e  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a15  00000000  00000000  000548a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbe22  00000000  00000000  000672bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001230dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b4  00000000  00000000  00123130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080072c0 	.word	0x080072c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	080072c0 	.word	0x080072c0

08000204 <__aeabi_dmul>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000212:	bf1d      	ittte	ne
 8000214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000218:	ea94 0f0c 	teqne	r4, ip
 800021c:	ea95 0f0c 	teqne	r5, ip
 8000220:	f000 f8de 	bleq	80003e0 <__aeabi_dmul+0x1dc>
 8000224:	442c      	add	r4, r5
 8000226:	ea81 0603 	eor.w	r6, r1, r3
 800022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000236:	bf18      	it	ne
 8000238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800023c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000244:	d038      	beq.n	80002b8 <__aeabi_dmul+0xb4>
 8000246:	fba0 ce02 	umull	ip, lr, r0, r2
 800024a:	f04f 0500 	mov.w	r5, #0
 800024e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000256:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025a:	f04f 0600 	mov.w	r6, #0
 800025e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000262:	f09c 0f00 	teq	ip, #0
 8000266:	bf18      	it	ne
 8000268:	f04e 0e01 	orrne.w	lr, lr, #1
 800026c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000278:	d204      	bcs.n	8000284 <__aeabi_dmul+0x80>
 800027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027e:	416d      	adcs	r5, r5
 8000280:	eb46 0606 	adc.w	r6, r6, r6
 8000284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800029c:	bf88      	it	hi
 800029e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a2:	d81e      	bhi.n	80002e2 <__aeabi_dmul+0xde>
 80002a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002bc:	ea46 0101 	orr.w	r1, r6, r1
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	ea81 0103 	eor.w	r1, r1, r3
 80002c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002cc:	bfc2      	ittt	gt
 80002ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	popgt	{r4, r5, r6, pc}
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f04f 0e00 	mov.w	lr, #0
 80002e0:	3c01      	subs	r4, #1
 80002e2:	f300 80ab 	bgt.w	800043c <__aeabi_dmul+0x238>
 80002e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ea:	bfde      	ittt	le
 80002ec:	2000      	movle	r0, #0
 80002ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f2:	bd70      	pople	{r4, r5, r6, pc}
 80002f4:	f1c4 0400 	rsb	r4, r4, #0
 80002f8:	3c20      	subs	r4, #32
 80002fa:	da35      	bge.n	8000368 <__aeabi_dmul+0x164>
 80002fc:	340c      	adds	r4, #12
 80002fe:	dc1b      	bgt.n	8000338 <__aeabi_dmul+0x134>
 8000300:	f104 0414 	add.w	r4, r4, #20
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f305 	lsl.w	r3, r0, r5
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f205 	lsl.w	r2, r1, r5
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800031c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	fa21 f604 	lsr.w	r6, r1, r4
 8000328:	eb42 0106 	adc.w	r1, r2, r6
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 040c 	rsb	r4, r4, #12
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f304 	lsl.w	r3, r0, r4
 8000344:	fa20 f005 	lsr.w	r0, r0, r5
 8000348:	fa01 f204 	lsl.w	r2, r1, r4
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	f141 0100 	adc.w	r1, r1, #0
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f205 	lsl.w	r2, r0, r5
 8000370:	ea4e 0e02 	orr.w	lr, lr, r2
 8000374:	fa20 f304 	lsr.w	r3, r0, r4
 8000378:	fa01 f205 	lsl.w	r2, r1, r5
 800037c:	ea43 0302 	orr.w	r3, r3, r2
 8000380:	fa21 f004 	lsr.w	r0, r1, r4
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	fa21 f204 	lsr.w	r2, r1, r4
 800038c:	ea20 0002 	bic.w	r0, r0, r2
 8000390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f094 0f00 	teq	r4, #0
 80003a4:	d10f      	bne.n	80003c6 <__aeabi_dmul+0x1c2>
 80003a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003aa:	0040      	lsls	r0, r0, #1
 80003ac:	eb41 0101 	adc.w	r1, r1, r1
 80003b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b4:	bf08      	it	eq
 80003b6:	3c01      	subeq	r4, #1
 80003b8:	d0f7      	beq.n	80003aa <__aeabi_dmul+0x1a6>
 80003ba:	ea41 0106 	orr.w	r1, r1, r6
 80003be:	f095 0f00 	teq	r5, #0
 80003c2:	bf18      	it	ne
 80003c4:	4770      	bxne	lr
 80003c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	eb43 0303 	adc.w	r3, r3, r3
 80003d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3d01      	subeq	r5, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1c6>
 80003da:	ea43 0306 	orr.w	r3, r3, r6
 80003de:	4770      	bx	lr
 80003e0:	ea94 0f0c 	teq	r4, ip
 80003e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e8:	bf18      	it	ne
 80003ea:	ea95 0f0c 	teqne	r5, ip
 80003ee:	d00c      	beq.n	800040a <__aeabi_dmul+0x206>
 80003f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f4:	bf18      	it	ne
 80003f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fa:	d1d1      	bne.n	80003a0 <__aeabi_dmul+0x19c>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040e:	bf06      	itte	eq
 8000410:	4610      	moveq	r0, r2
 8000412:	4619      	moveq	r1, r3
 8000414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000418:	d019      	beq.n	800044e <__aeabi_dmul+0x24a>
 800041a:	ea94 0f0c 	teq	r4, ip
 800041e:	d102      	bne.n	8000426 <__aeabi_dmul+0x222>
 8000420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000424:	d113      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000426:	ea95 0f0c 	teq	r5, ip
 800042a:	d105      	bne.n	8000438 <__aeabi_dmul+0x234>
 800042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000430:	bf1c      	itt	ne
 8000432:	4610      	movne	r0, r2
 8000434:	4619      	movne	r1, r3
 8000436:	d10a      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd70      	pop	{r4, r5, r6, pc}
 800044e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000456:	bd70      	pop	{r4, r5, r6, pc}

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	; 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000820:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000824:	f000 b974 	b.w	8000b10 <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	4604      	mov	r4, r0
 8000848:	468e      	mov	lr, r1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d14d      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084e:	428a      	cmp	r2, r1
 8000850:	4694      	mov	ip, r2
 8000852:	d969      	bls.n	8000928 <__udivmoddi4+0xe8>
 8000854:	fab2 f282 	clz	r2, r2
 8000858:	b152      	cbz	r2, 8000870 <__udivmoddi4+0x30>
 800085a:	fa01 f302 	lsl.w	r3, r1, r2
 800085e:	f1c2 0120 	rsb	r1, r2, #32
 8000862:	fa20 f101 	lsr.w	r1, r0, r1
 8000866:	fa0c fc02 	lsl.w	ip, ip, r2
 800086a:	ea41 0e03 	orr.w	lr, r1, r3
 800086e:	4094      	lsls	r4, r2
 8000870:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000874:	0c21      	lsrs	r1, r4, #16
 8000876:	fbbe f6f8 	udiv	r6, lr, r8
 800087a:	fa1f f78c 	uxth.w	r7, ip
 800087e:	fb08 e316 	mls	r3, r8, r6, lr
 8000882:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000886:	fb06 f107 	mul.w	r1, r6, r7
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000896:	f080 811f 	bcs.w	8000ad8 <__udivmoddi4+0x298>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 811c 	bls.w	8000ad8 <__udivmoddi4+0x298>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ac:	fb08 3310 	mls	r3, r8, r0, r3
 80008b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b4:	fb00 f707 	mul.w	r7, r0, r7
 80008b8:	42a7      	cmp	r7, r4
 80008ba:	d90a      	bls.n	80008d2 <__udivmoddi4+0x92>
 80008bc:	eb1c 0404 	adds.w	r4, ip, r4
 80008c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008c4:	f080 810a 	bcs.w	8000adc <__udivmoddi4+0x29c>
 80008c8:	42a7      	cmp	r7, r4
 80008ca:	f240 8107 	bls.w	8000adc <__udivmoddi4+0x29c>
 80008ce:	4464      	add	r4, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008d6:	1be4      	subs	r4, r4, r7
 80008d8:	2600      	movs	r6, #0
 80008da:	b11d      	cbz	r5, 80008e4 <__udivmoddi4+0xa4>
 80008dc:	40d4      	lsrs	r4, r2
 80008de:	2300      	movs	r3, #0
 80008e0:	e9c5 4300 	strd	r4, r3, [r5]
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0xc2>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	f000 80ef 	beq.w	8000ad2 <__udivmoddi4+0x292>
 80008f4:	2600      	movs	r6, #0
 80008f6:	e9c5 0100 	strd	r0, r1, [r5]
 80008fa:	4630      	mov	r0, r6
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	fab3 f683 	clz	r6, r3
 8000906:	2e00      	cmp	r6, #0
 8000908:	d14a      	bne.n	80009a0 <__udivmoddi4+0x160>
 800090a:	428b      	cmp	r3, r1
 800090c:	d302      	bcc.n	8000914 <__udivmoddi4+0xd4>
 800090e:	4282      	cmp	r2, r0
 8000910:	f200 80f9 	bhi.w	8000b06 <__udivmoddi4+0x2c6>
 8000914:	1a84      	subs	r4, r0, r2
 8000916:	eb61 0303 	sbc.w	r3, r1, r3
 800091a:	2001      	movs	r0, #1
 800091c:	469e      	mov	lr, r3
 800091e:	2d00      	cmp	r5, #0
 8000920:	d0e0      	beq.n	80008e4 <__udivmoddi4+0xa4>
 8000922:	e9c5 4e00 	strd	r4, lr, [r5]
 8000926:	e7dd      	b.n	80008e4 <__udivmoddi4+0xa4>
 8000928:	b902      	cbnz	r2, 800092c <__udivmoddi4+0xec>
 800092a:	deff      	udf	#255	; 0xff
 800092c:	fab2 f282 	clz	r2, r2
 8000930:	2a00      	cmp	r2, #0
 8000932:	f040 8092 	bne.w	8000a5a <__udivmoddi4+0x21a>
 8000936:	eba1 010c 	sub.w	r1, r1, ip
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f fe8c 	uxth.w	lr, ip
 8000942:	2601      	movs	r6, #1
 8000944:	0c20      	lsrs	r0, r4, #16
 8000946:	fbb1 f3f7 	udiv	r3, r1, r7
 800094a:	fb07 1113 	mls	r1, r7, r3, r1
 800094e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000952:	fb0e f003 	mul.w	r0, lr, r3
 8000956:	4288      	cmp	r0, r1
 8000958:	d908      	bls.n	800096c <__udivmoddi4+0x12c>
 800095a:	eb1c 0101 	adds.w	r1, ip, r1
 800095e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000962:	d202      	bcs.n	800096a <__udivmoddi4+0x12a>
 8000964:	4288      	cmp	r0, r1
 8000966:	f200 80cb 	bhi.w	8000b00 <__udivmoddi4+0x2c0>
 800096a:	4643      	mov	r3, r8
 800096c:	1a09      	subs	r1, r1, r0
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb1 f0f7 	udiv	r0, r1, r7
 8000974:	fb07 1110 	mls	r1, r7, r0, r1
 8000978:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800097c:	fb0e fe00 	mul.w	lr, lr, r0
 8000980:	45a6      	cmp	lr, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x156>
 8000984:	eb1c 0404 	adds.w	r4, ip, r4
 8000988:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800098c:	d202      	bcs.n	8000994 <__udivmoddi4+0x154>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f200 80bb 	bhi.w	8000b0a <__udivmoddi4+0x2ca>
 8000994:	4608      	mov	r0, r1
 8000996:	eba4 040e 	sub.w	r4, r4, lr
 800099a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800099e:	e79c      	b.n	80008da <__udivmoddi4+0x9a>
 80009a0:	f1c6 0720 	rsb	r7, r6, #32
 80009a4:	40b3      	lsls	r3, r6
 80009a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ae:	fa20 f407 	lsr.w	r4, r0, r7
 80009b2:	fa01 f306 	lsl.w	r3, r1, r6
 80009b6:	431c      	orrs	r4, r3
 80009b8:	40f9      	lsrs	r1, r7
 80009ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009be:	fa00 f306 	lsl.w	r3, r0, r6
 80009c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80009c6:	0c20      	lsrs	r0, r4, #16
 80009c8:	fa1f fe8c 	uxth.w	lr, ip
 80009cc:	fb09 1118 	mls	r1, r9, r8, r1
 80009d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d4:	fb08 f00e 	mul.w	r0, r8, lr
 80009d8:	4288      	cmp	r0, r1
 80009da:	fa02 f206 	lsl.w	r2, r2, r6
 80009de:	d90b      	bls.n	80009f8 <__udivmoddi4+0x1b8>
 80009e0:	eb1c 0101 	adds.w	r1, ip, r1
 80009e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009e8:	f080 8088 	bcs.w	8000afc <__udivmoddi4+0x2bc>
 80009ec:	4288      	cmp	r0, r1
 80009ee:	f240 8085 	bls.w	8000afc <__udivmoddi4+0x2bc>
 80009f2:	f1a8 0802 	sub.w	r8, r8, #2
 80009f6:	4461      	add	r1, ip
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a00:	fb09 1110 	mls	r1, r9, r0, r1
 8000a04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a0c:	458e      	cmp	lr, r1
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x1e2>
 8000a10:	eb1c 0101 	adds.w	r1, ip, r1
 8000a14:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a18:	d26c      	bcs.n	8000af4 <__udivmoddi4+0x2b4>
 8000a1a:	458e      	cmp	lr, r1
 8000a1c:	d96a      	bls.n	8000af4 <__udivmoddi4+0x2b4>
 8000a1e:	3802      	subs	r0, #2
 8000a20:	4461      	add	r1, ip
 8000a22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a26:	fba0 9402 	umull	r9, r4, r0, r2
 8000a2a:	eba1 010e 	sub.w	r1, r1, lr
 8000a2e:	42a1      	cmp	r1, r4
 8000a30:	46c8      	mov	r8, r9
 8000a32:	46a6      	mov	lr, r4
 8000a34:	d356      	bcc.n	8000ae4 <__udivmoddi4+0x2a4>
 8000a36:	d053      	beq.n	8000ae0 <__udivmoddi4+0x2a0>
 8000a38:	b15d      	cbz	r5, 8000a52 <__udivmoddi4+0x212>
 8000a3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000a3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000a42:	fa01 f707 	lsl.w	r7, r1, r7
 8000a46:	fa22 f306 	lsr.w	r3, r2, r6
 8000a4a:	40f1      	lsrs	r1, r6
 8000a4c:	431f      	orrs	r7, r3
 8000a4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000a52:	2600      	movs	r6, #0
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	f1c2 0320 	rsb	r3, r2, #32
 8000a5e:	40d8      	lsrs	r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	fa21 f303 	lsr.w	r3, r1, r3
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a70:	fa1f fe8c 	uxth.w	lr, ip
 8000a74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a78:	fb07 3610 	mls	r6, r7, r0, r3
 8000a7c:	0c0b      	lsrs	r3, r1, #16
 8000a7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a82:	fb00 f60e 	mul.w	r6, r0, lr
 8000a86:	429e      	cmp	r6, r3
 8000a88:	fa04 f402 	lsl.w	r4, r4, r2
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x260>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a96:	d22f      	bcs.n	8000af8 <__udivmoddi4+0x2b8>
 8000a98:	429e      	cmp	r6, r3
 8000a9a:	d92d      	bls.n	8000af8 <__udivmoddi4+0x2b8>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	b289      	uxth	r1, r1
 8000aa4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aa8:	fb07 3316 	mls	r3, r7, r6, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x28a>
 8000ab8:	eb1c 0101 	adds.w	r1, ip, r1
 8000abc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ac0:	d216      	bcs.n	8000af0 <__udivmoddi4+0x2b0>
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d914      	bls.n	8000af0 <__udivmoddi4+0x2b0>
 8000ac6:	3e02      	subs	r6, #2
 8000ac8:	4461      	add	r1, ip
 8000aca:	1ac9      	subs	r1, r1, r3
 8000acc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ad0:	e738      	b.n	8000944 <__udivmoddi4+0x104>
 8000ad2:	462e      	mov	r6, r5
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e705      	b.n	80008e4 <__udivmoddi4+0xa4>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	e6e3      	b.n	80008a4 <__udivmoddi4+0x64>
 8000adc:	4618      	mov	r0, r3
 8000ade:	e6f8      	b.n	80008d2 <__udivmoddi4+0x92>
 8000ae0:	454b      	cmp	r3, r9
 8000ae2:	d2a9      	bcs.n	8000a38 <__udivmoddi4+0x1f8>
 8000ae4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ae8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aec:	3801      	subs	r0, #1
 8000aee:	e7a3      	b.n	8000a38 <__udivmoddi4+0x1f8>
 8000af0:	4646      	mov	r6, r8
 8000af2:	e7ea      	b.n	8000aca <__udivmoddi4+0x28a>
 8000af4:	4620      	mov	r0, r4
 8000af6:	e794      	b.n	8000a22 <__udivmoddi4+0x1e2>
 8000af8:	4640      	mov	r0, r8
 8000afa:	e7d1      	b.n	8000aa0 <__udivmoddi4+0x260>
 8000afc:	46d0      	mov	r8, sl
 8000afe:	e77b      	b.n	80009f8 <__udivmoddi4+0x1b8>
 8000b00:	3b02      	subs	r3, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	e732      	b.n	800096c <__udivmoddi4+0x12c>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e709      	b.n	800091e <__udivmoddi4+0xde>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e742      	b.n	8000996 <__udivmoddi4+0x156>

08000b10 <__aeabi_idiv0>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <SELECT+0x18>)
 8000b1e:	f001 fb39 	bl	8002194 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 f8b0 	bl	8001c88 <HAL_Delay>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020400 	.word	0x40020400

08000b30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <DESELECT+0x18>)
 8000b3a:	f001 fb2b 	bl	8002194 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f001 f8a2 	bl	8001c88 <HAL_Delay>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020400 	.word	0x40020400

08000b4c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b56:	bf00      	nop
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <SPI_TxByte+0x30>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d1f8      	bne.n	8000b58 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000b66:	1df9      	adds	r1, r7, #7
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <SPI_TxByte+0x30>)
 8000b6e:	f002 fafa 	bl	8003166 <HAL_SPI_Transmit>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000044 	.word	0x20000044

08000b80 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b8c:	bf00      	nop
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <SPI_TxBuffer+0x30>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d1f8      	bne.n	8000b8e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <SPI_TxBuffer+0x30>)
 8000ba4:	f002 fadf 	bl	8003166 <HAL_SPI_Transmit>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000044 	.word	0x20000044

08000bb4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bbe:	bf00      	nop
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <SPI_RxByte+0x34>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d1f8      	bne.n	8000bc0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	1df9      	adds	r1, r7, #7
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <SPI_RxByte+0x34>)
 8000bda:	f002 fc00 	bl	80033de <HAL_SPI_TransmitReceive>

	return data;
 8000bde:	79bb      	ldrb	r3, [r7, #6]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000044 	.word	0x20000044

08000bec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000bf4:	f7ff ffde 	bl	8000bb4 <SPI_RxByte>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <SD_ReadyWait+0x30>)
 8000c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c14:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c16:	f7ff ffcd 	bl	8000bb4 <SPI_RxByte>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2bff      	cmp	r3, #255	; 0xff
 8000c22:	d004      	beq.n	8000c2e <SD_ReadyWait+0x26>
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SD_ReadyWait+0x30>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f3      	bne.n	8000c16 <SD_ReadyWait+0xe>

	return res;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20002a2e 	.word	0x20002a2e

08000c3c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000c42:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c46:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000c48:	f7ff ff72 	bl	8000b30 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	e005      	b.n	8000c5e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	f7ff ff7a 	bl	8000b4c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	ddf6      	ble.n	8000c52 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000c64:	f7ff ff56 	bl	8000b14 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000c7c:	2395      	movs	r3, #149	; 0x95
 8000c7e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000c80:	463b      	mov	r3, r7
 8000c82:	2106      	movs	r1, #6
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff7b 	bl	8000b80 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c8a:	e002      	b.n	8000c92 <SD_PowerOn+0x56>
	{
		cnt--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c92:	f7ff ff8f 	bl	8000bb4 <SPI_RxByte>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <SD_PowerOn+0x66>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f4      	bne.n	8000c8c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ca2:	f7ff ff45 	bl	8000b30 <DESELECT>
	SPI_TxByte(0XFF);
 8000ca6:	20ff      	movs	r0, #255	; 0xff
 8000ca8:	f7ff ff50 	bl	8000b4c <SPI_TxByte>

	PowerFlag = 1;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <SD_PowerOn+0x80>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000041 	.word	0x20000041

08000cc0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <SD_PowerOff+0x14>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000041 	.word	0x20000041

08000cd8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SD_CheckPower+0x14>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000041 	.word	0x20000041

08000cf0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <SD_RxDataBlock+0x5c>)
 8000cfc:	22c8      	movs	r2, #200	; 0xc8
 8000cfe:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d00:	f7ff ff58 	bl	8000bb4 <SPI_RxByte>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d104      	bne.n	8000d18 <SD_RxDataBlock+0x28>
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <SD_RxDataBlock+0x5c>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f3      	bne.n	8000d00 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d1c:	d001      	beq.n	8000d22 <SD_RxDataBlock+0x32>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e00f      	b.n	8000d42 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <SPI_RxBytePtr>
	} while(len--);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	603a      	str	r2, [r7, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f4      	bne.n	8000d22 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000d38:	f7ff ff3c 	bl	8000bb4 <SPI_RxByte>
	SPI_RxByte();
 8000d3c:	f7ff ff3a 	bl	8000bb4 <SPI_RxByte>

	return TRUE;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20002a2d 	.word	0x20002a2d

08000d50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000d60:	f7ff ff52 	bl	8000c08 <SD_ReadyWait>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d001      	beq.n	8000d6e <SD_TxDataBlock+0x1e>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e02f      	b.n	8000dce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff feeb 	bl	8000b4c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2bfd      	cmp	r3, #253	; 0xfd
 8000d7a:	d020      	beq.n	8000dbe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fefd 	bl	8000b80 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000d86:	f7ff ff15 	bl	8000bb4 <SPI_RxByte>
		SPI_RxByte();
 8000d8a:	f7ff ff13 	bl	8000bb4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000d8e:	e00b      	b.n	8000da8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000d90:	f7ff ff10 	bl	8000bb4 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	d006      	beq.n	8000db0 <SD_TxDataBlock+0x60>
			i++;
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	d9f0      	bls.n	8000d90 <SD_TxDataBlock+0x40>
 8000dae:	e000      	b.n	8000db2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000db0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000db2:	bf00      	nop
 8000db4:	f7ff fefe 	bl	8000bb4 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0fa      	beq.n	8000db4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d101      	bne.n	8000dcc <SD_TxDataBlock+0x7c>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <SD_TxDataBlock+0x7e>

	return FALSE;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	6039      	str	r1, [r7, #0]
 8000de0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000de2:	f7ff ff11 	bl	8000c08 <SD_ReadyWait>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d001      	beq.n	8000df0 <SD_SendCmd+0x1a>
 8000dec:	23ff      	movs	r3, #255	; 0xff
 8000dee:	e042      	b.n	8000e76 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feaa 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	0e1b      	lsrs	r3, r3, #24
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fea4 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe9e 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe98 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe93 	bl	8000b4c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b40      	cmp	r3, #64	; 0x40
 8000e2a:	d102      	bne.n	8000e32 <SD_SendCmd+0x5c>
 8000e2c:	2395      	movs	r3, #149	; 0x95
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e007      	b.n	8000e42 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b48      	cmp	r3, #72	; 0x48
 8000e36:	d102      	bne.n	8000e3e <SD_SendCmd+0x68>
 8000e38:	2387      	movs	r3, #135	; 0x87
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <SD_SendCmd+0x6c>
	else crc = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe81 	bl	8000b4c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b4c      	cmp	r3, #76	; 0x4c
 8000e4e:	d101      	bne.n	8000e54 <SD_SendCmd+0x7e>
 8000e50:	f7ff feb0 	bl	8000bb4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000e54:	230a      	movs	r3, #10
 8000e56:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000e58:	f7ff feac 	bl	8000bb4 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da05      	bge.n	8000e74 <SD_SendCmd+0x9e>
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	73bb      	strb	r3, [r7, #14]
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f1      	bne.n	8000e58 <SD_SendCmd+0x82>

	return res;
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SD_disk_initialize+0x14>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e0d6      	b.n	8001042 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <SD_disk_initialize+0x1cc>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <SD_disk_initialize+0x2a>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <SD_disk_initialize+0x1cc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	e0cb      	b.n	8001042 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000eaa:	f7ff fec7 	bl	8000c3c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000eae:	f7ff fe31 	bl	8000b14 <SELECT>

	/* check disk type */
	type = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2040      	movs	r0, #64	; 0x40
 8000eba:	f7ff ff8c 	bl	8000dd6 <SD_SendCmd>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	f040 80a6 	bne.w	8001012 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000ec6:	4b62      	ldr	r3, [pc, #392]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ecc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ece:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ed2:	2048      	movs	r0, #72	; 0x48
 8000ed4:	f7ff ff7f 	bl	8000dd6 <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d158      	bne.n	8000f90 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e00c      	b.n	8000efe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000ee4:	7bfc      	ldrb	r4, [r7, #15]
 8000ee6:	f7ff fe65 	bl	8000bb4 <SPI_RxByte>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	f104 0310 	add.w	r3, r4, #16
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d9ef      	bls.n	8000ee4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f04:	7abb      	ldrb	r3, [r7, #10]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 8083 	bne.w	8001012 <SD_disk_initialize+0x192>
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	2baa      	cmp	r3, #170	; 0xaa
 8000f10:	d17f      	bne.n	8001012 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f12:	2100      	movs	r1, #0
 8000f14:	2077      	movs	r0, #119	; 0x77
 8000f16:	f7ff ff5e 	bl	8000dd6 <SD_SendCmd>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d807      	bhi.n	8000f30 <SD_disk_initialize+0xb0>
 8000f20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f24:	2069      	movs	r0, #105	; 0x69
 8000f26:	f7ff ff56 	bl	8000dd6 <SD_SendCmd>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1eb      	bne.n	8000f12 <SD_disk_initialize+0x92>
 8000f3a:	e000      	b.n	8000f3e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f3c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d064      	beq.n	8001012 <SD_disk_initialize+0x192>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	207a      	movs	r0, #122	; 0x7a
 8000f4c:	f7ff ff43 	bl	8000dd6 <SD_SendCmd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d15d      	bne.n	8001012 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e00c      	b.n	8000f76 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000f5c:	7bfc      	ldrb	r4, [r7, #15]
 8000f5e:	f7ff fe29 	bl	8000bb4 <SPI_RxByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	f104 0310 	add.w	r3, r4, #16
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9ef      	bls.n	8000f5c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f7c:	7a3b      	ldrb	r3, [r7, #8]
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SD_disk_initialize+0x10a>
 8000f86:	230c      	movs	r3, #12
 8000f88:	e000      	b.n	8000f8c <SD_disk_initialize+0x10c>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e040      	b.n	8001012 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000f90:	2100      	movs	r1, #0
 8000f92:	2077      	movs	r0, #119	; 0x77
 8000f94:	f7ff ff1f 	bl	8000dd6 <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d808      	bhi.n	8000fb0 <SD_disk_initialize+0x130>
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2069      	movs	r0, #105	; 0x69
 8000fa2:	f7ff ff18 	bl	8000dd6 <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d801      	bhi.n	8000fb0 <SD_disk_initialize+0x130>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e000      	b.n	8000fb2 <SD_disk_initialize+0x132>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d10e      	bne.n	8000fd8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2077      	movs	r0, #119	; 0x77
 8000fbe:	f7ff ff0a 	bl	8000dd6 <SD_SendCmd>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d80e      	bhi.n	8000fe6 <SD_disk_initialize+0x166>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2069      	movs	r0, #105	; 0x69
 8000fcc:	f7ff ff03 	bl	8000dd6 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <SD_disk_initialize+0x166>
 8000fd6:	e00d      	b.n	8000ff4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2041      	movs	r0, #65	; 0x41
 8000fdc:	f7ff fefb 	bl	8000dd6 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e1      	bne.n	8000fb4 <SD_disk_initialize+0x134>
 8000ff0:	e000      	b.n	8000ff4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ff2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <SD_disk_initialize+0x18e>
 8000ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001002:	2050      	movs	r0, #80	; 0x50
 8001004:	f7ff fee7 	bl	8000dd6 <SD_SendCmd>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SD_disk_initialize+0x192>
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <SD_disk_initialize+0x1d4>)
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001018:	f7ff fd8a 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 800101c:	f7ff fdca 	bl	8000bb4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <SD_disk_initialize+0x1cc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <SD_disk_initialize+0x1cc>)
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e001      	b.n	800103c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001038:	f7ff fe42 	bl	8000cc0 <SD_PowerOff>
	}

	return Stat;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <SD_disk_initialize+0x1cc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000
 8001050:	20002a2d 	.word	0x20002a2d
 8001054:	20000040 	.word	0x20000040

08001058 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_disk_status+0x14>
 8001068:	2301      	movs	r3, #1
 800106a:	e002      	b.n	8001072 <SD_disk_status+0x1a>
	return Stat;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SD_disk_status+0x28>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000

08001084 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <SD_disk_read+0x1c>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <SD_disk_read+0x20>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e051      	b.n	8001148 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <SD_disk_read+0xcc>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SD_disk_read+0x32>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e048      	b.n	8001148 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SD_disk_read+0xd0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <SD_disk_read+0x44>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	607b      	str	r3, [r7, #4]

	SELECT();
 80010c8:	f7ff fd24 	bl	8000b14 <SELECT>

	if (count == 1)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d111      	bne.n	80010f6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2051      	movs	r0, #81	; 0x51
 80010d6:	f7ff fe7e 	bl	8000dd6 <SD_SendCmd>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d129      	bne.n	8001134 <SD_disk_read+0xb0>
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f7ff fe03 	bl	8000cf0 <SD_RxDataBlock>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <SD_disk_read+0xb0>
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	e01e      	b.n	8001134 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	2052      	movs	r0, #82	; 0x52
 80010fa:	f7ff fe6c 	bl	8000dd6 <SD_SendCmd>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d117      	bne.n	8001134 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001108:	68b8      	ldr	r0, [r7, #8]
 800110a:	f7ff fdf1 	bl	8000cf0 <SD_RxDataBlock>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00a      	beq.n	800112a <SD_disk_read+0xa6>
				buff += 512;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800111a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ed      	bne.n	8001104 <SD_disk_read+0x80>
 8001128:	e000      	b.n	800112c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800112a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	204c      	movs	r0, #76	; 0x4c
 8001130:	f7ff fe51 	bl	8000dd6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001134:	f7ff fcfc 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 8001138:	f7ff fd3c 	bl	8000bb4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000040 	.word	0x20000040

08001158 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <SD_disk_write+0x1c>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <SD_disk_write+0x20>
 8001174:	2304      	movs	r3, #4
 8001176:	e06b      	b.n	8001250 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <SD_disk_write+0x100>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SD_disk_write+0x32>
 8001186:	2303      	movs	r3, #3
 8001188:	e062      	b.n	8001250 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <SD_disk_write+0x100>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_write+0x44>
 8001198:	2302      	movs	r3, #2
 800119a:	e059      	b.n	8001250 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <SD_disk_write+0x104>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <SD_disk_write+0x56>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	607b      	str	r3, [r7, #4]

	SELECT();
 80011ae:	f7ff fcb1 	bl	8000b14 <SELECT>

	if (count == 1)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	2058      	movs	r0, #88	; 0x58
 80011bc:	f7ff fe0b 	bl	8000dd6 <SD_SendCmd>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d13a      	bne.n	800123c <SD_disk_write+0xe4>
 80011c6:	21fe      	movs	r1, #254	; 0xfe
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f7ff fdc1 	bl	8000d50 <SD_TxDataBlock>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d033      	beq.n	800123c <SD_disk_write+0xe4>
			count = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	e030      	b.n	800123c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <SD_disk_write+0x104>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2077      	movs	r0, #119	; 0x77
 80011ea:	f7ff fdf4 	bl	8000dd6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	2057      	movs	r0, #87	; 0x57
 80011f2:	f7ff fdf0 	bl	8000dd6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2059      	movs	r0, #89	; 0x59
 80011fa:	f7ff fdec 	bl	8000dd6 <SD_SendCmd>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001204:	21fc      	movs	r1, #252	; 0xfc
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f7ff fda2 	bl	8000d50 <SD_TxDataBlock>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <SD_disk_write+0xd0>
				buff += 512;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001218:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1ee      	bne.n	8001204 <SD_disk_write+0xac>
 8001226:	e000      	b.n	800122a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001228:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800122a:	21fd      	movs	r1, #253	; 0xfd
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fd8f 	bl	8000d50 <SD_TxDataBlock>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <SD_disk_write+0xe4>
			{
				count = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800123c:	f7ff fc78 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 8001240:	f7ff fcb8 	bl	8000bb4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000040 	.word	0x20000040

08001260 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08b      	sub	sp, #44	; 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	460b      	mov	r3, r1
 800126e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SD_disk_ioctl+0x1e>
 800127a:	2304      	movs	r3, #4
 800127c:	e115      	b.n	80014aa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d124      	bne.n	80012d4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d012      	beq.n	80012b8 <SD_disk_ioctl+0x58>
 8001292:	2b02      	cmp	r3, #2
 8001294:	dc1a      	bgt.n	80012cc <SD_disk_ioctl+0x6c>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <SD_disk_ioctl+0x40>
 800129a:	2b01      	cmp	r3, #1
 800129c:	d006      	beq.n	80012ac <SD_disk_ioctl+0x4c>
 800129e:	e015      	b.n	80012cc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80012a0:	f7ff fd0e 	bl	8000cc0 <SD_PowerOff>
			res = RES_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012aa:	e0fc      	b.n	80014a6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80012ac:	f7ff fcc6 	bl	8000c3c <SD_PowerOn>
			res = RES_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012b6:	e0f6      	b.n	80014a6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	1c5c      	adds	r4, r3, #1
 80012bc:	f7ff fd0c 	bl	8000cd8 <SD_CheckPower>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012ca:	e0ec      	b.n	80014a6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012d2:	e0e8      	b.n	80014a6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <SD_disk_ioctl+0x254>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SD_disk_ioctl+0x86>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0e1      	b.n	80014aa <SD_disk_ioctl+0x24a>

		SELECT();
 80012e6:	f7ff fc15 	bl	8000b14 <SELECT>

		switch (ctrl)
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b0d      	cmp	r3, #13
 80012ee:	f200 80cb 	bhi.w	8001488 <SD_disk_ioctl+0x228>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <SD_disk_ioctl+0x98>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	080013f3 	.word	0x080013f3
 80012fc:	08001331 	.word	0x08001331
 8001300:	080013e3 	.word	0x080013e3
 8001304:	08001489 	.word	0x08001489
 8001308:	08001489 	.word	0x08001489
 800130c:	08001489 	.word	0x08001489
 8001310:	08001489 	.word	0x08001489
 8001314:	08001489 	.word	0x08001489
 8001318:	08001489 	.word	0x08001489
 800131c:	08001489 	.word	0x08001489
 8001320:	08001489 	.word	0x08001489
 8001324:	08001405 	.word	0x08001405
 8001328:	08001429 	.word	0x08001429
 800132c:	0800144d 	.word	0x0800144d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001330:	2100      	movs	r1, #0
 8001332:	2049      	movs	r0, #73	; 0x49
 8001334:	f7ff fd4f 	bl	8000dd6 <SD_SendCmd>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80a8 	bne.w	8001490 <SD_disk_ioctl+0x230>
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2110      	movs	r1, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcd2 	bl	8000cf0 <SD_RxDataBlock>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 809e 	beq.w	8001490 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	099b      	lsrs	r3, r3, #6
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d10e      	bne.n	800137c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800135e:	7d7b      	ldrb	r3, [r7, #21]
 8001360:	b29a      	uxth	r2, r3
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	b29b      	uxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001372:	8bfb      	ldrh	r3, [r7, #30]
 8001374:	029a      	lsls	r2, r3, #10
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e02e      	b.n	80013da <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800137c:	7c7b      	ldrb	r3, [r7, #17]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	b2da      	uxtb	r2, r3
 8001384:	7dbb      	ldrb	r3, [r7, #22]
 8001386:	09db      	lsrs	r3, r3, #7
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b2da      	uxtb	r2, r3
 800138e:	7d7b      	ldrb	r3, [r7, #21]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0306 	and.w	r3, r3, #6
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3302      	adds	r3, #2
 80013a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013a4:	7d3b      	ldrb	r3, [r7, #20]
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7cbb      	ldrb	r3, [r7, #18]
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80013cc:	8bfa      	ldrh	r2, [r7, #30]
 80013ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013d2:	3b09      	subs	r3, #9
 80013d4:	409a      	lsls	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80013e0:	e056      	b.n	8001490 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013f0:	e055      	b.n	800149e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80013f2:	f7ff fc09 	bl	8000c08 <SD_ReadyWait>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d14b      	bne.n	8001494 <SD_disk_ioctl+0x234>
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001402:	e047      	b.n	8001494 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001404:	2100      	movs	r1, #0
 8001406:	2049      	movs	r0, #73	; 0x49
 8001408:	f7ff fce5 	bl	8000dd6 <SD_SendCmd>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d142      	bne.n	8001498 <SD_disk_ioctl+0x238>
 8001412:	2110      	movs	r1, #16
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f7ff fc6b 	bl	8000cf0 <SD_RxDataBlock>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d03b      	beq.n	8001498 <SD_disk_ioctl+0x238>
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001426:	e037      	b.n	8001498 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001428:	2100      	movs	r1, #0
 800142a:	204a      	movs	r0, #74	; 0x4a
 800142c:	f7ff fcd3 	bl	8000dd6 <SD_SendCmd>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d132      	bne.n	800149c <SD_disk_ioctl+0x23c>
 8001436:	2110      	movs	r1, #16
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f7ff fc59 	bl	8000cf0 <SD_RxDataBlock>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02b      	beq.n	800149c <SD_disk_ioctl+0x23c>
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800144a:	e027      	b.n	800149c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800144c:	2100      	movs	r1, #0
 800144e:	207a      	movs	r0, #122	; 0x7a
 8001450:	f7ff fcc1 	bl	8000dd6 <SD_SendCmd>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001460:	e00b      	b.n	800147a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001462:	6a3c      	ldr	r4, [r7, #32]
 8001464:	1c63      	adds	r3, r4, #1
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	f7ff fba4 	bl	8000bb4 <SPI_RxByte>
 800146c:	4603      	mov	r3, r0
 800146e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001474:	3301      	adds	r3, #1
 8001476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	2b03      	cmp	r3, #3
 8001480:	d9ef      	bls.n	8001462 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001488:	2304      	movs	r3, #4
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800148e:	e006      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001490:	bf00      	nop
 8001492:	e004      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001494:	bf00      	nop
 8001496:	e002      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001498:	bf00      	nop
 800149a:	e000      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 800149c:	bf00      	nop
		}

		DESELECT();
 800149e:	f7ff fb47 	bl	8000b30 <DESELECT>
		SPI_RxByte();
 80014a2:	f7ff fb87 	bl	8000bb4 <SPI_RxByte>
	}

	return res;
 80014a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	372c      	adds	r7, #44	; 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000

080014b8 <bufsize>:
DWORD fre_clust;
uint32_t total, free_space;


int bufsize (char *buff)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int i = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0') i++;
 80014c4:	e002      	b.n	80014cc <bufsize+0x14>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f6      	bne.n	80014c6 <bufsize+0xe>
	return i;
 80014d8:	68fb      	ldr	r3, [r7, #12]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <clear_buffer>:

void clear_buffer (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i ++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	e007      	b.n	8001504 <clear_buffer+0x1c>
		buffer[i] = '\0';
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <clear_buffer+0x34>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i ++)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150a:	dbf3      	blt.n	80014f4 <clear_buffer+0xc>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20002614 	.word	0x20002614

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 fb3e 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 f8a6 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f000 f974 	bl	8001818 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001530:	f000 f90c 	bl	800174c <MX_SPI1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001534:	f000 f940 	bl	80017b8 <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 8001538:	f002 fcba 	bl	8003eb0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&fs,"",0);
 800153c:	2200      	movs	r2, #0
 800153e:	4940      	ldr	r1, [pc, #256]	; (8001640 <main+0x120>)
 8001540:	4840      	ldr	r0, [pc, #256]	; (8001644 <main+0x124>)
 8001542:	f004 feff 	bl	8006344 <f_mount>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <main+0x128>)
 800154c:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <main+0x128>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <main+0x3a>
	  Error_Handler();
 8001556:	f000 f9af 	bl	80018b8 <Error_Handler>

  f_getfree("", &fre_clust, &pfs);
 800155a:	4a3c      	ldr	r2, [pc, #240]	; (800164c <main+0x12c>)
 800155c:	493c      	ldr	r1, [pc, #240]	; (8001650 <main+0x130>)
 800155e:	4838      	ldr	r0, [pc, #224]	; (8001640 <main+0x120>)
 8001560:	f005 fc9d 	bl	8006e9e <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <main+0x12c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b02      	subs	r3, #2
 800156c:	4a37      	ldr	r2, [pc, #220]	; (800164c <main+0x12c>)
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	8952      	ldrh	r2, [r2, #10]
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f8b0 	bl	80006dc <__aeabi_ui2d>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <main+0x134>)
 8001582:	f7fe fe3f 	bl	8000204 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff f91f 	bl	80007d0 <__aeabi_d2uiz>
 8001592:	4603      	mov	r3, r0
 8001594:	4a30      	ldr	r2, [pc, #192]	; (8001658 <main+0x138>)
 8001596:	6013      	str	r3, [r2, #0]
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <main+0x12c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	895b      	ldrh	r3, [r3, #10]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <main+0x130>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f897 	bl	80006dc <__aeabi_ui2d>
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <main+0x134>)
 80015b4:	f7fe fe26 	bl	8000204 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff f906 	bl	80007d0 <__aeabi_d2uiz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <main+0x13c>)
 80015c8:	6013      	str	r3, [r2, #0]

  fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80015ca:	220a      	movs	r2, #10
 80015cc:	4924      	ldr	r1, [pc, #144]	; (8001660 <main+0x140>)
 80015ce:	4825      	ldr	r0, [pc, #148]	; (8001664 <main+0x144>)
 80015d0:	f004 fefe 	bl	80063d0 <f_open>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <main+0x128>)
 80015da:	701a      	strb	r2, [r3, #0]

  /* Writing text */
  strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <main+0x148>)
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <main+0x14c>)
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	2357      	movs	r3, #87	; 0x57
 80015e6:	461a      	mov	r2, r3
 80015e8:	f005 fe54 	bl	8007294 <memcpy>

  fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 80015ec:	481e      	ldr	r0, [pc, #120]	; (8001668 <main+0x148>)
 80015ee:	f7ff ff63 	bl	80014b8 <bufsize>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <main+0x150>)
 80015f8:	491b      	ldr	r1, [pc, #108]	; (8001668 <main+0x148>)
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <main+0x144>)
 80015fc:	f005 fa13 	bl	8006a26 <f_write>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <main+0x128>)
 8001606:	701a      	strb	r2, [r3, #0]

  /* Close file */
  f_close(&fil);
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <main+0x144>)
 800160a:	f005 fc1e 	bl	8006e4a <f_close>

  // clearing buffer to show that result obtained is from the file
  clear_buffer();
 800160e:	f7ff ff6b 	bl	80014e8 <clear_buffer>

  /* Open second file to read */
  fresult = f_open(&fil, "file2.txt", FA_READ);
 8001612:	2201      	movs	r2, #1
 8001614:	4912      	ldr	r1, [pc, #72]	; (8001660 <main+0x140>)
 8001616:	4813      	ldr	r0, [pc, #76]	; (8001664 <main+0x144>)
 8001618:	f004 feda 	bl	80063d0 <f_open>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <main+0x128>)
 8001622:	701a      	strb	r2, [r3, #0]

  /* Read data from the file
   * Please see the function details for the arguments */
  f_read (&fil, buffer, f_size(&fil), &br);
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <main+0x144>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <main+0x154>)
 800162a:	490f      	ldr	r1, [pc, #60]	; (8001668 <main+0x148>)
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <main+0x144>)
 800162e:	f005 f89b 	bl	8006768 <f_read>

  /* Close file */
  f_close(&fil);
 8001632:	480c      	ldr	r0, [pc, #48]	; (8001664 <main+0x144>)
 8001634:	f005 fc09 	bl	8006e4a <f_close>

  clear_buffer();
 8001638:	f7ff ff56 	bl	80014e8 <clear_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800163c:	e7fe      	b.n	800163c <main+0x11c>
 800163e:	bf00      	nop
 8001640:	080072d8 	.word	0x080072d8
 8001644:	200005a8 	.word	0x200005a8
 8001648:	20002610 	.word	0x20002610
 800164c:	20002a1c 	.word	0x20002a1c
 8001650:	20002a20 	.word	0x20002a20
 8001654:	3fe00000 	.word	0x3fe00000
 8001658:	20002a24 	.word	0x20002a24
 800165c:	20002a28 	.word	0x20002a28
 8001660:	080072dc 	.word	0x080072dc
 8001664:	200015e0 	.word	0x200015e0
 8001668:	20002614 	.word	0x20002614
 800166c:	080072e8 	.word	0x080072e8
 8001670:	20002a18 	.word	0x20002a18
 8001674:	20002a14 	.word	0x20002a14

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	; 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2234      	movs	r2, #52	; 0x34
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 fe12 	bl	80072b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <SystemClock_Config+0xcc>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <SystemClock_Config+0xcc>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	; 0x40
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <SystemClock_Config+0xcc>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <SystemClock_Config+0xd0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <SystemClock_Config+0xd0>)
 80016c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <SystemClock_Config+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d0:	603b      	str	r3, [r7, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016e8:	2319      	movs	r3, #25
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80016ec:	2390      	movs	r3, #144	; 0x90
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fa23 	bl	8002b4c <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800170c:	f000 f8d4 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2102      	movs	r1, #2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fe93 	bl	8002458 <HAL_RCC_ClockConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001738:	f000 f8be 	bl	80018b8 <Error_Handler>
  }
}
 800173c:	bf00      	nop
 800173e:	3750      	adds	r7, #80	; 0x50
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000

0800174c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001752:	4a18      	ldr	r2, [pc, #96]	; (80017b4 <MX_SPI1_Init+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800175c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001780:	2210      	movs	r2, #16
 8001782:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI1_Init+0x64>)
 8001798:	220a      	movs	r2, #10
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_SPI1_Init+0x64>)
 800179e:	f001 fc59 	bl	8003054 <HAL_SPI_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a8:	f000 f886 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000044 	.word	0x20000044
 80017b4:	40013000 	.word	0x40013000

080017b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c6:	2206      	movs	r2, #6
 80017c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d8:	2202      	movs	r2, #2
 80017da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001802:	f000 fce0 	bl	80021c6 <HAL_PCD_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 f854 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000009c 	.word	0x2000009c

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_GPIO_Init+0x98>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_GPIO_Init+0x98>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_GPIO_Init+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2101      	movs	r1, #1
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <MX_GPIO_Init+0x9c>)
 8001888:	f000 fc84 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800188c:	2301      	movs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_GPIO_Init+0x9c>)
 80018a4:	f000 fafa 	bl	8001e9c <HAL_GPIO_Init>

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_MspInit+0x4c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_MspInit+0x4c>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_SPI_MspInit+0x84>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12b      	bne.n	800198e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_SPI_MspInit+0x88>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_SPI_MspInit+0x88>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_SPI_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800196e:	23e0      	movs	r3, #224	; 0xe0
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197e:	2305      	movs	r3, #5
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_SPI_MspInit+0x8c>)
 800198a:	f000 fa87 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40013000 	.word	0x40013000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b098      	sub	sp, #96	; 0x60
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	223c      	movs	r2, #60	; 0x3c
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fc73 	bl	80072b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019d2:	d140      	bne.n	8001a56 <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019d4:	2320      	movs	r3, #32
 80019d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80019d8:	2300      	movs	r3, #0
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fee5 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80019ec:	f7ff ff64 	bl	80018b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a1e:	230a      	movs	r3, #10
 8001a20:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a26:	4619      	mov	r1, r3
 8001a28:	480e      	ldr	r0, [pc, #56]	; (8001a64 <HAL_PCD_MspInit+0xc0>)
 8001a2a:	f000 fa37 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6353      	str	r3, [r2, #52]	; 0x34
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_PCD_MspInit+0xbc>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3760      	adds	r7, #96	; 0x60
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <SDTimer_Handler+0x40>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <SDTimer_Handler+0x1c>
		Timer1 --;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <SDTimer_Handler+0x40>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <SDTimer_Handler+0x40>)
 8001a82:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SDTimer_Handler+0x44>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <SDTimer_Handler+0x34>
		Timer2 --;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <SDTimer_Handler+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SDTimer_Handler+0x44>)
 8001a9a:	701a      	strb	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20002a2d 	.word	0x20002a2d
 8001aac:	20002a2e 	.word	0x20002a2e

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <SysTick_Handler+0x30>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SysTick_Handler+0x30>)
 8001b08:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <SysTick_Handler+0x30>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d904      	bls.n	8001b1e <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Handler+0x30>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001b1a:	f7ff ffa5 	bl	8001a68 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f893 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20002a2c 	.word	0x20002a2c

08001b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b56:	490e      	ldr	r1, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b58:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b6c:	4c0b      	ldr	r4, [pc, #44]	; (8001b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7a:	f7ff ffd7 	bl	8001b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f005 fb65 	bl	800724c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff fccd 	bl	8001520 <main>
  bx  lr    
 8001b86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b88:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001b94:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8001b98:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001b9c:	20002c70 	.word	0x20002c70

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_Init+0x40>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0d      	ldr	r2, [pc, #52]	; (8001be4 <HAL_Init+0x40>)
 8001bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_Init+0x40>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_Init+0x40>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bcc:	2003      	movs	r0, #3
 8001bce:	f000 f931 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd2:	200f      	movs	r0, #15
 8001bd4:	f000 f808 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd8:	f7ff fe74 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f93b 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c24:	f000 f911 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000008 	.word	0x20000008

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20002a30 	.word	0x20002a30

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20002a30 	.word	0x20002a30

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff47 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff5c 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb0 	bl	8001df0 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e153      	b.n	8002160 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8142 	bne.w	800215a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 809c 	beq.w	800215a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a53      	ldr	r2, [pc, #332]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_GPIO_Init+0x2dc>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a4f      	ldr	r2, [pc, #316]	; (800217c <HAL_GPIO_Init+0x2e0>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a46      	ldr	r2, [pc, #280]	; (8002180 <HAL_GPIO_Init+0x2e4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x1f6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a45      	ldr	r2, [pc, #276]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x1f2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a44      	ldr	r2, [pc, #272]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x1ee>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a43      	ldr	r2, [pc, #268]	; (800218c <HAL_GPIO_Init+0x2f0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x1ea>
 8002082:	2303      	movs	r3, #3
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x1f8>
 8002086:	2307      	movs	r3, #7
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x1f8>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x1f8>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x1f8>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2e0>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a23      	ldr	r2, [pc, #140]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212a:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002130:	4b17      	ldr	r3, [pc, #92]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f aea8 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c8:	b08f      	sub	sp, #60	; 0x3c
 80021ca:	af0a      	add	r7, sp, #40	; 0x28
 80021cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e116      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff fbd6 	bl	80019a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2203      	movs	r2, #3
 80021fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fbaf 	bl	800397a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f001 fb3a 	bl	80038b8 <USB_CoreInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0d7      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f001 fb9d 	bl	800399c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e04a      	b.n	80022fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	333d      	adds	r3, #61	; 0x3d
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	b298      	uxth	r0, r3
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3344      	adds	r3, #68	; 0x44
 80022a4:	4602      	mov	r2, r0
 80022a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	3340      	adds	r3, #64	; 0x40
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	3348      	adds	r3, #72	; 0x48
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334c      	adds	r3, #76	; 0x4c
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3354      	adds	r3, #84	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3af      	bcc.n	8002268 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e044      	b.n	8002398 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002324:	7bfa      	ldrb	r2, [r7, #15]
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	3301      	adds	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3b5      	bcc.n	800230e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	687e      	ldr	r6, [r7, #4]
 80023aa:	466d      	mov	r5, sp
 80023ac:	f106 0410 	add.w	r4, r6, #16
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c0:	1d33      	adds	r3, r6, #4
 80023c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c4:	6838      	ldr	r0, [r7, #0]
 80023c6:	f001 fb35 	bl	8003a34 <USB_DevInit>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e014      	b.n	8002406 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f80a 	bl	800240e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 fcf3 	bl	8003dea <USB_DevDisconnect>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800240e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	f043 0303 	orr.w	r3, r3, #3
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0cc      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b68      	ldr	r3, [pc, #416]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d90c      	bls.n	8002494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d044      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d119      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d003      	beq.n	8002516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e067      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4934      	ldr	r1, [pc, #208]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7ff fb92 	bl	8001c70 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff fb8e 	bl	8001c70 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e04f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d20c      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff faf2 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40023c00 	.word	0x40023c00
 8002614:	40023800 	.word	0x40023800
 8002618:	08007388 	.word	0x08007388
 800261c:	20000004 	.word	0x20000004
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002628:	b090      	sub	sp, #64	; 0x40
 800262a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
 8002630:	2300      	movs	r3, #0
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002634:	2300      	movs	r3, #0
 8002636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 8002648:	2b08      	cmp	r3, #8
 800264a:	f200 80a1 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x16c>
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x34>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x3a>
 8002656:	e09b      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800265c:	e09b      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265e:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002662:	e098      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002664:	4b4f      	ldr	r3, [pc, #316]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266e:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d028      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	2200      	movs	r2, #0
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	627a      	str	r2, [r7, #36]	; 0x24
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800268c:	2100      	movs	r1, #0
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002690:	fb03 f201 	mul.w	r2, r3, r1
 8002694:	2300      	movs	r3, #0
 8002696:	fb00 f303 	mul.w	r3, r0, r3
 800269a:	4413      	add	r3, r2
 800269c:	4a43      	ldr	r2, [pc, #268]	; (80027ac <HAL_RCC_GetSysClockFreq+0x188>)
 800269e:	fba0 1202 	umull	r1, r2, r0, r2
 80026a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026a4:	460a      	mov	r2, r1
 80026a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80026a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026aa:	4413      	add	r3, r2
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	2200      	movs	r2, #0
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	61fa      	str	r2, [r7, #28]
 80026b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026be:	f7fe f8a7 	bl	8000810 <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4613      	mov	r3, r2
 80026c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ca:	e053      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	2200      	movs	r2, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	617a      	str	r2, [r7, #20]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026de:	f04f 0b00 	mov.w	fp, #0
 80026e2:	4652      	mov	r2, sl
 80026e4:	465b      	mov	r3, fp
 80026e6:	f04f 0000 	mov.w	r0, #0
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	0159      	lsls	r1, r3, #5
 80026f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f4:	0150      	lsls	r0, r2, #5
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	ebb2 080a 	subs.w	r8, r2, sl
 80026fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800270e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002716:	ebb2 0408 	subs.w	r4, r2, r8
 800271a:	eb63 0509 	sbc.w	r5, r3, r9
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	00eb      	lsls	r3, r5, #3
 8002728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272c:	00e2      	lsls	r2, r4, #3
 800272e:	4614      	mov	r4, r2
 8002730:	461d      	mov	r5, r3
 8002732:	eb14 030a 	adds.w	r3, r4, sl
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	eb45 030b 	adc.w	r3, r5, fp
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274a:	4629      	mov	r1, r5
 800274c:	028b      	lsls	r3, r1, #10
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002754:	4621      	mov	r1, r4
 8002756:	028a      	lsls	r2, r1, #10
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275e:	2200      	movs	r2, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002768:	f7fe f852 	bl	8000810 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002798:	4618      	mov	r0, r3
 800279a:	3740      	adds	r7, #64	; 0x40
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	017d7840 	.word	0x017d7840

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027d0:	4b87      	ldr	r3, [pc, #540]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4984      	ldr	r1, [pc, #528]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80027fe:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4978      	ldr	r1, [pc, #480]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8083 	beq.w	8002934 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002856:	f7ff fa0b 	bl	8001c70 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800285e:	f7ff fa07 	bl	8001c70 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e162      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002870:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800287c:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02f      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	429a      	cmp	r2, r3
 8002898:	d028      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800289a:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a4:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028aa:	4b53      	ldr	r3, [pc, #332]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028b0:	4a4f      	ldr	r2, [pc, #316]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d114      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028c2:	f7ff f9d5 	bl	8001c70 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7ff f9d1 	bl	8001c70 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e12a      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ee      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f8:	d10d      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	4938      	ldr	r1, [pc, #224]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
 8002914:	e005      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002916:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800291c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002920:	6093      	str	r3, [r2, #8]
 8002922:	4b33      	ldr	r3, [pc, #204]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002924:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292e:	4930      	ldr	r1, [pc, #192]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002930:	4313      	orrs	r3, r2
 8002932:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002948:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	4922      	ldr	r1, [pc, #136]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d011      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	491a      	ldr	r1, [pc, #104]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002996:	d101      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	490e      	ldr	r1, [pc, #56]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d004      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	f040 8091 	bne.w	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029d4:	f7ff f94c 	bl	8001c70 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029da:	e013      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029dc:	f7ff f948 	bl	8001c70 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d90c      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0a3      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42470e40 	.word	0x42470e40
 80029fc:	424711e0 	.word	0x424711e0
 8002a00:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	4b4e      	ldr	r3, [pc, #312]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002a10:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a54:	d00e      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d019      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d110      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	019b      	lsls	r3, r3, #6
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	071b      	lsls	r3, r3, #28
 8002a8e:	492c      	ldr	r1, [pc, #176]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	071b      	lsls	r3, r3, #28
 8002abc:	4920      	ldr	r1, [pc, #128]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aca:	f7ff f8d1 	bl	8001c70 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ad2:	f7ff f8cd 	bl	8001c70 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e028      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	490d      	ldr	r1, [pc, #52]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b24:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4904      	ldr	r1, [pc, #16]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	424710d8 	.word	0x424710d8
 8002b48:	42470068 	.word	0x42470068

08002b4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e273      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d075      	beq.n	8002c56 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d00c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d112      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05b      	beq.n	8002c54 <HAL_RCC_OscConfig+0x108>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d157      	bne.n	8002c54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e24e      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x74>
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e01d      	b.n	8002bfc <HAL_RCC_OscConfig+0xb0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x98>
 8002bca:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6c      	ldr	r2, [pc, #432]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0xb0>
 8002be4:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a68      	ldr	r2, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7ff f834 	bl	8001c70 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f830 	bl	8001c70 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b64      	cmp	r3, #100	; 0x64
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e213      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0xc0>
 8002c2a:	e014      	b.n	8002c56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2c:	f7ff f820 	bl	8001c70 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7ff f81c 	bl	8001c70 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1ff      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0xe8>
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d11c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_RCC_OscConfig+0x152>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d001      	beq.n	8002c9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1d3      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4937      	ldr	r1, [pc, #220]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	e03a      	b.n	8002d2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d020      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cbc:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCC_OscConfig+0x244>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7fe ffd5 	bl	8001c70 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cca:	f7fe ffd1 	bl	8001c70 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e1b4      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4925      	ldr	r1, [pc, #148]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x244>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe ffb4 	bl	8001c70 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fe ffb0 	bl	8001c70 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e193      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d036      	beq.n	8002da4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_RCC_OscConfig+0x248>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fe ff94 	bl	8001c70 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fe ff90 	bl	8001c70 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e173      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x240>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x200>
 8002d6a:	e01b      	b.n	8002da4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_OscConfig+0x248>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe ff7d 	bl	8001c70 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	e00e      	b.n	8002d98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe ff79 	bl	8001c70 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d907      	bls.n	8002d98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e15c      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	42470000 	.word	0x42470000
 8002d94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	4b8a      	ldr	r3, [pc, #552]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ea      	bne.n	8002d7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8097 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db2:	2300      	movs	r3, #0
 8002db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db6:	4b83      	ldr	r3, [pc, #524]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a7e      	ldr	r2, [pc, #504]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b79      	ldr	r3, [pc, #484]	; (8002fc8 <HAL_RCC_OscConfig+0x47c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <HAL_RCC_OscConfig+0x47c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	; (8002fc8 <HAL_RCC_OscConfig+0x47c>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe ff39 	bl	8001c70 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7fe ff35 	bl	8001c70 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e118      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x47c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x2ea>
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a65      	ldr	r2, [pc, #404]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e01c      	b.n	8002e70 <HAL_RCC_OscConfig+0x324>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x30c>
 8002e3e:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6713      	str	r3, [r2, #112]	; 0x70
 8002e56:	e00b      	b.n	8002e70 <HAL_RCC_OscConfig+0x324>
 8002e58:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a59      	ldr	r2, [pc, #356]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a56      	ldr	r2, [pc, #344]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e6a:	f023 0304 	bic.w	r3, r3, #4
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d015      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fefa 	bl	8001c70 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe fef6 	bl	8001c70 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0d7      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e96:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0ee      	beq.n	8002e80 <HAL_RCC_OscConfig+0x334>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fee4 	bl	8001c70 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eac:	f7fe fee0 	bl	8001c70 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0c1      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec2:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ee      	bne.n	8002eac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4a3a      	ldr	r2, [pc, #232]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80ad 	beq.w	8003044 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d060      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d145      	bne.n	8002f8a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b33      	ldr	r3, [pc, #204]	; (8002fcc <HAL_RCC_OscConfig+0x480>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe feb4 	bl	8001c70 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe feb0 	bl	8001c70 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e093      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	491b      	ldr	r1, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCC_OscConfig+0x480>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fe fe85 	bl	8001c70 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fe fe81 	bl	8001c70 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e064      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x41e>
 8002f88:	e05c      	b.n	8003044 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_RCC_OscConfig+0x480>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fe6e 	bl	8001c70 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f98:	f7fe fe6a 	bl	8001c70 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e04d      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_OscConfig+0x478>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0x44c>
 8002fb6:	e045      	b.n	8003044 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e040      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d030      	beq.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d129      	bne.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d122      	bne.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	4293      	cmp	r3, r2
 800300a:	d119      	bne.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d10f      	bne.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07b      	b.n	800315e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d108      	bne.n	8003080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003076:	d009      	beq.n	800308c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	61da      	str	r2, [r3, #28]
 800307e:	e005      	b.n	800308c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe fc34 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	ea42 0103 	orr.w	r1, r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0104 	and.w	r1, r3, #4
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 0210 	and.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b088      	sub	sp, #32
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_SPI_Transmit+0x22>
 8003184:	2302      	movs	r3, #2
 8003186:	e126      	b.n	80033d6 <HAL_SPI_Transmit+0x270>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003190:	f7fe fd6e 	bl	8001c70 <HAL_GetTick>
 8003194:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031aa:	e10b      	b.n	80033c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_SPI_Transmit+0x52>
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031bc:	e102      	b.n	80033c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003204:	d10f      	bne.n	8003226 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d007      	beq.n	8003244 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324c:	d14b      	bne.n	80032e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_SPI_Transmit+0xf6>
 8003256:	8afb      	ldrh	r3, [r7, #22]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d13e      	bne.n	80032da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	1c9a      	adds	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003280:	e02b      	b.n	80032da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b02      	cmp	r3, #2
 800328e:	d112      	bne.n	80032b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80032b4:	e011      	b.n	80032da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b6:	f7fe fcdb 	bl	8001c70 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d803      	bhi.n	80032ce <HAL_SPI_Transmit+0x168>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032cc:	d102      	bne.n	80032d4 <HAL_SPI_Transmit+0x16e>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032d8:	e074      	b.n	80033c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ce      	bne.n	8003282 <HAL_SPI_Transmit+0x11c>
 80032e4:	e04c      	b.n	8003380 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Transmit+0x18e>
 80032ee:	8afb      	ldrh	r3, [r7, #22]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d140      	bne.n	8003376 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800331a:	e02c      	b.n	8003376 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d113      	bne.n	8003352 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003350:	e011      	b.n	8003376 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003352:	f7fe fc8d 	bl	8001c70 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d803      	bhi.n	800336a <HAL_SPI_Transmit+0x204>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003368:	d102      	bne.n	8003370 <HAL_SPI_Transmit+0x20a>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003374:	e026      	b.n	80033c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1cd      	bne.n	800331c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa55 	bl	8003834 <SPI_EndRxTxTransaction>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e000      	b.n	80033c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08c      	sub	sp, #48	; 0x30
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033ec:	2301      	movs	r3, #1
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x26>
 8003400:	2302      	movs	r3, #2
 8003402:	e18a      	b.n	800371a <HAL_SPI_TransmitReceive+0x33c>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800340c:	f7fe fc30 	bl	8001c70 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800342a:	2b01      	cmp	r3, #1
 800342c:	d00f      	beq.n	800344e <HAL_SPI_TransmitReceive+0x70>
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003434:	d107      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d103      	bne.n	8003446 <HAL_SPI_TransmitReceive+0x68>
 800343e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003442:	2b04      	cmp	r3, #4
 8003444:	d003      	beq.n	800344e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003446:	2302      	movs	r3, #2
 8003448:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800344c:	e15b      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x82>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x82>
 800345a:	887b      	ldrh	r3, [r7, #2]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003466:	e14e      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b04      	cmp	r3, #4
 8003472:	d003      	beq.n	800347c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2205      	movs	r2, #5
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	887a      	ldrh	r2, [r7, #2]
 8003492:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d8:	d178      	bne.n	80035cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x10a>
 80034e2:	8b7b      	ldrh	r3, [r7, #26]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d166      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800350c:	e053      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d11b      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x176>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_SPI_TransmitReceive+0x176>
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d113      	bne.n	8003554 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d119      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x1b8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d014      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	b292      	uxth	r2, r2
 8003578:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003592:	2301      	movs	r3, #1
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003596:	f7fe fb6b 	bl	8001c70 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d807      	bhi.n	80035b6 <HAL_SPI_TransmitReceive+0x1d8>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ac:	d003      	beq.n	80035b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035b4:	e0a7      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1a6      	bne.n	800350e <HAL_SPI_TransmitReceive+0x130>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1a1      	bne.n	800350e <HAL_SPI_TransmitReceive+0x130>
 80035ca:	e07c      	b.n	80036c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive+0x1fc>
 80035d4:	8b7b      	ldrh	r3, [r7, #26]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d16b      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	330c      	adds	r3, #12
 80035e4:	7812      	ldrb	r2, [r2, #0]
 80035e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003600:	e057      	b.n	80036b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b02      	cmp	r3, #2
 800360e:	d11c      	bne.n	800364a <HAL_SPI_TransmitReceive+0x26c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_SPI_TransmitReceive+0x26c>
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d114      	bne.n	800364a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	7812      	ldrb	r2, [r2, #0]
 800362c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d119      	bne.n	800368c <HAL_SPI_TransmitReceive+0x2ae>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800368c:	f7fe faf0 	bl	8001c70 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003698:	429a      	cmp	r2, r3
 800369a:	d803      	bhi.n	80036a4 <HAL_SPI_TransmitReceive+0x2c6>
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a2:	d102      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x2cc>
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036b0:	e029      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1a2      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x224>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d19d      	bne.n	8003602 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8b2 	bl	8003834 <SPI_EndRxTxTransaction>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d006      	beq.n	80036e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036e2:	e010      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	e000      	b.n	8003706 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003704:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003716:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800371a:	4618      	mov	r0, r3
 800371c:	3730      	adds	r7, #48	; 0x30
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003734:	f7fe fa9c 	bl	8001c70 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4413      	add	r3, r2
 8003742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003744:	f7fe fa94 	bl	8001c70 <HAL_GetTick>
 8003748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	015b      	lsls	r3, r3, #5
 8003750:	0d1b      	lsrs	r3, r3, #20
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	fb02 f303 	mul.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375a:	e054      	b.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003762:	d050      	beq.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003764:	f7fe fa84 	bl	8001c70 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d13d      	bne.n	80037f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003792:	d111      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379c:	d004      	beq.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a6:	d107      	bne.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c0:	d10f      	bne.n	80037e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e017      	b.n	8003826 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3b01      	subs	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	429a      	cmp	r2, r3
 8003822:	d19b      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000004 	.word	0x20000004

08003834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003840:	4b1b      	ldr	r3, [pc, #108]	; (80038b0 <SPI_EndRxTxTransaction+0x7c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <SPI_EndRxTxTransaction+0x80>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0d5b      	lsrs	r3, r3, #21
 800384c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003850:	fb02 f303 	mul.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800385e:	d112      	bne.n	8003886 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2200      	movs	r2, #0
 8003868:	2180      	movs	r1, #128	; 0x80
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff5a 	bl	8003724 <SPI_WaitFlagStateUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3b01      	subs	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d0f2      	beq.n	8003886 <SPI_EndRxTxTransaction+0x52>
 80038a0:	e000      	b.n	80038a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80038a2:	bf00      	nop
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000004 	.word	0x20000004
 80038b4:	165e9f81 	.word	0x165e9f81

080038b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b8:	b084      	sub	sp, #16
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	f107 001c 	add.w	r0, r7, #28
 80038c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d122      	bne.n	8003916 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d105      	bne.n	800390a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa9c 	bl	8003e48 <USB_CoreReset>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e01a      	b.n	800394c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa90 	bl	8003e48 <USB_CoreReset>
 8003928:	4603      	mov	r3, r0
 800392a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800392c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
 800393e:	e005      	b.n	800394c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10b      	bne.n	800396a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f043 0206 	orr.w	r2, r3, #6
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003976:	b004      	add	sp, #16
 8003978:	4770      	bx	lr

0800397a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d115      	bne.n	80039ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fe f95c 	bl	8001c88 <HAL_Delay>
      ms++;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa28 	bl	8003e2c <USB_GetMode>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d01e      	beq.n	8003a20 <USB_SetCurrentMode+0x84>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b31      	cmp	r3, #49	; 0x31
 80039e6:	d9f0      	bls.n	80039ca <USB_SetCurrentMode+0x2e>
 80039e8:	e01a      	b.n	8003a20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d115      	bne.n	8003a1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039fc:	2001      	movs	r0, #1
 80039fe:	f7fe f943 	bl	8001c88 <HAL_Delay>
      ms++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa0f 	bl	8003e2c <USB_GetMode>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <USB_SetCurrentMode+0x84>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b31      	cmp	r3, #49	; 0x31
 8003a18:	d9f0      	bls.n	80039fc <USB_SetCurrentMode+0x60>
 8003a1a:	e001      	b.n	8003a20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e005      	b.n	8003a2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b32      	cmp	r3, #50	; 0x32
 8003a24:	d101      	bne.n	8003a2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a34:	b084      	sub	sp, #16
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	e009      	b.n	8003a68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3340      	adds	r3, #64	; 0x40
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3301      	adds	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0e      	cmp	r3, #14
 8003a6c:	d9f2      	bls.n	8003a54 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11c      	bne.n	8003aae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e005      	b.n	8003aba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	4619      	mov	r1, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	680b      	ldr	r3, [r1, #0]
 8003ad8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f965 	bl	8003db8 <USB_SetDevSpeed>
 8003aee:	e008      	b.n	8003b02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003af0:	2101      	movs	r1, #1
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f960 	bl	8003db8 <USB_SetDevSpeed>
 8003af8:	e003      	b.n	8003b02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003afa:	2103      	movs	r1, #3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f95b 	bl	8003db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b02:	2110      	movs	r1, #16
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8f3 	bl	8003cf0 <USB_FlushTxFifo>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f91f 	bl	8003d58 <USB_FlushRxFifo>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	e043      	b.n	8003bd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b64:	d118      	bne.n	8003b98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e013      	b.n	8003baa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e008      	b.n	8003baa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2300      	movs	r3, #0
 8003bba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d3b7      	bcc.n	8003b4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e043      	b.n	8003c6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bfa:	d118      	bne.n	8003c2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e013      	b.n	8003c40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e008      	b.n	8003c40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2300      	movs	r3, #0
 8003c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3b7      	bcc.n	8003be4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <USB_DevInit+0x2b8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d107      	bne.n	8003cdc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ce8:	b004      	add	sp, #16
 8003cea:	4770      	bx	lr
 8003cec:	803c3800 	.word	0x803c3800

08003cf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <USB_FlushTxFifo+0x64>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e01b      	b.n	8003d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	daf2      	bge.n	8003cfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	019b      	lsls	r3, r3, #6
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <USB_FlushTxFifo+0x64>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e006      	b.n	8003d48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d0f0      	beq.n	8003d28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	00030d40 	.word	0x00030d40

08003d58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <USB_FlushRxFifo+0x5c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e018      	b.n	8003da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	daf2      	bge.n	8003d64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2210      	movs	r2, #16
 8003d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <USB_FlushRxFifo+0x5c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e006      	b.n	8003da8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d0f0      	beq.n	8003d88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	00030d40 	.word	0x00030d40

08003db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e04:	f023 0303 	bic.w	r3, r3, #3
 8003e08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0301 	and.w	r3, r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a13      	ldr	r2, [pc, #76]	; (8003eac <USB_CoreReset+0x64>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e01b      	b.n	8003e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	daf2      	bge.n	8003e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f043 0201 	orr.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3301      	adds	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a09      	ldr	r2, [pc, #36]	; (8003eac <USB_CoreReset+0x64>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d0f0      	beq.n	8003e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	00030d40 	.word	0x00030d40

08003eb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <MX_FATFS_Init+0x18>)
 8003eb6:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_FATFS_Init+0x1c>)
 8003eb8:	f003 f8f2 	bl	80070a0 <FATFS_LinkDriver>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <MX_FATFS_Init+0x20>)
 8003ec2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20002a38 	.word	0x20002a38
 8003ecc:	20000010 	.word	0x20000010
 8003ed0:	20002a34 	.word	0x20002a34

08003ed4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ed8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc ffc5 	bl	8000e80 <SD_disk_initialize>
 8003ef6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd f8a3 	bl	8001058 <SD_disk_status>
 8003f12:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv,buff,sector,count);
 8003f2c:	7bf8      	ldrb	r0, [r7, #15]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	f7fd f8a6 	bl	8001084 <SD_disk_read>
 8003f38:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	4603      	mov	r3, r0
 8003f50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv,buff,sector,count);
 8003f52:	7bf8      	ldrb	r0, [r7, #15]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	f7fd f8fd 	bl	8001158 <SD_disk_write>
 8003f5e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	603a      	str	r2, [r7, #0]
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	460b      	mov	r3, r1
 8003f76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv,cmd,buff);
 8003f78:	79b9      	ldrb	r1, [r7, #6]
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd f96e 	bl	8001260 <SD_disk_ioctl>
 8003f84:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <disk_status+0x30>)
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	79fa      	ldrb	r2, [r7, #7]
 8003fa8:	4905      	ldr	r1, [pc, #20]	; (8003fc0 <disk_status+0x30>)
 8003faa:	440a      	add	r2, r1
 8003fac:	7a12      	ldrb	r2, [r2, #8]
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4798      	blx	r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20002c64 	.word	0x20002c64

08003fc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	4a0d      	ldr	r2, [pc, #52]	; (800400c <disk_initialize+0x48>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d111      	bne.n	8004000 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	4a0b      	ldr	r2, [pc, #44]	; (800400c <disk_initialize+0x48>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <disk_initialize+0x48>)
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	79fa      	ldrb	r2, [r7, #7]
 8003ff2:	4906      	ldr	r1, [pc, #24]	; (800400c <disk_initialize+0x48>)
 8003ff4:	440a      	add	r2, r1
 8003ff6:	7a12      	ldrb	r2, [r2, #8]
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20002c64 	.word	0x20002c64

08004010 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	4a0a      	ldr	r2, [pc, #40]	; (800404c <disk_read+0x3c>)
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	689c      	ldr	r4, [r3, #8]
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	4a07      	ldr	r2, [pc, #28]	; (800404c <disk_read+0x3c>)
 8004030:	4413      	add	r3, r2
 8004032:	7a18      	ldrb	r0, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	47a0      	blx	r4
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}
 800404a:	bf00      	nop
 800404c:	20002c64 	.word	0x20002c64

08004050 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004050:	b590      	push	{r4, r7, lr}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4603      	mov	r3, r0
 800405e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <disk_write+0x3c>)
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68dc      	ldr	r4, [r3, #12]
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	4a07      	ldr	r2, [pc, #28]	; (800408c <disk_write+0x3c>)
 8004070:	4413      	add	r3, r2
 8004072:	7a18      	ldrb	r0, [r3, #8]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	47a0      	blx	r4
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd90      	pop	{r4, r7, pc}
 800408a:	bf00      	nop
 800408c:	20002c64 	.word	0x20002c64

08004090 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	603a      	str	r2, [r7, #0]
 800409a:	71fb      	strb	r3, [r7, #7]
 800409c:	460b      	mov	r3, r1
 800409e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <disk_ioctl+0x38>)
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	79fa      	ldrb	r2, [r7, #7]
 80040ae:	4906      	ldr	r1, [pc, #24]	; (80040c8 <disk_ioctl+0x38>)
 80040b0:	440a      	add	r2, r1
 80040b2:	7a10      	ldrb	r0, [r2, #8]
 80040b4:	79b9      	ldrb	r1, [r7, #6]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	4798      	blx	r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20002c64 	.word	0x20002c64

080040cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3301      	adds	r3, #1
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80040dc:	89fb      	ldrh	r3, [r7, #14]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	b21a      	sxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80040ee:	89fb      	ldrh	r3, [r7, #14]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3303      	adds	r3, #3
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	3202      	adds	r2, #2
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	3201      	adds	r2, #1
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	7812      	ldrb	r2, [r2, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
	return rv;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	887a      	ldrh	r2, [r7, #2]
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	1c53      	adds	r3, r2, #1
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	6179      	str	r1, [r7, #20]
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f1      	bne.n	80041ea <mem_cpy+0x1a>
	}
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	617a      	str	r2, [r7, #20]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3b01      	subs	r3, #1
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f3      	bne.n	8004222 <mem_set+0x10>
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	61fa      	str	r2, [r7, #28]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	61ba      	str	r2, [r7, #24]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	1acb      	subs	r3, r1, r3
 8004274:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3b01      	subs	r3, #1
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <mem_cmp+0x40>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0eb      	beq.n	8004260 <mem_cmp+0x18>

	return r;
 8004288:	697b      	ldr	r3, [r7, #20]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042a0:	e002      	b.n	80042a8 <chk_chr+0x12>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3301      	adds	r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <chk_chr+0x26>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d1f2      	bne.n	80042a2 <chk_chr+0xc>
	return *str;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	781b      	ldrb	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	e029      	b.n	8004334 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80042e0:	4a27      	ldr	r2, [pc, #156]	; (8004380 <chk_lock+0xb4>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	4413      	add	r3, r2
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01d      	beq.n	800432a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042ee:	4a24      	ldr	r2, [pc, #144]	; (8004380 <chk_lock+0xb4>)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d116      	bne.n	800432e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <chk_lock+0xb4>)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	4413      	add	r3, r2
 8004308:	3304      	adds	r3, #4
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004310:	429a      	cmp	r2, r3
 8004312:	d10c      	bne.n	800432e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004314:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <chk_lock+0xb4>)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	3308      	adds	r3, #8
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004324:	429a      	cmp	r2, r3
 8004326:	d102      	bne.n	800432e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004328:	e007      	b.n	800433a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d9d2      	bls.n	80042e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d109      	bne.n	8004354 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <chk_lock+0x80>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d101      	bne.n	8004350 <chk_lock+0x84>
 800434c:	2300      	movs	r3, #0
 800434e:	e010      	b.n	8004372 <chk_lock+0xa6>
 8004350:	2312      	movs	r3, #18
 8004352:	e00e      	b.n	8004372 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <chk_lock+0xa0>
 800435a:	4a09      	ldr	r2, [pc, #36]	; (8004380 <chk_lock+0xb4>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	4413      	add	r3, r2
 8004362:	330c      	adds	r3, #12
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d101      	bne.n	8004370 <chk_lock+0xa4>
 800436c:	2310      	movs	r3, #16
 800436e:	e000      	b.n	8004372 <chk_lock+0xa6>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20002a44 	.word	0x20002a44

08004384 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	e002      	b.n	8004396 <enq_lock+0x12>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3301      	adds	r3, #1
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d806      	bhi.n	80043aa <enq_lock+0x26>
 800439c:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <enq_lock+0x40>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f2      	bne.n	8004390 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20002a44 	.word	0x20002a44

080043c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	e01f      	b.n	8004418 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80043d8:	4a41      	ldr	r2, [pc, #260]	; (80044e0 <inc_lock+0x118>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	4413      	add	r3, r2
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d113      	bne.n	8004412 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80043ea:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <inc_lock+0x118>)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	4413      	add	r3, r2
 80043f2:	3304      	adds	r3, #4
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d109      	bne.n	8004412 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80043fe:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <inc_lock+0x118>)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4413      	add	r3, r2
 8004406:	3308      	adds	r3, #8
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800440e:	429a      	cmp	r2, r3
 8004410:	d006      	beq.n	8004420 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d9dc      	bls.n	80043d8 <inc_lock+0x10>
 800441e:	e000      	b.n	8004422 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004420:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d132      	bne.n	800448e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e002      	b.n	8004434 <inc_lock+0x6c>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d806      	bhi.n	8004448 <inc_lock+0x80>
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <inc_lock+0x118>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f2      	bne.n	800442e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d101      	bne.n	8004452 <inc_lock+0x8a>
 800444e:	2300      	movs	r3, #0
 8004450:	e040      	b.n	80044d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4922      	ldr	r1, [pc, #136]	; (80044e0 <inc_lock+0x118>)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	440b      	add	r3, r1
 800445e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	491e      	ldr	r1, [pc, #120]	; (80044e0 <inc_lock+0x118>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	440b      	add	r3, r1
 800446c:	3304      	adds	r3, #4
 800446e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	491a      	ldr	r1, [pc, #104]	; (80044e0 <inc_lock+0x118>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	440b      	add	r3, r1
 800447c:	3308      	adds	r3, #8
 800447e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <inc_lock+0x118>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	4413      	add	r3, r2
 8004488:	330c      	adds	r3, #12
 800448a:	2200      	movs	r2, #0
 800448c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d009      	beq.n	80044a8 <inc_lock+0xe0>
 8004494:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <inc_lock+0x118>)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	330c      	adds	r3, #12
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <inc_lock+0xe0>
 80044a4:	2300      	movs	r3, #0
 80044a6:	e015      	b.n	80044d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <inc_lock+0xf8>
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <inc_lock+0x118>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	330c      	adds	r3, #12
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	e001      	b.n	80044c4 <inc_lock+0xfc>
 80044c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <inc_lock+0x118>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	440b      	add	r3, r1
 80044cc:	330c      	adds	r3, #12
 80044ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	20002a44 	.word	0x20002a44

080044e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d825      	bhi.n	8004544 <dec_lock+0x60>
		n = Files[i].ctr;
 80044f8:	4a17      	ldr	r2, [pc, #92]	; (8004558 <dec_lock+0x74>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	4413      	add	r3, r2
 8004500:	330c      	adds	r3, #12
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004506:	89fb      	ldrh	r3, [r7, #14]
 8004508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450c:	d101      	bne.n	8004512 <dec_lock+0x2e>
 800450e:	2300      	movs	r3, #0
 8004510:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004512:	89fb      	ldrh	r3, [r7, #14]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <dec_lock+0x3a>
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	3b01      	subs	r3, #1
 800451c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800451e:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <dec_lock+0x74>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	330c      	adds	r3, #12
 8004528:	89fa      	ldrh	r2, [r7, #14]
 800452a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <dec_lock+0x5a>
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <dec_lock+0x74>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	737b      	strb	r3, [r7, #13]
 8004542:	e001      	b.n	8004548 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004544:	2302      	movs	r3, #2
 8004546:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004548:	7b7b      	ldrb	r3, [r7, #13]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20002a44 	.word	0x20002a44

0800455c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e010      	b.n	800458c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800456a:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <clear_lock+0x44>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d105      	bne.n	8004586 <clear_lock+0x2a>
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <clear_lock+0x44>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d9eb      	bls.n	800456a <clear_lock+0xe>
	}
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20002a44 	.word	0x20002a44

080045a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	78db      	ldrb	r3, [r3, #3]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d034      	beq.n	8004622 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7858      	ldrb	r0, [r3, #1]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045c8:	2301      	movs	r3, #1
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	f7ff fd40 	bl	8004050 <disk_write>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e022      	b.n	8004622 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	1ad2      	subs	r2, r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d217      	bcs.n	8004622 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	789b      	ldrb	r3, [r3, #2]
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e010      	b.n	800461c <sync_window+0x78>
					wsect += fs->fsize;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	7858      	ldrb	r0, [r3, #1]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800460e:	2301      	movs	r3, #1
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	f7ff fd1d 	bl	8004050 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3b01      	subs	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d8eb      	bhi.n	80045fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d01b      	beq.n	800467c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ffad 	bl	80045a4 <sync_window>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d113      	bne.n	800467c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	7858      	ldrb	r0, [r3, #1]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800465e:	2301      	movs	r3, #1
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	f7ff fcd5 	bl	8004010 <disk_read>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800466c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004670:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff ff87 	bl	80045a4 <sync_window>
 8004696:	4603      	mov	r3, r0
 8004698:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d159      	bne.n	8004754 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d149      	bne.n	800473c <sync_fs+0xb4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	791b      	ldrb	r3, [r3, #4]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d145      	bne.n	800473c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	899b      	ldrh	r3, [r3, #12]
 80046ba:	461a      	mov	r2, r3
 80046bc:	2100      	movs	r1, #0
 80046be:	f7ff fda8 	bl	8004212 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80046ca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fd37 	bl	8004142 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3338      	adds	r3, #56	; 0x38
 80046d8:	4921      	ldr	r1, [pc, #132]	; (8004760 <sync_fs+0xd8>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fd4c 	bl	8004178 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3338      	adds	r3, #56	; 0x38
 80046e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80046e8:	491e      	ldr	r1, [pc, #120]	; (8004764 <sync_fs+0xdc>)
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fd44 	bl	8004178 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3338      	adds	r3, #56	; 0x38
 80046f4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7ff fd3a 	bl	8004178 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3338      	adds	r3, #56	; 0x38
 8004708:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7ff fd30 	bl	8004178 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7858      	ldrb	r0, [r3, #1]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004730:	2301      	movs	r3, #1
 8004732:	f7ff fc8d 	bl	8004050 <disk_write>
			fs->fsi_flag = 0;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fca3 	bl	8004090 <disk_ioctl>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <sync_fs+0xcc>
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	41615252 	.word	0x41615252
 8004764:	61417272 	.word	0x61417272

08004768 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	3b02      	subs	r3, #2
 8004776:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	3b02      	subs	r3, #2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d301      	bcc.n	8004788 <clust2sect+0x20>
 8004784:	2300      	movs	r3, #0
 8004786:	e008      	b.n	800479a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	895b      	ldrh	r3, [r3, #10]
 800478c:	461a      	mov	r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	fb03 f202 	mul.w	r2, r3, r2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	4413      	add	r3, r2
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d904      	bls.n	80047c6 <get_fat+0x20>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <get_fat+0x26>
		val = 1;	/* Internal error */
 80047c6:	2301      	movs	r3, #1
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e0bb      	b.n	8004944 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80047cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	f000 8083 	beq.w	80048e2 <get_fat+0x13c>
 80047dc:	2b03      	cmp	r3, #3
 80047de:	f300 80a7 	bgt.w	8004930 <get_fat+0x18a>
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d002      	beq.n	80047ec <get_fat+0x46>
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d056      	beq.n	8004898 <get_fat+0xf2>
 80047ea:	e0a1      	b.n	8004930 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	899b      	ldrh	r3, [r3, #12]
 8004802:	4619      	mov	r1, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	fbb3 f3f1 	udiv	r3, r3, r1
 800480a:	4413      	add	r3, r2
 800480c:	4619      	mov	r1, r3
 800480e:	6938      	ldr	r0, [r7, #16]
 8004810:	f7ff ff0c 	bl	800462c <move_window>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 808d 	bne.w	8004936 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	60fa      	str	r2, [r7, #12]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	8992      	ldrh	r2, [r2, #12]
 8004826:	fbb3 f1f2 	udiv	r1, r3, r2
 800482a:	fb01 f202 	mul.w	r2, r1, r2
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4413      	add	r3, r2
 8004834:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004838:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	899b      	ldrh	r3, [r3, #12]
 8004842:	4619      	mov	r1, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	fbb3 f3f1 	udiv	r3, r3, r1
 800484a:	4413      	add	r3, r2
 800484c:	4619      	mov	r1, r3
 800484e:	6938      	ldr	r0, [r7, #16]
 8004850:	f7ff feec 	bl	800462c <move_window>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d16f      	bne.n	800493a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	899b      	ldrh	r3, [r3, #12]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	fbb3 f1f2 	udiv	r1, r3, r2
 8004866:	fb01 f202 	mul.w	r2, r1, r2
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4313      	orrs	r3, r2
 800487c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <get_fat+0xe8>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	e002      	b.n	8004894 <get_fat+0xee>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004894:	617b      	str	r3, [r7, #20]
			break;
 8004896:	e055      	b.n	8004944 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	899b      	ldrh	r3, [r3, #12]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ac:	4413      	add	r3, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	6938      	ldr	r0, [r7, #16]
 80048b2:	f7ff febb 	bl	800462c <move_window>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d140      	bne.n	800493e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	8992      	ldrh	r2, [r2, #12]
 80048ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80048ce:	fb00 f202 	mul.w	r2, r0, r2
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	440b      	add	r3, r1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fbf8 	bl	80040cc <ld_word>
 80048dc:	4603      	mov	r3, r0
 80048de:	617b      	str	r3, [r7, #20]
			break;
 80048e0:	e030      	b.n	8004944 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	899b      	ldrh	r3, [r3, #12]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4619      	mov	r1, r3
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048f6:	4413      	add	r3, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	6938      	ldr	r0, [r7, #16]
 80048fc:	f7ff fe96 	bl	800462c <move_window>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	8992      	ldrh	r2, [r2, #12]
 8004914:	fbb3 f0f2 	udiv	r0, r3, r2
 8004918:	fb00 f202 	mul.w	r2, r0, r2
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	440b      	add	r3, r1
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fbeb 	bl	80040fc <ld_dword>
 8004926:	4603      	mov	r3, r0
 8004928:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800492c:	617b      	str	r3, [r7, #20]
			break;
 800492e:	e009      	b.n	8004944 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e006      	b.n	8004944 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004936:	bf00      	nop
 8004938:	e004      	b.n	8004944 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800493a:	bf00      	nop
 800493c:	e002      	b.n	8004944 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004942:	bf00      	nop
		}
	}

	return val;
 8004944:	697b      	ldr	r3, [r7, #20]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800494e:	b590      	push	{r4, r7, lr}
 8004950:	b089      	sub	sp, #36	; 0x24
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800495a:	2302      	movs	r3, #2
 800495c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b01      	cmp	r3, #1
 8004962:	f240 8102 	bls.w	8004b6a <put_fat+0x21c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	f080 80fc 	bcs.w	8004b6a <put_fat+0x21c>
		switch (fs->fs_type) {
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b03      	cmp	r3, #3
 8004978:	f000 80b6 	beq.w	8004ae8 <put_fat+0x19a>
 800497c:	2b03      	cmp	r3, #3
 800497e:	f300 80fd 	bgt.w	8004b7c <put_fat+0x22e>
 8004982:	2b01      	cmp	r3, #1
 8004984:	d003      	beq.n	800498e <put_fat+0x40>
 8004986:	2b02      	cmp	r3, #2
 8004988:	f000 8083 	beq.w	8004a92 <put_fat+0x144>
 800498c:	e0f6      	b.n	8004b7c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4413      	add	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	899b      	ldrh	r3, [r3, #12]
 80049a4:	4619      	mov	r1, r3
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ac:	4413      	add	r3, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7ff fe3b 	bl	800462c <move_window>
 80049b6:	4603      	mov	r3, r0
 80049b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049ba:	7ffb      	ldrb	r3, [r7, #31]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 80d6 	bne.w	8004b6e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	61ba      	str	r2, [r7, #24]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	8992      	ldrh	r2, [r2, #12]
 80049d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049d6:	fb00 f202 	mul.w	r2, r0, r2
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	440b      	add	r3, r1
 80049de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <put_fat+0xb8>
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b25b      	sxtb	r3, r3
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	b25a      	sxtb	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	b25b      	sxtb	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e001      	b.n	8004a0a <put_fat+0xbc>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	899b      	ldrh	r3, [r3, #12]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a24:	4413      	add	r3, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fdff 	bl	800462c <move_window>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a32:	7ffb      	ldrb	r3, [r7, #31]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 809c 	bne.w	8004b72 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	899b      	ldrh	r3, [r3, #12]
 8004a44:	461a      	mov	r2, r3
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a4c:	fb00 f202 	mul.w	r2, r0, r2
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	440b      	add	r3, r1
 8004a54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <put_fat+0x11a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e00e      	b.n	8004a86 <put_fat+0x138>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	f023 030f 	bic.w	r3, r3, #15
 8004a72:	b25a      	sxtb	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0a1b      	lsrs	r3, r3, #8
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	70da      	strb	r2, [r3, #3]
			break;
 8004a90:	e074      	b.n	8004b7c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	899b      	ldrh	r3, [r3, #12]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff fdbe 	bl	800462c <move_window>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ab4:	7ffb      	ldrb	r3, [r7, #31]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d15d      	bne.n	8004b76 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	8992      	ldrh	r2, [r2, #12]
 8004ac8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004acc:	fb00 f202 	mul.w	r2, r0, r2
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fb31 	bl	8004142 <st_word>
			fs->wflag = 1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	70da      	strb	r2, [r3, #3]
			break;
 8004ae6:	e049      	b.n	8004b7c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	899b      	ldrh	r3, [r3, #12]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004afc:	4413      	add	r3, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fd93 	bl	800462c <move_window>
 8004b06:	4603      	mov	r3, r0
 8004b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b0a:	7ffb      	ldrb	r3, [r7, #31]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d134      	bne.n	8004b7a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	8992      	ldrh	r2, [r2, #12]
 8004b24:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b28:	fb00 f202 	mul.w	r2, r0, r2
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fae3 	bl	80040fc <ld_dword>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b3c:	4323      	orrs	r3, r4
 8004b3e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	8992      	ldrh	r2, [r2, #12]
 8004b4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b52:	fb00 f202 	mul.w	r2, r0, r2
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	440b      	add	r3, r1
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fb0b 	bl	8004178 <st_dword>
			fs->wflag = 1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	70da      	strb	r2, [r3, #3]
			break;
 8004b68:	e008      	b.n	8004b7c <put_fat+0x22e>
		}
	}
 8004b6a:	bf00      	nop
 8004b6c:	e006      	b.n	8004b7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004b6e:	bf00      	nop
 8004b70:	e004      	b.n	8004b7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <put_fat+0x22e>
			if (res != FR_OK) break;
 8004b7a:	bf00      	nop
	return res;
 8004b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3724      	adds	r7, #36	; 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}

08004b86 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b088      	sub	sp, #32
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d904      	bls.n	8004bac <remove_chain+0x26>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d301      	bcc.n	8004bb0 <remove_chain+0x2a>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e04b      	b.n	8004c48 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	69b8      	ldr	r0, [r7, #24]
 8004bbe:	f7ff fec6 	bl	800494e <put_fat>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004bc6:	7ffb      	ldrb	r3, [r7, #31]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <remove_chain+0x4a>
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
 8004bce:	e03b      	b.n	8004c48 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff fde7 	bl	80047a6 <get_fat>
 8004bd8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d031      	beq.n	8004c44 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <remove_chain+0x64>
 8004be6:	2302      	movs	r3, #2
 8004be8:	e02e      	b.n	8004c48 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf0:	d101      	bne.n	8004bf6 <remove_chain+0x70>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e028      	b.n	8004c48 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	69b8      	ldr	r0, [r7, #24]
 8004bfc:	f7ff fea7 	bl	800494e <put_fat>
 8004c00:	4603      	mov	r3, r0
 8004c02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <remove_chain+0x88>
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	e01c      	b.n	8004c48 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	699a      	ldr	r2, [r3, #24]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	3b02      	subs	r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d20b      	bcs.n	8004c34 <remove_chain+0xae>
			fs->free_clst++;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	791b      	ldrb	r3, [r3, #4]
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d3c6      	bcc.n	8004bd0 <remove_chain+0x4a>
 8004c42:	e000      	b.n	8004c46 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c44:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <create_chain+0x2c>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d31b      	bcc.n	8004cb4 <create_chain+0x64>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e018      	b.n	8004cb4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fd8e 	bl	80047a6 <get_fat>
 8004c8a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d801      	bhi.n	8004c96 <create_chain+0x46>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e070      	b.n	8004d78 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c9c:	d101      	bne.n	8004ca2 <create_chain+0x52>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	e06a      	b.n	8004d78 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d201      	bcs.n	8004cb0 <create_chain+0x60>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	e063      	b.n	8004d78 <create_chain+0x128>
		scl = clst;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d307      	bcc.n	8004cd8 <create_chain+0x88>
				ncl = 2;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d901      	bls.n	8004cd8 <create_chain+0x88>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e04f      	b.n	8004d78 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004cd8:	69f9      	ldr	r1, [r7, #28]
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fd63 	bl	80047a6 <get_fat>
 8004ce0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d003      	beq.n	8004cf6 <create_chain+0xa6>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf4:	d101      	bne.n	8004cfa <create_chain+0xaa>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	e03e      	b.n	8004d78 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d1da      	bne.n	8004cb8 <create_chain+0x68>
 8004d02:	2300      	movs	r3, #0
 8004d04:	e038      	b.n	8004d78 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d06:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d0c:	69f9      	ldr	r1, [r7, #28]
 8004d0e:	6938      	ldr	r0, [r7, #16]
 8004d10:	f7ff fe1d 	bl	800494e <put_fat>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <create_chain+0xe2>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d006      	beq.n	8004d32 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6938      	ldr	r0, [r7, #16]
 8004d2a:	f7ff fe10 	bl	800494e <put_fat>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <create_chain+0x116>
		fs->last_clst = ncl;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	3b02      	subs	r3, #2
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d804      	bhi.n	8004d56 <create_chain+0x106>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	1e5a      	subs	r2, r3, #1
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	791b      	ldrb	r3, [r3, #4]
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	711a      	strb	r2, [r3, #4]
 8004d64:	e007      	b.n	8004d76 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d102      	bne.n	8004d72 <create_chain+0x122>
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d70:	e000      	b.n	8004d74 <create_chain+0x124>
 8004d72:	2301      	movs	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004d76:	69fb      	ldr	r3, [r7, #28]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3720      	adds	r7, #32
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	3304      	adds	r3, #4
 8004d96:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	899b      	ldrh	r3, [r3, #12]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	8952      	ldrh	r2, [r2, #10]
 8004da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	613a      	str	r2, [r7, #16]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <clmt_clust+0x42>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e010      	b.n	8004de4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d307      	bcc.n	8004dda <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dd8:	e7e9      	b.n	8004dae <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004dda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e06:	d204      	bcs.n	8004e12 <dir_sdi+0x22>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e12:	2302      	movs	r3, #2
 8004e14:	e071      	b.n	8004efa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <dir_sdi+0x46>
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d902      	bls.n	8004e36 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10c      	bne.n	8004e56 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	8912      	ldrh	r2, [r2, #8]
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d301      	bcc.n	8004e4c <dir_sdi+0x5c>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e056      	b.n	8004efa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	61da      	str	r2, [r3, #28]
 8004e54:	e02d      	b.n	8004eb2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	895b      	ldrh	r3, [r3, #10]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	899b      	ldrh	r3, [r3, #12]
 8004e60:	fb02 f303 	mul.w	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e66:	e019      	b.n	8004e9c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6979      	ldr	r1, [r7, #20]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fc9a 	bl	80047a6 <get_fat>
 8004e72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7a:	d101      	bne.n	8004e80 <dir_sdi+0x90>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e03c      	b.n	8004efa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d904      	bls.n	8004e90 <dir_sdi+0xa0>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d301      	bcc.n	8004e94 <dir_sdi+0xa4>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e032      	b.n	8004efa <dir_sdi+0x10a>
			ofs -= csz;
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d2e1      	bcs.n	8004e68 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	6938      	ldr	r0, [r7, #16]
 8004ea8:	f7ff fc5e 	bl	8004768 <clust2sect>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <dir_sdi+0xd4>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e01a      	b.n	8004efa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	899b      	ldrh	r3, [r3, #12]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	899b      	ldrh	r3, [r3, #12]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004eec:	fb00 f202 	mul.w	r2, r0, r2
 8004ef0:	1a9b      	subs	r3, r3, r2
 8004ef2:	18ca      	adds	r2, r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	3320      	adds	r3, #32
 8004f18:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <dir_next+0x28>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f28:	d301      	bcc.n	8004f2e <dir_next+0x2c>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	e0bb      	b.n	80050a6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	899b      	ldrh	r3, [r3, #12]
 8004f32:	461a      	mov	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f3a:	fb01 f202 	mul.w	r2, r1, r2
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f040 809d 	bne.w	8005080 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	8912      	ldrh	r2, [r2, #8]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	f0c0 808d 	bcc.w	8005080 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	61da      	str	r2, [r3, #28]
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e09a      	b.n	80050a6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	899b      	ldrh	r3, [r3, #12]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	8952      	ldrh	r2, [r2, #10]
 8004f80:	3a01      	subs	r2, #1
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d17b      	bne.n	8005080 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7ff fc08 	bl	80047a6 <get_fat>
 8004f96:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d801      	bhi.n	8004fa2 <dir_next+0xa0>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e081      	b.n	80050a6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa8:	d101      	bne.n	8004fae <dir_next+0xac>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07b      	b.n	80050a6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d359      	bcc.n	800506c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	61da      	str	r2, [r3, #28]
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	e06e      	b.n	80050a6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7ff fe3d 	bl	8004c50 <create_chain>
 8004fd6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <dir_next+0xe0>
 8004fde:	2307      	movs	r3, #7
 8004fe0:	e061      	b.n	80050a6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <dir_next+0xea>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e05c      	b.n	80050a6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff2:	d101      	bne.n	8004ff8 <dir_next+0xf6>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e056      	b.n	80050a6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f7ff fad3 	bl	80045a4 <sync_window>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <dir_next+0x106>
 8005004:	2301      	movs	r3, #1
 8005006:	e04e      	b.n	80050a6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	899b      	ldrh	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	2100      	movs	r1, #0
 8005016:	f7ff f8fc 	bl	8004212 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	6979      	ldr	r1, [r7, #20]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fba1 	bl	8004768 <clust2sect>
 8005026:	4602      	mov	r2, r0
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	635a      	str	r2, [r3, #52]	; 0x34
 800502c:	e012      	b.n	8005054 <dir_next+0x152>
						fs->wflag = 1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f7ff fab5 	bl	80045a4 <sync_window>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <dir_next+0x142>
 8005040:	2301      	movs	r3, #1
 8005042:	e030      	b.n	80050a6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	3301      	adds	r3, #1
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	635a      	str	r2, [r3, #52]	; 0x34
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	895b      	ldrh	r3, [r3, #10]
 8005058:	461a      	mov	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4293      	cmp	r3, r2
 800505e:	d3e6      	bcc.n	800502e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005072:	6979      	ldr	r1, [r7, #20]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fb77 	bl	8004768 <clust2sect>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	899b      	ldrh	r3, [r3, #12]
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	fbb3 f0f2 	udiv	r0, r3, r2
 8005098:	fb00 f202 	mul.w	r2, r0, r2
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	18ca      	adds	r2, r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80050be:	2100      	movs	r1, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fe95 	bl	8004df0 <dir_sdi>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d12b      	bne.n	8005128 <dir_alloc+0x7a>
		n = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4619      	mov	r1, r3
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff faa6 	bl	800462c <move_window>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d11d      	bne.n	8005126 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2be5      	cmp	r3, #229	; 0xe5
 80050f2:	d004      	beq.n	80050fe <dir_alloc+0x50>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3301      	adds	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d102      	bne.n	8005112 <dir_alloc+0x64>
 800510c:	e00c      	b.n	8005128 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005112:	2101      	movs	r1, #1
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fef4 	bl	8004f02 <dir_next>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800511e:	7dfb      	ldrb	r3, [r7, #23]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0d7      	beq.n	80050d4 <dir_alloc+0x26>
 8005124:	e000      	b.n	8005128 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005126:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d101      	bne.n	8005132 <dir_alloc+0x84>
 800512e:	2307      	movs	r3, #7
 8005130:	75fb      	strb	r3, [r7, #23]
	return res;
 8005132:	7dfb      	ldrb	r3, [r7, #23]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	331a      	adds	r3, #26
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe ffbe 	bl	80040cc <ld_word>
 8005150:	4603      	mov	r3, r0
 8005152:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d109      	bne.n	8005170 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe ffb3 	bl	80040cc <ld_word>
 8005166:	4603      	mov	r3, r0
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	331a      	adds	r3, #26
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	b292      	uxth	r2, r2
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f7fe ffd6 	bl	8004142 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	d109      	bne.n	80051b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f103 0214 	add.w	r2, r3, #20
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f7fe ffc8 	bl	8004142 <st_word>
	}
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	331a      	adds	r3, #26
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fe ff7e 	bl	80040cc <ld_word>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <cmp_lfn+0x1e>
 80051d6:	2300      	movs	r3, #0
 80051d8:	e059      	b.n	800528e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80051f0:	2301      	movs	r3, #1
 80051f2:	81fb      	strh	r3, [r7, #14]
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e033      	b.n	8005262 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <cmp_lfn+0xdc>)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4413      	add	r3, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe ff5f 	bl	80040cc <ld_word>
 800520e:	4603      	mov	r3, r0
 8005210:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005212:	89fb      	ldrh	r3, [r7, #14]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2bfe      	cmp	r3, #254	; 0xfe
 800521c:	d812      	bhi.n	8005244 <cmp_lfn+0x88>
 800521e:	89bb      	ldrh	r3, [r7, #12]
 8005220:	4618      	mov	r0, r3
 8005222:	f001 ff89 	bl	8007138 <ff_wtoupper>
 8005226:	4603      	mov	r3, r0
 8005228:	461c      	mov	r4, r3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	617a      	str	r2, [r7, #20]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4413      	add	r3, r2
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f001 ff7d 	bl	8007138 <ff_wtoupper>
 800523e:	4603      	mov	r3, r0
 8005240:	429c      	cmp	r4, r3
 8005242:	d001      	beq.n	8005248 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005244:	2300      	movs	r3, #0
 8005246:	e022      	b.n	800528e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005248:	89bb      	ldrh	r3, [r7, #12]
 800524a:	81fb      	strh	r3, [r7, #14]
 800524c:	e006      	b.n	800525c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800524e:	89bb      	ldrh	r3, [r7, #12]
 8005250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005254:	4293      	cmp	r3, r2
 8005256:	d001      	beq.n	800525c <cmp_lfn+0xa0>
 8005258:	2300      	movs	r3, #0
 800525a:	e018      	b.n	800528e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	3301      	adds	r3, #1
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d9c8      	bls.n	80051fa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <cmp_lfn+0xd0>
 8005274:	89fb      	ldrh	r3, [r7, #14]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <cmp_lfn+0xd0>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <cmp_lfn+0xd0>
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800528c:	2301      	movs	r3, #1
}
 800528e:	4618      	mov	r0, r3
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd90      	pop	{r4, r7, pc}
 8005296:	bf00      	nop
 8005298:	08007418 	.word	0x08007418

0800529c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	460b      	mov	r3, r1
 80052ac:	71fb      	strb	r3, [r7, #7]
 80052ae:	4613      	mov	r3, r2
 80052b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	330d      	adds	r3, #13
 80052b6:	79ba      	ldrb	r2, [r7, #6]
 80052b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	330b      	adds	r3, #11
 80052be:	220f      	movs	r2, #15
 80052c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	330c      	adds	r3, #12
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	331a      	adds	r3, #26
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe ff36 	bl	8004142 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	82fb      	strh	r3, [r7, #22]
 80052ea:	2300      	movs	r3, #0
 80052ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052ee:	8afb      	ldrh	r3, [r7, #22]
 80052f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d007      	beq.n	8005308 <put_lfn+0x6c>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	61fa      	str	r2, [r7, #28]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005308:	4a17      	ldr	r2, [pc, #92]	; (8005368 <put_lfn+0xcc>)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4413      	add	r3, r2
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	8afa      	ldrh	r2, [r7, #22]
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe ff11 	bl	8004142 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005320:	8afb      	ldrh	r3, [r7, #22]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <put_lfn+0x90>
 8005326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800532a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	3301      	adds	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d9da      	bls.n	80052ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005338:	8afb      	ldrh	r3, [r7, #22]
 800533a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800533e:	4293      	cmp	r3, r2
 8005340:	d006      	beq.n	8005350 <put_lfn+0xb4>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <put_lfn+0xbc>
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005356:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	79fa      	ldrb	r2, [r7, #7]
 800535c:	701a      	strb	r2, [r3, #0]
}
 800535e:	bf00      	nop
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	08007418 	.word	0x08007418

0800536c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08c      	sub	sp, #48	; 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800537a:	220b      	movs	r2, #11
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7fe ff26 	bl	80041d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b05      	cmp	r3, #5
 8005388:	d92b      	bls.n	80053e2 <gen_numname+0x76>
		sr = seq;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800538e:	e022      	b.n	80053d6 <gen_numname+0x6a>
			wc = *lfn++;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800539a:	2300      	movs	r3, #0
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	e017      	b.n	80053d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005a      	lsls	r2, r3, #1
 80053a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80053ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <gen_numname+0x5e>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80053c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80053c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	3301      	adds	r3, #1
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d9e4      	bls.n	80053a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d8      	bne.n	8005390 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80053e2:	2307      	movs	r3, #7
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	3330      	adds	r3, #48	; 0x30
 80053f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80053f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053fa:	2b39      	cmp	r3, #57	; 0x39
 80053fc:	d904      	bls.n	8005408 <gen_numname+0x9c>
 80053fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005402:	3307      	adds	r3, #7
 8005404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540a:	1e5a      	subs	r2, r3, #1
 800540c:	62ba      	str	r2, [r7, #40]	; 0x28
 800540e:	3330      	adds	r3, #48	; 0x30
 8005410:	443b      	add	r3, r7
 8005412:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005416:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1df      	bne.n	80053e6 <gen_numname+0x7a>
	ns[i] = '~';
 8005426:	f107 0214 	add.w	r2, r7, #20
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	4413      	add	r3, r2
 800542e:	227e      	movs	r2, #126	; 0x7e
 8005430:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005432:	2300      	movs	r3, #0
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e002      	b.n	800543e <gen_numname+0xd2>
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	3301      	adds	r3, #1
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	429a      	cmp	r2, r3
 8005444:	d205      	bcs.n	8005452 <gen_numname+0xe6>
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	4413      	add	r3, r2
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b20      	cmp	r3, #32
 8005450:	d1f2      	bne.n	8005438 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2b07      	cmp	r3, #7
 8005456:	d807      	bhi.n	8005468 <gen_numname+0xfc>
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	62ba      	str	r2, [r7, #40]	; 0x28
 800545e:	3330      	adds	r3, #48	; 0x30
 8005460:	443b      	add	r3, r7
 8005462:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005466:	e000      	b.n	800546a <gen_numname+0xfe>
 8005468:	2120      	movs	r1, #32
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	627a      	str	r2, [r7, #36]	; 0x24
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	460a      	mov	r2, r1
 8005476:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	2b07      	cmp	r3, #7
 800547c:	d9e9      	bls.n	8005452 <gen_numname+0xe6>
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	3730      	adds	r7, #48	; 0x30
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005494:	230b      	movs	r3, #11
 8005496:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	b2da      	uxtb	r2, r3
 800549c:	0852      	lsrs	r2, r2, #1
 800549e:	01db      	lsls	r3, r3, #7
 80054a0:	4313      	orrs	r3, r2
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	6079      	str	r1, [r7, #4]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ed      	bne.n	8005498 <sum_sfn+0x10>
	return sum;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80054d8:	2100      	movs	r1, #0
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fc88 	bl	8004df0 <dir_sdi>
 80054e0:	4603      	mov	r3, r0
 80054e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <dir_find+0x24>
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	e0a9      	b.n	8005642 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80054ee:	23ff      	movs	r3, #255	; 0xff
 80054f0:	753b      	strb	r3, [r7, #20]
 80054f2:	7d3b      	ldrb	r3, [r7, #20]
 80054f4:	757b      	strb	r3, [r7, #21]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4619      	mov	r1, r3
 8005504:	6938      	ldr	r0, [r7, #16]
 8005506:	f7ff f891 	bl	800462c <move_window>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 8090 	bne.w	8005636 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800551e:	7dbb      	ldrb	r3, [r7, #22]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d102      	bne.n	800552a <dir_find+0x60>
 8005524:	2304      	movs	r3, #4
 8005526:	75fb      	strb	r3, [r7, #23]
 8005528:	e08a      	b.n	8005640 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	330b      	adds	r3, #11
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005536:	73fb      	strb	r3, [r7, #15]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800553e:	7dbb      	ldrb	r3, [r7, #22]
 8005540:	2be5      	cmp	r3, #229	; 0xe5
 8005542:	d007      	beq.n	8005554 <dir_find+0x8a>
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <dir_find+0x98>
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d006      	beq.n	8005562 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005554:	23ff      	movs	r3, #255	; 0xff
 8005556:	757b      	strb	r3, [r7, #21]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
 8005560:	e05e      	b.n	8005620 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d136      	bne.n	80055d6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d154      	bne.n	8005620 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005576:	7dbb      	ldrb	r3, [r7, #22]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	7b5b      	ldrb	r3, [r3, #13]
 8005586:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005588:	7dbb      	ldrb	r3, [r7, #22]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	75bb      	strb	r3, [r7, #22]
 8005590:	7dbb      	ldrb	r3, [r7, #22]
 8005592:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800559c:	7dba      	ldrb	r2, [r7, #22]
 800559e:	7d7b      	ldrb	r3, [r7, #21]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d115      	bne.n	80055d0 <dir_find+0x106>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	330d      	adds	r3, #13
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	7d3a      	ldrb	r2, [r7, #20]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d10e      	bne.n	80055d0 <dir_find+0x106>
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7ff fdfd 	bl	80051bc <cmp_lfn>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <dir_find+0x106>
 80055c8:	7d7b      	ldrb	r3, [r7, #21]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e000      	b.n	80055d2 <dir_find+0x108>
 80055d0:	23ff      	movs	r3, #255	; 0xff
 80055d2:	757b      	strb	r3, [r7, #21]
 80055d4:	e024      	b.n	8005620 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80055d6:	7d7b      	ldrb	r3, [r7, #21]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <dir_find+0x126>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff51 	bl	8005488 <sum_sfn>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	7d3b      	ldrb	r3, [r7, #20]
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d024      	beq.n	800563a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <dir_find+0x14a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a18      	ldr	r0, [r3, #32]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	; 0x24
 8005606:	220b      	movs	r2, #11
 8005608:	4619      	mov	r1, r3
 800560a:	f7fe fe1d 	bl	8004248 <mem_cmp>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005614:	23ff      	movs	r3, #255	; 0xff
 8005616:	757b      	strb	r3, [r7, #21]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005620:	2100      	movs	r1, #0
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fc6d 	bl	8004f02 <dir_next>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f43f af65 	beq.w	80054fe <dir_find+0x34>
 8005634:	e004      	b.n	8005640 <dir_find+0x176>
		if (res != FR_OK) break;
 8005636:	bf00      	nop
 8005638:	e002      	b.n	8005640 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800563e:	bf00      	nop

	return res;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	; 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005660:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <dir_register+0x20>
 8005668:	2306      	movs	r3, #6
 800566a:	e0e0      	b.n	800582e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	e002      	b.n	8005678 <dir_register+0x2c>
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	3301      	adds	r3, #1
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f4      	bne.n	8005672 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800568e:	f107 030c 	add.w	r3, r7, #12
 8005692:	220c      	movs	r2, #12
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fd9b 	bl	80041d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d032      	beq.n	800570a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80056ac:	2301      	movs	r3, #1
 80056ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b0:	e016      	b.n	80056e0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	f107 010c 	add.w	r1, r7, #12
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	f7ff fe53 	bl	800536c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff feff 	bl	80054ca <dir_find>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80056d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	3301      	adds	r3, #1
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b63      	cmp	r3, #99	; 0x63
 80056e4:	d9e5      	bls.n	80056b2 <dir_register+0x66>
 80056e6:	e000      	b.n	80056ea <dir_register+0x9e>
			if (res != FR_OK) break;
 80056e8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	2b64      	cmp	r3, #100	; 0x64
 80056ee:	d101      	bne.n	80056f4 <dir_register+0xa8>
 80056f0:	2307      	movs	r3, #7
 80056f2:	e09c      	b.n	800582e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80056f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d002      	beq.n	8005702 <dir_register+0xb6>
 80056fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005700:	e095      	b.n	800582e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005702:	7dfa      	ldrb	r2, [r7, #23]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <dir_register+0xd8>
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	330c      	adds	r3, #12
 8005718:	4a47      	ldr	r2, [pc, #284]	; (8005838 <dir_register+0x1ec>)
 800571a:	fba2 2303 	umull	r2, r3, r2, r3
 800571e:	089b      	lsrs	r3, r3, #2
 8005720:	3301      	adds	r3, #1
 8005722:	e000      	b.n	8005726 <dir_register+0xda>
 8005724:	2301      	movs	r3, #1
 8005726:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005728:	6a39      	ldr	r1, [r7, #32]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fcbf 	bl	80050ae <dir_alloc>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800573a:	2b00      	cmp	r3, #0
 800573c:	d148      	bne.n	80057d0 <dir_register+0x184>
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	3b01      	subs	r3, #1
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d042      	beq.n	80057d0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	015b      	lsls	r3, r3, #5
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fb4a 	bl	8004df0 <dir_sdi>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005766:	2b00      	cmp	r3, #0
 8005768:	d132      	bne.n	80057d0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3324      	adds	r3, #36	; 0x24
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fe8a 	bl	8005488 <sum_sfn>
 8005774:	4603      	mov	r3, r0
 8005776:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4619      	mov	r1, r3
 800577e:	69f8      	ldr	r0, [r7, #28]
 8005780:	f7fe ff54 	bl	800462c <move_window>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800578a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11d      	bne.n	80057ce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	6918      	ldr	r0, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a19      	ldr	r1, [r3, #32]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	7efb      	ldrb	r3, [r7, #27]
 80057a0:	f7ff fd7c 	bl	800529c <put_lfn>
				fs->wflag = 1;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2201      	movs	r2, #1
 80057a8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80057aa:	2100      	movs	r1, #0
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fba8 	bl	8004f02 <dir_next>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80057b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <dir_register+0x184>
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1d5      	bne.n	8005778 <dir_register+0x12c>
 80057cc:	e000      	b.n	80057d0 <dir_register+0x184>
				if (res != FR_OK) break;
 80057ce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80057d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d128      	bne.n	800582a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	4619      	mov	r1, r3
 80057de:	69f8      	ldr	r0, [r7, #28]
 80057e0:	f7fe ff24 	bl	800462c <move_window>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80057ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11b      	bne.n	800582a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	2220      	movs	r2, #32
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fd09 	bl	8004212 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a18      	ldr	r0, [r3, #32]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3324      	adds	r3, #36	; 0x24
 8005808:	220b      	movs	r2, #11
 800580a:	4619      	mov	r1, r3
 800580c:	f7fe fce0 	bl	80041d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	330c      	adds	r3, #12
 800581c:	f002 0218 	and.w	r2, r2, #24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2201      	movs	r2, #1
 8005828:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800582a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800582e:	4618      	mov	r0, r3
 8005830:	3730      	adds	r7, #48	; 0x30
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	4ec4ec4f 	.word	0x4ec4ec4f

0800583c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	61ba      	str	r2, [r7, #24]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800586a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800586c:	2b1f      	cmp	r3, #31
 800586e:	d940      	bls.n	80058f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005872:	2b2f      	cmp	r3, #47	; 0x2f
 8005874:	d006      	beq.n	8005884 <create_name+0x48>
 8005876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005878:	2b5c      	cmp	r3, #92	; 0x5c
 800587a:	d110      	bne.n	800589e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800587c:	e002      	b.n	8005884 <create_name+0x48>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3301      	adds	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4413      	add	r3, r2
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b2f      	cmp	r3, #47	; 0x2f
 800588e:	d0f6      	beq.n	800587e <create_name+0x42>
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	4413      	add	r3, r2
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b5c      	cmp	r3, #92	; 0x5c
 800589a:	d0f0      	beq.n	800587e <create_name+0x42>
			break;
 800589c:	e02a      	b.n	80058f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2bfe      	cmp	r3, #254	; 0xfe
 80058a2:	d901      	bls.n	80058a8 <create_name+0x6c>
 80058a4:	2306      	movs	r3, #6
 80058a6:	e17d      	b.n	8005ba4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80058a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80058ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058b0:	2101      	movs	r1, #1
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fc04 	bl	80070c0 <ff_convert>
 80058b8:	4603      	mov	r3, r0
 80058ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80058bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <create_name+0x8a>
 80058c2:	2306      	movs	r3, #6
 80058c4:	e16e      	b.n	8005ba4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80058c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d809      	bhi.n	80058e0 <create_name+0xa4>
 80058cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ce:	4619      	mov	r1, r3
 80058d0:	488d      	ldr	r0, [pc, #564]	; (8005b08 <create_name+0x2cc>)
 80058d2:	f7fe fce0 	bl	8004296 <chk_chr>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <create_name+0xa4>
 80058dc:	2306      	movs	r3, #6
 80058de:	e161      	b.n	8005ba4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	617a      	str	r2, [r7, #20]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80058f0:	e7b4      	b.n	800585c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80058f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	441a      	add	r2, r3
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80058fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005900:	2b1f      	cmp	r3, #31
 8005902:	d801      	bhi.n	8005908 <create_name+0xcc>
 8005904:	2304      	movs	r3, #4
 8005906:	e000      	b.n	800590a <create_name+0xce>
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800590e:	e011      	b.n	8005934 <create_name+0xf8>
		w = lfn[di - 1];
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005916:	3b01      	subs	r3, #1
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005924:	2b20      	cmp	r3, #32
 8005926:	d002      	beq.n	800592e <create_name+0xf2>
 8005928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800592a:	2b2e      	cmp	r3, #46	; 0x2e
 800592c:	d106      	bne.n	800593c <create_name+0x100>
		di--;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3b01      	subs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ea      	bne.n	8005910 <create_name+0xd4>
 800593a:	e000      	b.n	800593e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800593c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	2200      	movs	r2, #0
 8005948:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <create_name+0x118>
 8005950:	2306      	movs	r3, #6
 8005952:	e127      	b.n	8005ba4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3324      	adds	r3, #36	; 0x24
 8005958:	220b      	movs	r2, #11
 800595a:	2120      	movs	r1, #32
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe fc58 	bl	8004212 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005962:	2300      	movs	r3, #0
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	e002      	b.n	800596e <create_name+0x132>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	3301      	adds	r3, #1
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b20      	cmp	r3, #32
 800597a:	d0f5      	beq.n	8005968 <create_name+0x12c>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	2b2e      	cmp	r3, #46	; 0x2e
 8005988:	d0ee      	beq.n	8005968 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <create_name+0x168>
 8005990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005994:	f043 0303 	orr.w	r3, r3, #3
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800599c:	e002      	b.n	80059a4 <create_name+0x168>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <create_name+0x182>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	3b01      	subs	r3, #1
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	2b2e      	cmp	r3, #46	; 0x2e
 80059bc:	d1ef      	bne.n	800599e <create_name+0x162>

	i = b = 0; ni = 8;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
 80059c8:	2308      	movs	r3, #8
 80059ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	61ba      	str	r2, [r7, #24]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80059dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8090 	beq.w	8005b04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80059e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d006      	beq.n	80059f8 <create_name+0x1bc>
 80059ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ec:	2b2e      	cmp	r3, #46	; 0x2e
 80059ee:	d10a      	bne.n	8005a06 <create_name+0x1ca>
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d006      	beq.n	8005a06 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80059f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059fc:	f043 0303 	orr.w	r3, r3, #3
 8005a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a04:	e07d      	b.n	8005b02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d203      	bcs.n	8005a16 <create_name+0x1da>
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d123      	bne.n	8005a5e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	2b0b      	cmp	r3, #11
 8005a1a:	d106      	bne.n	8005a2a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a20:	f043 0303 	orr.w	r3, r3, #3
 8005a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a28:	e075      	b.n	8005b16 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d005      	beq.n	8005a3e <create_name+0x202>
 8005a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a36:	f043 0303 	orr.w	r3, r3, #3
 8005a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d866      	bhi.n	8005b14 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	230b      	movs	r3, #11
 8005a50:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005a52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a5c:	e051      	b.n	8005b02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a60:	2b7f      	cmp	r3, #127	; 0x7f
 8005a62:	d914      	bls.n	8005a8e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 fb29 	bl	80070c0 <ff_convert>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d004      	beq.n	8005a82 <create_name+0x246>
 8005a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7a:	3b80      	subs	r3, #128	; 0x80
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <create_name+0x2d0>)
 8005a7e:	5cd3      	ldrb	r3, [r2, r3]
 8005a80:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <create_name+0x268>
 8005a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a96:	4619      	mov	r1, r3
 8005a98:	481d      	ldr	r0, [pc, #116]	; (8005b10 <create_name+0x2d4>)
 8005a9a:	f7fe fbfc 	bl	8004296 <chk_chr>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005aa4:	235f      	movs	r3, #95	; 0x5f
 8005aa6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aac:	f043 0303 	orr.w	r3, r3, #3
 8005ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ab4:	e01b      	b.n	8005aee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d909      	bls.n	8005ad0 <create_name+0x294>
 8005abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005abe:	2b5a      	cmp	r3, #90	; 0x5a
 8005ac0:	d806      	bhi.n	8005ad0 <create_name+0x294>
					b |= 2;
 8005ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ace:	e00e      	b.n	8005aee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad2:	2b60      	cmp	r3, #96	; 0x60
 8005ad4:	d90b      	bls.n	8005aee <create_name+0x2b2>
 8005ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad8:	2b7a      	cmp	r3, #122	; 0x7a
 8005ada:	d808      	bhi.n	8005aee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005adc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aea:	3b20      	subs	r3, #32
 8005aec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	623a      	str	r2, [r7, #32]
 8005af4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005af6:	b2d1      	uxtb	r1, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	460a      	mov	r2, r1
 8005afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b02:	e763      	b.n	80059cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005b04:	bf00      	nop
 8005b06:	e006      	b.n	8005b16 <create_name+0x2da>
 8005b08:	08007340 	.word	0x08007340
 8005b0c:	08007398 	.word	0x08007398
 8005b10:	0800734c 	.word	0x0800734c
			if (si > di) break;			/* No extension */
 8005b14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b1c:	2be5      	cmp	r3, #229	; 0xe5
 8005b1e:	d103      	bne.n	8005b28 <create_name+0x2ec>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2205      	movs	r2, #5
 8005b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d104      	bne.n	8005b38 <create_name+0x2fc>
 8005b2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b0c      	cmp	r3, #12
 8005b42:	d005      	beq.n	8005b50 <create_name+0x314>
 8005b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d105      	bne.n	8005b5c <create_name+0x320>
 8005b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d117      	bne.n	8005b98 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <create_name+0x344>
 8005b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b78:	f043 0310 	orr.w	r3, r3, #16
 8005b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d105      	bne.n	8005b98 <create_name+0x35c>
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b90:	f043 0308 	orr.w	r3, r3, #8
 8005b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005ba2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3728      	adds	r7, #40	; 0x28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005bc0:	e002      	b.n	8005bc8 <follow_path+0x1c>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8005bce:	d0f8      	beq.n	8005bc2 <follow_path+0x16>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005bd6:	d0f4      	beq.n	8005bc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b1f      	cmp	r3, #31
 8005be4:	d80a      	bhi.n	8005bfc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff f8fd 	bl	8004df0 <dir_sdi>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
 8005bfa:	e048      	b.n	8005c8e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff fe1b 	bl	800583c <create_name>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d139      	bne.n	8005c84 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fc5a 	bl	80054ca <dir_find>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d12c      	bne.n	8005c88 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d127      	bne.n	8005c88 <follow_path+0xdc>
 8005c38:	2305      	movs	r3, #5
 8005c3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c3c:	e024      	b.n	8005c88 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d121      	bne.n	8005c8c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	799b      	ldrb	r3, [r3, #6]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005c54:	2305      	movs	r3, #5
 8005c56:	75fb      	strb	r3, [r7, #23]
 8005c58:	e019      	b.n	8005c8e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	8992      	ldrh	r2, [r2, #12]
 8005c68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c6c:	fb00 f202 	mul.w	r2, r0, r2
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	440b      	add	r3, r1
 8005c74:	4619      	mov	r1, r3
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fa60 	bl	800513c <ld_clust>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c82:	e7bb      	b.n	8005bfc <follow_path+0x50>
			if (res != FR_OK) break;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <follow_path+0xe2>
				break;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c8c:	bf00      	nop
			}
		}
	}

	return res;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d031      	beq.n	8005d12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	e002      	b.n	8005cbc <get_ldnumber+0x24>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b1f      	cmp	r3, #31
 8005cc2:	d903      	bls.n	8005ccc <get_ldnumber+0x34>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b3a      	cmp	r3, #58	; 0x3a
 8005cca:	d1f4      	bne.n	8005cb6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b3a      	cmp	r3, #58	; 0x3a
 8005cd2:	d11c      	bne.n	8005d0e <get_ldnumber+0x76>
			tp = *path;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	60fa      	str	r2, [r7, #12]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	3b30      	subs	r3, #48	; 0x30
 8005ce4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d80e      	bhi.n	8005d0a <get_ldnumber+0x72>
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d10a      	bne.n	8005d0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <get_ldnumber+0x72>
					vol = (int)i;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	3301      	adds	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	e002      	b.n	8005d14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d12:	693b      	ldr	r3, [r7, #16]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	70da      	strb	r2, [r3, #3]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d36:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fe fc76 	bl	800462c <move_window>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <check_fs+0x2a>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e038      	b.n	8005dbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3338      	adds	r3, #56	; 0x38
 8005d4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe f9ba 	bl	80040cc <ld_word>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <check_fs+0x48>
 8005d64:	2303      	movs	r3, #3
 8005d66:	e029      	b.n	8005dbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d6e:	2be9      	cmp	r3, #233	; 0xe9
 8005d70:	d009      	beq.n	8005d86 <check_fs+0x66>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d78:	2beb      	cmp	r3, #235	; 0xeb
 8005d7a:	d11e      	bne.n	8005dba <check_fs+0x9a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d82:	2b90      	cmp	r3, #144	; 0x90
 8005d84:	d119      	bne.n	8005dba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3338      	adds	r3, #56	; 0x38
 8005d8a:	3336      	adds	r3, #54	; 0x36
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe f9b5 	bl	80040fc <ld_dword>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d98:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <check_fs+0xa4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d101      	bne.n	8005da2 <check_fs+0x82>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e00c      	b.n	8005dbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3338      	adds	r3, #56	; 0x38
 8005da6:	3352      	adds	r3, #82	; 0x52
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe f9a7 	bl	80040fc <ld_dword>
 8005dae:	4603      	mov	r3, r0
 8005db0:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <check_fs+0xa8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d101      	bne.n	8005dba <check_fs+0x9a>
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005dba:	2302      	movs	r3, #2
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	00544146 	.word	0x00544146
 8005dc8:	33544146 	.word	0x33544146

08005dcc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b096      	sub	sp, #88	; 0x58
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff ff59 	bl	8005c98 <get_ldnumber>
 8005de6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da01      	bge.n	8005df2 <find_volume+0x26>
 8005dee:	230b      	movs	r3, #11
 8005df0:	e265      	b.n	80062be <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005df2:	4a9f      	ldr	r2, [pc, #636]	; (8006070 <find_volume+0x2a4>)
 8005df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <find_volume+0x3a>
 8005e02:	230c      	movs	r3, #12
 8005e04:	e25b      	b.n	80062be <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	f023 0301 	bic.w	r3, r3, #1
 8005e12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01a      	beq.n	8005e52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe f8b5 	bl	8003f90 <disk_status>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10c      	bne.n	8005e52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <find_volume+0x82>
 8005e3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e4a:	230a      	movs	r3, #10
 8005e4c:	e237      	b.n	80062be <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e235      	b.n	80062be <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe f8ad 	bl	8003fc4 <disk_initialize>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e21e      	b.n	80062be <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <find_volume+0xca>
 8005e86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005e92:	230a      	movs	r3, #10
 8005e94:	e213      	b.n	80062be <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	7858      	ldrb	r0, [r3, #1]
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	f7fe f8f5 	bl	8004090 <disk_ioctl>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <find_volume+0xe4>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e206      	b.n	80062be <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	899b      	ldrh	r3, [r3, #12]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d80d      	bhi.n	8005ed6 <find_volume+0x10a>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	899b      	ldrh	r3, [r3, #12]
 8005ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec2:	d308      	bcc.n	8005ed6 <find_volume+0x10a>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	899b      	ldrh	r3, [r3, #12]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	899b      	ldrh	r3, [r3, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <find_volume+0x10e>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e1f1      	b.n	80062be <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005ede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ee2:	f7ff ff1d 	bl	8005d20 <check_fs>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d149      	bne.n	8005f88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ef8:	e01e      	b.n	8005f38 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f08:	4413      	add	r3, r2
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	3304      	adds	r3, #4
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <find_volume+0x158>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	3308      	adds	r3, #8
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe f8ee 	bl	80040fc <ld_dword>
 8005f20:	4602      	mov	r2, r0
 8005f22:	e000      	b.n	8005f26 <find_volume+0x15a>
 8005f24:	2200      	movs	r2, #0
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3358      	adds	r3, #88	; 0x58
 8005f2c:	443b      	add	r3, r7
 8005f2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f34:	3301      	adds	r3, #1
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d9dd      	bls.n	8005efa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f3e:	2300      	movs	r3, #0
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <find_volume+0x182>
 8005f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	3358      	adds	r3, #88	; 0x58
 8005f54:	443b      	add	r3, r7
 8005f56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <find_volume+0x1a2>
 8005f62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f66:	f7ff fedb 	bl	8005d20 <check_fs>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	e000      	b.n	8005f70 <find_volume+0x1a4>
 8005f6e:	2303      	movs	r3, #3
 8005f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d905      	bls.n	8005f88 <find_volume+0x1bc>
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	3301      	adds	r3, #1
 8005f80:	643b      	str	r3, [r7, #64]	; 0x40
 8005f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d9e2      	bls.n	8005f4e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f8c:	2b04      	cmp	r3, #4
 8005f8e:	d101      	bne.n	8005f94 <find_volume+0x1c8>
 8005f90:	2301      	movs	r3, #1
 8005f92:	e194      	b.n	80062be <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d901      	bls.n	8005fa0 <find_volume+0x1d4>
 8005f9c:	230d      	movs	r3, #13
 8005f9e:	e18e      	b.n	80062be <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	3338      	adds	r3, #56	; 0x38
 8005fa4:	330b      	adds	r3, #11
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fe f890 	bl	80040cc <ld_word>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	899b      	ldrh	r3, [r3, #12]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <find_volume+0x1f0>
 8005fb8:	230d      	movs	r3, #13
 8005fba:	e180      	b.n	80062be <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	3316      	adds	r3, #22
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe f882 	bl	80040cc <ld_word>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <find_volume+0x214>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	3338      	adds	r3, #56	; 0x38
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe f88f 	bl	80040fc <ld_dword>
 8005fde:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	789b      	ldrb	r3, [r3, #2]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d005      	beq.n	8006004 <find_volume+0x238>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	789b      	ldrb	r3, [r3, #2]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d001      	beq.n	8006004 <find_volume+0x238>
 8006000:	230d      	movs	r3, #13
 8006002:	e15c      	b.n	80062be <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	789b      	ldrb	r3, [r3, #2]
 8006008:	461a      	mov	r2, r3
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	fb02 f303 	mul.w	r3, r2, r3
 8006010:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006018:	b29a      	uxth	r2, r3
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	895b      	ldrh	r3, [r3, #10]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <find_volume+0x26c>
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	895b      	ldrh	r3, [r3, #10]
 800602a:	461a      	mov	r2, r3
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	895b      	ldrh	r3, [r3, #10]
 8006030:	3b01      	subs	r3, #1
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <find_volume+0x270>
 8006038:	230d      	movs	r3, #13
 800603a:	e140      	b.n	80062be <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	3338      	adds	r3, #56	; 0x38
 8006040:	3311      	adds	r3, #17
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe f842 	bl	80040cc <ld_word>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	891b      	ldrh	r3, [r3, #8]
 8006054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006056:	8992      	ldrh	r2, [r2, #12]
 8006058:	0952      	lsrs	r2, r2, #5
 800605a:	b292      	uxth	r2, r2
 800605c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006060:	fb01 f202 	mul.w	r2, r1, r2
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <find_volume+0x2a8>
 800606c:	230d      	movs	r3, #13
 800606e:	e126      	b.n	80062be <find_volume+0x4f2>
 8006070:	20002a3c 	.word	0x20002a3c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	3338      	adds	r3, #56	; 0x38
 8006078:	3313      	adds	r3, #19
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe f826 	bl	80040cc <ld_word>
 8006080:	4603      	mov	r3, r0
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <find_volume+0x2cc>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	3320      	adds	r3, #32
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe f833 	bl	80040fc <ld_dword>
 8006096:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	3338      	adds	r3, #56	; 0x38
 800609c:	330e      	adds	r3, #14
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe f814 	bl	80040cc <ld_word>
 80060a4:	4603      	mov	r3, r0
 80060a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <find_volume+0x2e6>
 80060ae:	230d      	movs	r3, #13
 80060b0:	e105      	b.n	80062be <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b6:	4413      	add	r3, r2
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	8911      	ldrh	r1, [r2, #8]
 80060bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060be:	8992      	ldrh	r2, [r2, #12]
 80060c0:	0952      	lsrs	r2, r2, #5
 80060c2:	b292      	uxth	r2, r2
 80060c4:	fbb1 f2f2 	udiv	r2, r1, r2
 80060c8:	b292      	uxth	r2, r2
 80060ca:	4413      	add	r3, r2
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d201      	bcs.n	80060da <find_volume+0x30e>
 80060d6:	230d      	movs	r3, #13
 80060d8:	e0f1      	b.n	80062be <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e2:	8952      	ldrh	r2, [r2, #10]
 80060e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <find_volume+0x328>
 80060f0:	230d      	movs	r3, #13
 80060f2:	e0e4      	b.n	80062be <find_volume+0x4f2>
		fmt = FS_FAT32;
 80060f4:	2303      	movs	r3, #3
 80060f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006100:	4293      	cmp	r3, r2
 8006102:	d802      	bhi.n	800610a <find_volume+0x33e>
 8006104:	2302      	movs	r3, #2
 8006106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006110:	4293      	cmp	r3, r2
 8006112:	d802      	bhi.n	800611a <find_volume+0x34e>
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1c9a      	adds	r2, r3, #2
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006128:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612c:	441a      	add	r2, r3
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	441a      	add	r2, r3
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800613c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006140:	2b03      	cmp	r3, #3
 8006142:	d11e      	bne.n	8006182 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	3338      	adds	r3, #56	; 0x38
 8006148:	332a      	adds	r3, #42	; 0x2a
 800614a:	4618      	mov	r0, r3
 800614c:	f7fd ffbe 	bl	80040cc <ld_word>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <find_volume+0x38e>
 8006156:	230d      	movs	r3, #13
 8006158:	e0b1      	b.n	80062be <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	891b      	ldrh	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <find_volume+0x39a>
 8006162:	230d      	movs	r3, #13
 8006164:	e0ab      	b.n	80062be <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	3338      	adds	r3, #56	; 0x38
 800616a:	332c      	adds	r3, #44	; 0x2c
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd ffc5 	bl	80040fc <ld_dword>
 8006172:	4602      	mov	r2, r0
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	647b      	str	r3, [r7, #68]	; 0x44
 8006180:	e01f      	b.n	80061c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	891b      	ldrh	r3, [r3, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <find_volume+0x3c2>
 800618a:	230d      	movs	r3, #13
 800618c:	e097      	b.n	80062be <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	441a      	add	r2, r3
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800619a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d103      	bne.n	80061aa <find_volume+0x3de>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	e00a      	b.n	80061c0 <find_volume+0x3f4>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	4613      	mov	r3, r2
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	4413      	add	r3, r2
 80061b4:	085a      	lsrs	r2, r3, #1
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	6a1a      	ldr	r2, [r3, #32]
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	899b      	ldrh	r3, [r3, #12]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ce:	440b      	add	r3, r1
 80061d0:	3b01      	subs	r3, #1
 80061d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061d4:	8989      	ldrh	r1, [r1, #12]
 80061d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80061da:	429a      	cmp	r2, r3
 80061dc:	d201      	bcs.n	80061e2 <find_volume+0x416>
 80061de:	230d      	movs	r3, #13
 80061e0:	e06d      	b.n	80062be <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061e8:	619a      	str	r2, [r3, #24]
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	2280      	movs	r2, #128	; 0x80
 80061f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d149      	bne.n	8006294 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	3338      	adds	r3, #56	; 0x38
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd ff60 	bl	80040cc <ld_word>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d140      	bne.n	8006294 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	3301      	adds	r3, #1
 8006216:	4619      	mov	r1, r3
 8006218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621a:	f7fe fa07 	bl	800462c <move_window>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d137      	bne.n	8006294 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	2200      	movs	r2, #0
 8006228:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	3338      	adds	r3, #56	; 0x38
 800622e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd ff4a 	bl	80040cc <ld_word>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006240:	429a      	cmp	r2, r3
 8006242:	d127      	bne.n	8006294 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	3338      	adds	r3, #56	; 0x38
 8006248:	4618      	mov	r0, r3
 800624a:	f7fd ff57 	bl	80040fc <ld_dword>
 800624e:	4603      	mov	r3, r0
 8006250:	4a1d      	ldr	r2, [pc, #116]	; (80062c8 <find_volume+0x4fc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d11e      	bne.n	8006294 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	3338      	adds	r3, #56	; 0x38
 800625a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800625e:	4618      	mov	r0, r3
 8006260:	f7fd ff4c 	bl	80040fc <ld_dword>
 8006264:	4603      	mov	r3, r0
 8006266:	4a19      	ldr	r2, [pc, #100]	; (80062cc <find_volume+0x500>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d113      	bne.n	8006294 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	3338      	adds	r3, #56	; 0x38
 8006270:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006274:	4618      	mov	r0, r3
 8006276:	f7fd ff41 	bl	80040fc <ld_dword>
 800627a:	4602      	mov	r2, r0
 800627c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	3338      	adds	r3, #56	; 0x38
 8006284:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd ff37 	bl	80040fc <ld_dword>
 800628e:	4602      	mov	r2, r0
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800629a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <find_volume+0x504>)
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	3301      	adds	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <find_volume+0x504>)
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <find_volume+0x504>)
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <find_volume+0x508>)
 80062b4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062b8:	f7fe f950 	bl	800455c <clear_lock>
#endif
	return FR_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3758      	adds	r7, #88	; 0x58
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	41615252 	.word	0x41615252
 80062cc:	61417272 	.word	0x61417272
 80062d0:	20002a40 	.word	0x20002a40
 80062d4:	20002a64 	.word	0x20002a64

080062d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062e2:	2309      	movs	r3, #9
 80062e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01c      	beq.n	8006326 <validate+0x4e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d018      	beq.n	8006326 <validate+0x4e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d013      	beq.n	8006326 <validate+0x4e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	889a      	ldrh	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	88db      	ldrh	r3, [r3, #6]
 8006308:	429a      	cmp	r2, r3
 800630a:	d10c      	bne.n	8006326 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd fe3c 	bl	8003f90 <disk_status>
 8006318:	4603      	mov	r3, r0
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <validate+0x4e>
			res = FR_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <validate+0x5a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	e000      	b.n	8006334 <validate+0x5c>
 8006332:	2300      	movs	r3, #0
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	6013      	str	r3, [r2, #0]
	return res;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006356:	f107 0310 	add.w	r3, r7, #16
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fc9c 	bl	8005c98 <get_ldnumber>
 8006360:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da01      	bge.n	800636c <f_mount+0x28>
 8006368:	230b      	movs	r3, #11
 800636a:	e02b      	b.n	80063c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800636c:	4a17      	ldr	r2, [pc, #92]	; (80063cc <f_mount+0x88>)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006374:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800637c:	69b8      	ldr	r0, [r7, #24]
 800637e:	f7fe f8ed 	bl	800455c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	490d      	ldr	r1, [pc, #52]	; (80063cc <f_mount+0x88>)
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <f_mount+0x66>
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d001      	beq.n	80063ae <f_mount+0x6a>
 80063aa:	2300      	movs	r3, #0
 80063ac:	e00a      	b.n	80063c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063ae:	f107 010c 	add.w	r1, r7, #12
 80063b2:	f107 0308 	add.w	r3, r7, #8
 80063b6:	2200      	movs	r2, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fd07 	bl	8005dcc <find_volume>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20002a3c 	.word	0x20002a3c

080063d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b09a      	sub	sp, #104	; 0x68
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <f_open+0x18>
 80063e4:	2309      	movs	r3, #9
 80063e6:	e1bb      	b.n	8006760 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063f0:	79fa      	ldrb	r2, [r7, #7]
 80063f2:	f107 0114 	add.w	r1, r7, #20
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fce6 	bl	8005dcc <find_volume>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 819f 	bne.w	800674e <f_open+0x37e>
		dj.obj.fs = fs;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	f107 0318 	add.w	r3, r7, #24
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fbc5 	bl	8005bac <follow_path>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800642c:	2b00      	cmp	r3, #0
 800642e:	d11a      	bne.n	8006466 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006434:	b25b      	sxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	da03      	bge.n	8006442 <f_open+0x72>
				res = FR_INVALID_NAME;
 800643a:	2306      	movs	r3, #6
 800643c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006440:	e011      	b.n	8006466 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	f107 0318 	add.w	r3, r7, #24
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f7fd ff36 	bl	80042cc <chk_lock>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	f003 031c 	and.w	r3, r3, #28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d07f      	beq.n	8006570 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006470:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800647c:	2b04      	cmp	r3, #4
 800647e:	d10e      	bne.n	800649e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006480:	f7fd ff80 	bl	8004384 <enq_lock>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <f_open+0xc8>
 800648a:	f107 0318 	add.w	r3, r7, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f8dc 	bl	800564c <dir_register>
 8006494:	4603      	mov	r3, r0
 8006496:	e000      	b.n	800649a <f_open+0xca>
 8006498:	2312      	movs	r3, #18
 800649a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	71fb      	strb	r3, [r7, #7]
 80064a6:	e010      	b.n	80064ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064a8:	7fbb      	ldrb	r3, [r7, #30]
 80064aa:	f003 0311 	and.w	r3, r3, #17
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <f_open+0xea>
					res = FR_DENIED;
 80064b2:	2307      	movs	r3, #7
 80064b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80064b8:	e007      	b.n	80064ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <f_open+0xfa>
 80064c4:	2308      	movs	r3, #8
 80064c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d168      	bne.n	80065a4 <f_open+0x1d4>
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d063      	beq.n	80065a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80064dc:	f7fd fcfa 	bl	8003ed4 <get_fattime>
 80064e0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	330e      	adds	r3, #14
 80064e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd fe45 	bl	8004178 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	3316      	adds	r3, #22
 80064f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd fe3f 	bl	8004178 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	330b      	adds	r3, #11
 80064fe:	2220      	movs	r2, #32
 8006500:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe fe17 	bl	800513c <ld_clust>
 800650e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006514:	2200      	movs	r2, #0
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fe2f 	bl	800517a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	331c      	adds	r3, #28
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fe28 	bl	8004178 <st_dword>
					fs->wflag = 1;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2201      	movs	r2, #1
 800652c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800652e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006530:	2b00      	cmp	r3, #0
 8006532:	d037      	beq.n	80065a4 <f_open+0x1d4>
						dw = fs->winsect;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	2200      	movs	r2, #0
 8006540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fb1f 	bl	8004b86 <remove_chain>
 8006548:	4603      	mov	r3, r0
 800654a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800654e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006552:	2b00      	cmp	r3, #0
 8006554:	d126      	bne.n	80065a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe f866 	bl	800462c <move_window>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800656a:	3a01      	subs	r2, #1
 800656c:	615a      	str	r2, [r3, #20]
 800656e:	e019      	b.n	80065a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006570:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006574:	2b00      	cmp	r3, #0
 8006576:	d115      	bne.n	80065a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006578:	7fbb      	ldrb	r3, [r7, #30]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <f_open+0x1ba>
					res = FR_NO_FILE;
 8006582:	2304      	movs	r3, #4
 8006584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006588:	e00c      	b.n	80065a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <f_open+0x1d4>
 8006594:	7fbb      	ldrb	r3, [r7, #30]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <f_open+0x1d4>
						res = FR_DENIED;
 800659e:	2307      	movs	r3, #7
 80065a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80065a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d128      	bne.n	80065fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80065c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	f023 0301 	bic.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bf14      	ite	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	2300      	moveq	r3, #0
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	f107 0318 	add.w	r3, r7, #24
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fd feef 	bl	80043c8 <inc_lock>
 80065ea:	4602      	mov	r2, r0
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <f_open+0x22e>
 80065f8:	2302      	movs	r3, #2
 80065fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80065fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 80a3 	bne.w	800674e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fd94 	bl	800513c <ld_clust>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	331c      	adds	r3, #28
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fd6c 	bl	80040fc <ld_dword>
 8006624:	4602      	mov	r2, r0
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	88da      	ldrh	r2, [r3, #6]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	79fa      	ldrb	r2, [r7, #7]
 8006642:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3330      	adds	r3, #48	; 0x30
 800665a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f7fd fdd6 	bl	8004212 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d06e      	beq.n	800674e <f_open+0x37e>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d06a      	beq.n	800674e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	895b      	ldrh	r3, [r3, #10]
 8006684:	461a      	mov	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	899b      	ldrh	r3, [r3, #12]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669c:	e016      	b.n	80066cc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f87f 	bl	80047a6 <get_fat>
 80066a8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80066aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d802      	bhi.n	80066b6 <f_open+0x2e6>
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80066b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066bc:	d102      	bne.n	80066c4 <f_open+0x2f4>
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <f_open+0x30c>
 80066d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d8:	429a      	cmp	r2, r3
 80066da:	d8e0      	bhi.n	800669e <f_open+0x2ce>
				}
				fp->clust = clst;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d131      	bne.n	800674e <f_open+0x37e>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	899b      	ldrh	r3, [r3, #12]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f6:	fb01 f202 	mul.w	r2, r1, r2
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d026      	beq.n	800674e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe f82f 	bl	8004768 <clust2sect>
 800670a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <f_open+0x34a>
						res = FR_INT_ERR;
 8006712:	2302      	movs	r3, #2
 8006714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006718:	e019      	b.n	800674e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	899b      	ldrh	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006722:	fbb3 f2f2 	udiv	r2, r3, r2
 8006726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	7858      	ldrb	r0, [r3, #1]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	2301      	movs	r3, #1
 800673e:	f7fd fc67 	bl	8004010 <disk_read>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <f_open+0x37e>
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800674e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <f_open+0x38c>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800675c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006760:	4618      	mov	r0, r3
 8006762:	3768      	adds	r7, #104	; 0x68
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08e      	sub	sp, #56	; 0x38
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f107 0214 	add.w	r2, r7, #20
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fda5 	bl	80062d8 <validate>
 800678e:	4603      	mov	r3, r0
 8006790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <f_read+0x44>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	7d5b      	ldrb	r3, [r3, #21]
 80067a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80067a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <f_read+0x4a>
 80067ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067b0:	e135      	b.n	8006a1e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	7d1b      	ldrb	r3, [r3, #20]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <f_read+0x5a>
 80067be:	2307      	movs	r3, #7
 80067c0:	e12d      	b.n	8006a1e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	f240 811e 	bls.w	8006a14 <f_read+0x2ac>
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80067dc:	e11a      	b.n	8006a14 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	8992      	ldrh	r2, [r2, #12]
 80067e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ea:	fb01 f202 	mul.w	r2, r1, r2
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 80d5 	bne.w	80069a0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	8992      	ldrh	r2, [r2, #12]
 80067fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	8952      	ldrh	r2, [r2, #10]
 8006806:	3a01      	subs	r2, #1
 8006808:	4013      	ands	r3, r2
 800680a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d12f      	bne.n	8006872 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
 8006820:	e013      	b.n	800684a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	4619      	mov	r1, r3
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7fe faa5 	bl	8004d80 <clmt_clust>
 8006836:	6338      	str	r0, [r7, #48]	; 0x30
 8006838:	e007      	b.n	800684a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fd ffaf 	bl	80047a6 <get_fat>
 8006848:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2b01      	cmp	r3, #1
 800684e:	d804      	bhi.n	800685a <f_read+0xf2>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2202      	movs	r2, #2
 8006854:	755a      	strb	r2, [r3, #21]
 8006856:	2302      	movs	r3, #2
 8006858:	e0e1      	b.n	8006a1e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006860:	d104      	bne.n	800686c <f_read+0x104>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	755a      	strb	r2, [r3, #21]
 8006868:	2301      	movs	r3, #1
 800686a:	e0d8      	b.n	8006a1e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006870:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fd ff74 	bl	8004768 <clust2sect>
 8006880:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <f_read+0x12a>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2202      	movs	r2, #2
 800688c:	755a      	strb	r2, [r3, #21]
 800688e:	2302      	movs	r3, #2
 8006890:	e0c5      	b.n	8006a1e <f_read+0x2b6>
			sect += csect;
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	899b      	ldrh	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80068a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d041      	beq.n	8006932 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	4413      	add	r3, r2
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	8952      	ldrh	r2, [r2, #10]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d905      	bls.n	80068c8 <f_read+0x160>
					cc = fs->csize - csect;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	895b      	ldrh	r3, [r3, #10]
 80068c0:	461a      	mov	r2, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	7858      	ldrb	r0, [r3, #1]
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d2:	f7fd fb9d 	bl	8004010 <disk_read>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <f_read+0x17e>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	755a      	strb	r2, [r3, #21]
 80068e2:	2301      	movs	r3, #1
 80068e4:	e09b      	b.n	8006a1e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	7d1b      	ldrb	r3, [r3, #20]
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	da18      	bge.n	8006922 <f_read+0x1ba>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d911      	bls.n	8006922 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1a      	ldr	r2, [r3, #32]
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	18d0      	adds	r0, r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	899b      	ldrh	r3, [r3, #12]
 800691c:	461a      	mov	r2, r3
 800691e:	f7fd fc57 	bl	80041d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	899b      	ldrh	r3, [r3, #12]
 8006926:	461a      	mov	r2, r3
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006930:	e05c      	b.n	80069ec <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	429a      	cmp	r2, r3
 800693a:	d02e      	beq.n	800699a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	7d1b      	ldrb	r3, [r3, #20]
 8006940:	b25b      	sxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	da18      	bge.n	8006978 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	7858      	ldrb	r0, [r3, #1]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	2301      	movs	r3, #1
 8006956:	f7fd fb7b 	bl	8004050 <disk_write>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <f_read+0x202>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	755a      	strb	r2, [r3, #21]
 8006966:	2301      	movs	r3, #1
 8006968:	e059      	b.n	8006a1e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	7d1b      	ldrb	r3, [r3, #20]
 800696e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	7858      	ldrb	r0, [r3, #1]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006982:	2301      	movs	r3, #1
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	f7fd fb43 	bl	8004010 <disk_read>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <f_read+0x232>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	755a      	strb	r2, [r3, #21]
 8006996:	2301      	movs	r3, #1
 8006998:	e041      	b.n	8006a1e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	899b      	ldrh	r3, [r3, #12]
 80069a4:	4618      	mov	r0, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	8992      	ldrh	r2, [r2, #12]
 80069ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80069b2:	fb01 f202 	mul.w	r2, r1, r2
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	1ac3      	subs	r3, r0, r3
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80069bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d901      	bls.n	80069c8 <f_read+0x260>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	8992      	ldrh	r2, [r2, #12]
 80069d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80069da:	fb00 f202 	mul.w	r2, r0, r2
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	440b      	add	r3, r1
 80069e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e4:	4619      	mov	r1, r3
 80069e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e8:	f7fd fbf2 	bl	80041d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	4413      	add	r3, r2
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	441a      	add	r2, r3
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f47f aee1 	bne.w	80067de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3738      	adds	r7, #56	; 0x38
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b08c      	sub	sp, #48	; 0x30
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f107 0210 	add.w	r2, r7, #16
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fc46 	bl	80062d8 <validate>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <f_write+0x44>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7d5b      	ldrb	r3, [r3, #21]
 8006a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <f_write+0x4a>
 8006a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a6e:	e16a      	b.n	8006d46 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <f_write+0x5a>
 8006a7c:	2307      	movs	r3, #7
 8006a7e:	e162      	b.n	8006d46 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	699a      	ldr	r2, [r3, #24]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	441a      	add	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	f080 814c 	bcs.w	8006d2a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	43db      	mvns	r3, r3
 8006a98:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006a9a:	e146      	b.n	8006d2a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	8992      	ldrh	r2, [r2, #12]
 8006aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aa8:	fb01 f202 	mul.w	r2, r1, r2
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 80f1 	bne.w	8006c96 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	8992      	ldrh	r2, [r2, #12]
 8006abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	8952      	ldrh	r2, [r2, #10]
 8006ac4:	3a01      	subs	r2, #1
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d143      	bne.n	8006b58 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11a      	bne.n	8006b1a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe f8b1 	bl	8004c50 <create_chain>
 8006aee:	62b8      	str	r0, [r7, #40]	; 0x28
 8006af0:	e013      	b.n	8006b1a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	4619      	mov	r1, r3
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f7fe f93d 	bl	8004d80 <clmt_clust>
 8006b06:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b08:	e007      	b.n	8006b1a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f7fe f89c 	bl	8004c50 <create_chain>
 8006b18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8109 	beq.w	8006d34 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d104      	bne.n	8006b32 <f_write+0x10c>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	755a      	strb	r2, [r3, #21]
 8006b2e:	2302      	movs	r3, #2
 8006b30:	e109      	b.n	8006d46 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b38:	d104      	bne.n	8006b44 <f_write+0x11e>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	755a      	strb	r2, [r3, #21]
 8006b40:	2301      	movs	r3, #1
 8006b42:	e100      	b.n	8006d46 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b48:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <f_write+0x132>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	7d1b      	ldrb	r3, [r3, #20]
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da18      	bge.n	8006b94 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	7858      	ldrb	r0, [r3, #1]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	2301      	movs	r3, #1
 8006b72:	f7fd fa6d 	bl	8004050 <disk_write>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <f_write+0x160>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	755a      	strb	r2, [r3, #21]
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0df      	b.n	8006d46 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	7d1b      	ldrb	r3, [r3, #20]
 8006b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f7fd fde3 	bl	8004768 <clust2sect>
 8006ba2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <f_write+0x18e>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2202      	movs	r2, #2
 8006bae:	755a      	strb	r2, [r3, #21]
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e0c8      	b.n	8006d46 <f_write+0x320>
			sect += csect;
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4413      	add	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	899b      	ldrh	r3, [r3, #12]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d043      	beq.n	8006c58 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	8952      	ldrh	r2, [r2, #10]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d905      	bls.n	8006bea <f_write+0x1c4>
					cc = fs->csize - csect;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	895b      	ldrh	r3, [r3, #10]
 8006be2:	461a      	mov	r2, r3
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	7858      	ldrb	r0, [r3, #1]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	f7fd fa2c 	bl	8004050 <disk_write>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <f_write+0x1e2>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	755a      	strb	r2, [r3, #21]
 8006c04:	2301      	movs	r3, #1
 8006c06:	e09e      	b.n	8006d46 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d918      	bls.n	8006c48 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	8992      	ldrh	r2, [r2, #12]
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	18d1      	adds	r1, r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	899b      	ldrh	r3, [r3, #12]
 8006c34:	461a      	mov	r2, r3
 8006c36:	f7fd facb 	bl	80041d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	7d1b      	ldrb	r3, [r3, #20]
 8006c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	899b      	ldrh	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006c56:	e04b      	b.n	8006cf0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d016      	beq.n	8006c90 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d210      	bcs.n	8006c90 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	7858      	ldrb	r0, [r3, #1]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c78:	2301      	movs	r3, #1
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	f7fd f9c8 	bl	8004010 <disk_read>
 8006c80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	755a      	strb	r2, [r3, #21]
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e05a      	b.n	8006d46 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	899b      	ldrh	r3, [r3, #12]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	8992      	ldrh	r2, [r2, #12]
 8006ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ca8:	fb01 f202 	mul.w	r2, r1, r2
 8006cac:	1a9b      	subs	r3, r3, r2
 8006cae:	1ac3      	subs	r3, r0, r3
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d901      	bls.n	8006cbe <f_write+0x298>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	8992      	ldrh	r2, [r2, #12]
 8006ccc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cd0:	fb00 f202 	mul.w	r2, r0, r2
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	69f9      	ldr	r1, [r7, #28]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fd fa77 	bl	80041d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	7d1b      	ldrb	r3, [r3, #20]
 8006ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	4413      	add	r3, r2
 8006cf6:	61fb      	str	r3, [r7, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	441a      	add	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	619a      	str	r2, [r3, #24]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	bf38      	it	cc
 8006d10:	461a      	movcc	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	441a      	add	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f aeb5 	bne.w	8006a9c <f_write+0x76>
 8006d32:	e000      	b.n	8006d36 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d34:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	7d1b      	ldrb	r3, [r3, #20]
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f107 0208 	add.w	r2, r7, #8
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff faba 	bl	80062d8 <validate>
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d168      	bne.n	8006e40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7d1b      	ldrb	r3, [r3, #20]
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d062      	beq.n	8006e40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	7d1b      	ldrb	r3, [r3, #20]
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da15      	bge.n	8006db0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	7858      	ldrb	r0, [r3, #1]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	2301      	movs	r3, #1
 8006d94:	f7fd f95c 	bl	8004050 <disk_write>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <f_sync+0x54>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e04f      	b.n	8006e42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7d1b      	ldrb	r3, [r3, #20]
 8006da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006db0:	f7fd f890 	bl	8003ed4 <get_fattime>
 8006db4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f7fd fc34 	bl	800462c <move_window>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d138      	bne.n	8006e40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	330b      	adds	r3, #11
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	330b      	adds	r3, #11
 8006dde:	f042 0220 	orr.w	r2, r2, #32
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	461a      	mov	r2, r3
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	f7fe f9c2 	bl	800517a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f103 021c 	add.w	r2, r3, #28
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7fd f9b8 	bl	8004178 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3316      	adds	r3, #22
 8006e0c:	6939      	ldr	r1, [r7, #16]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd f9b2 	bl	8004178 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3312      	adds	r3, #18
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd f991 	bl	8004142 <st_word>
					fs->wflag = 1;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2201      	movs	r2, #1
 8006e24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd fc2d 	bl	8004688 <sync_fs>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7d1b      	ldrb	r3, [r3, #20]
 8006e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff ff7b 	bl	8006d4e <f_sync>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d118      	bne.n	8006e94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f107 0208 	add.w	r2, r7, #8
 8006e68:	4611      	mov	r1, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fa34 	bl	80062d8 <validate>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10c      	bne.n	8006e94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fd fb30 	bl	80044e4 <dec_lock>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b092      	sub	sp, #72	; 0x48
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006eaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006eae:	f107 030c 	add.w	r3, r7, #12
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe ff89 	bl	8005dcc <find_volume>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 8099 	bne.w	8006ffc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	3b02      	subs	r3, #2
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d804      	bhi.n	8006ee8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e089      	b.n	8006ffc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d128      	bne.n	8006f46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fd fc4f 	bl	80047a6 <get_fat>
 8006f08:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f10:	d103      	bne.n	8006f1a <f_getfree+0x7c>
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f18:	e063      	b.n	8006fe2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d103      	bne.n	8006f28 <f_getfree+0x8a>
 8006f20:	2302      	movs	r3, #2
 8006f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f26:	e05c      	b.n	8006fe2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <f_getfree+0x96>
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f30:	3301      	adds	r3, #1
 8006f32:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f36:	3301      	adds	r3, #1
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d3db      	bcc.n	8006efc <f_getfree+0x5e>
 8006f44:	e04d      	b.n	8006fe2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	2300      	movs	r3, #0
 8006f58:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d113      	bne.n	8006f88 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f7fd fb5f 	bl	800462c <move_window>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006f74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d131      	bne.n	8006fe0 <f_getfree+0x142>
							p = fs->win;
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	3338      	adds	r3, #56	; 0x38
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	899b      	ldrh	r3, [r3, #12]
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d10f      	bne.n	8006fb0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f92:	f7fd f89b 	bl	80040cc <ld_word>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <f_getfree+0x104>
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	3b02      	subs	r3, #2
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
 8006fae:	e010      	b.n	8006fd2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb2:	f7fd f8a3 	bl	80040fc <ld_dword>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <f_getfree+0x128>
 8006fc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	3304      	adds	r3, #4
 8006fca:	633b      	str	r3, [r7, #48]	; 0x30
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	3b04      	subs	r3, #4
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1bd      	bne.n	8006f5a <f_getfree+0xbc>
 8006fde:	e000      	b.n	8006fe2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006fe0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fe6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	791a      	ldrb	r2, [r3, #4]
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006ffc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007000:	4618      	mov	r0, r3
 8007002:	3748      	adds	r7, #72	; 0x48
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007016:	2301      	movs	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800701e:	4b1f      	ldr	r3, [pc, #124]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007020:	7a5b      	ldrb	r3, [r3, #9]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d131      	bne.n	800708c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007028:	4b1c      	ldr	r3, [pc, #112]	; (800709c <FATFS_LinkDriverEx+0x94>)
 800702a:	7a5b      	ldrb	r3, [r3, #9]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	4b1a      	ldr	r3, [pc, #104]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007032:	2100      	movs	r1, #0
 8007034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007036:	4b19      	ldr	r3, [pc, #100]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007038:	7a5b      	ldrb	r3, [r3, #9]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4a17      	ldr	r2, [pc, #92]	; (800709c <FATFS_LinkDriverEx+0x94>)
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007046:	4b15      	ldr	r3, [pc, #84]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007048:	7a5b      	ldrb	r3, [r3, #9]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007050:	4413      	add	r3, r2
 8007052:	79fa      	ldrb	r2, [r7, #7]
 8007054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007056:	4b11      	ldr	r3, [pc, #68]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007058:	7a5b      	ldrb	r3, [r3, #9]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	b2d1      	uxtb	r1, r2
 8007060:	4a0e      	ldr	r2, [pc, #56]	; (800709c <FATFS_LinkDriverEx+0x94>)
 8007062:	7251      	strb	r1, [r2, #9]
 8007064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007066:	7dbb      	ldrb	r3, [r7, #22]
 8007068:	3330      	adds	r3, #48	; 0x30
 800706a:	b2da      	uxtb	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	3301      	adds	r3, #1
 8007074:	223a      	movs	r2, #58	; 0x3a
 8007076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	3302      	adds	r3, #2
 800707c:	222f      	movs	r2, #47	; 0x2f
 800707e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3303      	adds	r3, #3
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20002c64 	.word	0x20002c64

080070a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070aa:	2200      	movs	r2, #0
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff ffaa 	bl	8007008 <FATFS_LinkDriverEx>
 80070b4:	4603      	mov	r3, r0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	2b7f      	cmp	r3, #127	; 0x7f
 80070d0:	d802      	bhi.n	80070d8 <ff_convert+0x18>
		c = chr;
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	81fb      	strh	r3, [r7, #14]
 80070d6:	e025      	b.n	8007124 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	2bff      	cmp	r3, #255	; 0xff
 80070e2:	d805      	bhi.n	80070f0 <ff_convert+0x30>
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	3b80      	subs	r3, #128	; 0x80
 80070e8:	4a12      	ldr	r2, [pc, #72]	; (8007134 <ff_convert+0x74>)
 80070ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ee:	e000      	b.n	80070f2 <ff_convert+0x32>
 80070f0:	2300      	movs	r3, #0
 80070f2:	81fb      	strh	r3, [r7, #14]
 80070f4:	e016      	b.n	8007124 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80070f6:	2300      	movs	r3, #0
 80070f8:	81fb      	strh	r3, [r7, #14]
 80070fa:	e009      	b.n	8007110 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80070fc:	89fb      	ldrh	r3, [r7, #14]
 80070fe:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <ff_convert+0x74>)
 8007100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007104:	88fa      	ldrh	r2, [r7, #6]
 8007106:	429a      	cmp	r2, r3
 8007108:	d006      	beq.n	8007118 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800710a:	89fb      	ldrh	r3, [r7, #14]
 800710c:	3301      	adds	r3, #1
 800710e:	81fb      	strh	r3, [r7, #14]
 8007110:	89fb      	ldrh	r3, [r7, #14]
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	d9f2      	bls.n	80070fc <ff_convert+0x3c>
 8007116:	e000      	b.n	800711a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007118:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800711a:	89fb      	ldrh	r3, [r7, #14]
 800711c:	3380      	adds	r3, #128	; 0x80
 800711e:	b29b      	uxth	r3, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007124:	89fb      	ldrh	r3, [r7, #14]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	08007428 	.word	0x08007428

08007138 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007142:	88fb      	ldrh	r3, [r7, #6]
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d201      	bcs.n	800714e <ff_wtoupper+0x16>
 800714a:	4b3e      	ldr	r3, [pc, #248]	; (8007244 <ff_wtoupper+0x10c>)
 800714c:	e000      	b.n	8007150 <ff_wtoupper+0x18>
 800714e:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <ff_wtoupper+0x110>)
 8007150:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	617a      	str	r2, [r7, #20]
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800715c:	8a7b      	ldrh	r3, [r7, #18]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d068      	beq.n	8007234 <ff_wtoupper+0xfc>
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	8a7b      	ldrh	r3, [r7, #18]
 8007166:	429a      	cmp	r2, r3
 8007168:	d364      	bcc.n	8007234 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	1c9a      	adds	r2, r3, #2
 800716e:	617a      	str	r2, [r7, #20]
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	823b      	strh	r3, [r7, #16]
 8007174:	8a3b      	ldrh	r3, [r7, #16]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	81fb      	strh	r3, [r7, #14]
 800717a:	8a3b      	ldrh	r3, [r7, #16]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	8a79      	ldrh	r1, [r7, #18]
 8007184:	8a3b      	ldrh	r3, [r7, #16]
 8007186:	440b      	add	r3, r1
 8007188:	429a      	cmp	r2, r3
 800718a:	da49      	bge.n	8007220 <ff_wtoupper+0xe8>
			switch (cmd) {
 800718c:	89fb      	ldrh	r3, [r7, #14]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d84f      	bhi.n	8007232 <ff_wtoupper+0xfa>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <ff_wtoupper+0x60>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071cf 	.word	0x080071cf
 80071a0:	080071e5 	.word	0x080071e5
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071f5 	.word	0x080071f5
 80071ac:	080071fd 	.word	0x080071fd
 80071b0:	08007205 	.word	0x08007205
 80071b4:	0800720d 	.word	0x0800720d
 80071b8:	08007215 	.word	0x08007215
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80071bc:	88fa      	ldrh	r2, [r7, #6]
 80071be:	8a7b      	ldrh	r3, [r7, #18]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	80fb      	strh	r3, [r7, #6]
 80071cc:	e027      	b.n	800721e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80071ce:	88fa      	ldrh	r2, [r7, #6]
 80071d0:	8a7b      	ldrh	r3, [r7, #18]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	80fb      	strh	r3, [r7, #6]
 80071e2:	e01c      	b.n	800721e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	3b10      	subs	r3, #16
 80071e8:	80fb      	strh	r3, [r7, #6]
 80071ea:	e018      	b.n	800721e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	3b20      	subs	r3, #32
 80071f0:	80fb      	strh	r3, [r7, #6]
 80071f2:	e014      	b.n	800721e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	3b30      	subs	r3, #48	; 0x30
 80071f8:	80fb      	strh	r3, [r7, #6]
 80071fa:	e010      	b.n	800721e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	3b1a      	subs	r3, #26
 8007200:	80fb      	strh	r3, [r7, #6]
 8007202:	e00c      	b.n	800721e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	3308      	adds	r3, #8
 8007208:	80fb      	strh	r3, [r7, #6]
 800720a:	e008      	b.n	800721e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800720c:	88fb      	ldrh	r3, [r7, #6]
 800720e:	3b50      	subs	r3, #80	; 0x50
 8007210:	80fb      	strh	r3, [r7, #6]
 8007212:	e004      	b.n	800721e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800721a:	80fb      	strh	r3, [r7, #6]
 800721c:	bf00      	nop
			}
			break;
 800721e:	e008      	b.n	8007232 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007220:	89fb      	ldrh	r3, [r7, #14]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d195      	bne.n	8007152 <ff_wtoupper+0x1a>
 8007226:	8a3b      	ldrh	r3, [r7, #16]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4413      	add	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007230:	e78f      	b.n	8007152 <ff_wtoupper+0x1a>
			break;
 8007232:	bf00      	nop
	}

	return chr;
 8007234:	88fb      	ldrh	r3, [r7, #6]
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	08007528 	.word	0x08007528
 8007248:	0800771c 	.word	0x0800771c

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4d0d      	ldr	r5, [pc, #52]	; (8007284 <__libc_init_array+0x38>)
 8007250:	4c0d      	ldr	r4, [pc, #52]	; (8007288 <__libc_init_array+0x3c>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	2600      	movs	r6, #0
 8007258:	42a6      	cmp	r6, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	4d0b      	ldr	r5, [pc, #44]	; (800728c <__libc_init_array+0x40>)
 800725e:	4c0c      	ldr	r4, [pc, #48]	; (8007290 <__libc_init_array+0x44>)
 8007260:	f000 f82e 	bl	80072c0 <_init>
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	2600      	movs	r6, #0
 800726a:	42a6      	cmp	r6, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f855 3b04 	ldr.w	r3, [r5], #4
 8007274:	4798      	blx	r3
 8007276:	3601      	adds	r6, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f855 3b04 	ldr.w	r3, [r5], #4
 800727e:	4798      	blx	r3
 8007280:	3601      	adds	r6, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	080077e0 	.word	0x080077e0
 8007288:	080077e0 	.word	0x080077e0
 800728c:	080077e0 	.word	0x080077e0
 8007290:	080077e4 	.word	0x080077e4

08007294 <memcpy>:
 8007294:	440a      	add	r2, r1
 8007296:	4291      	cmp	r1, r2
 8007298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800729c:	d100      	bne.n	80072a0 <memcpy+0xc>
 800729e:	4770      	bx	lr
 80072a0:	b510      	push	{r4, lr}
 80072a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072aa:	4291      	cmp	r1, r2
 80072ac:	d1f9      	bne.n	80072a2 <memcpy+0xe>
 80072ae:	bd10      	pop	{r4, pc}

080072b0 <memset>:
 80072b0:	4402      	add	r2, r0
 80072b2:	4603      	mov	r3, r0
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d100      	bne.n	80072ba <memset+0xa>
 80072b8:	4770      	bx	lr
 80072ba:	f803 1b01 	strb.w	r1, [r3], #1
 80072be:	e7f9      	b.n	80072b4 <memset+0x4>

080072c0 <_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr

080072cc <_fini>:
 80072cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ce:	bf00      	nop
 80072d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072d2:	bc08      	pop	{r3}
 80072d4:	469e      	mov	lr, r3
 80072d6:	4770      	bx	lr
