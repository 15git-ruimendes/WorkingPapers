
FileSystem_SD_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007710  08007710  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007710  08007710  00017710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007718  08007718  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  2000000c  0800772c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  0800772c  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265a  00000000  00000000  0002de5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b58  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010077  00000000  00000000  00052698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd361  00000000  00000000  0006270f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011fa70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f04  00000000  00000000  0011fac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007598 	.word	0x08007598

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007598 	.word	0x08007598

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800051e:	af02      	add	r7, sp, #8
  FRESULT res;
  //FATFS SDFatFS;
  //FIL SDFile;
  //uint8_t SDPath[] = "";
  uint32_t WrittenBytes, ReadBytes;
  uint8_t WriteBuffer[] = "Text Example Lets see if this works /n ans if /n works fine";
 8000520:	4b41      	ldr	r3, [pc, #260]	; (8000628 <main+0x110>)
 8000522:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fb62 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f87c 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f92c 	bl	80007a0 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000548:	f003 fe80 	bl	800424c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if (f_mount(&SDFatFS, (TCHAR const*)SDPath,1) != FR_OK)
 800054c:	2201      	movs	r2, #1
 800054e:	4937      	ldr	r1, [pc, #220]	; (800062c <main+0x114>)
 8000550:	4837      	ldr	r0, [pc, #220]	; (8000630 <main+0x118>)
 8000552:	f005 fe0d 	bl	8006170 <f_mount>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <main+0x48>
	  Error_Handler();
 800055c:	f000 f978 	bl	8000850 <Error_Handler>

  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, ReadBuffer, sizeof(ReadBuffer)) != FR_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	2200      	movs	r2, #0
 800056a:	2107      	movs	r1, #7
 800056c:	482f      	ldr	r0, [pc, #188]	; (800062c <main+0x114>)
 800056e:	f006 fb5f 	bl	8006c30 <f_mkfs>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0x64>
	  Error_Handler();
 8000578:	f000 f96a 	bl	8000850 <Error_Handler>
  // Open a File
  if (f_open(&SDFile, "STM32_SDText.txt",FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800057c:	220a      	movs	r2, #10
 800057e:	492d      	ldr	r1, [pc, #180]	; (8000634 <main+0x11c>)
 8000580:	482d      	ldr	r0, [pc, #180]	; (8000638 <main+0x120>)
 8000582:	f005 fe3b 	bl	80061fc <f_open>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <main+0x78>
	  Error_Handler();
 800058c:	f000 f960 	bl	8000850 <Error_Handler>

  // Write Text
  res = f_write(&SDFile,WriteBuffer,strlen((char*)WriteBuffer),(void *)& WrittenBytes);
 8000590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fe35 	bl	8000204 <strlen>
 800059a:	4602      	mov	r2, r0
 800059c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80005a0:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80005a4:	4824      	ldr	r0, [pc, #144]	; (8000638 <main+0x120>)
 80005a6:	f006 f926 	bl	80067f6 <f_write>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

  if (res != FR_OK)
 80005b0:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <main+0xa4>
	  Error_Handler();
 80005b8:	f000 f94a 	bl	8000850 <Error_Handler>

  f_close(&SDFile);
 80005bc:	481e      	ldr	r0, [pc, #120]	; (8000638 <main+0x120>)
 80005be:	f006 fb0d 	bl	8006bdc <f_close>

  // Read from File
  if (f_open(&SDFile, "STM32_SDText.txt",FA_READ) != FR_OK)
 80005c2:	2201      	movs	r2, #1
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0x11c>)
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <main+0x120>)
 80005c8:	f005 fe18 	bl	80061fc <f_open>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <main+0xbe>
	  Error_Handler();
 80005d2:	f000 f93d 	bl	8000850 <Error_Handler>

  memset(ReadBuffer,0,sizeof(ReadBuffer)); // Reset Buffer
 80005d6:	463b      	mov	r3, r7
 80005d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 ffd2 	bl	8007588 <memset>
  res = f_read(&SDFile,ReadBuffer,sizeof(ReadBuffer),(UINT *)&ReadBytes);
 80005e4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80005e8:	4639      	mov	r1, r7
 80005ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <main+0x120>)
 80005f0:	f005 ffc2 	bl	8006578 <f_read>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247

  if(res != FR_OK)
 80005fa:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <main+0xee>
	  Error_Handler();
 8000602:	f000 f925 	bl	8000850 <Error_Handler>

  f_close(&SDFile);
 8000606:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x120>)
 8000608:	f006 fae8 	bl	8006bdc <f_close>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fafa 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f814 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8c4 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 f89a 	bl	8000750 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800061c:	f000 f878 	bl	8000710 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000620:	f003 fe14 	bl	800424c <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x10c>
 8000626:	bf00      	nop
 8000628:	080075c4 	.word	0x080075c4
 800062c:	20000174 	.word	0x20000174
 8000630:	20000178 	.word	0x20000178
 8000634:	080075b0 	.word	0x080075b0
 8000638:	200003a8 	.word	0x200003a8

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 ff9c 	bl	8007588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fcf1 	bl	80020ac <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d0:	f000 f8be 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f962 	bl	80019b8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f8a9 	bl	8000850 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <MX_SDIO_SD_Init+0x3c>)
 8000718:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <MX_SDIO_SD_Init+0x38>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	20000028 	.word	0x20000028
 800074c:	40012c00 	.word	0x40012c00

08000750 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_DMA_Init+0x4c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_DMA_Init+0x4c>)
 8000760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	203b      	movs	r0, #59	; 0x3b
 8000778:	f000 fbb5 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800077c:	203b      	movs	r0, #59	; 0x3b
 800077e:	f000 fbce 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2045      	movs	r0, #69	; 0x45
 8000788:	f000 fbad 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800078c:	2045      	movs	r0, #69	; 0x45
 800078e:	f000 fbc6 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a22      	ldr	r2, [pc, #136]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_GPIO_Init+0xa8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_GPIO_Init+0xa8>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_GPIO_Init+0xa8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <MX_GPIO_Init+0xa8>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_GPIO_Init+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000826:	2380      	movs	r3, #128	; 0x80
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0xac>)
 800083a:	f000 ff29 	bl	8001690 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09a      	sub	sp, #104	; 0x68
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	223c      	movs	r2, #60	; 0x3c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f006 fe5b 	bl	8007588 <memset>
  if(hsd->Instance==SDIO)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a80      	ldr	r2, [pc, #512]	; (8000ad8 <HAL_SD_MspInit+0x22c>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	f040 80f8 	bne.w	8000ace <HAL_SD_MspInit+0x222>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80008de:	2360      	movs	r3, #96	; 0x60
 80008e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008e2:	2300      	movs	r3, #0
 80008e4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fa0e 	bl	8001d10 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80008fa:	f7ff ffa9 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b76      	ldr	r3, [pc, #472]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a75      	ldr	r2, [pc, #468]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b73      	ldr	r3, [pc, #460]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6e      	ldr	r2, [pc, #440]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b6c      	ldr	r3, [pc, #432]	; (8000adc <HAL_SD_MspInit+0x230>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b68      	ldr	r3, [pc, #416]	; (8000adc <HAL_SD_MspInit+0x230>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a67      	ldr	r2, [pc, #412]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b65      	ldr	r3, [pc, #404]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b61      	ldr	r3, [pc, #388]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a60      	ldr	r2, [pc, #384]	; (8000adc <HAL_SD_MspInit+0x230>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5e      	ldr	r3, [pc, #376]	; (8000adc <HAL_SD_MspInit+0x230>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800097e:	230c      	movs	r3, #12
 8000980:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000986:	4619      	mov	r1, r3
 8000988:	4855      	ldr	r0, [pc, #340]	; (8000ae0 <HAL_SD_MspInit+0x234>)
 800098a:	f000 fe81 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800098e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000992:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a0:	230c      	movs	r3, #12
 80009a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a8:	4619      	mov	r1, r3
 80009aa:	484e      	ldr	r0, [pc, #312]	; (8000ae4 <HAL_SD_MspInit+0x238>)
 80009ac:	f000 fe70 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009c2:	230c      	movs	r3, #12
 80009c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ca:	4619      	mov	r1, r3
 80009cc:	4846      	ldr	r0, [pc, #280]	; (8000ae8 <HAL_SD_MspInit+0x23c>)
 80009ce:	f000 fe5f 	bl	8001690 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80009d2:	4b46      	ldr	r3, [pc, #280]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009d4:	4a46      	ldr	r2, [pc, #280]	; (8000af0 <HAL_SD_MspInit+0x244>)
 80009d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80009d8:	4b44      	ldr	r3, [pc, #272]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009de:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009fc:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <HAL_SD_MspInit+0x240>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a02:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a06:	2220      	movs	r2, #32
 8000a08:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a16:	4b35      	ldr	r3, [pc, #212]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a24:	4b31      	ldr	r3, [pc, #196]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a2c:	482f      	ldr	r0, [pc, #188]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a2e:	f000 fa91 	bl	8000f54 <HAL_DMA_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_SD_MspInit+0x190>
    {
      Error_Handler();
 8000a38:	f7ff ff0a 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a2b      	ldr	r2, [pc, #172]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a40:	641a      	str	r2, [r3, #64]	; 0x40
 8000a42:	4a2a      	ldr	r2, [pc, #168]	; (8000aec <HAL_SD_MspInit+0x240>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <HAL_SD_MspInit+0x24c>)
 8000a4c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a54:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a68:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a88:	2204      	movs	r2, #4
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000aa2:	4814      	ldr	r0, [pc, #80]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000aa4:	f000 fa56 	bl	8000f54 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_SD_MspInit+0x206>
    {
      Error_Handler();
 8000aae:	f7ff fecf 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_SD_MspInit+0x248>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2031      	movs	r0, #49	; 0x31
 8000ac4:	f000 fa0f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ac8:	2031      	movs	r0, #49	; 0x31
 8000aca:	f000 fa28 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3768      	adds	r7, #104	; 0x68
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	200000ac 	.word	0x200000ac
 8000af0:	40026458 	.word	0x40026458
 8000af4:	2000010c 	.word	0x2000010c
 8000af8:	400264a0 	.word	0x400264a0

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f8ae 	bl	8000ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <SDIO_IRQHandler+0x10>)
 8000b56:	f001 ff9f 	bl	8002a98 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000028 	.word	0x20000028

08000b64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA2_Stream3_IRQHandler+0x10>)
 8000b6a:	f000 fb1b 	bl	80011a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000ac 	.word	0x200000ac

08000b78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA2_Stream6_IRQHandler+0x10>)
 8000b7e:	f000 fb11 	bl	80011a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000010c 	.word	0x2000010c

08000b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f006 fcaf 	bl	8007540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fc99 	bl	8000518 <main>
  bx  lr    
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000be8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf4:	08007720 	.word	0x08007720
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bfc:	20000614 	.word	0x20000614

08000c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_Init+0x40>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_Init+0x40>)
 8000c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x40>)
 8000c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 f94f 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	200f      	movs	r0, #15
 8000c34:	f000 f808 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe10 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x54>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f967 	bl	8000f3a <HAL_SYSTICK_Config>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00e      	b.n	8000c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d80a      	bhi.n	8000c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c84:	f000 f92f 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_InitTick+0x5c>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e000      	b.n	8000c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x20>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x24>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_IncTick+0x24>)
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	2000016c 	.word	0x2000016c

08000cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_GetTick+0x14>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000016c 	.word	0x2000016c

08000ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d00:	d005      	beq.n	8000d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Delay+0x44>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d0e:	bf00      	nop
 8000d10:	f7ff ffde 	bl	8000cd0 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d8f7      	bhi.n	8000d10 <HAL_Delay+0x28>
  {
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f7ff ff8e 	bl	8000dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff29 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff3e 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff8e 	bl	8000e24 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5d 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff31 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff feb6 	bl	8000cd0 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e099      	b.n	80010a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f90:	e00f      	b.n	8000fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f92:	f7ff fe9d 	bl	8000cd0 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d908      	bls.n	8000fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e078      	b.n	80010a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1e8      	bne.n	8000f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <HAL_DMA_Init+0x158>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2b04      	cmp	r3, #4
 800100a:	d107      	bne.n	800101c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4313      	orrs	r3, r2
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f023 0307 	bic.w	r3, r3, #7
 8001032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4313      	orrs	r3, r2
 800103c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	2b04      	cmp	r3, #4
 8001044:	d117      	bne.n	8001076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4313      	orrs	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fa9d 	bl	8001598 <DMA_CheckFifoParam>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001072:	2301      	movs	r3, #1
 8001074:	e016      	b.n	80010a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fa54 	bl	800152c <DMA_CalcBaseAndBitshift>
 8001084:	4603      	mov	r3, r0
 8001086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108c:	223f      	movs	r2, #63	; 0x3f
 800108e:	409a      	lsls	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	f010803f 	.word	0xf010803f

080010b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_DMA_Start_IT+0x26>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e040      	b.n	8001158 <HAL_DMA_Start_IT+0xa8>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d12f      	bne.n	800114a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2202      	movs	r2, #2
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 f9e6 	bl	80014d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	223f      	movs	r2, #63	; 0x3f
 800110a:	409a      	lsls	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0216 	orr.w	r2, r2, #22
 800111e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2b00      	cmp	r3, #0
 8001126:	d007      	beq.n	8001138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0208 	orr.w	r2, r2, #8
 8001136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0201 	orr.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e005      	b.n	8001156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001152:	2302      	movs	r3, #2
 8001154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001156:	7dfb      	ldrb	r3, [r7, #23]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d004      	beq.n	800117e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00c      	b.n	8001198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011b0:	4b8e      	ldr	r3, [pc, #568]	; (80013ec <HAL_DMA_IRQHandler+0x248>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a8e      	ldr	r2, [pc, #568]	; (80013f0 <HAL_DMA_IRQHandler+0x24c>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0a9b      	lsrs	r3, r3, #10
 80011bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ce:	2208      	movs	r2, #8
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d01a      	beq.n	8001210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0204 	bic.w	r2, r2, #4
 80011f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fc:	2208      	movs	r2, #8
 80011fe:	409a      	lsls	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2201      	movs	r2, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d012      	beq.n	8001246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00b      	beq.n	8001246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	2201      	movs	r2, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123e:	f043 0202 	orr.w	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	2204      	movs	r2, #4
 800124c:	409a      	lsls	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d012      	beq.n	800127c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00b      	beq.n	800127c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2204      	movs	r2, #4
 800126a:	409a      	lsls	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	f043 0204 	orr.w	r2, r3, #4
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2210      	movs	r2, #16
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d043      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d03c      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	2210      	movs	r2, #16
 80012a0:	409a      	lsls	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d018      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d108      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d024      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
 80012d2:	e01f      	b.n	8001314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01b      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
 80012e4:	e016      	b.n	8001314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d107      	bne.n	8001304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0208 	bic.w	r2, r2, #8
 8001302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001318:	2220      	movs	r2, #32
 800131a:	409a      	lsls	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 808f 	beq.w	8001444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8087 	beq.w	8001444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133a:	2220      	movs	r2, #32
 800133c:	409a      	lsls	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b05      	cmp	r3, #5
 800134c:	d136      	bne.n	80013bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0216 	bic.w	r2, r2, #22
 800135c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800136c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <HAL_DMA_IRQHandler+0x1da>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0208 	bic.w	r2, r2, #8
 800138c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	223f      	movs	r2, #63	; 0x3f
 8001394:	409a      	lsls	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d07e      	beq.n	80014b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
        }
        return;
 80013ba:	e079      	b.n	80014b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01d      	beq.n	8001406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10d      	bne.n	80013f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d031      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
 80013e8:	e02c      	b.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000
 80013f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d023      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e01e      	b.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10f      	bne.n	8001434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0210 	bic.w	r2, r2, #16
 8001422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	2b00      	cmp	r3, #0
 800144a:	d032      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d022      	beq.n	800149e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2205      	movs	r2, #5
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3301      	adds	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	d307      	bcc.n	800148c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f2      	bne.n	8001470 <HAL_DMA_IRQHandler+0x2cc>
 800148a:	e000      	b.n	800148e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800148c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
 80014ae:	e000      	b.n	80014b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80014b0:	bf00      	nop
    }
  }
}
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d108      	bne.n	8001510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800150e:	e007      	b.n	8001520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3b10      	subs	r3, #16
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <DMA_CalcBaseAndBitshift+0x64>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <DMA_CalcBaseAndBitshift+0x68>)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4413      	add	r3, r2
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d909      	bls.n	800156e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	659a      	str	r2, [r3, #88]	; 0x58
 800156c:	e007      	b.n	800157e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001576:	f023 0303 	bic.w	r3, r3, #3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	aaaaaaab 	.word	0xaaaaaaab
 8001594:	08007654 	.word	0x08007654

08001598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d11f      	bne.n	80015f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d856      	bhi.n	8001666 <DMA_CheckFifoParam+0xce>
 80015b8:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <DMA_CheckFifoParam+0x28>)
 80015ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015be:	bf00      	nop
 80015c0:	080015d1 	.word	0x080015d1
 80015c4:	080015e3 	.word	0x080015e3
 80015c8:	080015d1 	.word	0x080015d1
 80015cc:	08001667 	.word	0x08001667
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d046      	beq.n	800166a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015e0:	e043      	b.n	800166a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015ea:	d140      	bne.n	800166e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f0:	e03d      	b.n	800166e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015fa:	d121      	bne.n	8001640 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d837      	bhi.n	8001672 <DMA_CheckFifoParam+0xda>
 8001602:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <DMA_CheckFifoParam+0x70>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001619 	.word	0x08001619
 800160c:	0800161f 	.word	0x0800161f
 8001610:	08001619 	.word	0x08001619
 8001614:	08001631 	.word	0x08001631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
      break;
 800161c:	e030      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d025      	beq.n	8001676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800162e:	e022      	b.n	8001676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001638:	d11f      	bne.n	800167a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800163e:	e01c      	b.n	800167a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d903      	bls.n	800164e <DMA_CheckFifoParam+0xb6>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d003      	beq.n	8001654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800164c:	e018      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
      break;
 8001652:	e015      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00e      	beq.n	800167e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
      break;
 8001664:	e00b      	b.n	800167e <DMA_CheckFifoParam+0xe6>
      break;
 8001666:	bf00      	nop
 8001668:	e00a      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;
 800166a:	bf00      	nop
 800166c:	e008      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;
 800166e:	bf00      	nop
 8001670:	e006      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;
 8001672:	bf00      	nop
 8001674:	e004      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;
 8001676:	bf00      	nop
 8001678:	e002      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;   
 800167a:	bf00      	nop
 800167c:	e000      	b.n	8001680 <DMA_CheckFifoParam+0xe8>
      break;
 800167e:	bf00      	nop
    }
  } 
  
  return status; 
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e153      	b.n	8001954 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8142 	bne.w	800194e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 809c 	beq.w	800194e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b54      	ldr	r3, [pc, #336]	; (800196c <HAL_GPIO_Init+0x2dc>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	4a53      	ldr	r2, [pc, #332]	; (800196c <HAL_GPIO_Init+0x2dc>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6453      	str	r3, [r2, #68]	; 0x44
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_GPIO_Init+0x2dc>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001832:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <HAL_GPIO_Init+0x2e0>)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	089b      	lsrs	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a46      	ldr	r2, [pc, #280]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x1f6>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1f2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a44      	ldr	r2, [pc, #272]	; (800197c <HAL_GPIO_Init+0x2ec>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1ee>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a43      	ldr	r2, [pc, #268]	; (8001980 <HAL_GPIO_Init+0x2f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1ea>
 8001876:	2303      	movs	r3, #3
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x1f8>
 800187a:	2307      	movs	r3, #7
 800187c:	e004      	b.n	8001888 <HAL_GPIO_Init+0x1f8>
 800187e:	2302      	movs	r3, #2
 8001880:	e002      	b.n	8001888 <HAL_GPIO_Init+0x1f8>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <HAL_GPIO_Init+0x1f8>
 8001886:	2300      	movs	r3, #0
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f002 0203 	and.w	r2, r2, #3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4093      	lsls	r3, r2
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001898:	4935      	ldr	r1, [pc, #212]	; (8001970 <HAL_GPIO_Init+0x2e0>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ca:	4a2e      	ldr	r2, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b0f      	cmp	r3, #15
 8001958:	f67f aea8 	bls.w	80016ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3724      	adds	r7, #36	; 0x24
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d002      	beq.n	80019a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e001      	b.n	80019aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff f912 	bl	8000cd0 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff f90e 	bl	8000cd0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f872 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08007644 	.word	0x08007644
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b090      	sub	sp, #64	; 0x40
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b94:	2300      	movs	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80a1 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bbc:	e09b      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bc2:	e098      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	627a      	str	r2, [r7, #36]	; 0x24
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bec:	2100      	movs	r1, #0
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf0:	fb03 f201 	mul.w	r2, r3, r1
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8001c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c04:	460a      	mov	r2, r1
 8001c06:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	4413      	add	r3, r2
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	2200      	movs	r2, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	61fa      	str	r2, [r7, #28]
 8001c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c1e:	f7fe faf9 	bl	8000214 <__aeabi_uldivmod>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4613      	mov	r3, r2
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	e053      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	2200      	movs	r2, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	617a      	str	r2, [r7, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c3e:	f04f 0b00 	mov.w	fp, #0
 8001c42:	4652      	mov	r2, sl
 8001c44:	465b      	mov	r3, fp
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	0159      	lsls	r1, r3, #5
 8001c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c54:	0150      	lsls	r0, r2, #5
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c76:	ebb2 0408 	subs.w	r4, r2, r8
 8001c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	00eb      	lsls	r3, r5, #3
 8001c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c8c:	00e2      	lsls	r2, r4, #3
 8001c8e:	4614      	mov	r4, r2
 8001c90:	461d      	mov	r5, r3
 8001c92:	eb14 030a 	adds.w	r3, r4, sl
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	eb45 030b 	adc.w	r3, r5, fp
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001caa:	4629      	mov	r1, r5
 8001cac:	028b      	lsls	r3, r1, #10
 8001cae:	4621      	mov	r1, r4
 8001cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	028a      	lsls	r2, r1, #10
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	60fa      	str	r2, [r7, #12]
 8001cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc8:	f7fe faa4 	bl	8000214 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840

08001d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d30:	4b87      	ldr	r3, [pc, #540]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4984      	ldr	r1, [pc, #528]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d010      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4978      	ldr	r1, [pc, #480]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8083 	beq.w	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001daa:	4b6a      	ldr	r3, [pc, #424]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001db6:	f7fe ff8b 	bl	8000cd0 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7fe ff87 	bl	8000cd0 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e162      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001dd0:	4b60      	ldr	r3, [pc, #384]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ddc:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02f      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d028      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e04:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e10:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d114      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe ff55 	bl	8000cd0 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ff51 	bl	8000cd0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e12a      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6e:	4938      	ldr	r1, [pc, #224]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
 8001e74:	e005      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e80:	6093      	str	r3, [r2, #8]
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8e:	4930      	ldr	r1, [pc, #192]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001ea6:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d011      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	491a      	ldr	r1, [pc, #104]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ef6:	d101      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d004      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	f040 8091 	bne.w	8002050 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe fecc 	bl	8000cd0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f3a:	e013      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f3c:	f7fe fec8 	bl	8000cd0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0a3      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40007000 	.word	0x40007000
 8001f58:	42470e40 	.word	0x42470e40
 8001f5c:	424711e0 	.word	0x424711e0
 8001f60:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e5      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d019      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d019      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd2:	d110      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	071b      	lsls	r3, r3, #28
 8001fee:	492c      	ldr	r1, [pc, #176]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	071b      	lsls	r3, r3, #28
 800201c:	4920      	ldr	r1, [pc, #128]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002024:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800202a:	f7fe fe51 	bl	8000cd0 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002032:	f7fe fe4d 	bl	8000cd0 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e028      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	490d      	ldr	r1, [pc, #52]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002084:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	424710d8 	.word	0x424710d8
 80020a8:	42470068 	.word	0x42470068

080020ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e273      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e24e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a68      	ldr	r2, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fdb4 	bl	8000cd0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe fdb0 	bl	8000cd0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e213      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fda0 	bl	8000cd0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fd9c 	bl	8000cd0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1ff      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1d3      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fd55 	bl	8000cd0 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7fe fd51 	bl	8000cd0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1b4      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4925      	ldr	r1, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fd34 	bl	8000cd0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe fd30 	bl	8000cd0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e193      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fd14 	bl	8000cd0 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fd10 	bl	8000cd0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e173      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fcfd 	bl	8000cd0 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00e      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fcf9 	bl	8000cd0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d907      	bls.n	80022f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e15c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b8a      	ldr	r3, [pc, #552]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8097 	beq.w	8002440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b7c      	ldr	r3, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_OscConfig+0x47c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_RCC_OscConfig+0x47c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a75      	ldr	r2, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x47c>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe fcb9 	bl	8000cd0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7fe fcb5 	bl	8000cd0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e118      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_RCC_OscConfig+0x47c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ea>
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x30c>
 800239e:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 80023b8:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a59      	ldr	r2, [pc, #356]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fc7a 	bl	8000cd0 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7fe fc76 	bl	8000cd0 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0d7      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <HAL_RCC_OscConfig+0x334>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fe fc64 	bl	8000cd0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fc60 	bl	8000cd0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0c1      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ad 	beq.w	80025a4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d060      	beq.n	8002518 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d145      	bne.n	80024ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <HAL_RCC_OscConfig+0x480>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fc34 	bl	8000cd0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fc30 	bl	8000cd0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e093      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	071b      	lsls	r3, r3, #28
 80024b6:	491b      	ldr	r1, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x480>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fc05 	bl	8000cd0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fc01 	bl	8000cd0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e064      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x41e>
 80024e8:	e05c      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_RCC_OscConfig+0x480>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fbee 	bl	8000cd0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f8:	f7fe fbea 	bl	8000cd0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04d      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x44c>
 8002516:	e045      	b.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e040      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
 800252c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x504>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d030      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d129      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d122      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d119      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d10f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fe f967 	bl	80008ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2203      	movs	r2, #3
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f814 	bl	8002614 <HAL_SD_InitCard>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00a      	b.n	800260c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af04      	add	r7, sp, #16
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002630:	2376      	movs	r3, #118	; 0x76
 8002632:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681d      	ldr	r5, [r3, #0]
 8002638:	466c      	mov	r4, sp
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264c:	4628      	mov	r0, r5
 800264e:	f001 f8cb 	bl	80037e8 <SDIO_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <HAL_SD_InitCard+0xf8>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f001 f903 	bl	800387a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002674:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_SD_InitCard+0xf8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800267a:	2002      	movs	r0, #2
 800267c:	f7fe fb34 	bl	8000ce8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 ff55 	bl	8003530 <SD_PowerON>
 8002686:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e02e      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fe74 	bl	8003394 <SD_InitCard>
 80026ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01b      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 f962 	bl	800399e <SDMMC_CmdBlockLength>
 80026da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00f      	beq.n	8002702 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_SD_InitCard+0xfc>)
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	422580a0 	.word	0x422580a0
 8002710:	004005ff 	.word	0x004005ff

08002714 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0be      	b.n	80028ba <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	f040 80b7 	bne.w	80028b8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275a:	429a      	cmp	r2, r3
 800275c:	d907      	bls.n	800276e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0a5      	b.n	80028ba <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800279c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2200      	movs	r2, #0
 80027a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3380      	adds	r3, #128	; 0x80
 80027d4:	4619      	mov	r1, r3
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	f7fe fc67 	bl	80010b0 <HAL_DMA_Start_IT>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d017      	beq.n	8002818 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e050      	b.n	80028ba <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	2b01      	cmp	r3, #1
 8002824:	d002      	beq.n	800282c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002830:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	025b      	lsls	r3, r3, #9
 8002836:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002838:	2390      	movs	r3, #144	; 0x90
 800283a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800283c:	2302      	movs	r3, #2
 800283e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f107 0210 	add.w	r2, r7, #16
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f001 f877 	bl	8003946 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d90a      	bls.n	8002874 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2282      	movs	r2, #130	; 0x82
 8002862:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800286a:	4618      	mov	r0, r3
 800286c:	f001 f8db 	bl	8003a26 <SDMMC_CmdReadMultiBlock>
 8002870:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002872:	e009      	b.n	8002888 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2281      	movs	r2, #129	; 0x81
 8002878:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f8ae 	bl	80039e2 <SDMMC_CmdReadSingleBlock>
 8002886:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e002      	b.n	80028ba <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3730      	adds	r7, #48	; 0x30
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	080031a3 	.word	0x080031a3
 80028c8:	08003215 	.word	0x08003215
 80028cc:	004005ff 	.word	0x004005ff
 80028d0:	4225858c 	.word	0x4225858c

080028d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0c1      	b.n	8002a80 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 80ba 	bne.w	8002a7e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	441a      	add	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	429a      	cmp	r2, r3
 800291c:	d907      	bls.n	800292e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0a8      	b.n	8002a80 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 021a 	orr.w	r2, r2, #26
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8002954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	4a4c      	ldr	r2, [pc, #304]	; (8002a8c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800295c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2200      	movs	r2, #0
 8002964:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	2b01      	cmp	r3, #1
 800296c:	d002      	beq.n	8002974 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d90a      	bls.n	8002990 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	22a0      	movs	r2, #160	; 0xa0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f891 	bl	8003aae <SDMMC_CmdWriteMultiBlock>
 800298c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800298e:	e009      	b.n	80029a4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2290      	movs	r2, #144	; 0x90
 8002994:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f864 	bl	8003a6a <SDMMC_CmdWriteSingleBlock>
 80029a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e057      	b.n	8002a80 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80029d0:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3380      	adds	r3, #128	; 0x80
 8002a06:	461a      	mov	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	025b      	lsls	r3, r3, #9
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	f7fe fb4f 	bl	80010b0 <HAL_DMA_Start_IT>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01a      	beq.n	8002a4e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 021a 	bic.w	r2, r2, #26
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e018      	b.n	8002a80 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a52:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002a5a:	2390      	movs	r3, #144	; 0x90
 8002a5c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f107 0210 	add.w	r2, r7, #16
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 ff66 	bl	8003946 <SDIO_ConfigData>

      return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3730      	adds	r7, #48	; 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	08003179 	.word	0x08003179
 8002a8c:	08003215 	.word	0x08003215
 8002a90:	004005ff 	.word	0x004005ff
 8002a94:	4225858c 	.word	0x4225858c

08002a98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_SD_IRQHandler+0x2e>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fdec 	bl	800369c <SD_Read_IT>
 8002ac4:	e155      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 808f 	beq.w	8002bf4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8002aee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002af2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d039      	beq.n	8002b82 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_SD_IRQHandler+0x8a>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d011      	beq.n	8002b46 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 ffe4 	bl	8003af4 <SDMMC_CmdStopTransfer>
 8002b2c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f91f 	bl	8002d84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_SD_IRQHandler+0xda>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f001 fc02 	bl	800437c <HAL_SD_RxCpltCallback>
 8002b78:	e0fb      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 fbf4 	bl	8004368 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b80:	e0f7      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80f2 	beq.w	8002d72 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d011      	beq.n	8002bbc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 ffa9 	bl	8003af4 <SDMMC_CmdStopTransfer>
 8002ba2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8e4 	bl	8002d84 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 80d5 	bne.w	8002d72 <HAL_SD_IRQHandler+0x2da>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 80cf 	bne.w	8002d72 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0208 	bic.w	r2, r2, #8
 8002be2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f001 fbbb 	bl	8004368 <HAL_SD_TxCpltCallback>
}
 8002bf2:	e0be      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_SD_IRQHandler+0x17c>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fd96 	bl	800373e <SD_Write_IT>
 8002c12:	e0ae      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80a7 	beq.w	8002d72 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	f043 0202 	orr.w	r2, r3, #2
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	f043 0208 	orr.w	r2, r3, #8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f043 0210 	orr.w	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 ff22 	bl	8003af4 <SDMMC_CmdStopTransfer>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f855 	bl	8002d84 <HAL_SD_ErrorCallback>
}
 8002cda:	e04a      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d045      	beq.n	8002d72 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_SD_IRQHandler+0x262>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <HAL_SD_IRQHandler+0x2e4>)
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fa2a 	bl	8001160 <HAL_DMA_Abort_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02f      	beq.n	8002d72 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 face 	bl	80032b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002d1c:	e029      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d104      	bne.n	8002d32 <HAL_SD_IRQHandler+0x29a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d011      	beq.n	8002d56 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <HAL_SD_IRQHandler+0x2e8>)
 8002d38:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fa0e 	bl	8001160 <HAL_DMA_Abort_IT>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d013      	beq.n	8002d72 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fae9 	bl	8003326 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002d54:	e00d      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f001 faf2 	bl	8004354 <HAL_SD_AbortCallback>
}
 8002d70:	e7ff      	b.n	8002d72 <HAL_SD_IRQHandler+0x2da>
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	080032b9 	.word	0x080032b9
 8002d80:	08003327 	.word	0x08003327

08002d84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da6:	0f9b      	lsrs	r3, r3, #30
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc4:	0e1b      	lsrs	r3, r3, #24
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df8:	0d1b      	lsrs	r3, r3, #20
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e16:	0bdb      	lsrs	r3, r3, #15
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e28:	0b9b      	lsrs	r3, r3, #14
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3a:	0b5b      	lsrs	r3, r3, #13
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e4c:	0b1b      	lsrs	r3, r3, #12
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d163      	bne.n	8002f30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e78:	0f92      	lsrs	r2, r2, #30
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e84:	0edb      	lsrs	r3, r3, #27
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e96:	0e1b      	lsrs	r3, r3, #24
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea8:	0d5b      	lsrs	r3, r3, #21
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ecc:	0bdb      	lsrs	r3, r3, #15
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	7e1b      	ldrb	r3, [r3, #24]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	3302      	adds	r3, #2
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7a1b      	ldrb	r3, [r3, #8]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f1c:	0a52      	lsrs	r2, r2, #9
 8002f1e:	fb03 f202 	mul.w	r2, r3, r2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002f2e:	e031      	b.n	8002f94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d11d      	bne.n	8002f74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	3301      	adds	r3, #1
 8002f54:	029a      	lsls	r2, r3, #10
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	661a      	str	r2, [r3, #96]	; 0x60
 8002f72:	e00f      	b.n	8002f94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_SD_GetCardCSD+0x344>)
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e09d      	b.n	80030d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	0b9b      	lsrs	r3, r3, #14
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	09db      	lsrs	r3, r3, #7
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	0fdb      	lsrs	r3, r3, #31
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	0f5b      	lsrs	r3, r3, #29
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	0d9b      	lsrs	r3, r3, #22
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	b2da      	uxtb	r2, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	0d5b      	lsrs	r3, r3, #21
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	b2da      	uxtb	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	0bdb      	lsrs	r3, r3, #15
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	0b9b      	lsrs	r3, r3, #14
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003066:	0b5b      	lsrs	r3, r3, #13
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	0b1b      	lsrs	r3, r3, #12
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	0a9b      	lsrs	r3, r3, #10
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	b2da      	uxtb	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	004005ff 	.word	0x004005ff

080030e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa7e 	bl	800364c <SD_SendStatus>
 8003150:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	0a5b      	lsrs	r3, r3, #9
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800316e:	693b      	ldr	r3, [r7, #16]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	2b82      	cmp	r3, #130	; 0x82
 80031b6:	d111      	bne.n	80031dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fc99 	bl	8003af4 <SDMMC_CmdStopTransfer>
 80031c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7ff fdd4 	bl	8002d84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0208 	bic.w	r2, r2, #8
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f001 f8b9 	bl	800437c <HAL_SD_RxCpltCallback>
#endif
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe f948 	bl	80014b8 <HAL_DMA_GetError>
 8003228:	4603      	mov	r3, r0
 800322a:	2b02      	cmp	r3, #2
 800322c:	d03e      	beq.n	80032ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d002      	beq.n	800324a <SD_DMAError+0x36>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d12d      	bne.n	80032a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a19      	ldr	r2, [pc, #100]	; (80032b4 <SD_DMAError+0xa0>)
 8003250:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003260:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff62 	bl	8003138 <HAL_SD_GetCardState>
 8003274:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d002      	beq.n	8003282 <SD_DMAError+0x6e>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10a      	bne.n	8003298 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fc34 	bl	8003af4 <SDMMC_CmdStopTransfer>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	431a      	orrs	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff fd6c 	bl	8002d84 <HAL_SD_ErrorCallback>
#endif
  }
}
 80032ac:	bf00      	nop
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	004005ff 	.word	0x004005ff

080032b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff ff31 	bl	8003138 <HAL_SD_GetCardState>
 80032d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b06      	cmp	r3, #6
 80032ea:	d002      	beq.n	80032f2 <SD_DMATxAbort+0x3a>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10a      	bne.n	8003308 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fbfc 	bl	8003af4 <SDMMC_CmdStopTransfer>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f001 f81f 	bl	8004354 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003316:	e002      	b.n	800331e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fd33 	bl	8002d84 <HAL_SD_ErrorCallback>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f240 523a 	movw	r2, #1338	; 0x53a
 800333c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff fefa 	bl	8003138 <HAL_SD_GetCardState>
 8003344:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d002      	beq.n	8003360 <SD_DMARxAbort+0x3a>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10a      	bne.n	8003376 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fbc5 	bl	8003af4 <SDMMC_CmdStopTransfer>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 ffe8 	bl	8004354 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003384:	e002      	b.n	800338c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fcfc 	bl	8002d84 <HAL_SD_ErrorCallback>
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b094      	sub	sp, #80	; 0x50
 8003398:	af04      	add	r7, sp, #16
 800339a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa76 	bl	8003896 <SDIO_GetPowerState>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033b4:	e0b8      	b.n	8003528 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d02f      	beq.n	800341e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fc5d 	bl	8003c82 <SDMMC_CmdSendCID>
 80033c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80033d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d2:	e0a9      	b.n	8003528 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 faa0 	bl	8003920 <SDIO_GetResponse>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2104      	movs	r1, #4
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fa97 	bl	8003920 <SDIO_GetResponse>
 80033f2:	4602      	mov	r2, r0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2108      	movs	r1, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa8e 	bl	8003920 <SDIO_GetResponse>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	210c      	movs	r1, #12
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa85 	bl	8003920 <SDIO_GetResponse>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	2b03      	cmp	r3, #3
 8003424:	d00d      	beq.n	8003442 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f107 020e 	add.w	r2, r7, #14
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fc63 	bl	8003cfc <SDMMC_CmdSetRelAdd>
 8003436:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <SD_InitCard+0xae>
    {
      return errorstate;
 800343e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003440:	e072      	b.n	8003528 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	2b03      	cmp	r3, #3
 8003448:	d036      	beq.n	80034b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800344a:	89fb      	ldrh	r3, [r7, #14]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fc2d 	bl	8003cbe <SDMMC_CmdSendCSD>
 8003464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <SD_InitCard+0xdc>
    {
      return errorstate;
 800346c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346e:	e05b      	b.n	8003528 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fa52 	bl	8003920 <SDIO_GetResponse>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2104      	movs	r1, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fa49 	bl	8003920 <SDIO_GetResponse>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2108      	movs	r1, #8
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fa40 	bl	8003920 <SDIO_GetResponse>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	210c      	movs	r1, #12
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fa37 	bl	8003920 <SDIO_GetResponse>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2104      	movs	r1, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fa2e 	bl	8003920 <SDIO_GetResponse>
 80034c4:	4603      	mov	r3, r0
 80034c6:	0d1a      	lsrs	r2, r3, #20
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	4619      	mov	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fc60 	bl	8002d98 <HAL_SD_GetCardCSD>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034e2:	e021      	b.n	8003528 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	2200      	movs	r2, #0
 80034f0:	461c      	mov	r4, r3
 80034f2:	4615      	mov	r5, r2
 80034f4:	4622      	mov	r2, r4
 80034f6:	462b      	mov	r3, r5
 80034f8:	4608      	mov	r0, r1
 80034fa:	f000 fb1d 	bl	8003b38 <SDMMC_CmdSelDesel>
 80034fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <SD_InitCard+0x176>
  {
    return errorstate;
 8003506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003508:	e00e      	b.n	8003528 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681d      	ldr	r5, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	466c      	mov	r4, sp
 8003512:	f103 0210 	add.w	r2, r3, #16
 8003516:	ca07      	ldmia	r2, {r0, r1, r2}
 8003518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800351c:	3304      	adds	r3, #4
 800351e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003520:	4628      	mov	r0, r5
 8003522:	f000 f961 	bl	80037e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3740      	adds	r7, #64	; 0x40
 800352c:	46bd      	mov	sp, r7
 800352e:	bdb0      	pop	{r4, r5, r7, pc}

08003530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fb18 	bl	8003b7e <SDMMC_CmdGoIdleState>
 800354e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	e072      	b.n	8003640 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fb2b 	bl	8003bba <SDMMC_CmdOperCond>
 8003564:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fb01 	bl	8003b7e <SDMMC_CmdGoIdleState>
 800357c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	e05b      	b.n	8003640 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003592:	2b01      	cmp	r3, #1
 8003594:	d137      	bne.n	8003606 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fb2b 	bl	8003bf8 <SDMMC_CmdAppCommand>
 80035a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02d      	beq.n	8003606 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035ae:	e047      	b.n	8003640 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fb1e 	bl	8003bf8 <SDMMC_CmdAppCommand>
 80035bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	e03b      	b.n	8003640 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	491e      	ldr	r1, [pc, #120]	; (8003648 <SD_PowerON+0x118>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fb34 	bl	8003c3c <SDMMC_CmdAppOperCommand>
 80035d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035e0:	e02e      	b.n	8003640 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f999 	bl	8003920 <SDIO_GetResponse>
 80035ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	0fdb      	lsrs	r3, r3, #31
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <SD_PowerON+0xcc>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <SD_PowerON+0xce>
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]

    count++;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800360c:	4293      	cmp	r3, r2
 800360e:	d802      	bhi.n	8003616 <SD_PowerON+0xe6>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0cc      	beq.n	80035b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800361c:	4293      	cmp	r3, r2
 800361e:	d902      	bls.n	8003626 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003624:	e00c      	b.n	8003640 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
 8003636:	e002      	b.n	800363e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	c1100000 	.word	0xc1100000

0800364c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800365c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003660:	e018      	b.n	8003694 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f000 fb65 	bl	8003d3e <SDMMC_CmdSendStatus>
 8003674:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <SD_SendStatus+0x34>
  {
    return errorstate;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	e009      	b.n	8003694 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f94a 	bl	8003920 <SDIO_GetResponse>
 800368c:	4602      	mov	r2, r0
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d03f      	beq.n	8003736 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e033      	b.n	8003724 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f8bc 	bl	800383e <SDIO_ReadFIFO>
 80036c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3b01      	subs	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3301      	adds	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3b01      	subs	r3, #1
 8003706:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3301      	adds	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3b01      	subs	r3, #1
 800371c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	3301      	adds	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2b07      	cmp	r3, #7
 8003728:	d9c8      	bls.n	80036bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d043      	beq.n	80037e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e037      	b.n	80037ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3301      	adds	r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3b01      	subs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	021a      	lsls	r2, r3, #8
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3301      	adds	r3, #1
 8003780:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3b01      	subs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	041a      	lsls	r2, r3, #16
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4313      	orrs	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	061a      	lsls	r2, r3, #24
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f107 0208 	add.w	r2, r7, #8
 80037c0:	4611      	mov	r1, r2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f848 	bl	8003858 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b07      	cmp	r3, #7
 80037d2:	d9c4      	bls.n	800375e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80037e0:	bf00      	nop
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80037e8:	b084      	sub	sp, #16
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	f107 001c 	add.w	r0, r7, #28
 80037f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80037fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003800:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003802:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003806:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800380a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800380e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003812:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	b004      	add	sp, #16
 800383c:	4770      	bx	lr

0800383e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0303 	and.w	r3, r3, #3
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038d0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80038d6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80038dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	b2db      	uxtb	r3, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3314      	adds	r3, #20
 800392e:	461a      	mov	r2, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
}  
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800396c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003972:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003978:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003990:	2300      	movs	r3, #0

}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b088      	sub	sp, #32
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80039ac:	2310      	movs	r3, #16
 80039ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff74 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	2110      	movs	r1, #16
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f9d7 	bl	8003d84 <SDMMC_GetCmdResp1>
 80039d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039d8:	69fb      	ldr	r3, [r7, #28]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b088      	sub	sp, #32
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80039f0:	2311      	movs	r3, #17
 80039f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039f4:	2340      	movs	r3, #64	; 0x40
 80039f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a02:	f107 0308 	add.w	r3, r7, #8
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff52 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	2111      	movs	r1, #17
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f9b5 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003a34:	2312      	movs	r3, #18
 8003a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a38:	2340      	movs	r3, #64	; 0x40
 8003a3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff30 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	2112      	movs	r1, #18
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f993 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a60:	69fb      	ldr	r3, [r7, #28]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003a78:	2318      	movs	r3, #24
 8003a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a7c:	2340      	movs	r3, #64	; 0x40
 8003a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff0e 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	2118      	movs	r1, #24
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f971 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b088      	sub	sp, #32
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003abc:	2319      	movs	r3, #25
 8003abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ac0:	2340      	movs	r3, #64	; 0x40
 8003ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003acc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff feec 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	2119      	movs	r1, #25
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f94f 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003b00:	230c      	movs	r3, #12
 8003b02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff feca 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <SDMMC_CmdStopTransfer+0x40>)
 8003b20:	210c      	movs	r1, #12
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f92e 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3720      	adds	r7, #32
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	05f5e100 	.word	0x05f5e100

08003b38 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b4c:	2340      	movs	r3, #64	; 0x40
 8003b4e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b58:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b5a:	f107 0310 	add.w	r3, r7, #16
 8003b5e:	4619      	mov	r1, r3
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fea6 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	2107      	movs	r1, #7
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f909 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3728      	adds	r7, #40	; 0x28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b088      	sub	sp, #32
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b9c:	f107 0308 	add.w	r3, r7, #8
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe85 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fb23 	bl	80041f4 <SDMMC_GetCmdError>
 8003bae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b088      	sub	sp, #32
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003bc2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003bc8:	2308      	movs	r3, #8
 8003bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003bcc:	2340      	movs	r3, #64	; 0x40
 8003bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fe66 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fab6 	bl	8004158 <SDMMC_GetCmdResp7>
 8003bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bee:	69fb      	ldr	r3, [r7, #28]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003c06:	2337      	movs	r3, #55	; 0x37
 8003c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c0a:	2340      	movs	r3, #64	; 0x40
 8003c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe47 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	2137      	movs	r1, #55	; 0x37
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8aa 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c32:	69fb      	ldr	r3, [r7, #28]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003c52:	2329      	movs	r3, #41	; 0x29
 8003c54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003c56:	2340      	movs	r3, #64	; 0x40
 8003c58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003c64:	f107 0308 	add.w	r3, r7, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fe21 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f9bd 	bl	8003ff0 <SDMMC_GetCmdResp3>
 8003c76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003c78:	69fb      	ldr	r3, [r7, #28]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b088      	sub	sp, #32
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003c92:	23c0      	movs	r3, #192	; 0xc0
 8003c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ca0:	f107 0308 	add.w	r3, r7, #8
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fe03 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f957 	bl	8003f60 <SDMMC_GetCmdResp2>
 8003cb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b088      	sub	sp, #32
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003ccc:	2309      	movs	r3, #9
 8003cce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003cd0:	23c0      	movs	r3, #192	; 0xc0
 8003cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fde4 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f938 	bl	8003f60 <SDMMC_GetCmdResp2>
 8003cf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d0e:	2340      	movs	r3, #64	; 0x40
 8003d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d1c:	f107 0308 	add.w	r3, r7, #8
 8003d20:	4619      	mov	r1, r3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fdc5 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f99d 	bl	800406c <SDMMC_GetCmdResp6>
 8003d32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d34:	69fb      	ldr	r3, [r7, #28]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b088      	sub	sp, #32
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003d4c:	230d      	movs	r3, #13
 8003d4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003d5e:	f107 0308 	add.w	r3, r7, #8
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fda4 	bl	80038b2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	210d      	movs	r1, #13
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f807 	bl	8003d84 <SDMMC_GetCmdResp1>
 8003d76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003d78:	69fb      	ldr	r3, [r7, #28]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003d92:	4b70      	ldr	r3, [pc, #448]	; (8003f54 <SDMMC_GetCmdResp1+0x1d0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a70      	ldr	r2, [pc, #448]	; (8003f58 <SDMMC_GetCmdResp1+0x1d4>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	0a5a      	lsrs	r2, r3, #9
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	1e5a      	subs	r2, r3, #1
 8003daa:	61fa      	str	r2, [r7, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003db0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003db4:	e0c9      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ef      	beq.n	8003da6 <SDMMC_GetCmdResp1+0x22>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2204      	movs	r2, #4
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003de2:	2304      	movs	r3, #4
 8003de4:	e0b1      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d004      	beq.n	8003dfc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0a6      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22c5      	movs	r2, #197	; 0xc5
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fd7f 	bl	8003906 <SDIO_GetCommandResponse>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d001      	beq.n	8003e16 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e099      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003e16:	2100      	movs	r1, #0
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fd81 	bl	8003920 <SDIO_GetResponse>
 8003e1e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4b4e      	ldr	r3, [pc, #312]	; (8003f5c <SDMMC_GetCmdResp1+0x1d8>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e08d      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da02      	bge.n	8003e3a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e38:	e087      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	e080      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	e079      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e64:	e071      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e74:	e069      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e84:	e061      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e94:	e059      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea4:	e051      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eb4:	e049      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ec4:	e041      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed4:	e039      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee4:	e031      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ef4:	e029      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003f00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f04:	e021      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003f10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f14:	e019      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f24:	e011      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003f30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f34:	e009      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003f40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f44:	e001      	b.n	8003f4a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000000 	.word	0x20000000
 8003f58:	10624dd3 	.word	0x10624dd3
 8003f5c:	fdffe008 	.word	0xfdffe008

08003f60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f68:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <SDMMC_GetCmdResp2+0x88>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <SDMMC_GetCmdResp2+0x8c>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f8c:	e026      	b.n	8003fdc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ef      	beq.n	8003f7e <SDMMC_GetCmdResp2+0x1e>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1ea      	bne.n	8003f7e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	e00e      	b.n	8003fdc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e003      	b.n	8003fdc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	22c5      	movs	r2, #197	; 0xc5
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	10624dd3 	.word	0x10624dd3

08003ff0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <SDMMC_GetCmdResp3+0x74>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <SDMMC_GetCmdResp3+0x78>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0a5b      	lsrs	r3, r3, #9
 8004004:	f241 3288 	movw	r2, #5000	; 0x1388
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	60fa      	str	r2, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800401c:	e01b      	b.n	8004056 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0ef      	beq.n	800400e <SDMMC_GetCmdResp3+0x1e>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ea      	bne.n	800400e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d004      	beq.n	800404e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2204      	movs	r2, #4
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800404a:	2304      	movs	r3, #4
 800404c:	e003      	b.n	8004056 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	22c5      	movs	r2, #197	; 0xc5
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000000 	.word	0x20000000
 8004068:	10624dd3 	.word	0x10624dd3

0800406c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	460b      	mov	r3, r1
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800407a:	4b35      	ldr	r3, [pc, #212]	; (8004150 <SDMMC_GetCmdResp6+0xe4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a35      	ldr	r2, [pc, #212]	; (8004154 <SDMMC_GetCmdResp6+0xe8>)
 8004080:	fba2 2303 	umull	r2, r3, r2, r3
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	1e5a      	subs	r2, r3, #1
 8004094:	61fa      	str	r2, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800409a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800409e:	e052      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <SDMMC_GetCmdResp6+0x24>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ea      	bne.n	8004090 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d004      	beq.n	80040d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2204      	movs	r2, #4
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80040cc:	2304      	movs	r3, #4
 80040ce:	e03a      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e02f      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff fc0d 	bl	8003906 <SDIO_GetCommandResponse>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	7afb      	ldrb	r3, [r7, #11]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d001      	beq.n	80040fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e025      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22c5      	movs	r2, #197	; 0xc5
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004100:	2100      	movs	r1, #0
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fc0c 	bl	8003920 <SDIO_GetResponse>
 8004108:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800411e:	2300      	movs	r3, #0
 8004120:	e011      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800412c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004130:	e009      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800413c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004140:	e001      	b.n	8004146 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004142:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000
 8004154:	10624dd3 	.word	0x10624dd3

08004158 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <SDMMC_GetCmdResp7+0x94>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a22      	ldr	r2, [pc, #136]	; (80041f0 <SDMMC_GetCmdResp7+0x98>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0a5b      	lsrs	r3, r3, #9
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	fb02 f303 	mul.w	r3, r2, r3
 8004174:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004184:	e02c      	b.n	80041e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <SDMMC_GetCmdResp7+0x1e>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ea      	bne.n	8004176 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d004      	beq.n	80041b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2204      	movs	r2, #4
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80041b2:	2304      	movs	r3, #4
 80041b4:	e014      	b.n	80041e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e009      	b.n	80041e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80041de:	2300      	movs	r3, #0
  
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000000 	.word	0x20000000
 80041f0:	10624dd3 	.word	0x10624dd3

080041f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041fc:	4b11      	ldr	r3, [pc, #68]	; (8004244 <SDMMC_GetCmdError+0x50>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a11      	ldr	r2, [pc, #68]	; (8004248 <SDMMC_GetCmdError+0x54>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0a5b      	lsrs	r3, r3, #9
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	60fa      	str	r2, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800421c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004220:	e009      	b.n	8004236 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f1      	beq.n	8004212 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	22c5      	movs	r2, #197	; 0xc5
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000000 	.word	0x20000000
 8004248:	10624dd3 	.word	0x10624dd3

0800424c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004250:	4904      	ldr	r1, [pc, #16]	; (8004264 <MX_FATFS_Init+0x18>)
 8004252:	4805      	ldr	r0, [pc, #20]	; (8004268 <MX_FATFS_Init+0x1c>)
 8004254:	f003 f964 	bl	8007520 <FATFS_LinkDriver>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <MX_FATFS_Init+0x20>)
 800425e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000174 	.word	0x20000174
 8004268:	0800765c 	.word	0x0800765c
 800426c:	20000170 	.word	0x20000170

08004270 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004274:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004276:	4618      	mov	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800428a:	f000 f888 	bl	800439e <BSP_SD_IsDetected>
 800428e:	4603      	mov	r3, r0
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e005      	b.n	80042a4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004298:	4804      	ldr	r0, [pc, #16]	; (80042ac <BSP_SD_Init+0x2c>)
 800429a:	f7fe f98b 	bl	80025b4 <HAL_SD_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80042a2:	79fb      	ldrb	r3, [r7, #7]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000028 	.word	0x20000028

080042b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	4806      	ldr	r0, [pc, #24]	; (80042e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80042c8:	f7fe fa24 	bl	8002714 <HAL_SD_ReadBlocks_DMA>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000028 	.word	0x20000028

080042e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	4806      	ldr	r0, [pc, #24]	; (8004314 <BSP_SD_WriteBlocks_DMA+0x30>)
 80042fc:	f7fe faea 	bl	80028d4 <HAL_SD_WriteBlocks_DMA>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20000028 	.word	0x20000028

08004318 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800431c:	4805      	ldr	r0, [pc, #20]	; (8004334 <BSP_SD_GetCardState+0x1c>)
 800431e:	f7fe ff0b 	bl	8003138 <HAL_SD_GetCardState>
 8004322:	4603      	mov	r3, r0
 8004324:	2b04      	cmp	r3, #4
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000028 	.word	0x20000028

08004338 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4803      	ldr	r0, [pc, #12]	; (8004350 <BSP_SD_GetCardInfo+0x18>)
 8004344:	f7fe fecc 	bl	80030e0 <HAL_SD_GetCardInfo>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000028 	.word	0x20000028

08004354 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800435c:	f000 f818 	bl	8004390 <BSP_SD_AbortCallback>
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004370:	f000 f9a8 	bl	80046c4 <BSP_SD_WriteCpltCallback>
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004384:	f000 f9aa 	bl	80046dc <BSP_SD_ReadCpltCallback>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0

}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80043a4:	2301      	movs	r3, #1
 80043a6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80043a8:	f000 f80c 	bl	80043c4 <BSP_PlatformIsDetected>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80043b2:	2300      	movs	r3, #0
 80043b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	b2db      	uxtb	r3, r3
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80043ca:	2301      	movs	r3, #1
 80043cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	4806      	ldr	r0, [pc, #24]	; (80043ec <BSP_PlatformIsDetected+0x28>)
 80043d2:	f7fd fad9 	bl	8001988 <HAL_GPIO_ReadPin>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80043dc:	2300      	movs	r3, #0
 80043de:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80043e0:	79fb      	ldrb	r3, [r7, #7]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40020000 	.word	0x40020000

080043f0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80043f8:	f7fc fc6a 	bl	8000cd0 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80043fe:	e006      	b.n	800440e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004400:	f7ff ff8a 	bl	8004318 <BSP_SD_GetCardState>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800440a:	2300      	movs	r3, #0
 800440c:	e009      	b.n	8004422 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800440e:	f7fc fc5f 	bl	8000cd0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	429a      	cmp	r2, r3
 800441c:	d8f0      	bhi.n	8004400 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <SD_CheckStatus+0x38>)
 8004438:	2201      	movs	r2, #1
 800443a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800443c:	f7ff ff6c 	bl	8004318 <BSP_SD_GetCardState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <SD_CheckStatus+0x38>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <SD_CheckStatus+0x38>)
 8004454:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004456:	4b03      	ldr	r3, [pc, #12]	; (8004464 <SD_CheckStatus+0x38>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000009 	.word	0x20000009

08004468 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004472:	f7ff ff05 	bl	8004280 <BSP_SD_Init>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff ffd4 	bl	800442c <SD_CheckStatus>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <SD_initialize+0x34>)
 800448a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <SD_initialize+0x34>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b2db      	uxtb	r3, r3
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000009 	.word	0x20000009

080044a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ffbd 	bl	800442c <SD_CheckStatus>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80044d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80044d4:	f7ff ff8c 	bl	80043f0 <SD_CheckStatusWithTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	da01      	bge.n	80044e2 <SD_read+0x26>
  {
    return res;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	e03b      	b.n	800455a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	68b8      	ldr	r0, [r7, #8]
 80044e8:	f7ff fee2 	bl	80042b0 <BSP_SD_ReadBlocks_DMA>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d132      	bne.n	8004558 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80044f2:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <SD_read+0xa8>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80044f8:	f7fc fbea 	bl	8000cd0 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80044fe:	bf00      	nop
 8004500:	4b18      	ldr	r3, [pc, #96]	; (8004564 <SD_read+0xa8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <SD_read+0x5e>
 8004508:	f7fc fbe2 	bl	8000cd0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f247 522f 	movw	r2, #29999	; 0x752f
 8004516:	4293      	cmp	r3, r2
 8004518:	d9f2      	bls.n	8004500 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <SD_read+0xa8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
 8004526:	e017      	b.n	8004558 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <SD_read+0xa8>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800452e:	f7fc fbcf 	bl	8000cd0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004534:	e007      	b.n	8004546 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004536:	f7ff feef 	bl	8004318 <BSP_SD_GetCardState>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <SD_read+0x8a>
          {
            res = RES_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004544:	e008      	b.n	8004558 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004546:	f7fc fbc3 	bl	8000cd0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f247 522f 	movw	r2, #29999	; 0x752f
 8004554:	4293      	cmp	r3, r2
 8004556:	d9ee      	bls.n	8004536 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200005dc 	.word	0x200005dc

08004568 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <SD_write+0xa8>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004582:	f247 5030 	movw	r0, #30000	; 0x7530
 8004586:	f7ff ff33 	bl	80043f0 <SD_CheckStatusWithTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	da01      	bge.n	8004594 <SD_write+0x2c>
  {
    return res;
 8004590:	7dfb      	ldrb	r3, [r7, #23]
 8004592:	e038      	b.n	8004606 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f7ff fea3 	bl	80042e4 <BSP_SD_WriteBlocks_DMA>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d12f      	bne.n	8004604 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80045a4:	f7fc fb94 	bl	8000cd0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80045aa:	bf00      	nop
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <SD_write+0xa8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <SD_write+0x5e>
 80045b4:	f7fc fb8c 	bl	8000cd0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f247 522f 	movw	r2, #29999	; 0x752f
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d9f2      	bls.n	80045ac <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <SD_write+0xa8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
 80045d2:	e017      	b.n	8004604 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80045d4:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <SD_write+0xa8>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80045da:	f7fc fb79 	bl	8000cd0 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045e0:	e007      	b.n	80045f2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80045e2:	f7ff fe99 	bl	8004318 <BSP_SD_GetCardState>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <SD_write+0x8a>
          {
            res = RES_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	75fb      	strb	r3, [r7, #23]
            break;
 80045f0:	e008      	b.n	8004604 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80045f2:	f7fc fb6d 	bl	8000cd0 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8004600:	4293      	cmp	r3, r2
 8004602:	d9ee      	bls.n	80045e2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004604:	7dfb      	ldrb	r3, [r7, #23]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200005d8 	.word	0x200005d8

08004614 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08c      	sub	sp, #48	; 0x30
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	603a      	str	r2, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
 8004620:	460b      	mov	r3, r1
 8004622:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <SD_ioctl+0xac>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <SD_ioctl+0x28>
 8004638:	2303      	movs	r3, #3
 800463a:	e03c      	b.n	80046b6 <SD_ioctl+0xa2>

  switch (cmd)
 800463c:	79bb      	ldrb	r3, [r7, #6]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d834      	bhi.n	80046ac <SD_ioctl+0x98>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <SD_ioctl+0x34>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	08004659 	.word	0x08004659
 800464c:	08004661 	.word	0x08004661
 8004650:	08004679 	.word	0x08004679
 8004654:	08004693 	.word	0x08004693
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800465e:	e028      	b.n	80046b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fe67 	bl	8004338 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004676:	e01c      	b.n	80046b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fe5b 	bl	8004338 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	b29a      	uxth	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004690:	e00f      	b.n	80046b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fe4e 	bl	8004338 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	0a5a      	lsrs	r2, r3, #9
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80046aa:	e002      	b.n	80046b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80046ac:	2304      	movs	r3, #4
 80046ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80046b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3730      	adds	r7, #48	; 0x30
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000009 	.word	0x20000009

080046c4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80046c8:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <BSP_SD_WriteCpltCallback+0x14>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	200005d8 	.word	0x200005d8

080046dc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <BSP_SD_ReadCpltCallback+0x14>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	200005dc 	.word	0x200005dc

080046f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <disk_status+0x30>)
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	79fa      	ldrb	r2, [r7, #7]
 800470c:	4905      	ldr	r1, [pc, #20]	; (8004724 <disk_status+0x30>)
 800470e:	440a      	add	r2, r1
 8004710:	7a12      	ldrb	r2, [r2, #8]
 8004712:	4610      	mov	r0, r2
 8004714:	4798      	blx	r3
 8004716:	4603      	mov	r3, r0
 8004718:	73fb      	strb	r3, [r7, #15]
  return stat;
 800471a:	7bfb      	ldrb	r3, [r7, #15]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20000608 	.word	0x20000608

08004728 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <disk_initialize+0x48>)
 800473a:	5cd3      	ldrb	r3, [r2, r3]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d111      	bne.n	8004764 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	4a0b      	ldr	r2, [pc, #44]	; (8004770 <disk_initialize+0x48>)
 8004744:	2101      	movs	r1, #1
 8004746:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <disk_initialize+0x48>)
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	79fa      	ldrb	r2, [r7, #7]
 8004756:	4906      	ldr	r1, [pc, #24]	; (8004770 <disk_initialize+0x48>)
 8004758:	440a      	add	r2, r1
 800475a:	7a12      	ldrb	r2, [r2, #8]
 800475c:	4610      	mov	r0, r2
 800475e:	4798      	blx	r3
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000608 	.word	0x20000608

08004774 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	4603      	mov	r3, r0
 8004782:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <disk_read+0x3c>)
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	689c      	ldr	r4, [r3, #8]
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <disk_read+0x3c>)
 8004794:	4413      	add	r3, r2
 8004796:	7a18      	ldrb	r0, [r3, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	47a0      	blx	r4
 80047a0:	4603      	mov	r3, r0
 80047a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000608 	.word	0x20000608

080047b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <disk_write+0x3c>)
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68dc      	ldr	r4, [r3, #12]
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <disk_write+0x3c>)
 80047d4:	4413      	add	r3, r2
 80047d6:	7a18      	ldrb	r0, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	47a0      	blx	r4
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000608 	.word	0x20000608

080047f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	603a      	str	r2, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
 8004800:	460b      	mov	r3, r1
 8004802:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	4a09      	ldr	r2, [pc, #36]	; (800482c <disk_ioctl+0x38>)
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	79fa      	ldrb	r2, [r7, #7]
 8004812:	4906      	ldr	r1, [pc, #24]	; (800482c <disk_ioctl+0x38>)
 8004814:	440a      	add	r2, r1
 8004816:	7a10      	ldrb	r0, [r2, #8]
 8004818:	79b9      	ldrb	r1, [r7, #6]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	4798      	blx	r3
 800481e:	4603      	mov	r3, r0
 8004820:	73fb      	strb	r3, [r7, #15]
  return res;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000608 	.word	0x20000608

08004830 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3301      	adds	r3, #1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	b21a      	sxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	b21b      	sxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b21b      	sxth	r3, r3
 8004850:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004852:	89fb      	ldrh	r3, [r7, #14]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3303      	adds	r3, #3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3202      	adds	r2, #2
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	3201      	adds	r2, #1
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
	return rv;
 8004898:	68fb      	ldr	r3, [r7, #12]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	887a      	ldrh	r2, [r7, #2]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	607a      	str	r2, [r7, #4]
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	1c53      	adds	r3, r2, #1
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	6179      	str	r1, [r7, #20]
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3b01      	subs	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f1      	bne.n	800494e <mem_cpy+0x1a>
	}
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004976:	b480      	push	{r7}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	617a      	str	r2, [r7, #20]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3b01      	subs	r3, #1
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f3      	bne.n	8004986 <mem_set+0x10>
}
 800499e:	bf00      	nop
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80049ac:	b480      	push	{r7}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	61ba      	str	r2, [r7, #24]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	1acb      	subs	r3, r1, r3
 80049d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3b01      	subs	r3, #1
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <mem_cmp+0x40>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0eb      	beq.n	80049c4 <mem_cmp+0x18>

	return r;
 80049ec:	697b      	ldr	r3, [r7, #20]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3724      	adds	r7, #36	; 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a04:	e002      	b.n	8004a0c <chk_chr+0x12>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <chk_chr+0x26>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d1f2      	bne.n	8004a06 <chk_chr+0xc>
	return *str;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	781b      	ldrb	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e029      	b.n	8004a98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a44:	4a27      	ldr	r2, [pc, #156]	; (8004ae4 <chk_lock+0xb4>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01d      	beq.n	8004a8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <chk_lock+0xb4>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	4413      	add	r3, r2
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d116      	bne.n	8004a92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004a64:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <chk_lock+0xb4>)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d10c      	bne.n	8004a92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a78:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <chk_lock+0xb4>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	4413      	add	r3, r2
 8004a80:	3308      	adds	r3, #8
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d102      	bne.n	8004a92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a8c:	e007      	b.n	8004a9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d9d2      	bls.n	8004a44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d109      	bne.n	8004ab8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <chk_lock+0x80>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d101      	bne.n	8004ab4 <chk_lock+0x84>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e010      	b.n	8004ad6 <chk_lock+0xa6>
 8004ab4:	2312      	movs	r3, #18
 8004ab6:	e00e      	b.n	8004ad6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <chk_lock+0xa0>
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <chk_lock+0xb4>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	d101      	bne.n	8004ad4 <chk_lock+0xa4>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	e000      	b.n	8004ad6 <chk_lock+0xa6>
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	200005e8 	.word	0x200005e8

08004ae8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	e002      	b.n	8004afa <enq_lock+0x12>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3301      	adds	r3, #1
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d806      	bhi.n	8004b0e <enq_lock+0x26>
 8004b00:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <enq_lock+0x40>)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	4413      	add	r3, r2
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f2      	bne.n	8004af4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	200005e8 	.word	0x200005e8

08004b2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e01f      	b.n	8004b7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b3c:	4a41      	ldr	r2, [pc, #260]	; (8004c44 <inc_lock+0x118>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	4413      	add	r3, r2
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d113      	bne.n	8004b76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b4e:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <inc_lock+0x118>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	4413      	add	r3, r2
 8004b56:	3304      	adds	r3, #4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d109      	bne.n	8004b76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004b62:	4a38      	ldr	r2, [pc, #224]	; (8004c44 <inc_lock+0x118>)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	4413      	add	r3, r2
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d006      	beq.n	8004b84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d9dc      	bls.n	8004b3c <inc_lock+0x10>
 8004b82:	e000      	b.n	8004b86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004b84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d132      	bne.n	8004bf2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e002      	b.n	8004b98 <inc_lock+0x6c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d806      	bhi.n	8004bac <inc_lock+0x80>
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <inc_lock+0x118>)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	4413      	add	r3, r2
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f2      	bne.n	8004b92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d101      	bne.n	8004bb6 <inc_lock+0x8a>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e040      	b.n	8004c38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4922      	ldr	r1, [pc, #136]	; (8004c44 <inc_lock+0x118>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	440b      	add	r3, r1
 8004bc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	491e      	ldr	r1, [pc, #120]	; (8004c44 <inc_lock+0x118>)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	440b      	add	r3, r1
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	491a      	ldr	r1, [pc, #104]	; (8004c44 <inc_lock+0x118>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	440b      	add	r3, r1
 8004be0:	3308      	adds	r3, #8
 8004be2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <inc_lock+0x118>)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	4413      	add	r3, r2
 8004bec:	330c      	adds	r3, #12
 8004bee:	2200      	movs	r2, #0
 8004bf0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <inc_lock+0xe0>
 8004bf8:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <inc_lock+0x118>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4413      	add	r3, r2
 8004c00:	330c      	adds	r3, #12
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <inc_lock+0xe0>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e015      	b.n	8004c38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <inc_lock+0xf8>
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <inc_lock+0x118>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	4413      	add	r3, r2
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	e001      	b.n	8004c28 <inc_lock+0xfc>
 8004c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c28:	4906      	ldr	r1, [pc, #24]	; (8004c44 <inc_lock+0x118>)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	440b      	add	r3, r1
 8004c30:	330c      	adds	r3, #12
 8004c32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	200005e8 	.word	0x200005e8

08004c48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d825      	bhi.n	8004ca8 <dec_lock+0x60>
		n = Files[i].ctr;
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <dec_lock+0x74>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4413      	add	r3, r2
 8004c64:	330c      	adds	r3, #12
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d101      	bne.n	8004c76 <dec_lock+0x2e>
 8004c72:	2300      	movs	r3, #0
 8004c74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004c76:	89fb      	ldrh	r3, [r7, #14]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <dec_lock+0x3a>
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <dec_lock+0x74>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	4413      	add	r3, r2
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	89fa      	ldrh	r2, [r7, #14]
 8004c8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004c90:	89fb      	ldrh	r3, [r7, #14]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d105      	bne.n	8004ca2 <dec_lock+0x5a>
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <dec_lock+0x74>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	4413      	add	r3, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	737b      	strb	r3, [r7, #13]
 8004ca6:	e001      	b.n	8004cac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004ca8:	2302      	movs	r3, #2
 8004caa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004cac:	7b7b      	ldrb	r3, [r7, #13]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	200005e8 	.word	0x200005e8

08004cc0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e010      	b.n	8004cf0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004cce:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <clear_lock+0x44>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	4413      	add	r3, r2
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d105      	bne.n	8004cea <clear_lock+0x2a>
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <clear_lock+0x44>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d9eb      	bls.n	8004cce <clear_lock+0xe>
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	200005e8 	.word	0x200005e8

08004d08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d034      	beq.n	8004d86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7858      	ldrb	r0, [r3, #1]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	f7ff fd40 	bl	80047b4 <disk_write>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	e022      	b.n	8004d86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	1ad2      	subs	r2, r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d217      	bcs.n	8004d86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	789b      	ldrb	r3, [r3, #2]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e010      	b.n	8004d80 <sync_window+0x78>
					wsect += fs->fsize;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7858      	ldrb	r0, [r3, #1]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d72:	2301      	movs	r3, #1
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	f7ff fd1d 	bl	80047b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d8eb      	bhi.n	8004d5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d01b      	beq.n	8004de0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ffad 	bl	8004d08 <sync_window>
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d113      	bne.n	8004de0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7858      	ldrb	r0, [r3, #1]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	f7ff fcd5 	bl	8004774 <disk_read>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff87 	bl	8004d08 <sync_window>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d158      	bne.n	8004eb6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d148      	bne.n	8004e9e <sync_fs+0xb2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	791b      	ldrb	r3, [r3, #4]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d144      	bne.n	8004e9e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3330      	adds	r3, #48	; 0x30
 8004e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fda9 	bl	8004976 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3330      	adds	r3, #48	; 0x30
 8004e28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff fd38 	bl	80048a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3330      	adds	r3, #48	; 0x30
 8004e3a:	4921      	ldr	r1, [pc, #132]	; (8004ec0 <sync_fs+0xd4>)
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fd4d 	bl	80048dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3330      	adds	r3, #48	; 0x30
 8004e46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e4a:	491e      	ldr	r1, [pc, #120]	; (8004ec4 <sync_fs+0xd8>)
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fd45 	bl	80048dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3330      	adds	r3, #48	; 0x30
 8004e56:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7ff fd3b 	bl	80048dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3330      	adds	r3, #48	; 0x30
 8004e6a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f7ff fd31 	bl	80048dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7858      	ldrb	r0, [r3, #1]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	2301      	movs	r3, #1
 8004e94:	f7ff fc8e 	bl	80047b4 <disk_write>
			fs->fsi_flag = 0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fca4 	bl	80047f4 <disk_ioctl>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <sync_fs+0xca>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	41615252 	.word	0x41615252
 8004ec4:	61417272 	.word	0x61417272

08004ec8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	3b02      	subs	r3, #2
 8004ed6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	3b02      	subs	r3, #2
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d301      	bcc.n	8004ee8 <clust2sect+0x20>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e008      	b.n	8004efa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	895b      	ldrh	r3, [r3, #10]
 8004eec:	461a      	mov	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	fb03 f202 	mul.w	r2, r3, r2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	4413      	add	r3, r2
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d904      	bls.n	8004f26 <get_fat+0x20>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d302      	bcc.n	8004f2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f26:	2301      	movs	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e08f      	b.n	800504c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d062      	beq.n	8005000 <get_fat+0xfa>
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	dc7c      	bgt.n	8005038 <get_fat+0x132>
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d002      	beq.n	8004f48 <get_fat+0x42>
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d042      	beq.n	8004fcc <get_fat+0xc6>
 8004f46:	e077      	b.n	8005038 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	0a5b      	lsrs	r3, r3, #9
 8004f5e:	4413      	add	r3, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	f7ff ff14 	bl	8004d90 <move_window>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d167      	bne.n	800503e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	60fa      	str	r2, [r7, #12]
 8004f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6a1a      	ldr	r2, [r3, #32]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	4413      	add	r3, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6938      	ldr	r0, [r7, #16]
 8004f90:	f7ff fefe 	bl	8004d90 <move_window>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d153      	bne.n	8005042 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <get_fat+0xbc>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	e002      	b.n	8004fc8 <get_fat+0xc2>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc8:	617b      	str	r3, [r7, #20]
			break;
 8004fca:	e03f      	b.n	800504c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6a1a      	ldr	r2, [r3, #32]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6938      	ldr	r0, [r7, #16]
 8004fda:	f7ff fed9 	bl	8004d90 <move_window>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d130      	bne.n	8005046 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fc1b 	bl	8004830 <ld_word>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	617b      	str	r3, [r7, #20]
			break;
 8004ffe:	e025      	b.n	800504c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	09db      	lsrs	r3, r3, #7
 8005008:	4413      	add	r3, r2
 800500a:	4619      	mov	r1, r3
 800500c:	6938      	ldr	r0, [r7, #16]
 800500e:	f7ff febf 	bl	8004d90 <move_window>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d118      	bne.n	800504a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005026:	4413      	add	r3, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc19 	bl	8004860 <ld_dword>
 800502e:	4603      	mov	r3, r0
 8005030:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005034:	617b      	str	r3, [r7, #20]
			break;
 8005036:	e009      	b.n	800504c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005038:	2301      	movs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e006      	b.n	800504c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800503e:	bf00      	nop
 8005040:	e004      	b.n	800504c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800504a:	bf00      	nop
		}
	}

	return val;
 800504c:	697b      	ldr	r3, [r7, #20]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005056:	b590      	push	{r4, r7, lr}
 8005058:	b089      	sub	sp, #36	; 0x24
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005062:	2302      	movs	r3, #2
 8005064:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b01      	cmp	r3, #1
 800506a:	f240 80d2 	bls.w	8005212 <put_fat+0x1bc>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	f080 80cc 	bcs.w	8005212 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b03      	cmp	r3, #3
 8005080:	f000 8096 	beq.w	80051b0 <put_fat+0x15a>
 8005084:	2b03      	cmp	r3, #3
 8005086:	f300 80cd 	bgt.w	8005224 <put_fat+0x1ce>
 800508a:	2b01      	cmp	r3, #1
 800508c:	d002      	beq.n	8005094 <put_fat+0x3e>
 800508e:	2b02      	cmp	r3, #2
 8005090:	d06e      	beq.n	8005170 <put_fat+0x11a>
 8005092:	e0c7      	b.n	8005224 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	0a5b      	lsrs	r3, r3, #9
 80050aa:	4413      	add	r3, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fe6e 	bl	8004d90 <move_window>
 80050b4:	4603      	mov	r3, r0
 80050b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050b8:	7ffb      	ldrb	r3, [r7, #31]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 80ab 	bne.w	8005216 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	1c59      	adds	r1, r3, #1
 80050ca:	61b9      	str	r1, [r7, #24]
 80050cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <put_fat+0xa4>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b25b      	sxtb	r3, r3
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	b25a      	sxtb	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	b25b      	sxtb	r3, r3
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b25b      	sxtb	r3, r3
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e001      	b.n	80050fe <put_fat+0xa8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	0a5b      	lsrs	r3, r3, #9
 8005110:	4413      	add	r3, r2
 8005112:	4619      	mov	r1, r3
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fe3b 	bl	8004d90 <move_window>
 800511a:	4603      	mov	r3, r0
 800511c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800511e:	7ffb      	ldrb	r3, [r7, #31]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d17a      	bne.n	800521a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005130:	4413      	add	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <put_fat+0xf0>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	b2db      	uxtb	r3, r3
 8005144:	e00e      	b.n	8005164 <put_fat+0x10e>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	b25b      	sxtb	r3, r3
 800514c:	f023 030f 	bic.w	r3, r3, #15
 8005150:	b25a      	sxtb	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	b25b      	sxtb	r3, r3
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	b25b      	sxtb	r3, r3
 800515e:	4313      	orrs	r3, r2
 8005160:	b25b      	sxtb	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2201      	movs	r2, #1
 800516c:	70da      	strb	r2, [r3, #3]
			break;
 800516e:	e059      	b.n	8005224 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	0a1b      	lsrs	r3, r3, #8
 8005178:	4413      	add	r3, r2
 800517a:	4619      	mov	r1, r3
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fe07 	bl	8004d90 <move_window>
 8005182:	4603      	mov	r3, r0
 8005184:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005186:	7ffb      	ldrb	r3, [r7, #31]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d148      	bne.n	800521e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800519a:	4413      	add	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	b292      	uxth	r2, r2
 80051a0:	4611      	mov	r1, r2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff fb7f 	bl	80048a6 <st_word>
			fs->wflag = 1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	70da      	strb	r2, [r3, #3]
			break;
 80051ae:	e039      	b.n	8005224 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	09db      	lsrs	r3, r3, #7
 80051b8:	4413      	add	r3, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fde7 	bl	8004d90 <move_window>
 80051c2:	4603      	mov	r3, r0
 80051c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051c6:	7ffb      	ldrb	r3, [r7, #31]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d12a      	bne.n	8005222 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80051e0:	4413      	add	r3, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fb3c 	bl	8004860 <ld_dword>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80051ee:	4323      	orrs	r3, r4
 80051f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005200:	4413      	add	r3, r2
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fb69 	bl	80048dc <st_dword>
			fs->wflag = 1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	70da      	strb	r2, [r3, #3]
			break;
 8005210:	e008      	b.n	8005224 <put_fat+0x1ce>
		}
	}
 8005212:	bf00      	nop
 8005214:	e006      	b.n	8005224 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005216:	bf00      	nop
 8005218:	e004      	b.n	8005224 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800521a:	bf00      	nop
 800521c:	e002      	b.n	8005224 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800521e:	bf00      	nop
 8005220:	e000      	b.n	8005224 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005222:	bf00      	nop
	return res;
 8005224:	7ffb      	ldrb	r3, [r7, #31]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d904      	bls.n	8005254 <remove_chain+0x26>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d301      	bcc.n	8005258 <remove_chain+0x2a>
 8005254:	2302      	movs	r3, #2
 8005256:	e04b      	b.n	80052f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800525e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	69b8      	ldr	r0, [r7, #24]
 8005266:	f7ff fef6 	bl	8005056 <put_fat>
 800526a:	4603      	mov	r3, r0
 800526c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <remove_chain+0x4a>
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	e03b      	b.n	80052f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005278:	68b9      	ldr	r1, [r7, #8]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fe43 	bl	8004f06 <get_fat>
 8005280:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d031      	beq.n	80052ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <remove_chain+0x64>
 800528e:	2302      	movs	r3, #2
 8005290:	e02e      	b.n	80052f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005298:	d101      	bne.n	800529e <remove_chain+0x70>
 800529a:	2301      	movs	r3, #1
 800529c:	e028      	b.n	80052f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800529e:	2200      	movs	r2, #0
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	69b8      	ldr	r0, [r7, #24]
 80052a4:	f7ff fed7 	bl	8005056 <put_fat>
 80052a8:	4603      	mov	r3, r0
 80052aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <remove_chain+0x88>
 80052b2:	7ffb      	ldrb	r3, [r7, #31]
 80052b4:	e01c      	b.n	80052f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	3b02      	subs	r3, #2
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d20b      	bcs.n	80052dc <remove_chain+0xae>
			fs->free_clst++;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	791b      	ldrb	r3, [r3, #4]
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3c6      	bcc.n	8005278 <remove_chain+0x4a>
 80052ea:	e000      	b.n	80052ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80052ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10d      	bne.n	800532a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <create_chain+0x2c>
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d31b      	bcc.n	800535c <create_chain+0x64>
 8005324:	2301      	movs	r3, #1
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e018      	b.n	800535c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fdea 	bl	8004f06 <get_fat>
 8005332:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d801      	bhi.n	800533e <create_chain+0x46>
 800533a:	2301      	movs	r3, #1
 800533c:	e070      	b.n	8005420 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005344:	d101      	bne.n	800534a <create_chain+0x52>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	e06a      	b.n	8005420 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	429a      	cmp	r2, r3
 8005352:	d201      	bcs.n	8005358 <create_chain+0x60>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e063      	b.n	8005420 <create_chain+0x128>
		scl = clst;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	429a      	cmp	r2, r3
 800536e:	d307      	bcc.n	8005380 <create_chain+0x88>
				ncl = 2;
 8005370:	2302      	movs	r3, #2
 8005372:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	429a      	cmp	r2, r3
 800537a:	d901      	bls.n	8005380 <create_chain+0x88>
 800537c:	2300      	movs	r3, #0
 800537e:	e04f      	b.n	8005420 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005380:	69f9      	ldr	r1, [r7, #28]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff fdbf 	bl	8004f06 <get_fat>
 8005388:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00e      	beq.n	80053ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <create_chain+0xa6>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539c:	d101      	bne.n	80053a2 <create_chain+0xaa>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	e03e      	b.n	8005420 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d1da      	bne.n	8005360 <create_chain+0x68>
 80053aa:	2300      	movs	r3, #0
 80053ac:	e038      	b.n	8005420 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80053ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80053b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6938      	ldr	r0, [r7, #16]
 80053b8:	f7ff fe4d 	bl	8005056 <put_fat>
 80053bc:	4603      	mov	r3, r0
 80053be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <create_chain+0xe2>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d006      	beq.n	80053da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6938      	ldr	r0, [r7, #16]
 80053d2:	f7ff fe40 	bl	8005056 <put_fat>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d116      	bne.n	800540e <create_chain+0x116>
		fs->last_clst = ncl;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	3b02      	subs	r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d804      	bhi.n	80053fe <create_chain+0x106>
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	b2da      	uxtb	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	711a      	strb	r2, [r3, #4]
 800540c:	e007      	b.n	800541e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d102      	bne.n	800541a <create_chain+0x122>
 8005414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005418:	e000      	b.n	800541c <create_chain+0x124>
 800541a:	2301      	movs	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800541e:	69fb      	ldr	r3, [r7, #28]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	3304      	adds	r3, #4
 800543e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	0a5b      	lsrs	r3, r3, #9
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	8952      	ldrh	r2, [r2, #10]
 8005448:	fbb3 f3f2 	udiv	r3, r3, r2
 800544c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	613a      	str	r2, [r7, #16]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <clmt_clust+0x3a>
 800545e:	2300      	movs	r3, #0
 8005460:	e010      	b.n	8005484 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d307      	bcc.n	800547a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	3304      	adds	r3, #4
 8005476:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005478:	e7e9      	b.n	800544e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800547a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4413      	add	r3, r2
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a6:	d204      	bcs.n	80054b2 <dir_sdi+0x22>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80054b2:	2302      	movs	r3, #2
 80054b4:	e063      	b.n	800557e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <dir_sdi+0x46>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d902      	bls.n	80054d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10c      	bne.n	80054f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	8912      	ldrh	r2, [r2, #8]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d301      	bcc.n	80054ec <dir_sdi+0x5c>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e048      	b.n	800557e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	61da      	str	r2, [r3, #28]
 80054f4:	e029      	b.n	800554a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	895b      	ldrh	r3, [r3, #10]
 80054fa:	025b      	lsls	r3, r3, #9
 80054fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80054fe:	e019      	b.n	8005534 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6979      	ldr	r1, [r7, #20]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fcfe 	bl	8004f06 <get_fat>
 800550a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005512:	d101      	bne.n	8005518 <dir_sdi+0x88>
 8005514:	2301      	movs	r3, #1
 8005516:	e032      	b.n	800557e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d904      	bls.n	8005528 <dir_sdi+0x98>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	429a      	cmp	r2, r3
 8005526:	d301      	bcc.n	800552c <dir_sdi+0x9c>
 8005528:	2302      	movs	r3, #2
 800552a:	e028      	b.n	800557e <dir_sdi+0xee>
			ofs -= csz;
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d2e1      	bcs.n	8005500 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800553c:	6979      	ldr	r1, [r7, #20]
 800553e:	6938      	ldr	r0, [r7, #16]
 8005540:	f7ff fcc2 	bl	8004ec8 <clust2sect>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <dir_sdi+0xcc>
 8005558:	2302      	movs	r3, #2
 800555a:	e010      	b.n	800557e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	0a5b      	lsrs	r3, r3, #9
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	441a      	add	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b086      	sub	sp, #24
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	3320      	adds	r3, #32
 800559c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <dir_next+0x28>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ac:	d301      	bcc.n	80055b2 <dir_next+0x2c>
 80055ae:	2304      	movs	r3, #4
 80055b0:	e0aa      	b.n	8005708 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 8098 	bne.w	80056ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	8912      	ldrh	r2, [r2, #8]
 80055d8:	4293      	cmp	r3, r2
 80055da:	f0c0 8088 	bcc.w	80056ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	61da      	str	r2, [r3, #28]
 80055e4:	2304      	movs	r3, #4
 80055e6:	e08f      	b.n	8005708 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0a5b      	lsrs	r3, r3, #9
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	8952      	ldrh	r2, [r2, #10]
 80055f0:	3a01      	subs	r2, #1
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d17a      	bne.n	80056ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7ff fc80 	bl	8004f06 <get_fat>
 8005606:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d801      	bhi.n	8005612 <dir_next+0x8c>
 800560e:	2302      	movs	r3, #2
 8005610:	e07a      	b.n	8005708 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005618:	d101      	bne.n	800561e <dir_next+0x98>
 800561a:	2301      	movs	r3, #1
 800561c:	e074      	b.n	8005708 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d358      	bcc.n	80056da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
 8005634:	2304      	movs	r3, #4
 8005636:	e067      	b.n	8005708 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	4619      	mov	r1, r3
 8005640:	4610      	mov	r0, r2
 8005642:	f7ff fe59 	bl	80052f8 <create_chain>
 8005646:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <dir_next+0xcc>
 800564e:	2307      	movs	r3, #7
 8005650:	e05a      	b.n	8005708 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <dir_next+0xd6>
 8005658:	2302      	movs	r3, #2
 800565a:	e055      	b.n	8005708 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005662:	d101      	bne.n	8005668 <dir_next+0xe2>
 8005664:	2301      	movs	r3, #1
 8005666:	e04f      	b.n	8005708 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fb4d 	bl	8004d08 <sync_window>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <dir_next+0xf2>
 8005674:	2301      	movs	r3, #1
 8005676:	e047      	b.n	8005708 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3330      	adds	r3, #48	; 0x30
 800567c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff f977 	bl	8004976 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	6979      	ldr	r1, [r7, #20]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff fc1a 	bl	8004ec8 <clust2sect>
 8005694:	4602      	mov	r2, r0
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	62da      	str	r2, [r3, #44]	; 0x2c
 800569a:	e012      	b.n	80056c2 <dir_next+0x13c>
						fs->wflag = 1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fb30 	bl	8004d08 <sync_window>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <dir_next+0x12c>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e02a      	b.n	8005708 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	895b      	ldrh	r3, [r3, #10]
 80056c6:	461a      	mov	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d3e6      	bcc.n	800569c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80056e0:	6979      	ldr	r1, [r7, #20]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7ff fbf0 	bl	8004ec8 <clust2sect>
 80056e8:	4602      	mov	r2, r0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	441a      	add	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005720:	2100      	movs	r1, #0
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff feb4 	bl	8005490 <dir_sdi>
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d12b      	bne.n	800578a <dir_alloc+0x7a>
		n = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4619      	mov	r1, r3
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fb27 	bl	8004d90 <move_window>
 8005742:	4603      	mov	r3, r0
 8005744:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11d      	bne.n	8005788 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2be5      	cmp	r3, #229	; 0xe5
 8005754:	d004      	beq.n	8005760 <dir_alloc+0x50>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d107      	bne.n	8005770 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	3301      	adds	r3, #1
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d102      	bne.n	8005774 <dir_alloc+0x64>
 800576e:	e00c      	b.n	800578a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7ff ff05 	bl	8005586 <dir_next>
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0d7      	beq.n	8005736 <dir_alloc+0x26>
 8005786:	e000      	b.n	800578a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005788:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800578a:	7dfb      	ldrb	r3, [r7, #23]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d101      	bne.n	8005794 <dir_alloc+0x84>
 8005790:	2307      	movs	r3, #7
 8005792:	75fb      	strb	r3, [r7, #23]
	return res;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	331a      	adds	r3, #26
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f83f 	bl	8004830 <ld_word>
 80057b2:	4603      	mov	r3, r0
 80057b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d109      	bne.n	80057d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff f834 	bl	8004830 <ld_word>
 80057c8:	4603      	mov	r3, r0
 80057ca:	041b      	lsls	r3, r3, #16
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	331a      	adds	r3, #26
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	b292      	uxth	r2, r2
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff f857 	bl	80048a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d109      	bne.n	8005814 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f103 0214 	add.w	r2, r3, #20
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b29b      	uxth	r3, r3
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f7ff f849 	bl	80048a6 <st_word>
	}
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800582a:	2100      	movs	r1, #0
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fe2f 	bl	8005490 <dir_sdi>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <dir_find+0x24>
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	e03e      	b.n	80058be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	4619      	mov	r1, r3
 8005846:	6938      	ldr	r0, [r7, #16]
 8005848:	f7ff faa2 	bl	8004d90 <move_window>
 800584c:	4603      	mov	r3, r0
 800584e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d12f      	bne.n	80058b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d102      	bne.n	800586a <dir_find+0x4e>
 8005864:	2304      	movs	r3, #4
 8005866:	75fb      	strb	r3, [r7, #23]
 8005868:	e028      	b.n	80058bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	330b      	adds	r3, #11
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005876:	b2da      	uxtb	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	330b      	adds	r3, #11
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <dir_find+0x86>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a18      	ldr	r0, [r3, #32]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	220b      	movs	r2, #11
 8005896:	4619      	mov	r1, r3
 8005898:	f7ff f888 	bl	80049ac <mem_cmp>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80058a2:	2100      	movs	r1, #0
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fe6e 	bl	8005586 <dir_next>
 80058aa:	4603      	mov	r3, r0
 80058ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0c5      	beq.n	8005840 <dir_find+0x24>
 80058b4:	e002      	b.n	80058bc <dir_find+0xa0>
		if (res != FR_OK) break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80058ba:	bf00      	nop

	return res;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80058d4:	2101      	movs	r1, #1
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff1a 	bl	8005710 <dir_alloc>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11c      	bne.n	8005920 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4619      	mov	r1, r3
 80058ec:	68b8      	ldr	r0, [r7, #8]
 80058ee:	f7ff fa4f 	bl	8004d90 <move_window>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d111      	bne.n	8005920 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	2220      	movs	r2, #32
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f836 	bl	8004976 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a18      	ldr	r0, [r3, #32]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3324      	adds	r3, #36	; 0x24
 8005912:	220b      	movs	r2, #11
 8005914:	4619      	mov	r1, r3
 8005916:	f7ff f80d 	bl	8004934 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2201      	movs	r2, #1
 800591e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005942:	220b      	movs	r2, #11
 8005944:	2120      	movs	r1, #32
 8005946:	68b8      	ldr	r0, [r7, #8]
 8005948:	f7ff f815 	bl	8004976 <mem_set>
	si = i = 0; ni = 8;
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	2308      	movs	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	61fa      	str	r2, [r7, #28]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005966:	7efb      	ldrb	r3, [r7, #27]
 8005968:	2b20      	cmp	r3, #32
 800596a:	d94e      	bls.n	8005a0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800596c:	7efb      	ldrb	r3, [r7, #27]
 800596e:	2b2f      	cmp	r3, #47	; 0x2f
 8005970:	d006      	beq.n	8005980 <create_name+0x54>
 8005972:	7efb      	ldrb	r3, [r7, #27]
 8005974:	2b5c      	cmp	r3, #92	; 0x5c
 8005976:	d110      	bne.n	800599a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005978:	e002      	b.n	8005980 <create_name+0x54>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b2f      	cmp	r3, #47	; 0x2f
 800598a:	d0f6      	beq.n	800597a <create_name+0x4e>
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b5c      	cmp	r3, #92	; 0x5c
 8005996:	d0f0      	beq.n	800597a <create_name+0x4e>
			break;
 8005998:	e038      	b.n	8005a0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800599a:	7efb      	ldrb	r3, [r7, #27]
 800599c:	2b2e      	cmp	r3, #46	; 0x2e
 800599e:	d003      	beq.n	80059a8 <create_name+0x7c>
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d30c      	bcc.n	80059c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b0b      	cmp	r3, #11
 80059ac:	d002      	beq.n	80059b4 <create_name+0x88>
 80059ae:	7efb      	ldrb	r3, [r7, #27]
 80059b0:	2b2e      	cmp	r3, #46	; 0x2e
 80059b2:	d001      	beq.n	80059b8 <create_name+0x8c>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e044      	b.n	8005a42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80059b8:	2308      	movs	r3, #8
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	230b      	movs	r3, #11
 80059be:	617b      	str	r3, [r7, #20]
			continue;
 80059c0:	e022      	b.n	8005a08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80059c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da04      	bge.n	80059d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80059ca:	7efb      	ldrb	r3, [r7, #27]
 80059cc:	3b80      	subs	r3, #128	; 0x80
 80059ce:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <create_name+0x120>)
 80059d0:	5cd3      	ldrb	r3, [r2, r3]
 80059d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80059d4:	7efb      	ldrb	r3, [r7, #27]
 80059d6:	4619      	mov	r1, r3
 80059d8:	481d      	ldr	r0, [pc, #116]	; (8005a50 <create_name+0x124>)
 80059da:	f7ff f80e 	bl	80049fa <chk_chr>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <create_name+0xbc>
 80059e4:	2306      	movs	r3, #6
 80059e6:	e02c      	b.n	8005a42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80059e8:	7efb      	ldrb	r3, [r7, #27]
 80059ea:	2b60      	cmp	r3, #96	; 0x60
 80059ec:	d905      	bls.n	80059fa <create_name+0xce>
 80059ee:	7efb      	ldrb	r3, [r7, #27]
 80059f0:	2b7a      	cmp	r3, #122	; 0x7a
 80059f2:	d802      	bhi.n	80059fa <create_name+0xce>
 80059f4:	7efb      	ldrb	r3, [r7, #27]
 80059f6:	3b20      	subs	r3, #32
 80059f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	613a      	str	r2, [r7, #16]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	4413      	add	r3, r2
 8005a04:	7efa      	ldrb	r2, [r7, #27]
 8005a06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005a08:	e7a6      	b.n	8005958 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	441a      	add	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <create_name+0xf4>
 8005a1c:	2306      	movs	r3, #6
 8005a1e:	e010      	b.n	8005a42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2be5      	cmp	r3, #229	; 0xe5
 8005a26:	d102      	bne.n	8005a2e <create_name+0x102>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2205      	movs	r2, #5
 8005a2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d801      	bhi.n	8005a38 <create_name+0x10c>
 8005a34:	2204      	movs	r2, #4
 8005a36:	e000      	b.n	8005a3a <create_name+0x10e>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	330b      	adds	r3, #11
 8005a3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005a40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08007670 	.word	0x08007670
 8005a50:	08007600 	.word	0x08007600

08005a54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a68:	e002      	b.n	8005a70 <follow_path+0x1c>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b2f      	cmp	r3, #47	; 0x2f
 8005a76:	d0f8      	beq.n	8005a6a <follow_path+0x16>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8005a7e:	d0f4      	beq.n	8005a6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b1f      	cmp	r3, #31
 8005a8c:	d80a      	bhi.n	8005aa4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fcf9 	bl	8005490 <dir_sdi>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
 8005aa2:	e043      	b.n	8005b2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff3f 	bl	800592c <create_name>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d134      	bne.n	8005b22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff feaf 	bl	800581c <dir_find>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005ac8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005aca:	7dfb      	ldrb	r3, [r7, #23]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d127      	bne.n	8005b26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d122      	bne.n	8005b26 <follow_path+0xd2>
 8005ae0:	2305      	movs	r3, #5
 8005ae2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ae4:	e01f      	b.n	8005b26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11c      	bne.n	8005b2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	799b      	ldrb	r3, [r3, #6]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005afc:	2305      	movs	r3, #5
 8005afe:	75fb      	strb	r3, [r7, #23]
 8005b00:	e014      	b.n	8005b2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b10:	4413      	add	r3, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f7ff fe42 	bl	800579e <ld_clust>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b20:	e7c0      	b.n	8005aa4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <follow_path+0xd8>
				break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b2a:	bf00      	nop
			}
		}
	}

	return res;
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b087      	sub	sp, #28
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d031      	beq.n	8005bb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e002      	b.n	8005b5a <get_ldnumber+0x24>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	3301      	adds	r3, #1
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d903      	bls.n	8005b6a <get_ldnumber+0x34>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b3a      	cmp	r3, #58	; 0x3a
 8005b68:	d1f4      	bne.n	8005b54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b3a      	cmp	r3, #58	; 0x3a
 8005b70:	d11c      	bne.n	8005bac <get_ldnumber+0x76>
			tp = *path;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	60fa      	str	r2, [r7, #12]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	3b30      	subs	r3, #48	; 0x30
 8005b82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b09      	cmp	r3, #9
 8005b88:	d80e      	bhi.n	8005ba8 <get_ldnumber+0x72>
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d10a      	bne.n	8005ba8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d107      	bne.n	8005ba8 <get_ldnumber+0x72>
					vol = (int)i;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	e002      	b.n	8005bb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005bb0:	693b      	ldr	r3, [r7, #16]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	70da      	strb	r2, [r3, #3]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff f8d8 	bl	8004d90 <move_window>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <check_fs+0x2a>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e038      	b.n	8005c5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3330      	adds	r3, #48	; 0x30
 8005bee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fe1c 	bl	8004830 <ld_word>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <check_fs+0x48>
 8005c04:	2303      	movs	r3, #3
 8005c06:	e029      	b.n	8005c5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c0e:	2be9      	cmp	r3, #233	; 0xe9
 8005c10:	d009      	beq.n	8005c26 <check_fs+0x66>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c18:	2beb      	cmp	r3, #235	; 0xeb
 8005c1a:	d11e      	bne.n	8005c5a <check_fs+0x9a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c22:	2b90      	cmp	r3, #144	; 0x90
 8005c24:	d119      	bne.n	8005c5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3330      	adds	r3, #48	; 0x30
 8005c2a:	3336      	adds	r3, #54	; 0x36
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe fe17 	bl	8004860 <ld_dword>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c38:	4a0a      	ldr	r2, [pc, #40]	; (8005c64 <check_fs+0xa4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <check_fs+0x82>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e00c      	b.n	8005c5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3330      	adds	r3, #48	; 0x30
 8005c46:	3352      	adds	r3, #82	; 0x52
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fe fe09 	bl	8004860 <ld_dword>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <check_fs+0xa8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <check_fs+0x9a>
 8005c56:	2300      	movs	r3, #0
 8005c58:	e000      	b.n	8005c5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c5a:	2302      	movs	r3, #2
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	00544146 	.word	0x00544146
 8005c68:	33544146 	.word	0x33544146

08005c6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b096      	sub	sp, #88	; 0x58
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ff58 	bl	8005b36 <get_ldnumber>
 8005c86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	da01      	bge.n	8005c92 <find_volume+0x26>
 8005c8e:	230b      	movs	r3, #11
 8005c90:	e22d      	b.n	80060ee <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c92:	4aa1      	ldr	r2, [pc, #644]	; (8005f18 <find_volume+0x2ac>)
 8005c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <find_volume+0x3a>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	e223      	b.n	80060ee <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005caa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01a      	beq.n	8005cf2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fd17 	bl	80046f4 <disk_status>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10c      	bne.n	8005cf2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <find_volume+0x82>
 8005cde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005cea:	230a      	movs	r3, #10
 8005cec:	e1ff      	b.n	80060ee <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e1fd      	b.n	80060ee <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fd0f 	bl	8004728 <disk_initialize>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e1e6      	b.n	80060ee <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <find_volume+0xca>
 8005d26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d32:	230a      	movs	r3, #10
 8005d34:	e1db      	b.n	80060ee <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d3e:	f7ff ff3f 	bl	8005bc0 <check_fs>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d149      	bne.n	8005de4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d50:	2300      	movs	r3, #0
 8005d52:	643b      	str	r3, [r7, #64]	; 0x40
 8005d54:	e01e      	b.n	8005d94 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d64:	4413      	add	r3, r2
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <find_volume+0x114>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	3308      	adds	r3, #8
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fd72 	bl	8004860 <ld_dword>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	e000      	b.n	8005d82 <find_volume+0x116>
 8005d80:	2200      	movs	r2, #0
 8005d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	3358      	adds	r3, #88	; 0x58
 8005d88:	443b      	add	r3, r7
 8005d8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	3301      	adds	r3, #1
 8005d92:	643b      	str	r3, [r7, #64]	; 0x40
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d9dd      	bls.n	8005d56 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <find_volume+0x13e>
 8005da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da6:	3b01      	subs	r3, #1
 8005da8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	3358      	adds	r3, #88	; 0x58
 8005db0:	443b      	add	r3, r7
 8005db2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005db6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <find_volume+0x15e>
 8005dbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc2:	f7ff fefd 	bl	8005bc0 <check_fs>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e000      	b.n	8005dcc <find_volume+0x160>
 8005dca:	2303      	movs	r3, #3
 8005dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d905      	bls.n	8005de4 <find_volume+0x178>
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	3301      	adds	r3, #1
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d9e2      	bls.n	8005daa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d101      	bne.n	8005df0 <find_volume+0x184>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e17e      	b.n	80060ee <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d901      	bls.n	8005dfc <find_volume+0x190>
 8005df8:	230d      	movs	r3, #13
 8005dfa:	e178      	b.n	80060ee <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	3330      	adds	r3, #48	; 0x30
 8005e00:	330b      	adds	r3, #11
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fd14 	bl	8004830 <ld_word>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0e:	d001      	beq.n	8005e14 <find_volume+0x1a8>
 8005e10:	230d      	movs	r3, #13
 8005e12:	e16c      	b.n	80060ee <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	3330      	adds	r3, #48	; 0x30
 8005e18:	3316      	adds	r3, #22
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fd08 	bl	8004830 <ld_word>
 8005e20:	4603      	mov	r3, r0
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <find_volume+0x1cc>
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	3330      	adds	r3, #48	; 0x30
 8005e2e:	3324      	adds	r3, #36	; 0x24
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fd15 	bl	8004860 <ld_dword>
 8005e36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e40:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	789b      	ldrb	r3, [r3, #2]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d005      	beq.n	8005e5c <find_volume+0x1f0>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	789b      	ldrb	r3, [r3, #2]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d001      	beq.n	8005e5c <find_volume+0x1f0>
 8005e58:	230d      	movs	r3, #13
 8005e5a:	e148      	b.n	80060ee <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	789b      	ldrb	r3, [r3, #2]
 8005e60:	461a      	mov	r2, r3
 8005e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	895b      	ldrh	r3, [r3, #10]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <find_volume+0x224>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e80:	895b      	ldrh	r3, [r3, #10]
 8005e82:	461a      	mov	r2, r3
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	895b      	ldrh	r3, [r3, #10]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <find_volume+0x228>
 8005e90:	230d      	movs	r3, #13
 8005e92:	e12c      	b.n	80060ee <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e96:	3330      	adds	r3, #48	; 0x30
 8005e98:	3311      	adds	r3, #17
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fcc8 	bl	8004830 <ld_word>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	891b      	ldrh	r3, [r3, #8]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <find_volume+0x24e>
 8005eb6:	230d      	movs	r3, #13
 8005eb8:	e119      	b.n	80060ee <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	3330      	adds	r3, #48	; 0x30
 8005ebe:	3313      	adds	r3, #19
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fcb5 	bl	8004830 <ld_word>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <find_volume+0x272>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	3330      	adds	r3, #48	; 0x30
 8005ed4:	3320      	adds	r3, #32
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fcc2 	bl	8004860 <ld_dword>
 8005edc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	3330      	adds	r3, #48	; 0x30
 8005ee2:	330e      	adds	r3, #14
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fca3 	bl	8004830 <ld_word>
 8005eea:	4603      	mov	r3, r0
 8005eec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005eee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <find_volume+0x28c>
 8005ef4:	230d      	movs	r3, #13
 8005ef6:	e0fa      	b.n	80060ee <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005ef8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	4413      	add	r3, r2
 8005efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f00:	8912      	ldrh	r2, [r2, #8]
 8005f02:	0912      	lsrs	r2, r2, #4
 8005f04:	b292      	uxth	r2, r2
 8005f06:	4413      	add	r3, r2
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d204      	bcs.n	8005f1c <find_volume+0x2b0>
 8005f12:	230d      	movs	r3, #13
 8005f14:	e0eb      	b.n	80060ee <find_volume+0x482>
 8005f16:	bf00      	nop
 8005f18:	200005e0 	.word	0x200005e0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f24:	8952      	ldrh	r2, [r2, #10]
 8005f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <find_volume+0x2ca>
 8005f32:	230d      	movs	r3, #13
 8005f34:	e0db      	b.n	80060ee <find_volume+0x482>
		fmt = FS_FAT32;
 8005f36:	2303      	movs	r3, #3
 8005f38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d802      	bhi.n	8005f4c <find_volume+0x2e0>
 8005f46:	2302      	movs	r3, #2
 8005f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d802      	bhi.n	8005f5c <find_volume+0x2f0>
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	1c9a      	adds	r2, r3, #2
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f68:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005f6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6e:	441a      	add	r2, r3
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	441a      	add	r2, r3
 8005f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d11e      	bne.n	8005fc4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	3330      	adds	r3, #48	; 0x30
 8005f8a:	332a      	adds	r3, #42	; 0x2a
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fc4f 	bl	8004830 <ld_word>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <find_volume+0x330>
 8005f98:	230d      	movs	r3, #13
 8005f9a:	e0a8      	b.n	80060ee <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9e:	891b      	ldrh	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <find_volume+0x33c>
 8005fa4:	230d      	movs	r3, #13
 8005fa6:	e0a2      	b.n	80060ee <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	3330      	adds	r3, #48	; 0x30
 8005fac:	332c      	adds	r3, #44	; 0x2c
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fc56 	bl	8004860 <ld_dword>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc2:	e01f      	b.n	8006004 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	891b      	ldrh	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <find_volume+0x364>
 8005fcc:	230d      	movs	r3, #13
 8005fce:	e08e      	b.n	80060ee <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	6a1a      	ldr	r2, [r3, #32]
 8005fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd6:	441a      	add	r2, r3
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d103      	bne.n	8005fec <find_volume+0x380>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	e00a      	b.n	8006002 <find_volume+0x396>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	4413      	add	r3, r2
 8005ff6:	085a      	lsrs	r2, r3, #1
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006002:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	699a      	ldr	r2, [r3, #24]
 8006008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800600e:	0a5b      	lsrs	r3, r3, #9
 8006010:	429a      	cmp	r2, r3
 8006012:	d201      	bcs.n	8006018 <find_volume+0x3ac>
 8006014:	230d      	movs	r3, #13
 8006016:	e06a      	b.n	80060ee <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800601e:	611a      	str	r2, [r3, #16]
 8006020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2280      	movs	r2, #128	; 0x80
 800602c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800602e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006032:	2b03      	cmp	r3, #3
 8006034:	d149      	bne.n	80060ca <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	3330      	adds	r3, #48	; 0x30
 800603a:	3330      	adds	r3, #48	; 0x30
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe fbf7 	bl	8004830 <ld_word>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d140      	bne.n	80060ca <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800604a:	3301      	adds	r3, #1
 800604c:	4619      	mov	r1, r3
 800604e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006050:	f7fe fe9e 	bl	8004d90 <move_window>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d137      	bne.n	80060ca <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2200      	movs	r2, #0
 800605e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fbe1 	bl	8004830 <ld_word>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006076:	429a      	cmp	r2, r3
 8006078:	d127      	bne.n	80060ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	3330      	adds	r3, #48	; 0x30
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fbee 	bl	8004860 <ld_dword>
 8006084:	4603      	mov	r3, r0
 8006086:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <find_volume+0x48c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d11e      	bne.n	80060ca <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	3330      	adds	r3, #48	; 0x30
 8006090:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fbe3 	bl	8004860 <ld_dword>
 800609a:	4603      	mov	r3, r0
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <find_volume+0x490>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d113      	bne.n	80060ca <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	3330      	adds	r3, #48	; 0x30
 80060a6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fbd8 	bl	8004860 <ld_dword>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	3330      	adds	r3, #48	; 0x30
 80060ba:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fbce 	bl	8004860 <ld_dword>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80060d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <find_volume+0x494>)
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <find_volume+0x494>)
 80060dc:	801a      	strh	r2, [r3, #0]
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <find_volume+0x494>)
 80060e0:	881a      	ldrh	r2, [r3, #0]
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80060e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060e8:	f7fe fdea 	bl	8004cc0 <clear_lock>
#endif
	return FR_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3758      	adds	r7, #88	; 0x58
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	41615252 	.word	0x41615252
 80060fc:	61417272 	.word	0x61417272
 8006100:	200005e4 	.word	0x200005e4

08006104 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800610e:	2309      	movs	r3, #9
 8006110:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01c      	beq.n	8006152 <validate+0x4e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d018      	beq.n	8006152 <validate+0x4e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d013      	beq.n	8006152 <validate+0x4e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	889a      	ldrh	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	88db      	ldrh	r3, [r3, #6]
 8006134:	429a      	cmp	r2, r3
 8006136:	d10c      	bne.n	8006152 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fad8 	bl	80046f4 <disk_status>
 8006144:	4603      	mov	r3, r0
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <validate+0x4e>
			res = FR_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <validate+0x5a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	e000      	b.n	8006160 <validate+0x5c>
 800615e:	2300      	movs	r3, #0
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	6013      	str	r3, [r2, #0]
	return res;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	4613      	mov	r3, r2
 800617c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006182:	f107 0310 	add.w	r3, r7, #16
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fcd5 	bl	8005b36 <get_ldnumber>
 800618c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	da01      	bge.n	8006198 <f_mount+0x28>
 8006194:	230b      	movs	r3, #11
 8006196:	e02b      	b.n	80061f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <f_mount+0x88>)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80061a8:	69b8      	ldr	r0, [r7, #24]
 80061aa:	f7fe fd89 	bl	8004cc0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	490d      	ldr	r1, [pc, #52]	; (80061f8 <f_mount+0x88>)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <f_mount+0x66>
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d001      	beq.n	80061da <f_mount+0x6a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	e00a      	b.n	80061f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80061da:	f107 010c 	add.w	r1, r7, #12
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	2200      	movs	r2, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fd41 	bl	8005c6c <find_volume>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	200005e0 	.word	0x200005e0

080061fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b098      	sub	sp, #96	; 0x60
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4613      	mov	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <f_open+0x18>
 8006210:	2309      	movs	r3, #9
 8006212:	e1ad      	b.n	8006570 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800621a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800621c:	79fa      	ldrb	r2, [r7, #7]
 800621e:	f107 0110 	add.w	r1, r7, #16
 8006222:	f107 0308 	add.w	r3, r7, #8
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fd20 	bl	8005c6c <find_volume>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8191 	bne.w	800655e <f_open+0x362>
		dj.obj.fs = fs;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	f107 0314 	add.w	r3, r7, #20
 8006246:	4611      	mov	r1, r2
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fc03 	bl	8005a54 <follow_path>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11a      	bne.n	8006292 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800625c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006260:	b25b      	sxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	da03      	bge.n	800626e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006266:	2306      	movs	r3, #6
 8006268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800626c:	e011      	b.n	8006292 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	bf14      	ite	ne
 8006278:	2301      	movne	r3, #1
 800627a:	2300      	moveq	r3, #0
 800627c:	b2db      	uxtb	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fbd2 	bl	8004a30 <chk_lock>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	f003 031c 	and.w	r3, r3, #28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d07f      	beq.n	800639c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800629c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d017      	beq.n	80062d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80062a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d10e      	bne.n	80062ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80062ac:	f7fe fc1c 	bl	8004ae8 <enq_lock>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d006      	beq.n	80062c4 <f_open+0xc8>
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fb03 	bl	80058c6 <dir_register>
 80062c0:	4603      	mov	r3, r0
 80062c2:	e000      	b.n	80062c6 <f_open+0xca>
 80062c4:	2312      	movs	r3, #18
 80062c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	f043 0308 	orr.w	r3, r3, #8
 80062d0:	71fb      	strb	r3, [r7, #7]
 80062d2:	e010      	b.n	80062f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80062d4:	7ebb      	ldrb	r3, [r7, #26]
 80062d6:	f003 0311 	and.w	r3, r3, #17
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <f_open+0xea>
					res = FR_DENIED;
 80062de:	2307      	movs	r3, #7
 80062e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062e4:	e007      	b.n	80062f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <f_open+0xfa>
 80062f0:	2308      	movs	r3, #8
 80062f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80062f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d168      	bne.n	80063d0 <f_open+0x1d4>
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d063      	beq.n	80063d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006308:	f7fd ffb2 	bl	8004270 <get_fattime>
 800630c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006310:	330e      	adds	r3, #14
 8006312:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fae1 	bl	80048dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	3316      	adds	r3, #22
 800631e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fadb 	bl	80048dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006328:	330b      	adds	r3, #11
 800632a:	2220      	movs	r2, #32
 800632c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fa32 	bl	800579e <ld_clust>
 800633a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006340:	2200      	movs	r2, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fa4a 	bl	80057dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	331c      	adds	r3, #28
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe fac4 	bl	80048dc <st_dword>
					fs->wflag = 1;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2201      	movs	r2, #1
 8006358:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d037      	beq.n	80063d0 <f_open+0x1d4>
						dw = fs->winsect;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	2200      	movs	r2, #0
 800636c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe ff5d 	bl	800522e <remove_chain>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800637a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800637e:	2b00      	cmp	r3, #0
 8006380:	d126      	bne.n	80063d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fd02 	bl	8004d90 <move_window>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006396:	3a01      	subs	r2, #1
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	e019      	b.n	80063d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800639c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d115      	bne.n	80063d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80063a4:	7ebb      	ldrb	r3, [r7, #26]
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80063ae:	2304      	movs	r3, #4
 80063b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80063b4:	e00c      	b.n	80063d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <f_open+0x1d4>
 80063c0:	7ebb      	ldrb	r3, [r7, #26]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <f_open+0x1d4>
						res = FR_DENIED;
 80063ca:	2307      	movs	r3, #7
 80063cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80063d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d128      	bne.n	800642a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80063f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bf14      	ite	ne
 8006402:	2301      	movne	r3, #1
 8006404:	2300      	moveq	r3, #0
 8006406:	b2db      	uxtb	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fb8b 	bl	8004b2c <inc_lock>
 8006416:	4602      	mov	r2, r0
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <f_open+0x22e>
 8006424:	2302      	movs	r3, #2
 8006426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800642a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 8095 	bne.w	800655e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f9af 	bl	800579e <ld_clust>
 8006440:	4602      	mov	r2, r0
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	331c      	adds	r3, #28
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fa08 	bl	8004860 <ld_dword>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	88da      	ldrh	r2, [r3, #6]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	79fa      	ldrb	r2, [r7, #7]
 800646e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3330      	adds	r3, #48	; 0x30
 8006486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648a:	2100      	movs	r1, #0
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fa72 	bl	8004976 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d060      	beq.n	800655e <f_open+0x362>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d05c      	beq.n	800655e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	895b      	ldrh	r3, [r3, #10]
 80064b0:	025b      	lsls	r3, r3, #9
 80064b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	657b      	str	r3, [r7, #84]	; 0x54
 80064c0:	e016      	b.n	80064f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fd1d 	bl	8004f06 <get_fat>
 80064cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80064ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d802      	bhi.n	80064da <f_open+0x2de>
 80064d4:	2302      	movs	r3, #2
 80064d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80064da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e0:	d102      	bne.n	80064e8 <f_open+0x2ec>
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80064e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	657b      	str	r3, [r7, #84]	; 0x54
 80064f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <f_open+0x304>
 80064f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d8e0      	bhi.n	80064c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006504:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800650a:	2b00      	cmp	r3, #0
 800650c:	d127      	bne.n	800655e <f_open+0x362>
 800650e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006514:	2b00      	cmp	r3, #0
 8006516:	d022      	beq.n	800655e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fcd3 	bl	8004ec8 <clust2sect>
 8006522:	6478      	str	r0, [r7, #68]	; 0x44
 8006524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006526:	2b00      	cmp	r3, #0
 8006528:	d103      	bne.n	8006532 <f_open+0x336>
						res = FR_INT_ERR;
 800652a:	2302      	movs	r3, #2
 800652c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006530:	e015      	b.n	800655e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006534:	0a5a      	lsrs	r2, r3, #9
 8006536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006538:	441a      	add	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	7858      	ldrb	r0, [r3, #1]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	2301      	movs	r3, #1
 800654e:	f7fe f911 	bl	8004774 <disk_read>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <f_open+0x362>
 8006558:	2301      	movs	r3, #1
 800655a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800655e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <f_open+0x370>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800656c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006570:	4618      	mov	r0, r3
 8006572:	3760      	adds	r7, #96	; 0x60
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f107 0214 	add.w	r2, r7, #20
 8006596:	4611      	mov	r1, r2
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fdb3 	bl	8006104 <validate>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80065a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d107      	bne.n	80065bc <f_read+0x44>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	7d5b      	ldrb	r3, [r3, #21]
 80065b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80065b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <f_read+0x4a>
 80065bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065c0:	e115      	b.n	80067ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	7d1b      	ldrb	r3, [r3, #20]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <f_read+0x5a>
 80065ce:	2307      	movs	r3, #7
 80065d0:	e10d      	b.n	80067ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	f240 80fe 	bls.w	80067e4 <f_read+0x26c>
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80065ec:	e0fa      	b.n	80067e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 80c6 	bne.w	8006788 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	0a5b      	lsrs	r3, r3, #9
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	8952      	ldrh	r2, [r2, #10]
 8006606:	3a01      	subs	r2, #1
 8006608:	4013      	ands	r3, r2
 800660a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d12f      	bne.n	8006672 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
 8006620:	e013      	b.n	800664a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	4619      	mov	r1, r3
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7fe fef9 	bl	8005428 <clmt_clust>
 8006636:	6338      	str	r0, [r7, #48]	; 0x30
 8006638:	e007      	b.n	800664a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe fc5f 	bl	8004f06 <get_fat>
 8006648:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2b01      	cmp	r3, #1
 800664e:	d804      	bhi.n	800665a <f_read+0xe2>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2202      	movs	r2, #2
 8006654:	755a      	strb	r2, [r3, #21]
 8006656:	2302      	movs	r3, #2
 8006658:	e0c9      	b.n	80067ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006660:	d104      	bne.n	800666c <f_read+0xf4>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	755a      	strb	r2, [r3, #21]
 8006668:	2301      	movs	r3, #1
 800666a:	e0c0      	b.n	80067ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006670:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7fe fc24 	bl	8004ec8 <clust2sect>
 8006680:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <f_read+0x11a>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2202      	movs	r2, #2
 800668c:	755a      	strb	r2, [r3, #21]
 800668e:	2302      	movs	r3, #2
 8006690:	e0ad      	b.n	80067ee <f_read+0x276>
			sect += csect;
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0a5b      	lsrs	r3, r3, #9
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d039      	beq.n	800671a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	4413      	add	r3, r2
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	8952      	ldrh	r2, [r2, #10]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d905      	bls.n	80066c0 <f_read+0x148>
					cc = fs->csize - csect;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	895b      	ldrh	r3, [r3, #10]
 80066b8:	461a      	mov	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	7858      	ldrb	r0, [r3, #1]
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ca:	f7fe f853 	bl	8004774 <disk_read>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <f_read+0x166>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	755a      	strb	r2, [r3, #21]
 80066da:	2301      	movs	r3, #1
 80066dc:	e087      	b.n	80067ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	7d1b      	ldrb	r3, [r3, #20]
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da14      	bge.n	8006712 <f_read+0x19a>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d90d      	bls.n	8006712 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	025b      	lsls	r3, r3, #9
 8006700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006702:	18d0      	adds	r0, r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3330      	adds	r3, #48	; 0x30
 8006708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800670c:	4619      	mov	r1, r3
 800670e:	f7fe f911 	bl	8004934 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	025b      	lsls	r3, r3, #9
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006718:	e050      	b.n	80067bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	429a      	cmp	r2, r3
 8006722:	d02e      	beq.n	8006782 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	7d1b      	ldrb	r3, [r3, #20]
 8006728:	b25b      	sxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	da18      	bge.n	8006760 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	7858      	ldrb	r0, [r3, #1]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	2301      	movs	r3, #1
 800673e:	f7fe f839 	bl	80047b4 <disk_write>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <f_read+0x1da>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	755a      	strb	r2, [r3, #21]
 800674e:	2301      	movs	r3, #1
 8006750:	e04d      	b.n	80067ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800675a:	b2da      	uxtb	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	7858      	ldrb	r0, [r3, #1]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800676a:	2301      	movs	r3, #1
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	f7fe f801 	bl	8004774 <disk_read>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <f_read+0x20a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	755a      	strb	r2, [r3, #21]
 800677e:	2301      	movs	r3, #1
 8006780:	e035      	b.n	80067ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006790:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d901      	bls.n	80067a2 <f_read+0x22a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b0:	4413      	add	r3, r2
 80067b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b4:	4619      	mov	r1, r3
 80067b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067b8:	f7fe f8bc 	bl	8004934 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	4413      	add	r3, r2
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	441a      	add	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	619a      	str	r2, [r3, #24]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	441a      	add	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f47f af01 	bne.w	80065ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3738      	adds	r7, #56	; 0x38
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b08c      	sub	sp, #48	; 0x30
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	60f8      	str	r0, [r7, #12]
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f107 0210 	add.w	r2, r7, #16
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fc74 	bl	8006104 <validate>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <f_write+0x44>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	7d5b      	ldrb	r3, [r3, #21]
 800682e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <f_write+0x4a>
 800683a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800683e:	e14b      	b.n	8006ad8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	7d1b      	ldrb	r3, [r3, #20]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <f_write+0x5a>
 800684c:	2307      	movs	r3, #7
 800684e:	e143      	b.n	8006ad8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	441a      	add	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	429a      	cmp	r2, r3
 800685e:	f080 812d 	bcs.w	8006abc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	43db      	mvns	r3, r3
 8006868:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800686a:	e127      	b.n	8006abc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 80e3 	bne.w	8006a40 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	8952      	ldrh	r2, [r2, #10]
 8006884:	3a01      	subs	r2, #1
 8006886:	4013      	ands	r3, r2
 8006888:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d143      	bne.n	8006918 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10c      	bne.n	80068b2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11a      	bne.n	80068da <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fd25 	bl	80052f8 <create_chain>
 80068ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80068b0:	e013      	b.n	80068da <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	4619      	mov	r1, r3
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7fe fdb1 	bl	8005428 <clmt_clust>
 80068c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80068c8:	e007      	b.n	80068da <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f7fe fd10 	bl	80052f8 <create_chain>
 80068d8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80f2 	beq.w	8006ac6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d104      	bne.n	80068f2 <f_write+0xfc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2202      	movs	r2, #2
 80068ec:	755a      	strb	r2, [r3, #21]
 80068ee:	2302      	movs	r3, #2
 80068f0:	e0f2      	b.n	8006ad8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d104      	bne.n	8006904 <f_write+0x10e>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	755a      	strb	r2, [r3, #21]
 8006900:	2301      	movs	r3, #1
 8006902:	e0e9      	b.n	8006ad8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006908:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <f_write+0x122>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006916:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	7d1b      	ldrb	r3, [r3, #20]
 800691c:	b25b      	sxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	da18      	bge.n	8006954 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	7858      	ldrb	r0, [r3, #1]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	2301      	movs	r3, #1
 8006932:	f7fd ff3f 	bl	80047b4 <disk_write>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <f_write+0x150>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	755a      	strb	r2, [r3, #21]
 8006942:	2301      	movs	r3, #1
 8006944:	e0c8      	b.n	8006ad8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	7d1b      	ldrb	r3, [r3, #20]
 800694a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f7fe fab3 	bl	8004ec8 <clust2sect>
 8006962:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <f_write+0x17e>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2202      	movs	r2, #2
 800696e:	755a      	strb	r2, [r3, #21]
 8006970:	2302      	movs	r3, #2
 8006972:	e0b1      	b.n	8006ad8 <f_write+0x2e2>
			sect += csect;
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	4413      	add	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	0a5b      	lsrs	r3, r3, #9
 8006980:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03c      	beq.n	8006a02 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	4413      	add	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	8952      	ldrh	r2, [r2, #10]
 8006992:	4293      	cmp	r3, r2
 8006994:	d905      	bls.n	80069a2 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	895b      	ldrh	r3, [r3, #10]
 800699a:	461a      	mov	r2, r3
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	7858      	ldrb	r0, [r3, #1]
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	69f9      	ldr	r1, [r7, #28]
 80069ac:	f7fd ff02 	bl	80047b4 <disk_write>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d004      	beq.n	80069c0 <f_write+0x1ca>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	755a      	strb	r2, [r3, #21]
 80069bc:	2301      	movs	r3, #1
 80069be:	e08b      	b.n	8006ad8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d915      	bls.n	80069fa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	025b      	lsls	r3, r3, #9
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e6:	4619      	mov	r1, r3
 80069e8:	f7fd ffa4 	bl	8004934 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	7d1b      	ldrb	r3, [r3, #20]
 80069f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	025b      	lsls	r3, r3, #9
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006a00:	e03f      	b.n	8006a82 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d016      	beq.n	8006a3a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d210      	bcs.n	8006a3a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	7858      	ldrb	r0, [r3, #1]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a22:	2301      	movs	r3, #1
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	f7fd fea5 	bl	8004774 <disk_read>
 8006a2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	755a      	strb	r2, [r3, #21]
 8006a36:	2301      	movs	r3, #1
 8006a38:	e04e      	b.n	8006ad8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d901      	bls.n	8006a5a <f_write+0x264>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a68:	4413      	add	r3, r2
 8006a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6c:	69f9      	ldr	r1, [r7, #28]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd ff60 	bl	8004934 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	7d1b      	ldrb	r3, [r3, #20]
 8006a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006a82:	69fa      	ldr	r2, [r7, #28]
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	4413      	add	r3, r2
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	441a      	add	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	619a      	str	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bf38      	it	cc
 8006aa2:	461a      	movcc	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	441a      	add	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f47f aed4 	bne.w	800686c <f_write+0x76>
 8006ac4:	e000      	b.n	8006ac8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006ac6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	7d1b      	ldrb	r3, [r3, #20]
 8006acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3730      	adds	r7, #48	; 0x30
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f107 0208 	add.w	r2, r7, #8
 8006aee:	4611      	mov	r1, r2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fb07 	bl	8006104 <validate>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d168      	bne.n	8006bd2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7d1b      	ldrb	r3, [r3, #20]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d062      	beq.n	8006bd2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7d1b      	ldrb	r3, [r3, #20]
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	da15      	bge.n	8006b42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	7858      	ldrb	r0, [r3, #1]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	2301      	movs	r3, #1
 8006b26:	f7fd fe45 	bl	80047b4 <disk_write>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <f_sync+0x54>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e04f      	b.n	8006bd4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7d1b      	ldrb	r3, [r3, #20]
 8006b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006b42:	f7fd fb95 	bl	8004270 <get_fattime>
 8006b46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7fe f91d 	bl	8004d90 <move_window>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d138      	bne.n	8006bd2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	330b      	adds	r3, #11
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	330b      	adds	r3, #11
 8006b70:	f042 0220 	orr.w	r2, r2, #32
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	461a      	mov	r2, r3
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	f7fe fe2a 	bl	80057dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f103 021c 	add.w	r2, r3, #28
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7fd fea1 	bl	80048dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3316      	adds	r3, #22
 8006b9e:	6939      	ldr	r1, [r7, #16]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fd fe9b 	bl	80048dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3312      	adds	r3, #18
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fd fe7a 	bl	80048a6 <st_word>
					fs->wflag = 1;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe f916 	bl	8004dec <sync_fs>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7d1b      	ldrb	r3, [r3, #20]
 8006bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff7b 	bl	8006ae0 <f_sync>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d118      	bne.n	8006c26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f107 0208 	add.w	r2, r7, #8
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fa81 	bl	8006104 <validate>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10c      	bne.n	8006c26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe f819 	bl	8004c48 <dec_lock>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d102      	bne.n	8006c26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8006c30:	b590      	push	{r4, r7, lr}
 8006c32:	b09d      	sub	sp, #116	; 0x74
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8006c40:	2301      	movs	r3, #1
 8006c42:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c48:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe ff71 	bl	8005b36 <get_ldnumber>
 8006c54:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da02      	bge.n	8006c62 <f_mkfs+0x32>
 8006c5c:	230b      	movs	r3, #11
 8006c5e:	f000 bc0d 	b.w	800747c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8006c62:	4a94      	ldr	r2, [pc, #592]	; (8006eb4 <f_mkfs+0x284>)
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <f_mkfs+0x4a>
 8006c6e:	4a91      	ldr	r2, [pc, #580]	; (8006eb4 <f_mkfs+0x284>)
 8006c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8006c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fd4c 	bl	8004728 <disk_initialize>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8006c96:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <f_mkfs+0x76>
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e3ea      	b.n	800747c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006ca6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006caa:	f003 0304 	and.w	r3, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <f_mkfs+0x86>
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e3e2      	b.n	800747c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8006cb6:	f107 0214 	add.w	r2, r7, #20
 8006cba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006cbe:	2103      	movs	r1, #3
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fd fd97 	bl	80047f4 <disk_ioctl>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10c      	bne.n	8006ce6 <f_mkfs+0xb6>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <f_mkfs+0xb6>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd8:	d805      	bhi.n	8006ce6 <f_mkfs+0xb6>
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	1e5a      	subs	r2, r3, #1
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <f_mkfs+0xba>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8006cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <f_mkfs+0xce>
 8006cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d309      	bcc.n	8006d12 <f_mkfs+0xe2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d04:	d805      	bhi.n	8006d12 <f_mkfs+0xe2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	1e5a      	subs	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <f_mkfs+0xe6>
 8006d12:	2313      	movs	r3, #19
 8006d14:	e3b2      	b.n	800747c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8006d16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006d24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8006d30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	fb02 f303 	mul.w	r3, r2, r3
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <f_mkfs+0x114>
 8006d40:	230e      	movs	r3, #14
 8006d42:	e39b      	b.n	800747c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006d44:	f107 0210 	add.w	r2, r7, #16
 8006d48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd fd50 	bl	80047f4 <disk_ioctl>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <f_mkfs+0x12e>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e38e      	b.n	800747c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8006d5e:	7afb      	ldrb	r3, [r7, #11]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <f_mkfs+0x13c>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <f_mkfs+0x13e>
 8006d6c:	233f      	movs	r3, #63	; 0x3f
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d901      	bls.n	8006d7c <f_mkfs+0x14c>
 8006d78:	230e      	movs	r3, #14
 8006d7a:	e37f      	b.n	800747c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b7f      	cmp	r3, #127	; 0x7f
 8006d88:	d801      	bhi.n	8006d8e <f_mkfs+0x15e>
 8006d8a:	230e      	movs	r3, #14
 8006d8c:	e376      	b.n	800747c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d901      	bls.n	8006d98 <f_mkfs+0x168>
 8006d94:	2313      	movs	r3, #19
 8006d96:	e371      	b.n	800747c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00d      	beq.n	8006dbe <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8006da2:	7afb      	ldrb	r3, [r7, #11]
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d004      	beq.n	8006db6 <f_mkfs+0x186>
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8006db6:	2303      	movs	r3, #3
 8006db8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006dbc:	e009      	b.n	8006dd2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <f_mkfs+0x19c>
 8006dc8:	2313      	movs	r3, #19
 8006dca:	e357      	b.n	800747c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8006dd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d13c      	bne.n	8006e58 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8006dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d11b      	bne.n	8006e1c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	0c5b      	lsrs	r3, r3, #17
 8006de8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006dea:	2300      	movs	r3, #0
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dee:	2301      	movs	r3, #1
 8006df0:	653b      	str	r3, [r7, #80]	; 0x50
 8006df2:	e005      	b.n	8006e00 <f_mkfs+0x1d0>
 8006df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df6:	3301      	adds	r3, #1
 8006df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <f_mkfs+0x288>)
 8006e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <f_mkfs+0x1ec>
 8006e0c:	4a2a      	ldr	r2, [pc, #168]	; (8006eb8 <f_mkfs+0x288>)
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d2eb      	bcs.n	8006df4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e24:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	3302      	adds	r3, #2
 8006e2a:	009a      	lsls	r2, r3, #2
 8006e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e2e:	4413      	add	r3, r2
 8006e30:	1e5a      	subs	r2, r3, #1
 8006e32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8006e3a:	2320      	movs	r3, #32
 8006e3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8006e3e:	2300      	movs	r3, #0
 8006e40:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d903      	bls.n	8006e54 <f_mkfs+0x224>
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <f_mkfs+0x28c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d952      	bls.n	8006efa <f_mkfs+0x2ca>
 8006e54:	230e      	movs	r3, #14
 8006e56:	e311      	b.n	800747c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8006e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d11b      	bne.n	8006e96 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	0b1b      	lsrs	r3, r3, #12
 8006e62:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006e64:	2300      	movs	r3, #0
 8006e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e68:	2301      	movs	r3, #1
 8006e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6c:	e005      	b.n	8006e7a <f_mkfs+0x24a>
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	3301      	adds	r3, #1
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	653b      	str	r3, [r7, #80]	; 0x50
 8006e7a:	4a11      	ldr	r2, [pc, #68]	; (8006ec0 <f_mkfs+0x290>)
 8006e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <f_mkfs+0x266>
 8006e86:	4a0e      	ldr	r2, [pc, #56]	; (8006ec0 <f_mkfs+0x290>)
 8006e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d2eb      	bcs.n	8006e6e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d90c      	bls.n	8006ec4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	3302      	adds	r3, #2
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eb2:	e012      	b.n	8006eda <f_mkfs+0x2aa>
 8006eb4:	200005e0 	.word	0x200005e0
 8006eb8:	080076f0 	.word	0x080076f0
 8006ebc:	0ffffff5 	.word	0x0ffffff5
 8006ec0:	08007700 	.word	0x08007700
				} else {
					fmt = FS_FAT12;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	085b      	lsrs	r3, r3, #1
 8006ed6:	3303      	adds	r3, #3
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006eda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ede:	4413      	add	r3, r2
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006eea:	2301      	movs	r3, #1
 8006eec:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8006eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efe:	4413      	add	r3, r2
 8006f00:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8006f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f06:	fb03 f202 	mul.w	r2, r3, r2
 8006f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f0c:	4413      	add	r3, r2
 8006f0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f10:	4413      	add	r3, r2
 8006f12:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	425b      	negs	r3, r3
 8006f20:	401a      	ands	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006f28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d108      	bne.n	8006f42 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8006f30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f34:	4413      	add	r3, r2
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
 8006f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f3c:	4413      	add	r3, r2
 8006f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f40:	e006      	b.n	8006f50 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8006f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f4c:	4413      	add	r3, r2
 8006f4e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8006f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	441a      	add	r2, r3
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d901      	bls.n	8006f66 <f_mkfs+0x336>
 8006f62:	230e      	movs	r3, #14
 8006f64:	e28a      	b.n	800747c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	1ad2      	subs	r2, r2, r3
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8006f82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d10f      	bne.n	8006faa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d80a      	bhi.n	8006faa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <f_mkfs+0x376>
 8006f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d144      	bne.n	8007030 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8006fa6:	230e      	movs	r3, #14
 8006fa8:	e268      	b.n	800747c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8006faa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d133      	bne.n	800701a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d91e      	bls.n	8006ffa <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d107      	bne.n	8006fd2 <f_mkfs+0x3a2>
 8006fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	d803      	bhi.n	8006fd2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	e033      	b.n	800703a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d003      	beq.n	8006fe4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006fdc:	2303      	movs	r3, #3
 8006fde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006fe2:	e02a      	b.n	800703a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <f_mkfs+0x3c6>
 8006fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	607b      	str	r3, [r7, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d91e      	bls.n	8007034 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8006ff6:	230e      	movs	r3, #14
 8006ff8:	e240      	b.n	800747c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007000:	4293      	cmp	r3, r2
 8007002:	d80a      	bhi.n	800701a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <f_mkfs+0x3e6>
 800700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b80      	cmp	r3, #128	; 0x80
 8007014:	d910      	bls.n	8007038 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8007016:	230e      	movs	r3, #14
 8007018:	e230      	b.n	800747c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800701a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10c      	bne.n	800703c <f_mkfs+0x40c>
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007028:	4293      	cmp	r3, r2
 800702a:	d907      	bls.n	800703c <f_mkfs+0x40c>
 800702c:	230e      	movs	r3, #14
 800702e:	e225      	b.n	800747c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007030:	bf00      	nop
 8007032:	e6ce      	b.n	8006dd2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007034:	bf00      	nop
 8007036:	e6cc      	b.n	8006dd2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007038:	bf00      	nop
			pau = au;
 800703a:	e6ca      	b.n	8006dd2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800703c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800703e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007040:	461a      	mov	r2, r3
 8007042:	2100      	movs	r1, #0
 8007044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007046:	f7fd fc96 	bl	8004976 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800704a:	220b      	movs	r2, #11
 800704c:	49b2      	ldr	r1, [pc, #712]	; (8007318 <f_mkfs+0x6e8>)
 800704e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007050:	f7fd fc70 	bl	8004934 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	330b      	adds	r3, #11
 8007058:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7fd fc22 	bl	80048a6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	330d      	adds	r3, #13
 8007066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	330e      	adds	r3, #14
 8007070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007072:	b292      	uxth	r2, r2
 8007074:	4611      	mov	r1, r2
 8007076:	4618      	mov	r0, r3
 8007078:	f7fd fc15 	bl	80048a6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	3310      	adds	r3, #16
 8007080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	f103 0211 	add.w	r2, r3, #17
 800708c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007090:	2b03      	cmp	r3, #3
 8007092:	d002      	beq.n	800709a <f_mkfs+0x46a>
 8007094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007096:	b29b      	uxth	r3, r3
 8007098:	e000      	b.n	800709c <f_mkfs+0x46c>
 800709a:	2300      	movs	r3, #0
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fd fc01 	bl	80048a6 <st_word>
		if (sz_vol < 0x10000) {
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070aa:	d208      	bcs.n	80070be <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	3313      	adds	r3, #19
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	b292      	uxth	r2, r2
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd fbf5 	bl	80048a6 <st_word>
 80070bc:	e006      	b.n	80070cc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	3320      	adds	r3, #32
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4611      	mov	r1, r2
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd fc08 	bl	80048dc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	3315      	adds	r3, #21
 80070d0:	22f8      	movs	r2, #248	; 0xf8
 80070d2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	3318      	adds	r3, #24
 80070d8:	213f      	movs	r1, #63	; 0x3f
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd fbe3 	bl	80048a6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	331a      	adds	r3, #26
 80070e4:	21ff      	movs	r1, #255	; 0xff
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fd fbdd 	bl	80048a6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	331c      	adds	r3, #28
 80070f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fd fbf2 	bl	80048dc <st_dword>
		if (fmt == FS_FAT32) {
 80070f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d131      	bne.n	8007164 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8007106:	f7fd f8b3 	bl	8004270 <get_fattime>
 800710a:	4603      	mov	r3, r0
 800710c:	4619      	mov	r1, r3
 800710e:	4620      	mov	r0, r4
 8007110:	f7fd fbe4 	bl	80048dc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	3324      	adds	r3, #36	; 0x24
 8007118:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800711a:	4618      	mov	r0, r3
 800711c:	f7fd fbde 	bl	80048dc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	332c      	adds	r3, #44	; 0x2c
 8007124:	2102      	movs	r1, #2
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd fbd8 	bl	80048dc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	3330      	adds	r3, #48	; 0x30
 8007130:	2101      	movs	r1, #1
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd fbb7 	bl	80048a6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	3332      	adds	r3, #50	; 0x32
 800713c:	2106      	movs	r1, #6
 800713e:	4618      	mov	r0, r3
 8007140:	f7fd fbb1 	bl	80048a6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	3340      	adds	r3, #64	; 0x40
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	3342      	adds	r3, #66	; 0x42
 8007150:	2229      	movs	r2, #41	; 0x29
 8007152:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	3347      	adds	r3, #71	; 0x47
 8007158:	2213      	movs	r2, #19
 800715a:	4970      	ldr	r1, [pc, #448]	; (800731c <f_mkfs+0x6ec>)
 800715c:	4618      	mov	r0, r3
 800715e:	f7fd fbe9 	bl	8004934 <mem_cpy>
 8007162:	e020      	b.n	80071a6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800716a:	f7fd f881 	bl	8004270 <get_fattime>
 800716e:	4603      	mov	r3, r0
 8007170:	4619      	mov	r1, r3
 8007172:	4620      	mov	r0, r4
 8007174:	f7fd fbb2 	bl	80048dc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	3316      	adds	r3, #22
 800717c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800717e:	b292      	uxth	r2, r2
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fd fb8f 	bl	80048a6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	3324      	adds	r3, #36	; 0x24
 800718c:	2280      	movs	r2, #128	; 0x80
 800718e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	3326      	adds	r3, #38	; 0x26
 8007194:	2229      	movs	r2, #41	; 0x29
 8007196:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	332b      	adds	r3, #43	; 0x2b
 800719c:	2213      	movs	r2, #19
 800719e:	4960      	ldr	r1, [pc, #384]	; (8007320 <f_mkfs+0x6f0>)
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fbc7 	bl	8004934 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fd fb78 	bl	80048a6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80071b6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80071ba:	2301      	movs	r3, #1
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c0:	f7fd faf8 	bl	80047b4 <disk_write>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <f_mkfs+0x59e>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e156      	b.n	800747c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80071ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d140      	bne.n	8007258 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	1d9a      	adds	r2, r3, #6
 80071da:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80071de:	2301      	movs	r3, #1
 80071e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071e2:	f7fd fae7 	bl	80047b4 <disk_write>
			mem_set(buf, 0, ss);
 80071e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071e8:	461a      	mov	r2, r3
 80071ea:	2100      	movs	r1, #0
 80071ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ee:	f7fd fbc2 	bl	8004976 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80071f2:	494c      	ldr	r1, [pc, #304]	; (8007324 <f_mkfs+0x6f4>)
 80071f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f6:	f7fd fb71 	bl	80048dc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007200:	4949      	ldr	r1, [pc, #292]	; (8007328 <f_mkfs+0x6f8>)
 8007202:	4618      	mov	r0, r3
 8007204:	f7fd fb6a 	bl	80048dc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	3b01      	subs	r3, #1
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fd fb61 	bl	80048dc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007220:	2102      	movs	r1, #2
 8007222:	4618      	mov	r0, r3
 8007224:	f7fd fb5a 	bl	80048dc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800722e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007232:	4618      	mov	r0, r3
 8007234:	f7fd fb37 	bl	80048a6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	1dda      	adds	r2, r3, #7
 800723c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007240:	2301      	movs	r3, #1
 8007242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007244:	f7fd fab6 	bl	80047b4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007250:	2301      	movs	r3, #1
 8007252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007254:	f7fd faae 	bl	80047b4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800725a:	2100      	movs	r1, #0
 800725c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800725e:	f7fd fb8a 	bl	8004976 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007264:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007266:	2300      	movs	r3, #0
 8007268:	64bb      	str	r3, [r7, #72]	; 0x48
 800726a:	e04b      	b.n	8007304 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800726c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007270:	2b03      	cmp	r3, #3
 8007272:	d113      	bne.n	800729c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007274:	f06f 0107 	mvn.w	r1, #7
 8007278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800727a:	f7fd fb2f 	bl	80048dc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3304      	adds	r3, #4
 8007282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fb28 	bl	80048dc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	3308      	adds	r3, #8
 8007290:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd fb21 	bl	80048dc <st_dword>
 800729a:	e00b      	b.n	80072b4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800729c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <f_mkfs+0x678>
 80072a4:	4b21      	ldr	r3, [pc, #132]	; (800732c <f_mkfs+0x6fc>)
 80072a6:	e001      	b.n	80072ac <f_mkfs+0x67c>
 80072a8:	f06f 0307 	mvn.w	r3, #7
 80072ac:	4619      	mov	r1, r3
 80072ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b0:	f7fd fb14 	bl	80048dc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80072b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072b6:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80072b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	4293      	cmp	r3, r2
 80072be:	bf28      	it	cs
 80072c0:	4613      	movcs	r3, r2
 80072c2:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80072c4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80072c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ce:	f7fd fa71 	bl	80047b4 <disk_write>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <f_mkfs+0x6ac>
 80072d8:	2301      	movs	r3, #1
 80072da:	e0cf      	b.n	800747c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80072dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072de:	461a      	mov	r2, r3
 80072e0:	2100      	movs	r1, #0
 80072e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e4:	f7fd fb47 	bl	8004976 <mem_set>
				sect += n; nsect -= n;
 80072e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80072ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ec:	4413      	add	r3, r2
 80072ee:	667b      	str	r3, [r7, #100]	; 0x64
 80072f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80072f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1dc      	bne.n	80072b8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80072fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007300:	3301      	adds	r3, #1
 8007302:	64bb      	str	r3, [r7, #72]	; 0x48
 8007304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007308:	429a      	cmp	r2, r3
 800730a:	d3af      	bcc.n	800726c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800730c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007310:	2b03      	cmp	r3, #3
 8007312:	d10d      	bne.n	8007330 <f_mkfs+0x700>
 8007314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007316:	e00c      	b.n	8007332 <f_mkfs+0x702>
 8007318:	08007610 	.word	0x08007610
 800731c:	0800761c 	.word	0x0800761c
 8007320:	08007630 	.word	0x08007630
 8007324:	41615252 	.word	0x41615252
 8007328:	61417272 	.word	0x61417272
 800732c:	00fffff8 	.word	0x00fffff8
 8007330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007332:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	4293      	cmp	r3, r2
 800733a:	bf28      	it	cs
 800733c:	4613      	movcs	r3, r2
 800733e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007340:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007346:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800734a:	f7fd fa33 	bl	80047b4 <disk_write>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <f_mkfs+0x728>
 8007354:	2301      	movs	r3, #1
 8007356:	e091      	b.n	800747c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8007358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800735a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735c:	4413      	add	r3, r2
 800735e:	667b      	str	r3, [r7, #100]	; 0x64
 8007360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e2      	bne.n	8007334 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800736e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007372:	2b03      	cmp	r3, #3
 8007374:	d103      	bne.n	800737e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007376:	230c      	movs	r3, #12
 8007378:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800737c:	e010      	b.n	80073a0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007384:	d303      	bcc.n	800738e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007386:	2306      	movs	r3, #6
 8007388:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800738c:	e008      	b.n	80073a0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800738e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007392:	2b02      	cmp	r3, #2
 8007394:	d101      	bne.n	800739a <f_mkfs+0x76a>
 8007396:	2304      	movs	r3, #4
 8007398:	e000      	b.n	800739c <f_mkfs+0x76c>
 800739a:	2301      	movs	r3, #1
 800739c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d15b      	bne.n	8007462 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80073aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073ac:	461a      	mov	r2, r3
 80073ae:	2100      	movs	r1, #0
 80073b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b2:	f7fd fae0 	bl	8004976 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fd fa70 	bl	80048a6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80073cc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	3301      	adds	r3, #1
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	3302      	adds	r3, #2
 80073e0:	2201      	movs	r2, #1
 80073e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	3303      	adds	r3, #3
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	3304      	adds	r3, #4
 80073f0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80073f4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	441a      	add	r2, r3
 80073fc:	4b21      	ldr	r3, [pc, #132]	; (8007484 <f_mkfs+0x854>)
 80073fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007402:	1ad2      	subs	r2, r2, r3
 8007404:	0852      	lsrs	r2, r2, #1
 8007406:	4413      	add	r3, r2
 8007408:	0b5b      	lsrs	r3, r3, #13
 800740a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	3305      	adds	r3, #5
 8007410:	22fe      	movs	r2, #254	; 0xfe
 8007412:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007416:	089b      	lsrs	r3, r3, #2
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	3306      	adds	r3, #6
 800741e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3307      	adds	r3, #7
 800742a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	3308      	adds	r3, #8
 8007434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd fa50 	bl	80048dc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	330c      	adds	r3, #12
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7fd fa49 	bl	80048dc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800744a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800744e:	2301      	movs	r3, #1
 8007450:	2200      	movs	r2, #0
 8007452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007454:	f7fd f9ae 	bl	80047b4 <disk_write>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <f_mkfs+0x832>
 800745e:	2301      	movs	r3, #1
 8007460:	e00c      	b.n	800747c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007462:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f7fd f9c2 	bl	80047f4 <disk_ioctl>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <f_mkfs+0x84a>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <f_mkfs+0x84c>

	return FR_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3774      	adds	r7, #116	; 0x74
 8007480:	46bd      	mov	sp, r7
 8007482:	bd90      	pop	{r4, r7, pc}
 8007484:	0515565b 	.word	0x0515565b

08007488 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007496:	2301      	movs	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800749e:	4b1f      	ldr	r3, [pc, #124]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074a0:	7a5b      	ldrb	r3, [r3, #9]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d131      	bne.n	800750c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80074a8:	4b1c      	ldr	r3, [pc, #112]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074aa:	7a5b      	ldrb	r3, [r3, #9]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074b2:	2100      	movs	r1, #0
 80074b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074b8:	7a5b      	ldrb	r3, [r3, #9]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4a17      	ldr	r2, [pc, #92]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074c8:	7a5b      	ldrb	r3, [r3, #9]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b13      	ldr	r3, [pc, #76]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074d0:	4413      	add	r3, r2
 80074d2:	79fa      	ldrb	r2, [r7, #7]
 80074d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074d8:	7a5b      	ldrb	r3, [r3, #9]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	b2d1      	uxtb	r1, r2
 80074e0:	4a0e      	ldr	r2, [pc, #56]	; (800751c <FATFS_LinkDriverEx+0x94>)
 80074e2:	7251      	strb	r1, [r2, #9]
 80074e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074e6:	7dbb      	ldrb	r3, [r7, #22]
 80074e8:	3330      	adds	r3, #48	; 0x30
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3301      	adds	r3, #1
 80074f4:	223a      	movs	r2, #58	; 0x3a
 80074f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3302      	adds	r3, #2
 80074fc:	222f      	movs	r2, #47	; 0x2f
 80074fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	3303      	adds	r3, #3
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000608 	.word	0x20000608

08007520 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800752a:	2200      	movs	r2, #0
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7ff ffaa 	bl	8007488 <FATFS_LinkDriverEx>
 8007534:	4603      	mov	r3, r0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <__libc_init_array>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4d0d      	ldr	r5, [pc, #52]	; (8007578 <__libc_init_array+0x38>)
 8007544:	4c0d      	ldr	r4, [pc, #52]	; (800757c <__libc_init_array+0x3c>)
 8007546:	1b64      	subs	r4, r4, r5
 8007548:	10a4      	asrs	r4, r4, #2
 800754a:	2600      	movs	r6, #0
 800754c:	42a6      	cmp	r6, r4
 800754e:	d109      	bne.n	8007564 <__libc_init_array+0x24>
 8007550:	4d0b      	ldr	r5, [pc, #44]	; (8007580 <__libc_init_array+0x40>)
 8007552:	4c0c      	ldr	r4, [pc, #48]	; (8007584 <__libc_init_array+0x44>)
 8007554:	f000 f820 	bl	8007598 <_init>
 8007558:	1b64      	subs	r4, r4, r5
 800755a:	10a4      	asrs	r4, r4, #2
 800755c:	2600      	movs	r6, #0
 800755e:	42a6      	cmp	r6, r4
 8007560:	d105      	bne.n	800756e <__libc_init_array+0x2e>
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	f855 3b04 	ldr.w	r3, [r5], #4
 8007568:	4798      	blx	r3
 800756a:	3601      	adds	r6, #1
 800756c:	e7ee      	b.n	800754c <__libc_init_array+0xc>
 800756e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007572:	4798      	blx	r3
 8007574:	3601      	adds	r6, #1
 8007576:	e7f2      	b.n	800755e <__libc_init_array+0x1e>
 8007578:	08007718 	.word	0x08007718
 800757c:	08007718 	.word	0x08007718
 8007580:	08007718 	.word	0x08007718
 8007584:	0800771c 	.word	0x0800771c

08007588 <memset>:
 8007588:	4402      	add	r2, r0
 800758a:	4603      	mov	r3, r0
 800758c:	4293      	cmp	r3, r2
 800758e:	d100      	bne.n	8007592 <memset+0xa>
 8007590:	4770      	bx	lr
 8007592:	f803 1b01 	strb.w	r1, [r3], #1
 8007596:	e7f9      	b.n	800758c <memset+0x4>

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
