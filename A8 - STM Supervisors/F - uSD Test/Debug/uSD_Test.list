
uSD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bcc  08005bcc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd4  08005bd4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  20000084  08005c60  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  08005c60  000213d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dea6  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e8  00000000  00000000  0002df5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00030c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003e9d  00000000  00000000  000316f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113c5  00000000  00000000  0003558d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd2bb  00000000  00000000  00046952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b4  00000000  00000000  00103c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000084 	.word	0x20000084
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080056a0 	.word	0x080056a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000088 	.word	0x20000088
 8000200:	080056a0 	.word	0x080056a0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <clear_buffer>:
	while (*buff++ != '\0') i++;
	return i;
}

void clear_buffer (char* buffer2)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 1024; i ++)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e007      	b.n	8000536 <clear_buffer+0x1e>
		buffer2[i] = '\0';
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i ++)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800053c:	dbf3      	blt.n	8000526 <clear_buffer+0xe>
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fb76 	bl	8000c44 <HAL_Init>

  /* USER CODE BEGIN Init */
  fs = (FATFS *)malloc(sizeof (FATFS));
 8000558:	f241 0038 	movw	r0, #4152	; 0x1038
 800055c:	f004 ffd0 	bl	8005500 <malloc>
 8000560:	4603      	mov	r3, r0
 8000562:	461a      	mov	r2, r3
 8000564:	4b31      	ldr	r3, [pc, #196]	; (800062c <main+0xe0>)
 8000566:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f872 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  char buffer[1024];
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f92e 	bl	80007cc <MX_GPIO_Init>
  MX_FATFS_Init();
 8000570:	f001 fe80 	bl	8002274 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000574:	f000 f900 	bl	8000778 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000578:	f000 f8c8 	bl	800070c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(fs,"",0);
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <main+0xe0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2200      	movs	r2, #0
 8000582:	492b      	ldr	r1, [pc, #172]	; (8000630 <main+0xe4>)
 8000584:	4618      	mov	r0, r3
 8000586:	f004 f8c1 	bl	800470c <f_mount>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <main+0xe8>)
 8000590:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <main+0xe8>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x52>
	  Error_Handler();
 800059a:	f000 f9c1 	bl	8000920 <Error_Handler>

  // HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer),1000);
  // clear_buffer(buffer);

  fresult = f_open(&fil, "SD_TestFile.txt", FA_CREATE_ALWAYS |
 800059e:	220a      	movs	r2, #10
 80005a0:	4925      	ldr	r1, [pc, #148]	; (8000638 <main+0xec>)
 80005a2:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xf0>)
 80005a4:	f004 f8f8 	bl	8004798 <f_open>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <main+0xe8>)
 80005ae:	701a      	strb	r2, [r3, #0]
		  FA_WRITE);

  /* Writing text */
  strcpy (buffer, "This is a test string to test SD file in PF09 Cards. If you read this the SD card is approved.\n");
 80005b0:	463b      	mov	r3, r7
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <main+0xf4>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	4611      	mov	r1, r2
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	461a      	mov	r2, r3
 80005bc:	f004 ffa8 	bl	8005510 <memcpy>

  fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe1e 	bl	8000204 <strlen>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4639      	mov	r1, r7
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <main+0xf8>)
 80005ce:	481b      	ldr	r0, [pc, #108]	; (800063c <main+0xf0>)
 80005d0:	f004 fc0d 	bl	8004dee <f_write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <main+0xe8>)
 80005da:	701a      	strb	r2, [r3, #0]

  /* Close file */
  f_close(&fil);
 80005dc:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0xf0>)
 80005de:	f004 fe18 	bl	8005212 <f_close>
  HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <main+0xfc>)
 80005e6:	f000 fe3e 	bl	8001266 <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fb9b 	bl	8000d28 <HAL_Delay>
  HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <main+0xfc>)
 80005f6:	f000 fe36 	bl	8001266 <HAL_GPIO_TogglePin>
  /* Open second file to read */
  fresult = f_open(&fil, "SD_TestFile.txt", FA_READ);
 80005fa:	2201      	movs	r2, #1
 80005fc:	490e      	ldr	r1, [pc, #56]	; (8000638 <main+0xec>)
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <main+0xf0>)
 8000600:	f004 f8ca 	bl	8004798 <f_open>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0xe8>)
 800060a:	701a      	strb	r2, [r3, #0]
  clear_buffer(buffer);
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff82 	bl	8000518 <clear_buffer>
  /* Read data from the file
   * Please see the function details for the arguments */
  f_read (&fil, buffer, f_size(&fil), &br);
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0xf0>)
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	4639      	mov	r1, r7
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <main+0x100>)
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <main+0xf0>)
 800061e:	f004 fa87 	bl	8004b30 <f_read>
  // HAL_UART_Transmit(&huart1,(uint8_t*)buffer,strlen(buffer),1000);
  /* Close file */
  f_close(&fil);
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <main+0xf0>)
 8000624:	f004 fdf5 	bl	8005212 <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0xdc>
 800062a:	bf00      	nop
 800062c:	2000013c 	.word	0x2000013c
 8000630:	080056b8 	.word	0x080056b8
 8000634:	20001170 	.word	0x20001170
 8000638:	080056bc 	.word	0x080056bc
 800063c:	20000140 	.word	0x20000140
 8000640:	080056cc 	.word	0x080056cc
 8000644:	20001178 	.word	0x20001178
 8000648:	40020400 	.word	0x40020400
 800064c:	20001174 	.word	0x20001174

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 ff64 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xb4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xb4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xb4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <SystemClock_Config+0xb8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <SystemClock_Config+0xb8>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <SystemClock_Config+0xb8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f809 	bl	80016d8 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006cc:	f000 f928 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fdd6 	bl	800129c <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006f6:	f000 f913 	bl	8000920 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_SPI1_Init+0x64>)
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <MX_SPI1_Init+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000716:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800071c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_SPI1_Init+0x64>)
 8000738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SPI1_Init+0x64>)
 8000758:	220a      	movs	r2, #10
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_SPI1_Init+0x64>)
 800075e:	f001 fa3f 	bl	8001be0 <HAL_SPI_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000768:	f000 f8da 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000a0 	.word	0x200000a0
 8000774:	40013000 	.word	0x40013000

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART1_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART1_UART_Init+0x4c>)
 80007b0:	f001 fa9f 	bl	8001cf2 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f8b1 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000f8 	.word	0x200000f8
 80007c8:	40011000 	.word	0x40011000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <MX_GPIO_Init+0x140>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a48      	ldr	r2, [pc, #288]	; (800090c <MX_GPIO_Init+0x140>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <MX_GPIO_Init+0x140>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b42      	ldr	r3, [pc, #264]	; (800090c <MX_GPIO_Init+0x140>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a41      	ldr	r2, [pc, #260]	; (800090c <MX_GPIO_Init+0x140>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <MX_GPIO_Init+0x140>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b3b      	ldr	r3, [pc, #236]	; (800090c <MX_GPIO_Init+0x140>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3a      	ldr	r2, [pc, #232]	; (800090c <MX_GPIO_Init+0x140>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b38      	ldr	r3, [pc, #224]	; (800090c <MX_GPIO_Init+0x140>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <MX_GPIO_Init+0x140>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a33      	ldr	r2, [pc, #204]	; (800090c <MX_GPIO_Init+0x140>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <MX_GPIO_Init+0x140>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b2d      	ldr	r3, [pc, #180]	; (800090c <MX_GPIO_Init+0x140>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2c      	ldr	r2, [pc, #176]	; (800090c <MX_GPIO_Init+0x140>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <MX_GPIO_Init+0x140>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_GPIO_Port, uSD_CS_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	4827      	ldr	r0, [pc, #156]	; (8000910 <MX_GPIO_Init+0x144>)
 8000874:	f000 fcde 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2104      	movs	r1, #4
 800087c:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x148>)
 800087e:	f000 fcd9 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_L1_GPIO_Port, Status_L1_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	4824      	ldr	r0, [pc, #144]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000888:	f000 fcd4 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_CS_Pin */
  GPIO_InitStruct.Pin = uSD_CS_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	; (8000910 <MX_GPIO_Init+0x144>)
 80008a4:	f000 fb4a 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ba:	2306      	movs	r3, #6
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4815      	ldr	r0, [pc, #84]	; (800091c <MX_GPIO_Init+0x150>)
 80008c6:	f000 fb39 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_GPIO_Init+0x148>)
 80008e2:	f000 fb2b 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_L1_Pin */
  GPIO_InitStruct.Pin = Status_L1_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_L1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_GPIO_Init+0x14c>)
 80008fe:	f000 fb1d 	bl	8000f3c <HAL_GPIO_Init>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_SPI_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_SPI_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d6:	23e0      	movs	r3, #224	; 0xe0
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e6:	2305      	movs	r3, #5
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_SPI_MspInit+0x8c>)
 80009f2:	f000 faa3 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12c      	bne.n	8000a88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a84:	f000 fa5a 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40011000 	.word	0x40011000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <SDTimer_Handler+0x40>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <SDTimer_Handler+0x1c>
		Timer1 --;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <SDTimer_Handler+0x40>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <SDTimer_Handler+0x40>)
 8000ab6:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <SDTimer_Handler+0x44>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <SDTimer_Handler+0x34>
		Timer2 --;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <SDTimer_Handler+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SDTimer_Handler+0x44>)
 8000ace:	701a      	strb	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000117d 	.word	0x2000117d
 8000ae0:	2000117e 	.word	0x2000117e

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SysTick_Handler+0x30>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SysTick_Handler+0x30>)
 8000b3c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SysTick_Handler+0x30>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	d904      	bls.n	8000b52 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Handler+0x30>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8000b4e:	f7ff ffa5 	bl	8000a9c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f8c9 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000117c 	.word	0x2000117c

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f004 fc8c 	bl	80054ac <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20040000 	.word	0x20040000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	20001180 	.word	0x20001180
 8000bc8:	200013d8 	.word	0x200013d8

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f004 fc4b 	bl	80054b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fc93 	bl	800054c <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c28:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c34:	08005bdc 	.word	0x08005bdc
  ldr r2, =_sbss
 8000c38:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c3c:	200013d4 	.word	0x200013d4

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f931 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe58 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f911 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20001184 	.word	0x20001184

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20001184 	.word	0x20001184

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff5c 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffb0 	bl	8000e90 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e153      	b.n	8001200 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8142 	bne.w	80011fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 809c 	beq.w	80011fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b54      	ldr	r3, [pc, #336]	; (8001218 <HAL_GPIO_Init+0x2dc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a53      	ldr	r2, [pc, #332]	; (8001218 <HAL_GPIO_Init+0x2dc>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b51      	ldr	r3, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x2dc>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x2e0>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_GPIO_Init+0x2e4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x1f6>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a45      	ldr	r2, [pc, #276]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x1f2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a44      	ldr	r2, [pc, #272]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x1ee>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a43      	ldr	r2, [pc, #268]	; (800122c <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x1ea>
 8001122:	2303      	movs	r3, #3
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x1f8>
 8001126:	2307      	movs	r3, #7
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x1f8>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x1f8>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x1f8>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4935      	ldr	r1, [pc, #212]	; (800121c <HAL_GPIO_Init+0x2e0>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001176:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a0:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_GPIO_Init+0x2f4>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f aea8 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4013      	ands	r3, r2
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43d9      	mvns	r1, r3
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	400b      	ands	r3, r1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0cc      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d90c      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d044      	beq.n	80013bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d119      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d003      	beq.n	800135a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001356:	2b03      	cmp	r3, #3
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e067      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f023 0203 	bic.w	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4934      	ldr	r1, [pc, #208]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800138c:	f7ff fcc0 	bl	8000d10 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	e00a      	b.n	80013aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001394:	f7ff fcbc 	bl	8000d10 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 020c 	and.w	r2, r3, #12
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1eb      	bne.n	8001394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d20c      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f821 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001426:	4602      	mov	r2, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	5ccb      	ldrb	r3, [r1, r3]
 8001436:	fa22 f303 	lsr.w	r3, r2, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc20 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00
 8001458:	40023800 	.word	0x40023800
 800145c:	08005774 	.word	0x08005774
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b094      	sub	sp, #80	; 0x50
 800146e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	647b      	str	r3, [r7, #68]	; 0x44
 8001474:	2300      	movs	r3, #0
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001478:	2300      	movs	r3, #0
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001480:	4b79      	ldr	r3, [pc, #484]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b08      	cmp	r3, #8
 800148a:	d00d      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x40>
 800148c:	2b08      	cmp	r3, #8
 800148e:	f200 80e1 	bhi.w	8001654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x34>
 8001496:	2b04      	cmp	r3, #4
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800149a:	e0db      	b.n	8001654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <HAL_RCC_GetSysClockFreq+0x204>)
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80014a0:	e0db      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_GetSysClockFreq+0x204>)
 80014a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014a6:	e0d8      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b2:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	2200      	movs	r2, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80014ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
 80014d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014da:	4622      	mov	r2, r4
 80014dc:	462b      	mov	r3, r5
 80014de:	f04f 0000 	mov.w	r0, #0
 80014e2:	f04f 0100 	mov.w	r1, #0
 80014e6:	0159      	lsls	r1, r3, #5
 80014e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ec:	0150      	lsls	r0, r2, #5
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4621      	mov	r1, r4
 80014f4:	1a51      	subs	r1, r2, r1
 80014f6:	6139      	str	r1, [r7, #16]
 80014f8:	4629      	mov	r1, r5
 80014fa:	eb63 0301 	sbc.w	r3, r3, r1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800150c:	4659      	mov	r1, fp
 800150e:	018b      	lsls	r3, r1, #6
 8001510:	4651      	mov	r1, sl
 8001512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001516:	4651      	mov	r1, sl
 8001518:	018a      	lsls	r2, r1, #6
 800151a:	4651      	mov	r1, sl
 800151c:	ebb2 0801 	subs.w	r8, r2, r1
 8001520:	4659      	mov	r1, fp
 8001522:	eb63 0901 	sbc.w	r9, r3, r1
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800153a:	4690      	mov	r8, r2
 800153c:	4699      	mov	r9, r3
 800153e:	4623      	mov	r3, r4
 8001540:	eb18 0303 	adds.w	r3, r8, r3
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	462b      	mov	r3, r5
 8001548:	eb49 0303 	adc.w	r3, r9, r3
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800155a:	4629      	mov	r1, r5
 800155c:	028b      	lsls	r3, r1, #10
 800155e:	4621      	mov	r1, r4
 8001560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001564:	4621      	mov	r1, r4
 8001566:	028a      	lsls	r2, r1, #10
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156e:	2200      	movs	r2, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
 8001572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001578:	f7fe fe4c 	bl	8000214 <__aeabi_uldivmod>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4613      	mov	r3, r2
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001584:	e058      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	2200      	movs	r2, #0
 800158e:	4618      	mov	r0, r3
 8001590:	4611      	mov	r1, r2
 8001592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
 800159c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015a0:	4642      	mov	r2, r8
 80015a2:	464b      	mov	r3, r9
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	f04f 0100 	mov.w	r1, #0
 80015ac:	0159      	lsls	r1, r3, #5
 80015ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b2:	0150      	lsls	r0, r2, #5
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4641      	mov	r1, r8
 80015ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80015be:	4649      	mov	r1, r9
 80015c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015d8:	ebb2 040a 	subs.w	r4, r2, sl
 80015dc:	eb63 050b 	sbc.w	r5, r3, fp
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	00eb      	lsls	r3, r5, #3
 80015ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ee:	00e2      	lsls	r2, r4, #3
 80015f0:	4614      	mov	r4, r2
 80015f2:	461d      	mov	r5, r3
 80015f4:	4643      	mov	r3, r8
 80015f6:	18e3      	adds	r3, r4, r3
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	464b      	mov	r3, r9
 80015fc:	eb45 0303 	adc.w	r3, r5, r3
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800160e:	4629      	mov	r1, r5
 8001610:	028b      	lsls	r3, r1, #10
 8001612:	4621      	mov	r1, r4
 8001614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001618:	4621      	mov	r1, r4
 800161a:	028a      	lsls	r2, r1, #10
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001622:	2200      	movs	r2, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	61fa      	str	r2, [r7, #28]
 8001628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800162c:	f7fe fdf2 	bl	8000214 <__aeabi_uldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4613      	mov	r3, r2
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_GetSysClockFreq+0x200>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	3301      	adds	r3, #1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800164a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001652:	e002      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetSysClockFreq+0x204>)
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800165a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800165c:	4618      	mov	r0, r3
 800165e:	3750      	adds	r7, #80	; 0x50
 8001660:	46bd      	mov	sp, r7
 8001662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	00f42400 	.word	0x00f42400

08001670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_RCC_GetHCLKFreq+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800168c:	f7ff fff0 	bl	8001670 <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	0a9b      	lsrs	r3, r3, #10
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	4903      	ldr	r1, [pc, #12]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	08005784 	.word	0x08005784

080016b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016b4:	f7ff ffdc 	bl	8001670 <HAL_RCC_GetHCLKFreq>
 80016b8:	4602      	mov	r2, r0
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	0b5b      	lsrs	r3, r3, #13
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	4903      	ldr	r1, [pc, #12]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016c6:	5ccb      	ldrb	r3, [r1, r3]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40023800 	.word	0x40023800
 80016d4:	08005784 	.word	0x08005784

080016d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e273      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d075      	beq.n	80017e2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016f6:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d00c      	beq.n	800171c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b85      	ldr	r3, [pc, #532]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b7e      	ldr	r3, [pc, #504]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d05b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x108>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d157      	bne.n	80017e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e24e      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x74>
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a75      	ldr	r2, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6f      	ldr	r2, [pc, #444]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6c      	ldr	r2, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xb0>
 8001770:	4b69      	ldr	r3, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a68      	ldr	r2, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fabe 	bl	8000d10 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff faba 	bl	8000d10 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e213      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xc0>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff faaa 	bl	8000d10 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff faa6 	bl	8000d10 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1ff      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b51      	ldr	r3, [pc, #324]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0xe8>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1d3      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4937      	ldr	r1, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x244>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fa5f 	bl	8000d10 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fa5b 	bl	8000d10 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1b4      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4925      	ldr	r1, [pc, #148]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x244>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fa3e 	bl	8000d10 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fa3a 	bl	8000d10 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e193      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d036      	beq.n	8001930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d016      	beq.n	80018f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_RCC_OscConfig+0x248>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff fa1e 	bl	8000d10 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fa1a 	bl	8000d10 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e173      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x240>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x200>
 80018f6:	e01b      	b.n	8001930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_OscConfig+0x248>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa07 	bl	8000d10 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001904:	e00e      	b.n	8001924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fa03 	bl	8000d10 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d907      	bls.n	8001924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e15c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
 8001918:	40023800 	.word	0x40023800
 800191c:	42470000 	.word	0x42470000
 8001920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ea      	bne.n	8001906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8097 	beq.w	8001a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b7f      	ldr	r3, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a7e      	ldr	r2, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196a:	2301      	movs	r3, #1
 800196c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <HAL_RCC_OscConfig+0x47c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <HAL_RCC_OscConfig+0x47c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a75      	ldr	r2, [pc, #468]	; (8001b54 <HAL_RCC_OscConfig+0x47c>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001986:	f7ff f9c3 	bl	8000d10 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198e:	f7ff f9bf 	bl	8000d10 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e118      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <HAL_RCC_OscConfig+0x47c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x2ea>
 80019b4:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6713      	str	r3, [r2, #112]	; 0x70
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x30c>
 80019ca:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
 80019d6:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a5d      	ldr	r2, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x324>
 80019e4:	4b5a      	ldr	r3, [pc, #360]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e8:	4a59      	ldr	r2, [pc, #356]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6713      	str	r3, [r2, #112]	; 0x70
 80019f0:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	4a56      	ldr	r2, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 80019f6:	f023 0304 	bic.w	r3, r3, #4
 80019fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d015      	beq.n	8001a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f984 	bl	8000d10 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff f980 	bl	8000d10 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0d7      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0ee      	beq.n	8001a0c <HAL_RCC_OscConfig+0x334>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f96e 	bl	8000d10 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f96a 	bl	8000d10 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e0c1      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ee      	bne.n	8001a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80ad 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d060      	beq.n	8001b44 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d145      	bne.n	8001b16 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <HAL_RCC_OscConfig+0x480>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f93e 	bl	8000d10 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f93a 	bl	8000d10 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e093      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	071b      	lsls	r3, r3, #28
 8001ae2:	491b      	ldr	r1, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x480>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f90f 	bl	8000d10 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f90b 	bl	8000d10 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e064      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x41e>
 8001b14:	e05c      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_RCC_OscConfig+0x480>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f8f8 	bl	8000d10 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f8f4 	bl	8000d10 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_OscConfig+0x478>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x44c>
 8001b42:	e045      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e040      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000
 8001b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_RCC_OscConfig+0x504>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d030      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d129      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d122      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d119      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	085b      	lsrs	r3, r3, #1
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10f      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07b      	b.n	8001cea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d108      	bne.n	8001c0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c02:	d009      	beq.n	8001c18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	e005      	b.n	8001c18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fea2 	bl	800097c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f003 0104 	and.w	r1, r3, #4
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f003 0210 	and.w	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e03f      	b.n	8001d84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d106      	bne.n	8001d1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7fe fe77 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2224      	movs	r2, #36	; 0x24
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f828 	bl	8001d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d90:	b0c0      	sub	sp, #256	; 0x100
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da8:	68d9      	ldr	r1, [r3, #12]
 8001daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	ea40 0301 	orr.w	r3, r0, r1
 8001db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001de4:	f021 010c 	bic.w	r1, r1, #12
 8001de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001df2:	430b      	orrs	r3, r1
 8001df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e06:	6999      	ldr	r1, [r3, #24]
 8001e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	ea40 0301 	orr.w	r3, r0, r1
 8001e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <UART_SetConfig+0x2cc>)
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d005      	beq.n	8001e2c <UART_SetConfig+0xa0>
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b8d      	ldr	r3, [pc, #564]	; (800205c <UART_SetConfig+0x2d0>)
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d104      	bne.n	8001e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e2c:	f7ff fc40 	bl	80016b0 <HAL_RCC_GetPCLK2Freq>
 8001e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e34:	e003      	b.n	8001e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e36:	f7ff fc27 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e48:	f040 810c 	bne.w	8002064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e50:	2200      	movs	r2, #0
 8001e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e5e:	4622      	mov	r2, r4
 8001e60:	462b      	mov	r3, r5
 8001e62:	1891      	adds	r1, r2, r2
 8001e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e66:	415b      	adcs	r3, r3
 8001e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e6e:	4621      	mov	r1, r4
 8001e70:	eb12 0801 	adds.w	r8, r2, r1
 8001e74:	4629      	mov	r1, r5
 8001e76:	eb43 0901 	adc.w	r9, r3, r1
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e8e:	4690      	mov	r8, r2
 8001e90:	4699      	mov	r9, r3
 8001e92:	4623      	mov	r3, r4
 8001e94:	eb18 0303 	adds.w	r3, r8, r3
 8001e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e9c:	462b      	mov	r3, r5
 8001e9e:	eb49 0303 	adc.w	r3, r9, r3
 8001ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001eba:	460b      	mov	r3, r1
 8001ebc:	18db      	adds	r3, r3, r3
 8001ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	eb42 0303 	adc.w	r3, r2, r3
 8001ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8001ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ed0:	f7fe f9a0 	bl	8000214 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <UART_SetConfig+0x2d4>)
 8001eda:	fba3 2302 	umull	r2, r3, r3, r2
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	011c      	lsls	r4, r3, #4
 8001ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	1891      	adds	r1, r2, r2
 8001efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8001efc:	415b      	adcs	r3, r3
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f04:	4641      	mov	r1, r8
 8001f06:	eb12 0a01 	adds.w	sl, r2, r1
 8001f0a:	4649      	mov	r1, r9
 8001f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f24:	4692      	mov	sl, r2
 8001f26:	469b      	mov	fp, r3
 8001f28:	4643      	mov	r3, r8
 8001f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8001f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f32:	464b      	mov	r3, r9
 8001f34:	eb4b 0303 	adc.w	r3, fp, r3
 8001f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f50:	460b      	mov	r3, r1
 8001f52:	18db      	adds	r3, r3, r3
 8001f54:	643b      	str	r3, [r7, #64]	; 0x40
 8001f56:	4613      	mov	r3, r2
 8001f58:	eb42 0303 	adc.w	r3, r2, r3
 8001f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f66:	f7fe f955 	bl	8000214 <__aeabi_uldivmod>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <UART_SetConfig+0x2d4>)
 8001f72:	fba3 2301 	umull	r2, r3, r3, r1
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	1acb      	subs	r3, r1, r3
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <UART_SetConfig+0x2d4>)
 8001f88:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f94:	441c      	add	r4, r3
 8001f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	1891      	adds	r1, r2, r2
 8001fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fb0:	415b      	adcs	r3, r3
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	4641      	mov	r1, r8
 8001fba:	1851      	adds	r1, r2, r1
 8001fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	414b      	adcs	r3, r1
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	00cb      	lsls	r3, r1, #3
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fda:	4651      	mov	r1, sl
 8001fdc:	00ca      	lsls	r2, r1, #3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fec:	464b      	mov	r3, r9
 8001fee:	460a      	mov	r2, r1
 8001ff0:	eb42 0303 	adc.w	r3, r2, r3
 8001ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800200c:	460b      	mov	r3, r1
 800200e:	18db      	adds	r3, r3, r3
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
 8002012:	4613      	mov	r3, r2
 8002014:	eb42 0303 	adc.w	r3, r2, r3
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800201e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002022:	f7fe f8f7 	bl	8000214 <__aeabi_uldivmod>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <UART_SetConfig+0x2d4>)
 800202c:	fba3 1302 	umull	r1, r3, r3, r2
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	2164      	movs	r1, #100	; 0x64
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	3332      	adds	r3, #50	; 0x32
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <UART_SetConfig+0x2d4>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	f003 0207 	and.w	r2, r3, #7
 800204a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4422      	add	r2, r4
 8002052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002054:	e105      	b.n	8002262 <UART_SetConfig+0x4d6>
 8002056:	bf00      	nop
 8002058:	40011000 	.word	0x40011000
 800205c:	40011400 	.word	0x40011400
 8002060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002068:	2200      	movs	r2, #0
 800206a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800206e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002076:	4642      	mov	r2, r8
 8002078:	464b      	mov	r3, r9
 800207a:	1891      	adds	r1, r2, r2
 800207c:	6239      	str	r1, [r7, #32]
 800207e:	415b      	adcs	r3, r3
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002086:	4641      	mov	r1, r8
 8002088:	1854      	adds	r4, r2, r1
 800208a:	4649      	mov	r1, r9
 800208c:	eb43 0501 	adc.w	r5, r3, r1
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	00eb      	lsls	r3, r5, #3
 800209a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800209e:	00e2      	lsls	r2, r4, #3
 80020a0:	4614      	mov	r4, r2
 80020a2:	461d      	mov	r5, r3
 80020a4:	4643      	mov	r3, r8
 80020a6:	18e3      	adds	r3, r4, r3
 80020a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020ac:	464b      	mov	r3, r9
 80020ae:	eb45 0303 	adc.w	r3, r5, r3
 80020b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020d2:	4629      	mov	r1, r5
 80020d4:	008b      	lsls	r3, r1, #2
 80020d6:	4621      	mov	r1, r4
 80020d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020dc:	4621      	mov	r1, r4
 80020de:	008a      	lsls	r2, r1, #2
 80020e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020e4:	f7fe f896 	bl	8000214 <__aeabi_uldivmod>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4b60      	ldr	r3, [pc, #384]	; (8002270 <UART_SetConfig+0x4e4>)
 80020ee:	fba3 2302 	umull	r2, r3, r3, r2
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	011c      	lsls	r4, r3, #4
 80020f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fa:	2200      	movs	r2, #0
 80020fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002108:	4642      	mov	r2, r8
 800210a:	464b      	mov	r3, r9
 800210c:	1891      	adds	r1, r2, r2
 800210e:	61b9      	str	r1, [r7, #24]
 8002110:	415b      	adcs	r3, r3
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002118:	4641      	mov	r1, r8
 800211a:	1851      	adds	r1, r2, r1
 800211c:	6139      	str	r1, [r7, #16]
 800211e:	4649      	mov	r1, r9
 8002120:	414b      	adcs	r3, r1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002130:	4659      	mov	r1, fp
 8002132:	00cb      	lsls	r3, r1, #3
 8002134:	4651      	mov	r1, sl
 8002136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800213a:	4651      	mov	r1, sl
 800213c:	00ca      	lsls	r2, r1, #3
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	4603      	mov	r3, r0
 8002144:	4642      	mov	r2, r8
 8002146:	189b      	adds	r3, r3, r2
 8002148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800214c:	464b      	mov	r3, r9
 800214e:	460a      	mov	r2, r1
 8002150:	eb42 0303 	adc.w	r3, r2, r3
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	67bb      	str	r3, [r7, #120]	; 0x78
 8002162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002170:	4649      	mov	r1, r9
 8002172:	008b      	lsls	r3, r1, #2
 8002174:	4641      	mov	r1, r8
 8002176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800217a:	4641      	mov	r1, r8
 800217c:	008a      	lsls	r2, r1, #2
 800217e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002182:	f7fe f847 	bl	8000214 <__aeabi_uldivmod>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <UART_SetConfig+0x4e4>)
 800218c:	fba3 1302 	umull	r1, r3, r3, r2
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	2164      	movs	r1, #100	; 0x64
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	3332      	adds	r3, #50	; 0x32
 800219e:	4a34      	ldr	r2, [pc, #208]	; (8002270 <UART_SetConfig+0x4e4>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021aa:	441c      	add	r4, r3
 80021ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021b0:	2200      	movs	r2, #0
 80021b2:	673b      	str	r3, [r7, #112]	; 0x70
 80021b4:	677a      	str	r2, [r7, #116]	; 0x74
 80021b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80021ba:	4642      	mov	r2, r8
 80021bc:	464b      	mov	r3, r9
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	415b      	adcs	r3, r3
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ca:	4641      	mov	r1, r8
 80021cc:	1851      	adds	r1, r2, r1
 80021ce:	6039      	str	r1, [r7, #0]
 80021d0:	4649      	mov	r1, r9
 80021d2:	414b      	adcs	r3, r1
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021e2:	4659      	mov	r1, fp
 80021e4:	00cb      	lsls	r3, r1, #3
 80021e6:	4651      	mov	r1, sl
 80021e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ec:	4651      	mov	r1, sl
 80021ee:	00ca      	lsls	r2, r1, #3
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	4642      	mov	r2, r8
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80021fc:	464b      	mov	r3, r9
 80021fe:	460a      	mov	r2, r1
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
 8002210:	667a      	str	r2, [r7, #100]	; 0x64
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800221e:	4649      	mov	r1, r9
 8002220:	008b      	lsls	r3, r1, #2
 8002222:	4641      	mov	r1, r8
 8002224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002228:	4641      	mov	r1, r8
 800222a:	008a      	lsls	r2, r1, #2
 800222c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002230:	f7fd fff0 	bl	8000214 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <UART_SetConfig+0x4e4>)
 800223a:	fba3 1302 	umull	r1, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2164      	movs	r1, #100	; 0x64
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	3332      	adds	r3, #50	; 0x32
 800224c:	4a08      	ldr	r2, [pc, #32]	; (8002270 <UART_SetConfig+0x4e4>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 020f 	and.w	r2, r3, #15
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4422      	add	r2, r4
 8002260:	609a      	str	r2, [r3, #8]
}
 8002262:	bf00      	nop
 8002264:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002268:	46bd      	mov	sp, r7
 800226a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226e:	bf00      	nop
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <MX_FATFS_Init+0x18>)
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_FATFS_Init+0x1c>)
 800227c:	f003 f840 	bl	8005300 <FATFS_LinkDriver>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <MX_FATFS_Init+0x20>)
 8002286:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000118c 	.word	0x2000118c
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20001188 	.word	0x20001188

08002298 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800229c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <USER_initialize+0x24>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <USER_initialize+0x24>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000009 	.word	0x20000009

080022d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <USER_status+0x24>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    return Stat;
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <USER_status+0x24>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000009 	.word	0x20000009

080022f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4603      	mov	r3, r0
 8002306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8002308:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8002326:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	603a      	str	r2, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
 8002340:	460b      	mov	r3, r1
 8002342:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
    return res;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <disk_status+0x30>)
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	4905      	ldr	r1, [pc, #20]	; (8002388 <disk_status+0x30>)
 8002372:	440a      	add	r2, r1
 8002374:	7a12      	ldrb	r2, [r2, #8]
 8002376:	4610      	mov	r0, r2
 8002378:	4798      	blx	r3
 800237a:	4603      	mov	r3, r0
 800237c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200013b8 	.word	0x200013b8

0800238c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <disk_initialize+0x48>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <disk_initialize+0x48>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <disk_initialize+0x48>)
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	4906      	ldr	r1, [pc, #24]	; (80023d4 <disk_initialize+0x48>)
 80023bc:	440a      	add	r2, r1
 80023be:	7a12      	ldrb	r2, [r2, #8]
 80023c0:	4610      	mov	r0, r2
 80023c2:	4798      	blx	r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200013b8 	.word	0x200013b8

080023d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <disk_read+0x3c>)
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	689c      	ldr	r4, [r3, #8]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <disk_read+0x3c>)
 80023f8:	4413      	add	r3, r2
 80023fa:	7a18      	ldrb	r0, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	47a0      	blx	r4
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]
  return res;
 8002408:	7dfb      	ldrb	r3, [r7, #23]
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	200013b8 	.word	0x200013b8

08002418 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <disk_write+0x3c>)
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	68dc      	ldr	r4, [r3, #12]
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	4a07      	ldr	r2, [pc, #28]	; (8002454 <disk_write+0x3c>)
 8002438:	4413      	add	r3, r2
 800243a:	7a18      	ldrb	r0, [r3, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	47a0      	blx	r4
 8002444:	4603      	mov	r3, r0
 8002446:	75fb      	strb	r3, [r7, #23]
  return res;
 8002448:	7dfb      	ldrb	r3, [r7, #23]
}
 800244a:	4618      	mov	r0, r3
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	200013b8 	.word	0x200013b8

08002458 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	603a      	str	r2, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	460b      	mov	r3, r1
 8002466:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <disk_ioctl+0x38>)
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	79fa      	ldrb	r2, [r7, #7]
 8002476:	4906      	ldr	r1, [pc, #24]	; (8002490 <disk_ioctl+0x38>)
 8002478:	440a      	add	r2, r1
 800247a:	7a10      	ldrb	r0, [r2, #8]
 800247c:	79b9      	ldrb	r1, [r7, #6]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4798      	blx	r3
 8002482:	4603      	mov	r3, r0
 8002484:	73fb      	strb	r3, [r7, #15]
  return res;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200013b8 	.word	0x200013b8

08002494 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3301      	adds	r3, #1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80024b6:	89fb      	ldrh	r3, [r7, #14]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3303      	adds	r3, #3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	3202      	adds	r2, #2
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	3201      	adds	r2, #1
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80024fc:	68fb      	ldr	r3, [r7, #12]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	1c53      	adds	r3, r2, #1
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	6179      	str	r1, [r7, #20]
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f1      	bne.n	80025b2 <mem_cpy+0x1a>
	}
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	617a      	str	r2, [r7, #20]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f3      	bne.n	80025ea <mem_set+0x10>
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	61fa      	str	r2, [r7, #28]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	61ba      	str	r2, [r7, #24]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	1acb      	subs	r3, r1, r3
 800263c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3b01      	subs	r3, #1
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <mem_cmp+0x40>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0eb      	beq.n	8002628 <mem_cmp+0x18>

	return r;
 8002650:	697b      	ldr	r3, [r7, #20]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002668:	e002      	b.n	8002670 <chk_chr+0x12>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3301      	adds	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <chk_chr+0x26>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	4293      	cmp	r3, r2
 8002682:	d1f2      	bne.n	800266a <chk_chr+0xc>
	return *str;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e029      	b.n	80026fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <chk_lock+0xb4>)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d01d      	beq.n	80026f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80026b6:	4a24      	ldr	r2, [pc, #144]	; (8002748 <chk_lock+0xb4>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d116      	bne.n	80026f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <chk_lock+0xb4>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	4413      	add	r3, r2
 80026d0:	3304      	adds	r3, #4
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10c      	bne.n	80026f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <chk_lock+0xb4>)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	3308      	adds	r3, #8
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d102      	bne.n	80026f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80026f0:	e007      	b.n	8002702 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3301      	adds	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d9d2      	bls.n	80026a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d109      	bne.n	800271c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <chk_lock+0x80>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d101      	bne.n	8002718 <chk_lock+0x84>
 8002714:	2300      	movs	r3, #0
 8002716:	e010      	b.n	800273a <chk_lock+0xa6>
 8002718:	2312      	movs	r3, #18
 800271a:	e00e      	b.n	800273a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <chk_lock+0xa0>
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <chk_lock+0xb4>)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	4413      	add	r3, r2
 800272a:	330c      	adds	r3, #12
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002732:	d101      	bne.n	8002738 <chk_lock+0xa4>
 8002734:	2310      	movs	r3, #16
 8002736:	e000      	b.n	800273a <chk_lock+0xa6>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20001198 	.word	0x20001198

0800274c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	e002      	b.n	800275e <enq_lock+0x12>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d806      	bhi.n	8002772 <enq_lock+0x26>
 8002764:	4a09      	ldr	r2, [pc, #36]	; (800278c <enq_lock+0x40>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f2      	bne.n	8002758 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20001198 	.word	0x20001198

08002790 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e01f      	b.n	80027e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80027a0:	4a41      	ldr	r2, [pc, #260]	; (80028a8 <inc_lock+0x118>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	4413      	add	r3, r2
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d113      	bne.n	80027da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <inc_lock+0x118>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d109      	bne.n	80027da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80027c6:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <inc_lock+0x118>)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	3308      	adds	r3, #8
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d006      	beq.n	80027e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3301      	adds	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d9dc      	bls.n	80027a0 <inc_lock+0x10>
 80027e6:	e000      	b.n	80027ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80027e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d132      	bne.n	8002856 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e002      	b.n	80027fc <inc_lock+0x6c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d806      	bhi.n	8002810 <inc_lock+0x80>
 8002802:	4a29      	ldr	r2, [pc, #164]	; (80028a8 <inc_lock+0x118>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f2      	bne.n	80027f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d101      	bne.n	800281a <inc_lock+0x8a>
 8002816:	2300      	movs	r3, #0
 8002818:	e040      	b.n	800289c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4922      	ldr	r1, [pc, #136]	; (80028a8 <inc_lock+0x118>)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	440b      	add	r3, r1
 8002826:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	491e      	ldr	r1, [pc, #120]	; (80028a8 <inc_lock+0x118>)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	440b      	add	r3, r1
 8002834:	3304      	adds	r3, #4
 8002836:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	491a      	ldr	r1, [pc, #104]	; (80028a8 <inc_lock+0x118>)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	440b      	add	r3, r1
 8002844:	3308      	adds	r3, #8
 8002846:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002848:	4a17      	ldr	r2, [pc, #92]	; (80028a8 <inc_lock+0x118>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4413      	add	r3, r2
 8002850:	330c      	adds	r3, #12
 8002852:	2200      	movs	r2, #0
 8002854:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <inc_lock+0xe0>
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <inc_lock+0x118>)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	330c      	adds	r3, #12
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <inc_lock+0xe0>
 800286c:	2300      	movs	r3, #0
 800286e:	e015      	b.n	800289c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <inc_lock+0xf8>
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <inc_lock+0x118>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4413      	add	r3, r2
 800287e:	330c      	adds	r3, #12
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	e001      	b.n	800288c <inc_lock+0xfc>
 8002888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288c:	4906      	ldr	r1, [pc, #24]	; (80028a8 <inc_lock+0x118>)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	440b      	add	r3, r1
 8002894:	330c      	adds	r3, #12
 8002896:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20001198 	.word	0x20001198

080028ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d825      	bhi.n	800290c <dec_lock+0x60>
		n = Files[i].ctr;
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <dec_lock+0x74>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	330c      	adds	r3, #12
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d4:	d101      	bne.n	80028da <dec_lock+0x2e>
 80028d6:	2300      	movs	r3, #0
 80028d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80028da:	89fb      	ldrh	r3, [r7, #14]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <dec_lock+0x3a>
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <dec_lock+0x74>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	330c      	adds	r3, #12
 80028f0:	89fa      	ldrh	r2, [r7, #14]
 80028f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <dec_lock+0x5a>
 80028fa:	4a09      	ldr	r2, [pc, #36]	; (8002920 <dec_lock+0x74>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	737b      	strb	r3, [r7, #13]
 800290a:	e001      	b.n	8002910 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800290c:	2302      	movs	r3, #2
 800290e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002910:	7b7b      	ldrb	r3, [r7, #13]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20001198 	.word	0x20001198

08002924 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e010      	b.n	8002954 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002932:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <clear_lock+0x44>)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d105      	bne.n	800294e <clear_lock+0x2a>
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <clear_lock+0x44>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	4413      	add	r3, r2
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d9eb      	bls.n	8002932 <clear_lock+0xe>
	}
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	20001198 	.word	0x20001198

0800296c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	78db      	ldrb	r3, [r3, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d034      	beq.n	80029ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7858      	ldrb	r0, [r3, #1]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002990:	2301      	movs	r3, #1
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	f7ff fd40 	bl	8002418 <disk_write>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e022      	b.n	80029ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	1ad2      	subs	r2, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d217      	bcs.n	80029ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e010      	b.n	80029e4 <sync_window+0x78>
					wsect += fs->fsize;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4413      	add	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7858      	ldrb	r0, [r3, #1]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80029d6:	2301      	movs	r3, #1
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	f7ff fd1d 	bl	8002418 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d8eb      	bhi.n	80029c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d01b      	beq.n	8002a44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ffad 	bl	800296c <sync_window>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d113      	bne.n	8002a44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7858      	ldrb	r0, [r3, #1]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002a26:	2301      	movs	r3, #1
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	f7ff fcd5 	bl	80023d8 <disk_read>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
 8002a38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff87 	bl	800296c <sync_window>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d159      	bne.n	8002b1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d149      	bne.n	8002b04 <sync_fs+0xb4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	791b      	ldrb	r3, [r3, #4]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d145      	bne.n	8002b04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	899b      	ldrh	r3, [r3, #12]
 8002a82:	461a      	mov	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f7ff fda8 	bl	80025da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3338      	adds	r3, #56	; 0x38
 8002a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002a92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fd37 	bl	800250a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3338      	adds	r3, #56	; 0x38
 8002aa0:	4921      	ldr	r1, [pc, #132]	; (8002b28 <sync_fs+0xd8>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fd4c 	bl	8002540 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3338      	adds	r3, #56	; 0x38
 8002aac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002ab0:	491e      	ldr	r1, [pc, #120]	; (8002b2c <sync_fs+0xdc>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fd44 	bl	8002540 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7ff fd3a 	bl	8002540 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3338      	adds	r3, #56	; 0x38
 8002ad0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7ff fd30 	bl	8002540 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7858      	ldrb	r0, [r3, #1]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af8:	2301      	movs	r3, #1
 8002afa:	f7ff fc8d 	bl	8002418 <disk_write>
			fs->fsi_flag = 0;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fca3 	bl	8002458 <disk_ioctl>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <sync_fs+0xcc>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	41615252 	.word	0x41615252
 8002b2c:	61417272 	.word	0x61417272

08002b30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	3b02      	subs	r3, #2
 8002b3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	3b02      	subs	r3, #2
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d301      	bcc.n	8002b50 <clust2sect+0x20>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e008      	b.n	8002b62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	895b      	ldrh	r3, [r3, #10]
 8002b54:	461a      	mov	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	fb03 f202 	mul.w	r2, r3, r2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	4413      	add	r3, r2
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d904      	bls.n	8002b8e <get_fat+0x20>
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e0bb      	b.n	8002d0c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	f000 8083 	beq.w	8002caa <get_fat+0x13c>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	f300 80a7 	bgt.w	8002cf8 <get_fat+0x18a>
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d002      	beq.n	8002bb4 <get_fat+0x46>
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d056      	beq.n	8002c60 <get_fat+0xf2>
 8002bb2:	e0a1      	b.n	8002cf8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	899b      	ldrh	r3, [r3, #12]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6938      	ldr	r0, [r7, #16]
 8002bd8:	f7ff ff0c 	bl	80029f4 <move_window>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 808d 	bne.w	8002cfe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60fa      	str	r2, [r7, #12]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	8992      	ldrh	r2, [r2, #12]
 8002bee:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bf2:	fb01 f202 	mul.w	r2, r1, r2
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	899b      	ldrh	r3, [r3, #12]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c12:	4413      	add	r3, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	6938      	ldr	r0, [r7, #16]
 8002c18:	f7ff feec 	bl	80029f4 <move_window>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d16f      	bne.n	8002d02 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	899b      	ldrh	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c2e:	fb01 f202 	mul.w	r2, r1, r2
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <get_fat+0xe8>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	e002      	b.n	8002c5c <get_fat+0xee>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5c:	617b      	str	r3, [r7, #20]
			break;
 8002c5e:	e055      	b.n	8002d0c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	899b      	ldrh	r3, [r3, #12]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c74:	4413      	add	r3, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	6938      	ldr	r0, [r7, #16]
 8002c7a:	f7ff febb 	bl	80029f4 <move_window>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d140      	bne.n	8002d06 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	8992      	ldrh	r2, [r2, #12]
 8002c92:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c96:	fb00 f202 	mul.w	r2, r0, r2
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fbf8 	bl	8002494 <ld_word>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	617b      	str	r3, [r7, #20]
			break;
 8002ca8:	e030      	b.n	8002d0c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	899b      	ldrh	r3, [r3, #12]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	6938      	ldr	r0, [r7, #16]
 8002cc4:	f7ff fe96 	bl	80029f4 <move_window>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11d      	bne.n	8002d0a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	8992      	ldrh	r2, [r2, #12]
 8002cdc:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ce0:	fb00 f202 	mul.w	r2, r0, r2
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fbeb 	bl	80024c4 <ld_dword>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002cf4:	617b      	str	r3, [r7, #20]
			break;
 8002cf6:	e009      	b.n	8002d0c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e006      	b.n	8002d0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002cfe:	bf00      	nop
 8002d00:	e004      	b.n	8002d0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002d02:	bf00      	nop
 8002d04:	e002      	b.n	8002d0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002d06:	bf00      	nop
 8002d08:	e000      	b.n	8002d0c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002d0a:	bf00      	nop
		}
	}

	return val;
 8002d0c:	697b      	ldr	r3, [r7, #20]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002d16:	b590      	push	{r4, r7, lr}
 8002d18:	b089      	sub	sp, #36	; 0x24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002d22:	2302      	movs	r3, #2
 8002d24:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f240 8102 	bls.w	8002f32 <put_fat+0x21c>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f080 80fc 	bcs.w	8002f32 <put_fat+0x21c>
		switch (fs->fs_type) {
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f000 80b6 	beq.w	8002eb0 <put_fat+0x19a>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	f300 80fd 	bgt.w	8002f44 <put_fat+0x22e>
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <put_fat+0x40>
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	f000 8083 	beq.w	8002e5a <put_fat+0x144>
 8002d54:	e0f6      	b.n	8002f44 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	899b      	ldrh	r3, [r3, #12]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d74:	4413      	add	r3, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff fe3b 	bl	80029f4 <move_window>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80d6 	bne.w	8002f36 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	61ba      	str	r2, [r7, #24]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	8992      	ldrh	r2, [r2, #12]
 8002d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002d9e:	fb00 f202 	mul.w	r2, r0, r2
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <put_fat+0xb8>
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	b25a      	sxtb	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e001      	b.n	8002dd2 <put_fat+0xbc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	899b      	ldrh	r3, [r3, #12]
 8002de4:	4619      	mov	r1, r3
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dec:	4413      	add	r3, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fdff 	bl	80029f4 <move_window>
 8002df6:	4603      	mov	r3, r0
 8002df8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 809c 	bne.w	8002f3a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	899b      	ldrh	r3, [r3, #12]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e14:	fb00 f202 	mul.w	r2, r0, r2
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <put_fat+0x11a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e00e      	b.n	8002e4e <put_fat+0x138>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b25b      	sxtb	r3, r3
 8002e36:	f023 030f 	bic.w	r3, r3, #15
 8002e3a:	b25a      	sxtb	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	70da      	strb	r2, [r3, #3]
			break;
 8002e58:	e074      	b.n	8002f44 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	899b      	ldrh	r3, [r3, #12]
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6e:	4413      	add	r3, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff fdbe 	bl	80029f4 <move_window>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d15d      	bne.n	8002f3e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	8992      	ldrh	r2, [r2, #12]
 8002e90:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e94:	fb00 f202 	mul.w	r2, r0, r2
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb31 	bl	800250a <st_word>
			fs->wflag = 1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	70da      	strb	r2, [r3, #3]
			break;
 8002eae:	e049      	b.n	8002f44 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	899b      	ldrh	r3, [r3, #12]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fd93 	bl	80029f4 <move_window>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d134      	bne.n	8002f42 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	8992      	ldrh	r2, [r2, #12]
 8002eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8002ef0:	fb00 f202 	mul.w	r2, r0, r2
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fae3 	bl	80024c4 <ld_dword>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002f04:	4323      	orrs	r3, r4
 8002f06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	8992      	ldrh	r2, [r2, #12]
 8002f16:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f1a:	fb00 f202 	mul.w	r2, r0, r2
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fb0b 	bl	8002540 <st_dword>
			fs->wflag = 1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	70da      	strb	r2, [r3, #3]
			break;
 8002f30:	e008      	b.n	8002f44 <put_fat+0x22e>
		}
	}
 8002f32:	bf00      	nop
 8002f34:	e006      	b.n	8002f44 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002f36:	bf00      	nop
 8002f38:	e004      	b.n	8002f44 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002f3a:	bf00      	nop
 8002f3c:	e002      	b.n	8002f44 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002f3e:	bf00      	nop
 8002f40:	e000      	b.n	8002f44 <put_fat+0x22e>
			if (res != FR_OK) break;
 8002f42:	bf00      	nop
	return res;
 8002f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3724      	adds	r7, #36	; 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d904      	bls.n	8002f74 <remove_chain+0x26>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d301      	bcc.n	8002f78 <remove_chain+0x2a>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e04b      	b.n	8003010 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	69b8      	ldr	r0, [r7, #24]
 8002f86:	f7ff fec6 	bl	8002d16 <put_fat>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <remove_chain+0x4a>
 8002f94:	7ffb      	ldrb	r3, [r7, #31]
 8002f96:	e03b      	b.n	8003010 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fde7 	bl	8002b6e <get_fat>
 8002fa0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d031      	beq.n	800300c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <remove_chain+0x64>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e02e      	b.n	8003010 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d101      	bne.n	8002fbe <remove_chain+0x70>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e028      	b.n	8003010 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	69b8      	ldr	r0, [r7, #24]
 8002fc4:	f7ff fea7 	bl	8002d16 <put_fat>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <remove_chain+0x88>
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	e01c      	b.n	8003010 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	3b02      	subs	r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d20b      	bcs.n	8002ffc <remove_chain+0xae>
			fs->free_clst++;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	791b      	ldrb	r3, [r3, #4]
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	d3c6      	bcc.n	8002f98 <remove_chain+0x4a>
 800300a:	e000      	b.n	800300e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800300c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10d      	bne.n	800304a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <create_chain+0x2c>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	429a      	cmp	r2, r3
 8003042:	d31b      	bcc.n	800307c <create_chain+0x64>
 8003044:	2301      	movs	r3, #1
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e018      	b.n	800307c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800304a:	6839      	ldr	r1, [r7, #0]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff fd8e 	bl	8002b6e <get_fat>
 8003052:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d801      	bhi.n	800305e <create_chain+0x46>
 800305a:	2301      	movs	r3, #1
 800305c:	e070      	b.n	8003140 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d101      	bne.n	800306a <create_chain+0x52>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	e06a      	b.n	8003140 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d201      	bcs.n	8003078 <create_chain+0x60>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	e063      	b.n	8003140 <create_chain+0x128>
		scl = clst;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	429a      	cmp	r2, r3
 800308e:	d307      	bcc.n	80030a0 <create_chain+0x88>
				ncl = 2;
 8003090:	2302      	movs	r3, #2
 8003092:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	429a      	cmp	r2, r3
 800309a:	d901      	bls.n	80030a0 <create_chain+0x88>
 800309c:	2300      	movs	r3, #0
 800309e:	e04f      	b.n	8003140 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80030a0:	69f9      	ldr	r1, [r7, #28]
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fd63 	bl	8002b6e <get_fat>
 80030a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d003      	beq.n	80030be <create_chain+0xa6>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d101      	bne.n	80030c2 <create_chain+0xaa>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	e03e      	b.n	8003140 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d1da      	bne.n	8003080 <create_chain+0x68>
 80030ca:	2300      	movs	r3, #0
 80030cc:	e038      	b.n	8003140 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80030ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	6938      	ldr	r0, [r7, #16]
 80030d8:	f7ff fe1d 	bl	8002d16 <put_fat>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <create_chain+0xe2>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	6938      	ldr	r0, [r7, #16]
 80030f2:	f7ff fe10 	bl	8002d16 <put_fat>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <create_chain+0x116>
		fs->last_clst = ncl;
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	3b02      	subs	r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d804      	bhi.n	800311e <create_chain+0x106>
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	711a      	strb	r2, [r3, #4]
 800312c:	e007      	b.n	800313e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d102      	bne.n	800313a <create_chain+0x122>
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	e000      	b.n	800313c <create_chain+0x124>
 800313a:	2301      	movs	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800313e:	69fb      	ldr	r3, [r7, #28]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	3304      	adds	r3, #4
 800315e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	899b      	ldrh	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	fbb3 f3f2 	udiv	r3, r3, r2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	8952      	ldrh	r2, [r2, #10]
 8003170:	fbb3 f3f2 	udiv	r3, r3, r2
 8003174:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1d1a      	adds	r2, r3, #4
 800317a:	613a      	str	r2, [r7, #16]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <clmt_clust+0x42>
 8003186:	2300      	movs	r3, #0
 8003188:	e010      	b.n	80031ac <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	d307      	bcc.n	80031a2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3304      	adds	r3, #4
 800319e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80031a0:	e7e9      	b.n	8003176 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80031a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4413      	add	r3, r2
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ce:	d204      	bcs.n	80031da <dir_sdi+0x22>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <dir_sdi+0x26>
		return FR_INT_ERR;
 80031da:	2302      	movs	r3, #2
 80031dc:	e071      	b.n	80032c2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <dir_sdi+0x46>
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10c      	bne.n	800321e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	8912      	ldrh	r2, [r2, #8]
 800320c:	4293      	cmp	r3, r2
 800320e:	d301      	bcc.n	8003214 <dir_sdi+0x5c>
 8003210:	2302      	movs	r3, #2
 8003212:	e056      	b.n	80032c2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	61da      	str	r2, [r3, #28]
 800321c:	e02d      	b.n	800327a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	895b      	ldrh	r3, [r3, #10]
 8003222:	461a      	mov	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	899b      	ldrh	r3, [r3, #12]
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800322e:	e019      	b.n	8003264 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6979      	ldr	r1, [r7, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fc9a 	bl	8002b6e <get_fat>
 800323a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d101      	bne.n	8003248 <dir_sdi+0x90>
 8003244:	2301      	movs	r3, #1
 8003246:	e03c      	b.n	80032c2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d904      	bls.n	8003258 <dir_sdi+0xa0>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	d301      	bcc.n	800325c <dir_sdi+0xa4>
 8003258:	2302      	movs	r3, #2
 800325a:	e032      	b.n	80032c2 <dir_sdi+0x10a>
			ofs -= csz;
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d2e1      	bcs.n	8003230 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800326c:	6979      	ldr	r1, [r7, #20]
 800326e:	6938      	ldr	r0, [r7, #16]
 8003270:	f7ff fc5e 	bl	8002b30 <clust2sect>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <dir_sdi+0xd4>
 8003288:	2302      	movs	r3, #2
 800328a:	e01a      	b.n	80032c2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	899b      	ldrh	r3, [r3, #12]
 8003294:	4619      	mov	r1, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	fbb3 f3f1 	udiv	r3, r3, r1
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	899b      	ldrh	r3, [r3, #12]
 80032ac:	461a      	mov	r2, r3
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80032b4:	fb00 f202 	mul.w	r2, r0, r2
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	18ca      	adds	r2, r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	3320      	adds	r3, #32
 80032e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <dir_next+0x28>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f0:	d301      	bcc.n	80032f6 <dir_next+0x2c>
 80032f2:	2304      	movs	r3, #4
 80032f4:	e0bb      	b.n	800346e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	899b      	ldrh	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003302:	fb01 f202 	mul.w	r2, r1, r2
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 809d 	bne.w	8003448 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	8912      	ldrh	r2, [r2, #8]
 8003328:	4293      	cmp	r3, r2
 800332a:	f0c0 808d 	bcc.w	8003448 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
 8003334:	2304      	movs	r3, #4
 8003336:	e09a      	b.n	800346e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	899b      	ldrh	r3, [r3, #12]
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	fbb3 f3f2 	udiv	r3, r3, r2
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	8952      	ldrh	r2, [r2, #10]
 8003348:	3a01      	subs	r2, #1
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d17b      	bne.n	8003448 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	4619      	mov	r1, r3
 8003358:	4610      	mov	r0, r2
 800335a:	f7ff fc08 	bl	8002b6e <get_fat>
 800335e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d801      	bhi.n	800336a <dir_next+0xa0>
 8003366:	2302      	movs	r3, #2
 8003368:	e081      	b.n	800346e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d101      	bne.n	8003376 <dir_next+0xac>
 8003372:	2301      	movs	r3, #1
 8003374:	e07b      	b.n	800346e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	429a      	cmp	r2, r3
 800337e:	d359      	bcc.n	8003434 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	61da      	str	r2, [r3, #28]
 800338c:	2304      	movs	r3, #4
 800338e:	e06e      	b.n	800346e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f7ff fe3d 	bl	8003018 <create_chain>
 800339e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <dir_next+0xe0>
 80033a6:	2307      	movs	r3, #7
 80033a8:	e061      	b.n	800346e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <dir_next+0xea>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e05c      	b.n	800346e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d101      	bne.n	80033c0 <dir_next+0xf6>
 80033bc:	2301      	movs	r3, #1
 80033be:	e056      	b.n	800346e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff fad3 	bl	800296c <sync_window>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <dir_next+0x106>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e04e      	b.n	800346e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	899b      	ldrh	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	2100      	movs	r1, #0
 80033de:	f7ff f8fc 	bl	80025da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	6979      	ldr	r1, [r7, #20]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff fba1 	bl	8002b30 <clust2sect>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	635a      	str	r2, [r3, #52]	; 0x34
 80033f4:	e012      	b.n	800341c <dir_next+0x152>
						fs->wflag = 1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fab5 	bl	800296c <sync_window>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <dir_next+0x142>
 8003408:	2301      	movs	r3, #1
 800340a:	e030      	b.n	800346e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3301      	adds	r3, #1
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	635a      	str	r2, [r3, #52]	; 0x34
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	895b      	ldrh	r3, [r3, #10]
 8003420:	461a      	mov	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4293      	cmp	r3, r2
 8003426:	d3e6      	bcc.n	80033f6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad2      	subs	r2, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff fb77 	bl	8002b30 <clust2sect>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	899b      	ldrh	r3, [r3, #12]
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003460:	fb00 f202 	mul.w	r2, r0, r2
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	18ca      	adds	r2, r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b086      	sub	sp, #24
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003486:	2100      	movs	r1, #0
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fe95 	bl	80031b8 <dir_sdi>
 800348e:	4603      	mov	r3, r0
 8003490:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12b      	bne.n	80034f0 <dir_alloc+0x7a>
		n = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4619      	mov	r1, r3
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff faa6 	bl	80029f4 <move_window>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11d      	bne.n	80034ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2be5      	cmp	r3, #229	; 0xe5
 80034ba:	d004      	beq.n	80034c6 <dir_alloc+0x50>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	3301      	adds	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d102      	bne.n	80034da <dir_alloc+0x64>
 80034d4:	e00c      	b.n	80034f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80034da:	2101      	movs	r1, #1
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fef4 	bl	80032ca <dir_next>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0d7      	beq.n	800349c <dir_alloc+0x26>
 80034ec:	e000      	b.n	80034f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80034ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d101      	bne.n	80034fa <dir_alloc+0x84>
 80034f6:	2307      	movs	r3, #7
 80034f8:	75fb      	strb	r3, [r7, #23]
	return res;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	331a      	adds	r3, #26
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ffbe 	bl	8002494 <ld_word>
 8003518:	4603      	mov	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d109      	bne.n	8003538 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe ffb3 	bl	8002494 <ld_word>
 800352e:	4603      	mov	r3, r0
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	331a      	adds	r3, #26
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	b292      	uxth	r2, r2
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe ffd6 	bl	800250a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d109      	bne.n	800357a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f103 0214 	add.w	r2, r3, #20
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	b29b      	uxth	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f7fe ffc8 	bl	800250a <st_word>
	}
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	331a      	adds	r3, #26
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe ff7e 	bl	8002494 <ld_word>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <cmp_lfn+0x1e>
 800359e:	2300      	movs	r3, #0
 80035a0:	e059      	b.n	8003656 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80035b8:	2301      	movs	r3, #1
 80035ba:	81fb      	strh	r3, [r7, #14]
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
 80035c0:	e033      	b.n	800362a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <cmp_lfn+0xdc>)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe ff5f 	bl	8002494 <ld_word>
 80035d6:	4603      	mov	r3, r0
 80035d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01a      	beq.n	8003616 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2bfe      	cmp	r3, #254	; 0xfe
 80035e4:	d812      	bhi.n	800360c <cmp_lfn+0x88>
 80035e6:	89bb      	ldrh	r3, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fed5 	bl	8005398 <ff_wtoupper>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461c      	mov	r4, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	617a      	str	r2, [r7, #20]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fec9 	bl	8005398 <ff_wtoupper>
 8003606:	4603      	mov	r3, r0
 8003608:	429c      	cmp	r4, r3
 800360a:	d001      	beq.n	8003610 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800360c:	2300      	movs	r3, #0
 800360e:	e022      	b.n	8003656 <cmp_lfn+0xd2>
			}
			wc = uc;
 8003610:	89bb      	ldrh	r3, [r7, #12]
 8003612:	81fb      	strh	r3, [r7, #14]
 8003614:	e006      	b.n	8003624 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003616:	89bb      	ldrh	r3, [r7, #12]
 8003618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800361c:	4293      	cmp	r3, r2
 800361e:	d001      	beq.n	8003624 <cmp_lfn+0xa0>
 8003620:	2300      	movs	r3, #0
 8003622:	e018      	b.n	8003656 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	3301      	adds	r3, #1
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b0c      	cmp	r3, #12
 800362e:	d9c8      	bls.n	80035c2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <cmp_lfn+0xd0>
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <cmp_lfn+0xd0>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <cmp_lfn+0xd0>
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	bf00      	nop
 8003660:	0800580c 	.word	0x0800580c

08003664 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	460b      	mov	r3, r1
 8003674:	71fb      	strb	r3, [r7, #7]
 8003676:	4613      	mov	r3, r2
 8003678:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	330d      	adds	r3, #13
 800367e:	79ba      	ldrb	r2, [r7, #6]
 8003680:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	330b      	adds	r3, #11
 8003686:	220f      	movs	r2, #15
 8003688:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	330c      	adds	r3, #12
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	331a      	adds	r3, #26
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe ff36 	bl	800250a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	82fb      	strh	r3, [r7, #22]
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80036b6:	8afb      	ldrh	r3, [r7, #22]
 80036b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <put_lfn+0x6c>
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	61fa      	str	r2, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80036d0:	4a17      	ldr	r2, [pc, #92]	; (8003730 <put_lfn+0xcc>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	8afa      	ldrh	r2, [r7, #22]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe ff11 	bl	800250a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80036e8:	8afb      	ldrh	r3, [r7, #22]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <put_lfn+0x90>
 80036ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036f2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d9da      	bls.n	80036b6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003700:	8afb      	ldrh	r3, [r7, #22]
 8003702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003706:	4293      	cmp	r3, r2
 8003708:	d006      	beq.n	8003718 <put_lfn+0xb4>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <put_lfn+0xbc>
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	79fa      	ldrb	r2, [r7, #7]
 8003724:	701a      	strb	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	0800580c 	.word	0x0800580c

08003734 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003742:	220b      	movs	r2, #11
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7fe ff26 	bl	8002598 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d92b      	bls.n	80037aa <gen_numname+0x76>
		sr = seq;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8003756:	e022      	b.n	800379e <gen_numname+0x6a>
			wc = *lfn++;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003762:	2300      	movs	r3, #0
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	e017      	b.n	8003798 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005a      	lsls	r2, r3, #1
 800376c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8003776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <gen_numname+0x5e>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800378c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003790:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	3301      	adds	r3, #1
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d9e4      	bls.n	8003768 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1d8      	bne.n	8003758 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80037aa:	2307      	movs	r3, #7
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3330      	adds	r3, #48	; 0x30
 80037ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80037be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c2:	2b39      	cmp	r3, #57	; 0x39
 80037c4:	d904      	bls.n	80037d0 <gen_numname+0x9c>
 80037c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ca:	3307      	adds	r3, #7
 80037cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80037d6:	3330      	adds	r3, #48	; 0x30
 80037d8:	443b      	add	r3, r7
 80037da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1df      	bne.n	80037ae <gen_numname+0x7a>
	ns[i] = '~';
 80037ee:	f107 0214 	add.w	r2, r7, #20
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	4413      	add	r3, r2
 80037f6:	227e      	movs	r2, #126	; 0x7e
 80037f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	e002      	b.n	8003806 <gen_numname+0xd2>
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	3301      	adds	r3, #1
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	429a      	cmp	r2, r3
 800380c:	d205      	bcs.n	800381a <gen_numname+0xe6>
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b20      	cmp	r3, #32
 8003818:	d1f2      	bne.n	8003800 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2b07      	cmp	r3, #7
 800381e:	d807      	bhi.n	8003830 <gen_numname+0xfc>
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	62ba      	str	r2, [r7, #40]	; 0x28
 8003826:	3330      	adds	r3, #48	; 0x30
 8003828:	443b      	add	r3, r7
 800382a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800382e:	e000      	b.n	8003832 <gen_numname+0xfe>
 8003830:	2120      	movs	r1, #32
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	627a      	str	r2, [r7, #36]	; 0x24
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	460a      	mov	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	2b07      	cmp	r3, #7
 8003844:	d9e9      	bls.n	800381a <gen_numname+0xe6>
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	3730      	adds	r7, #48	; 0x30
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800385c:	230b      	movs	r3, #11
 800385e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	0852      	lsrs	r2, r2, #1
 8003866:	01db      	lsls	r3, r3, #7
 8003868:	4313      	orrs	r3, r2
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	6079      	str	r1, [r7, #4]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4413      	add	r3, r2
 8003876:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3b01      	subs	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ed      	bne.n	8003860 <sum_sfn+0x10>
	return sum;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80038a0:	2100      	movs	r1, #0
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fc88 	bl	80031b8 <dir_sdi>
 80038a8:	4603      	mov	r3, r0
 80038aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <dir_find+0x24>
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	e0a9      	b.n	8003a0a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80038b6:	23ff      	movs	r3, #255	; 0xff
 80038b8:	753b      	strb	r3, [r7, #20]
 80038ba:	7d3b      	ldrb	r3, [r7, #20]
 80038bc:	757b      	strb	r3, [r7, #21]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4619      	mov	r1, r3
 80038cc:	6938      	ldr	r0, [r7, #16]
 80038ce:	f7ff f891 	bl	80029f4 <move_window>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8090 	bne.w	80039fe <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80038e6:	7dbb      	ldrb	r3, [r7, #22]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d102      	bne.n	80038f2 <dir_find+0x60>
 80038ec:	2304      	movs	r3, #4
 80038ee:	75fb      	strb	r3, [r7, #23]
 80038f0:	e08a      	b.n	8003a08 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	330b      	adds	r3, #11
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003906:	7dbb      	ldrb	r3, [r7, #22]
 8003908:	2be5      	cmp	r3, #229	; 0xe5
 800390a:	d007      	beq.n	800391c <dir_find+0x8a>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <dir_find+0x98>
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d006      	beq.n	800392a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800391c:	23ff      	movs	r3, #255	; 0xff
 800391e:	757b      	strb	r3, [r7, #21]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f04f 32ff 	mov.w	r2, #4294967295
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	e05e      	b.n	80039e8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d136      	bne.n	800399e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d154      	bne.n	80039e8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800393e:	7dbb      	ldrb	r3, [r7, #22]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	7b5b      	ldrb	r3, [r3, #13]
 800394e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003950:	7dbb      	ldrb	r3, [r7, #22]
 8003952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003956:	75bb      	strb	r3, [r7, #22]
 8003958:	7dbb      	ldrb	r3, [r7, #22]
 800395a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003964:	7dba      	ldrb	r2, [r7, #22]
 8003966:	7d7b      	ldrb	r3, [r7, #21]
 8003968:	429a      	cmp	r2, r3
 800396a:	d115      	bne.n	8003998 <dir_find+0x106>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	330d      	adds	r3, #13
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	7d3a      	ldrb	r2, [r7, #20]
 8003976:	429a      	cmp	r2, r3
 8003978:	d10e      	bne.n	8003998 <dir_find+0x106>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f7ff fdfd 	bl	8003584 <cmp_lfn>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <dir_find+0x106>
 8003990:	7d7b      	ldrb	r3, [r7, #21]
 8003992:	3b01      	subs	r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e000      	b.n	800399a <dir_find+0x108>
 8003998:	23ff      	movs	r3, #255	; 0xff
 800399a:	757b      	strb	r3, [r7, #21]
 800399c:	e024      	b.n	80039e8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800399e:	7d7b      	ldrb	r3, [r7, #21]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <dir_find+0x126>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff ff51 	bl	8003850 <sum_sfn>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	7d3b      	ldrb	r3, [r7, #20]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d024      	beq.n	8003a02 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <dir_find+0x14a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a18      	ldr	r0, [r3, #32]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	220b      	movs	r2, #11
 80039d0:	4619      	mov	r1, r3
 80039d2:	f7fe fe1d 	bl	8002610 <mem_cmp>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d014      	beq.n	8003a06 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80039dc:	23ff      	movs	r3, #255	; 0xff
 80039de:	757b      	strb	r3, [r7, #21]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f04f 32ff 	mov.w	r2, #4294967295
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80039e8:	2100      	movs	r1, #0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fc6d 	bl	80032ca <dir_next>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f43f af65 	beq.w	80038c6 <dir_find+0x34>
 80039fc:	e004      	b.n	8003a08 <dir_find+0x176>
		if (res != FR_OK) break;
 80039fe:	bf00      	nop
 8003a00:	e002      	b.n	8003a08 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003a06:	bf00      	nop

	return res;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08c      	sub	sp, #48	; 0x30
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003a28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <dir_register+0x20>
 8003a30:	2306      	movs	r3, #6
 8003a32:	e0e0      	b.n	8003bf6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003a34:	2300      	movs	r3, #0
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
 8003a38:	e002      	b.n	8003a40 <dir_register+0x2c>
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f4      	bne.n	8003a3a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003a56:	f107 030c 	add.w	r3, r7, #12
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe fd9b 	bl	8002598 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d032      	beq.n	8003ad2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8003a74:	2301      	movs	r3, #1
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a78:	e016      	b.n	8003aa8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	f107 010c 	add.w	r1, r7, #12
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	f7ff fe53 	bl	8003734 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff feff 	bl	8003892 <dir_find>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	2b63      	cmp	r3, #99	; 0x63
 8003aac:	d9e5      	bls.n	8003a7a <dir_register+0x66>
 8003aae:	e000      	b.n	8003ab2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8003ab0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d101      	bne.n	8003abc <dir_register+0xa8>
 8003ab8:	2307      	movs	r3, #7
 8003aba:	e09c      	b.n	8003bf6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d002      	beq.n	8003aca <dir_register+0xb6>
 8003ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ac8:	e095      	b.n	8003bf6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8003aca:	7dfa      	ldrb	r2, [r7, #23]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003ad2:	7dfb      	ldrb	r3, [r7, #23]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <dir_register+0xd8>
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	330c      	adds	r3, #12
 8003ae0:	4a47      	ldr	r2, [pc, #284]	; (8003c00 <dir_register+0x1ec>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3301      	adds	r3, #1
 8003aea:	e000      	b.n	8003aee <dir_register+0xda>
 8003aec:	2301      	movs	r3, #1
 8003aee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003af0:	6a39      	ldr	r1, [r7, #32]
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fcbf 	bl	8003476 <dir_alloc>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d148      	bne.n	8003b98 <dir_register+0x184>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d042      	beq.n	8003b98 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	015b      	lsls	r3, r3, #5
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fb4a 	bl	80031b8 <dir_sdi>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d132      	bne.n	8003b98 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fe8a 	bl	8003850 <sum_sfn>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	4619      	mov	r1, r3
 8003b46:	69f8      	ldr	r0, [r7, #28]
 8003b48:	f7fe ff54 	bl	80029f4 <move_window>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8003b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11d      	bne.n	8003b96 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	6918      	ldr	r0, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a19      	ldr	r1, [r3, #32]
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	7efb      	ldrb	r3, [r7, #27]
 8003b68:	f7ff fd7c 	bl	8003664 <put_lfn>
				fs->wflag = 1;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003b72:	2100      	movs	r1, #0
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fba8 	bl	80032ca <dir_next>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8003b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <dir_register+0x184>
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	623b      	str	r3, [r7, #32]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1d5      	bne.n	8003b40 <dir_register+0x12c>
 8003b94:	e000      	b.n	8003b98 <dir_register+0x184>
				if (res != FR_OK) break;
 8003b96:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d128      	bne.n	8003bf2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	69f8      	ldr	r0, [r7, #28]
 8003ba8:	f7fe ff24 	bl	80029f4 <move_window>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11b      	bne.n	8003bf2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fd09 	bl	80025da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a18      	ldr	r0, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3324      	adds	r3, #36	; 0x24
 8003bd0:	220b      	movs	r2, #11
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fe fce0 	bl	8002598 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	330c      	adds	r3, #12
 8003be4:	f002 0218 	and.w	r2, r2, #24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3730      	adds	r7, #48	; 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	4ec4ec4f 	.word	0x4ec4ec4f

08003c04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	61ba      	str	r2, [r7, #24]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8003c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c34:	2b1f      	cmp	r3, #31
 8003c36:	d940      	bls.n	8003cba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8003c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c3a:	2b2f      	cmp	r3, #47	; 0x2f
 8003c3c:	d006      	beq.n	8003c4c <create_name+0x48>
 8003c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c40:	2b5c      	cmp	r3, #92	; 0x5c
 8003c42:	d110      	bne.n	8003c66 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003c44:	e002      	b.n	8003c4c <create_name+0x48>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b2f      	cmp	r3, #47	; 0x2f
 8003c56:	d0f6      	beq.n	8003c46 <create_name+0x42>
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b5c      	cmp	r3, #92	; 0x5c
 8003c62:	d0f0      	beq.n	8003c46 <create_name+0x42>
			break;
 8003c64:	e02a      	b.n	8003cbc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2bfe      	cmp	r3, #254	; 0xfe
 8003c6a:	d901      	bls.n	8003c70 <create_name+0x6c>
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	e17d      	b.n	8003f6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8003c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fb50 	bl	8005320 <ff_convert>
 8003c80:	4603      	mov	r3, r0
 8003c82:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <create_name+0x8a>
 8003c8a:	2306      	movs	r3, #6
 8003c8c:	e16e      	b.n	8003f6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c90:	2b7f      	cmp	r3, #127	; 0x7f
 8003c92:	d809      	bhi.n	8003ca8 <create_name+0xa4>
 8003c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c96:	4619      	mov	r1, r3
 8003c98:	488d      	ldr	r0, [pc, #564]	; (8003ed0 <create_name+0x2cc>)
 8003c9a:	f7fe fce0 	bl	800265e <chk_chr>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <create_name+0xa4>
 8003ca4:	2306      	movs	r3, #6
 8003ca6:	e161      	b.n	8003f6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	617a      	str	r2, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8003cb8:	e7b4      	b.n	8003c24 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8003cba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cc8:	2b1f      	cmp	r3, #31
 8003cca:	d801      	bhi.n	8003cd0 <create_name+0xcc>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	e000      	b.n	8003cd2 <create_name+0xce>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003cd6:	e011      	b.n	8003cfc <create_name+0xf8>
		w = lfn[di - 1];
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8003cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d002      	beq.n	8003cf6 <create_name+0xf2>
 8003cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf4:	d106      	bne.n	8003d04 <create_name+0x100>
		di--;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ea      	bne.n	8003cd8 <create_name+0xd4>
 8003d02:	e000      	b.n	8003d06 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8003d04:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <create_name+0x118>
 8003d18:	2306      	movs	r3, #6
 8003d1a:	e127      	b.n	8003f6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3324      	adds	r3, #36	; 0x24
 8003d20:	220b      	movs	r2, #11
 8003d22:	2120      	movs	r1, #32
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fc58 	bl	80025da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e002      	b.n	8003d36 <create_name+0x132>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	3301      	adds	r3, #1
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d0f5      	beq.n	8003d30 <create_name+0x12c>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d50:	d0ee      	beq.n	8003d30 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <create_name+0x168>
 8003d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d5c:	f043 0303 	orr.w	r3, r3, #3
 8003d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003d64:	e002      	b.n	8003d6c <create_name+0x168>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <create_name+0x182>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	2b2e      	cmp	r3, #46	; 0x2e
 8003d84:	d1ef      	bne.n	8003d66 <create_name+0x162>

	i = b = 0; ni = 8;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	623b      	str	r3, [r7, #32]
 8003d90:	2308      	movs	r3, #8
 8003d92:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	61ba      	str	r2, [r7, #24]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8003da4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 8090 	beq.w	8003ecc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d006      	beq.n	8003dc0 <create_name+0x1bc>
 8003db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db4:	2b2e      	cmp	r3, #46	; 0x2e
 8003db6:	d10a      	bne.n	8003dce <create_name+0x1ca>
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d006      	beq.n	8003dce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8003dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dc4:	f043 0303 	orr.w	r3, r3, #3
 8003dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dcc:	e07d      	b.n	8003eca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d203      	bcs.n	8003dde <create_name+0x1da>
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d123      	bne.n	8003e26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	d106      	bne.n	8003df2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	f043 0303 	orr.w	r3, r3, #3
 8003dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003df0:	e075      	b.n	8003ede <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d005      	beq.n	8003e06 <create_name+0x202>
 8003dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dfe:	f043 0303 	orr.w	r3, r3, #3
 8003e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d866      	bhi.n	8003edc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	2308      	movs	r3, #8
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	230b      	movs	r3, #11
 8003e18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8003e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003e24:	e051      	b.n	8003eca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e28:	2b7f      	cmp	r3, #127	; 0x7f
 8003e2a:	d914      	bls.n	8003e56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fa75 	bl	8005320 <ff_convert>
 8003e36:	4603      	mov	r3, r0
 8003e38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <create_name+0x246>
 8003e40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e42:	3b80      	subs	r3, #128	; 0x80
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <create_name+0x2d0>)
 8003e46:	5cd3      	ldrb	r3, [r2, r3]
 8003e48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <create_name+0x268>
 8003e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	481d      	ldr	r0, [pc, #116]	; (8003ed8 <create_name+0x2d4>)
 8003e62:	f7fe fbfc 	bl	800265e <chk_chr>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003e6c:	235f      	movs	r3, #95	; 0x5f
 8003e6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e74:	f043 0303 	orr.w	r3, r3, #3
 8003e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e7c:	e01b      	b.n	8003eb6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8003e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d909      	bls.n	8003e98 <create_name+0x294>
 8003e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e86:	2b5a      	cmp	r3, #90	; 0x5a
 8003e88:	d806      	bhi.n	8003e98 <create_name+0x294>
					b |= 2;
 8003e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e8e:	f043 0302 	orr.w	r3, r3, #2
 8003e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003e96:	e00e      	b.n	8003eb6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8003e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e9a:	2b60      	cmp	r3, #96	; 0x60
 8003e9c:	d90b      	bls.n	8003eb6 <create_name+0x2b2>
 8003e9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ea0:	2b7a      	cmp	r3, #122	; 0x7a
 8003ea2:	d808      	bhi.n	8003eb6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8003ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eb2:	3b20      	subs	r3, #32
 8003eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	623a      	str	r2, [r7, #32]
 8003ebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ebe:	b2d1      	uxtb	r1, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8003eca:	e763      	b.n	8003d94 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8003ecc:	bf00      	nop
 8003ece:	e006      	b.n	8003ede <create_name+0x2da>
 8003ed0:	0800572c 	.word	0x0800572c
 8003ed4:	0800578c 	.word	0x0800578c
 8003ed8:	08005738 	.word	0x08005738
			if (si > di) break;			/* No extension */
 8003edc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee4:	2be5      	cmp	r3, #229	; 0xe5
 8003ee6:	d103      	bne.n	8003ef0 <create_name+0x2ec>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2205      	movs	r2, #5
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d104      	bne.n	8003f00 <create_name+0x2fc>
 8003ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8003f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b0c      	cmp	r3, #12
 8003f0a:	d005      	beq.n	8003f18 <create_name+0x314>
 8003f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d105      	bne.n	8003f24 <create_name+0x320>
 8003f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f1c:	f043 0302 	orr.w	r3, r3, #2
 8003f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d117      	bne.n	8003f60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <create_name+0x344>
 8003f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f40:	f043 0310 	orr.w	r3, r3, #16
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d105      	bne.n	8003f60 <create_name+0x35c>
 8003f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f58:	f043 0308 	orr.w	r3, r3, #8
 8003f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8003f6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003f88:	e002      	b.n	8003f90 <follow_path+0x1c>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b2f      	cmp	r3, #47	; 0x2f
 8003f96:	d0f8      	beq.n	8003f8a <follow_path+0x16>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f9e:	d0f4      	beq.n	8003f8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b1f      	cmp	r3, #31
 8003fac:	d80a      	bhi.n	8003fc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2280      	movs	r2, #128	; 0x80
 8003fb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff f8fd 	bl	80031b8 <dir_sdi>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	75fb      	strb	r3, [r7, #23]
 8003fc2:	e048      	b.n	8004056 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fe1b 	bl	8003c04 <create_name>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d139      	bne.n	800404c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fc5a 	bl	8003892 <dir_find>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003fe8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003fea:	7dfb      	ldrb	r3, [r7, #23]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d12c      	bne.n	8004050 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d127      	bne.n	8004050 <follow_path+0xdc>
 8004000:	2305      	movs	r3, #5
 8004002:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004004:	e024      	b.n	8004050 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004006:	7afb      	ldrb	r3, [r7, #11]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d121      	bne.n	8004054 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	799b      	ldrb	r3, [r3, #6]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800401c:	2305      	movs	r3, #5
 800401e:	75fb      	strb	r3, [r7, #23]
 8004020:	e019      	b.n	8004056 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	8992      	ldrh	r2, [r2, #12]
 8004030:	fbb3 f0f2 	udiv	r0, r3, r2
 8004034:	fb00 f202 	mul.w	r2, r0, r2
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	440b      	add	r3, r1
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fa60 	bl	8003504 <ld_clust>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800404a:	e7bb      	b.n	8003fc4 <follow_path+0x50>
			if (res != FR_OK) break;
 800404c:	bf00      	nop
 800404e:	e002      	b.n	8004056 <follow_path+0xe2>
				break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004054:	bf00      	nop
			}
		}
	}

	return res;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d031      	beq.n	80040da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e002      	b.n	8004084 <get_ldnumber+0x24>
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b1f      	cmp	r3, #31
 800408a:	d903      	bls.n	8004094 <get_ldnumber+0x34>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b3a      	cmp	r3, #58	; 0x3a
 8004092:	d1f4      	bne.n	800407e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b3a      	cmp	r3, #58	; 0x3a
 800409a:	d11c      	bne.n	80040d6 <get_ldnumber+0x76>
			tp = *path;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	3b30      	subs	r3, #48	; 0x30
 80040ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d80e      	bhi.n	80040d2 <get_ldnumber+0x72>
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d10a      	bne.n	80040d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <get_ldnumber+0x72>
					vol = (int)i;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	e002      	b.n	80040dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80040da:	693b      	ldr	r3, [r7, #16]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	70da      	strb	r2, [r3, #3]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fc76 	bl	80029f4 <move_window>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <check_fs+0x2a>
 800410e:	2304      	movs	r3, #4
 8004110:	e038      	b.n	8004184 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3338      	adds	r3, #56	; 0x38
 8004116:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800411a:	4618      	mov	r0, r3
 800411c:	f7fe f9ba 	bl	8002494 <ld_word>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <check_fs+0x48>
 800412c:	2303      	movs	r3, #3
 800412e:	e029      	b.n	8004184 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004136:	2be9      	cmp	r3, #233	; 0xe9
 8004138:	d009      	beq.n	800414e <check_fs+0x66>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004140:	2beb      	cmp	r3, #235	; 0xeb
 8004142:	d11e      	bne.n	8004182 <check_fs+0x9a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800414a:	2b90      	cmp	r3, #144	; 0x90
 800414c:	d119      	bne.n	8004182 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3338      	adds	r3, #56	; 0x38
 8004152:	3336      	adds	r3, #54	; 0x36
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe f9b5 	bl	80024c4 <ld_dword>
 800415a:	4603      	mov	r3, r0
 800415c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <check_fs+0xa4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <check_fs+0x82>
 8004166:	2300      	movs	r3, #0
 8004168:	e00c      	b.n	8004184 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3338      	adds	r3, #56	; 0x38
 800416e:	3352      	adds	r3, #82	; 0x52
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe f9a7 	bl	80024c4 <ld_dword>
 8004176:	4603      	mov	r3, r0
 8004178:	4a05      	ldr	r2, [pc, #20]	; (8004190 <check_fs+0xa8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <check_fs+0x9a>
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004182:	2302      	movs	r3, #2
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	00544146 	.word	0x00544146
 8004190:	33544146 	.word	0x33544146

08004194 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b096      	sub	sp, #88	; 0x58
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff59 	bl	8004060 <get_ldnumber>
 80041ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da01      	bge.n	80041ba <find_volume+0x26>
 80041b6:	230b      	movs	r3, #11
 80041b8:	e265      	b.n	8004686 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80041ba:	4a9f      	ldr	r2, [pc, #636]	; (8004438 <find_volume+0x2a4>)
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <find_volume+0x3a>
 80041ca:	230c      	movs	r3, #12
 80041cc:	e25b      	b.n	8004686 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe f8b5 	bl	8002358 <disk_status>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80041f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10c      	bne.n	800421a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <find_volume+0x82>
 8004206:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004212:	230a      	movs	r3, #10
 8004214:	e237      	b.n	8004686 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004216:	2300      	movs	r3, #0
 8004218:	e235      	b.n	8004686 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004222:	b2da      	uxtb	r2, r3
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe f8ad 	bl	800238c <disk_initialize>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004244:	2303      	movs	r3, #3
 8004246:	e21e      	b.n	8004686 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004248:	79fb      	ldrb	r3, [r7, #7]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <find_volume+0xca>
 800424e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800425a:	230a      	movs	r3, #10
 800425c:	e213      	b.n	8004686 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	7858      	ldrb	r0, [r3, #1]
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	330c      	adds	r3, #12
 8004266:	461a      	mov	r2, r3
 8004268:	2102      	movs	r1, #2
 800426a:	f7fe f8f5 	bl	8002458 <disk_ioctl>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <find_volume+0xe4>
 8004274:	2301      	movs	r3, #1
 8004276:	e206      	b.n	8004686 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	899b      	ldrh	r3, [r3, #12]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d80d      	bhi.n	800429e <find_volume+0x10a>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	899b      	ldrh	r3, [r3, #12]
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d308      	bcc.n	800429e <find_volume+0x10a>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	899b      	ldrh	r3, [r3, #12]
 8004290:	461a      	mov	r2, r3
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	899b      	ldrh	r3, [r3, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <find_volume+0x10e>
 800429e:	2301      	movs	r3, #1
 80042a0:	e1f1      	b.n	8004686 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80042a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80042a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042aa:	f7ff ff1d 	bl	80040e8 <check_fs>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80042b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d149      	bne.n	8004350 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80042bc:	2300      	movs	r3, #0
 80042be:	643b      	str	r3, [r7, #64]	; 0x40
 80042c0:	e01e      	b.n	8004300 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80042d0:	4413      	add	r3, r2
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	3304      	adds	r3, #4
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <find_volume+0x158>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	3308      	adds	r3, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe f8ee 	bl	80024c4 <ld_dword>
 80042e8:	4602      	mov	r2, r0
 80042ea:	e000      	b.n	80042ee <find_volume+0x15a>
 80042ec:	2200      	movs	r2, #0
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	3358      	adds	r3, #88	; 0x58
 80042f4:	443b      	add	r3, r7
 80042f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80042fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fc:	3301      	adds	r3, #1
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004302:	2b03      	cmp	r3, #3
 8004304:	d9dd      	bls.n	80042c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004306:	2300      	movs	r3, #0
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <find_volume+0x182>
 8004310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004312:	3b01      	subs	r3, #1
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	3358      	adds	r3, #88	; 0x58
 800431c:	443b      	add	r3, r7
 800431e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004322:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <find_volume+0x1a2>
 800432a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800432c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800432e:	f7ff fedb 	bl	80040e8 <check_fs>
 8004332:	4603      	mov	r3, r0
 8004334:	e000      	b.n	8004338 <find_volume+0x1a4>
 8004336:	2303      	movs	r3, #3
 8004338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800433c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004340:	2b01      	cmp	r3, #1
 8004342:	d905      	bls.n	8004350 <find_volume+0x1bc>
 8004344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004346:	3301      	adds	r3, #1
 8004348:	643b      	str	r3, [r7, #64]	; 0x40
 800434a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434c:	2b03      	cmp	r3, #3
 800434e:	d9e2      	bls.n	8004316 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004354:	2b04      	cmp	r3, #4
 8004356:	d101      	bne.n	800435c <find_volume+0x1c8>
 8004358:	2301      	movs	r3, #1
 800435a:	e194      	b.n	8004686 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800435c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004360:	2b01      	cmp	r3, #1
 8004362:	d901      	bls.n	8004368 <find_volume+0x1d4>
 8004364:	230d      	movs	r3, #13
 8004366:	e18e      	b.n	8004686 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	3338      	adds	r3, #56	; 0x38
 800436c:	330b      	adds	r3, #11
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe f890 	bl	8002494 <ld_word>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	899b      	ldrh	r3, [r3, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <find_volume+0x1f0>
 8004380:	230d      	movs	r3, #13
 8004382:	e180      	b.n	8004686 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	3316      	adds	r3, #22
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f882 	bl	8002494 <ld_word>
 8004390:	4603      	mov	r3, r0
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <find_volume+0x214>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	3338      	adds	r3, #56	; 0x38
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe f88f 	bl	80024c4 <ld_dword>
 80043a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	789b      	ldrb	r3, [r3, #2]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d005      	beq.n	80043cc <find_volume+0x238>
 80043c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c2:	789b      	ldrb	r3, [r3, #2]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d001      	beq.n	80043cc <find_volume+0x238>
 80043c8:	230d      	movs	r3, #13
 80043ca:	e15c      	b.n	8004686 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80043cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ce:	789b      	ldrb	r3, [r3, #2]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	895b      	ldrh	r3, [r3, #10]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <find_volume+0x26c>
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	895b      	ldrh	r3, [r3, #10]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	895b      	ldrh	r3, [r3, #10]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <find_volume+0x270>
 8004400:	230d      	movs	r3, #13
 8004402:	e140      	b.n	8004686 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	3338      	adds	r3, #56	; 0x38
 8004408:	3311      	adds	r3, #17
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe f842 	bl	8002494 <ld_word>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	891b      	ldrh	r3, [r3, #8]
 800441c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800441e:	8992      	ldrh	r2, [r2, #12]
 8004420:	0952      	lsrs	r2, r2, #5
 8004422:	b292      	uxth	r2, r2
 8004424:	fbb3 f1f2 	udiv	r1, r3, r2
 8004428:	fb01 f202 	mul.w	r2, r1, r2
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <find_volume+0x2a8>
 8004434:	230d      	movs	r3, #13
 8004436:	e126      	b.n	8004686 <find_volume+0x4f2>
 8004438:	20001190 	.word	0x20001190

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	3338      	adds	r3, #56	; 0x38
 8004440:	3313      	adds	r3, #19
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f826 	bl	8002494 <ld_word>
 8004448:	4603      	mov	r3, r0
 800444a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <find_volume+0x2cc>
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	3338      	adds	r3, #56	; 0x38
 8004456:	3320      	adds	r3, #32
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe f833 	bl	80024c4 <ld_dword>
 800445e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	330e      	adds	r3, #14
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe f814 	bl	8002494 <ld_word>
 800446c:	4603      	mov	r3, r0
 800446e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004470:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <find_volume+0x2e6>
 8004476:	230d      	movs	r3, #13
 8004478:	e105      	b.n	8004686 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800447a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447e:	4413      	add	r3, r2
 8004480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004482:	8911      	ldrh	r1, [r2, #8]
 8004484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004486:	8992      	ldrh	r2, [r2, #12]
 8004488:	0952      	lsrs	r2, r2, #5
 800448a:	b292      	uxth	r2, r2
 800448c:	fbb1 f2f2 	udiv	r2, r1, r2
 8004490:	b292      	uxth	r2, r2
 8004492:	4413      	add	r3, r2
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	429a      	cmp	r2, r3
 800449c:	d201      	bcs.n	80044a2 <find_volume+0x30e>
 800449e:	230d      	movs	r3, #13
 80044a0:	e0f1      	b.n	8004686 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80044a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044aa:	8952      	ldrh	r2, [r2, #10]
 80044ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <find_volume+0x328>
 80044b8:	230d      	movs	r3, #13
 80044ba:	e0e4      	b.n	8004686 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80044bc:	2303      	movs	r3, #3
 80044be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d802      	bhi.n	80044d2 <find_volume+0x33e>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80044d8:	4293      	cmp	r3, r2
 80044da:	d802      	bhi.n	80044e2 <find_volume+0x34e>
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80044f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80044f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f4:	441a      	add	r2, r3
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80044fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	441a      	add	r2, r3
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8004504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004508:	2b03      	cmp	r3, #3
 800450a:	d11e      	bne.n	800454a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	3338      	adds	r3, #56	; 0x38
 8004510:	332a      	adds	r3, #42	; 0x2a
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd ffbe 	bl	8002494 <ld_word>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <find_volume+0x38e>
 800451e:	230d      	movs	r3, #13
 8004520:	e0b1      	b.n	8004686 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	891b      	ldrh	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <find_volume+0x39a>
 800452a:	230d      	movs	r3, #13
 800452c:	e0ab      	b.n	8004686 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	3338      	adds	r3, #56	; 0x38
 8004532:	332c      	adds	r3, #44	; 0x2c
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd ffc5 	bl	80024c4 <ld_dword>
 800453a:	4602      	mov	r2, r0
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	647b      	str	r3, [r7, #68]	; 0x44
 8004548:	e01f      	b.n	800458a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	891b      	ldrh	r3, [r3, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <find_volume+0x3c2>
 8004552:	230d      	movs	r3, #13
 8004554:	e097      	b.n	8004686 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455c:	441a      	add	r2, r3
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004562:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004566:	2b02      	cmp	r3, #2
 8004568:	d103      	bne.n	8004572 <find_volume+0x3de>
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	e00a      	b.n	8004588 <find_volume+0x3f4>
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	4613      	mov	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4413      	add	r3, r2
 800457c:	085a      	lsrs	r2, r3, #1
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004588:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	899b      	ldrh	r3, [r3, #12]
 8004592:	4619      	mov	r1, r3
 8004594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004596:	440b      	add	r3, r1
 8004598:	3b01      	subs	r3, #1
 800459a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459c:	8989      	ldrh	r1, [r1, #12]
 800459e:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d201      	bcs.n	80045aa <find_volume+0x416>
 80045a6:	230d      	movs	r3, #13
 80045a8:	e06d      	b.n	8004686 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	619a      	str	r2, [r3, #24]
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80045c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d149      	bne.n	800465c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	3338      	adds	r3, #56	; 0x38
 80045cc:	3330      	adds	r3, #48	; 0x30
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd ff60 	bl	8002494 <ld_word>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d140      	bne.n	800465c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80045da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045dc:	3301      	adds	r3, #1
 80045de:	4619      	mov	r1, r3
 80045e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045e2:	f7fe fa07 	bl	80029f4 <move_window>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d137      	bne.n	800465c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	2200      	movs	r2, #0
 80045f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	3338      	adds	r3, #56	; 0x38
 80045f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd ff4a 	bl	8002494 <ld_word>
 8004600:	4603      	mov	r3, r0
 8004602:	461a      	mov	r2, r3
 8004604:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004608:	429a      	cmp	r2, r3
 800460a:	d127      	bne.n	800465c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	3338      	adds	r3, #56	; 0x38
 8004610:	4618      	mov	r0, r3
 8004612:	f7fd ff57 	bl	80024c4 <ld_dword>
 8004616:	4603      	mov	r3, r0
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <find_volume+0x4fc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d11e      	bne.n	800465c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004620:	3338      	adds	r3, #56	; 0x38
 8004622:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd ff4c 	bl	80024c4 <ld_dword>
 800462c:	4603      	mov	r3, r0
 800462e:	4a19      	ldr	r2, [pc, #100]	; (8004694 <find_volume+0x500>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d113      	bne.n	800465c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	3338      	adds	r3, #56	; 0x38
 8004638:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd ff41 	bl	80024c4 <ld_dword>
 8004642:	4602      	mov	r2, r0
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	3338      	adds	r3, #56	; 0x38
 800464c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd ff37 	bl	80024c4 <ld_dword>
 8004656:	4602      	mov	r2, r0
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004662:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <find_volume+0x504>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <find_volume+0x504>)
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <find_volume+0x504>)
 8004672:	881a      	ldrh	r2, [r3, #0]
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	4a08      	ldr	r2, [pc, #32]	; (800469c <find_volume+0x508>)
 800467c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800467e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004680:	f7fe f950 	bl	8002924 <clear_lock>
#endif
	return FR_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3758      	adds	r7, #88	; 0x58
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	41615252 	.word	0x41615252
 8004694:	61417272 	.word	0x61417272
 8004698:	20001194 	.word	0x20001194
 800469c:	200011b8 	.word	0x200011b8

080046a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80046aa:	2309      	movs	r3, #9
 80046ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <validate+0x4e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d018      	beq.n	80046ee <validate+0x4e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <validate+0x4e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	889a      	ldrh	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	88db      	ldrh	r3, [r3, #6]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d10c      	bne.n	80046ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fe3c 	bl	8002358 <disk_status>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <validate+0x4e>
			res = FR_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <validate+0x5a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	e000      	b.n	80046fc <validate+0x5c>
 80046fa:	2300      	movs	r3, #0
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	6013      	str	r3, [r2, #0]
	return res;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800471e:	f107 0310 	add.w	r3, r7, #16
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fc9c 	bl	8004060 <get_ldnumber>
 8004728:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da01      	bge.n	8004734 <f_mount+0x28>
 8004730:	230b      	movs	r3, #11
 8004732:	e02b      	b.n	800478c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004734:	4a17      	ldr	r2, [pc, #92]	; (8004794 <f_mount+0x88>)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004744:	69b8      	ldr	r0, [r7, #24]
 8004746:	f7fe f8ed 	bl	8002924 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	490d      	ldr	r1, [pc, #52]	; (8004794 <f_mount+0x88>)
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <f_mount+0x66>
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <f_mount+0x6a>
 8004772:	2300      	movs	r3, #0
 8004774:	e00a      	b.n	800478c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004776:	f107 010c 	add.w	r1, r7, #12
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	2200      	movs	r2, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fd07 	bl	8004194 <find_volume>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20001190 	.word	0x20001190

08004798 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b09a      	sub	sp, #104	; 0x68
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <f_open+0x18>
 80047ac:	2309      	movs	r3, #9
 80047ae:	e1bb      	b.n	8004b28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80047b8:	79fa      	ldrb	r2, [r7, #7]
 80047ba:	f107 0114 	add.w	r1, r7, #20
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fce6 	bl	8004194 <find_volume>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80047ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 819f 	bne.w	8004b16 <f_open+0x37e>
		dj.obj.fs = fs;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	f107 0318 	add.w	r3, r7, #24
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff fbc5 	bl	8003f74 <follow_path>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80047f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80047f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da03      	bge.n	800480a <f_open+0x72>
				res = FR_INVALID_NAME;
 8004802:	2306      	movs	r3, #6
 8004804:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004808:	e011      	b.n	800482e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	f107 0318 	add.w	r3, r7, #24
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd ff36 	bl	8002694 <chk_lock>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	f003 031c 	and.w	r3, r3, #28
 8004834:	2b00      	cmp	r3, #0
 8004836:	d07f      	beq.n	8004938 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800483c:	2b00      	cmp	r3, #0
 800483e:	d017      	beq.n	8004870 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004840:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004844:	2b04      	cmp	r3, #4
 8004846:	d10e      	bne.n	8004866 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004848:	f7fd ff80 	bl	800274c <enq_lock>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <f_open+0xc8>
 8004852:	f107 0318 	add.w	r3, r7, #24
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff f8dc 	bl	8003a14 <dir_register>
 800485c:	4603      	mov	r3, r0
 800485e:	e000      	b.n	8004862 <f_open+0xca>
 8004860:	2312      	movs	r3, #18
 8004862:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	71fb      	strb	r3, [r7, #7]
 800486e:	e010      	b.n	8004892 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004870:	7fbb      	ldrb	r3, [r7, #30]
 8004872:	f003 0311 	and.w	r3, r3, #17
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <f_open+0xea>
					res = FR_DENIED;
 800487a:	2307      	movs	r3, #7
 800487c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004880:	e007      	b.n	8004892 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <f_open+0xfa>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004892:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004896:	2b00      	cmp	r3, #0
 8004898:	d168      	bne.n	800496c <f_open+0x1d4>
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d063      	beq.n	800496c <f_open+0x1d4>
				dw = GET_FATTIME();
 80048a4:	f7fd fcf8 	bl	8002298 <get_fattime>
 80048a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	330e      	adds	r3, #14
 80048ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fd fe45 	bl	8002540 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	3316      	adds	r3, #22
 80048ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd fe3f 	bl	8002540 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	330b      	adds	r3, #11
 80048c6:	2220      	movs	r2, #32
 80048c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe fe17 	bl	8003504 <ld_clust>
 80048d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048dc:	2200      	movs	r2, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fe2f 	bl	8003542 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	331c      	adds	r3, #28
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd fe28 	bl	8002540 <st_dword>
					fs->wflag = 1;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2201      	movs	r2, #1
 80048f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80048f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d037      	beq.n	800496c <f_open+0x1d4>
						dw = fs->winsect;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8004902:	f107 0318 	add.w	r3, r7, #24
 8004906:	2200      	movs	r2, #0
 8004908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fb1f 	bl	8002f4e <remove_chain>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8004916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800491a:	2b00      	cmp	r3, #0
 800491c:	d126      	bne.n	800496c <f_open+0x1d4>
							res = move_window(fs, dw);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe f866 	bl	80029f4 <move_window>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004932:	3a01      	subs	r2, #1
 8004934:	615a      	str	r2, [r3, #20]
 8004936:	e019      	b.n	800496c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004938:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800493c:	2b00      	cmp	r3, #0
 800493e:	d115      	bne.n	800496c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004940:	7fbb      	ldrb	r3, [r7, #30]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <f_open+0x1ba>
					res = FR_NO_FILE;
 800494a:	2304      	movs	r3, #4
 800494c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004950:	e00c      	b.n	800496c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <f_open+0x1d4>
 800495c:	7fbb      	ldrb	r3, [r7, #30]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <f_open+0x1d4>
						res = FR_DENIED;
 8004966:	2307      	movs	r3, #7
 8004968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800496c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004970:	2b00      	cmp	r3, #0
 8004972:	d128      	bne.n	80049c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004984:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800498e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	f107 0318 	add.w	r3, r7, #24
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd feef 	bl	8002790 <inc_lock>
 80049b2:	4602      	mov	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <f_open+0x22e>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80049c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80a3 	bne.w	8004b16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fd94 	bl	8003504 <ld_clust>
 80049dc:	4602      	mov	r2, r0
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	331c      	adds	r3, #28
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fd6c 	bl	80024c4 <ld_dword>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	88da      	ldrh	r2, [r3, #6]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	79fa      	ldrb	r2, [r7, #7]
 8004a0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3330      	adds	r3, #48	; 0x30
 8004a22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fd fdd6 	bl	80025da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d06e      	beq.n	8004b16 <f_open+0x37e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d06a      	beq.n	8004b16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	895b      	ldrh	r3, [r3, #10]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	899b      	ldrh	r3, [r3, #12]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a64:	e016      	b.n	8004a94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe f87f 	bl	8002b6e <get_fat>
 8004a70:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8004a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d802      	bhi.n	8004a7e <f_open+0x2e6>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d102      	bne.n	8004a8c <f_open+0x2f4>
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <f_open+0x30c>
 8004a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d8e0      	bhi.n	8004a66 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aa8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004aaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d131      	bne.n	8004b16 <f_open+0x37e>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	899b      	ldrh	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004abe:	fb01 f202 	mul.w	r2, r1, r2
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d026      	beq.n	8004b16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe f82f 	bl	8002b30 <clust2sect>
 8004ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <f_open+0x34a>
						res = FR_INT_ERR;
 8004ada:	2302      	movs	r3, #2
 8004adc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004ae0:	e019      	b.n	8004b16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	899b      	ldrh	r3, [r3, #12]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	7858      	ldrb	r0, [r3, #1]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	2301      	movs	r3, #1
 8004b06:	f7fd fc67 	bl	80023d8 <disk_read>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <f_open+0x37e>
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <f_open+0x38c>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004b24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3768      	adds	r7, #104	; 0x68
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f107 0214 	add.w	r2, r7, #20
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fda5 	bl	80046a0 <validate>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <f_read+0x44>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	7d5b      	ldrb	r3, [r3, #21]
 8004b68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <f_read+0x4a>
 8004b74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b78:	e135      	b.n	8004de6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	7d1b      	ldrb	r3, [r3, #20]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <f_read+0x5a>
 8004b86:	2307      	movs	r3, #7
 8004b88:	e12d      	b.n	8004de6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	f240 811e 	bls.w	8004ddc <f_read+0x2ac>
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8004ba4:	e11a      	b.n	8004ddc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	8992      	ldrh	r2, [r2, #12]
 8004bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bb2:	fb01 f202 	mul.w	r2, r1, r2
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 80d5 	bne.w	8004d68 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	8992      	ldrh	r2, [r2, #12]
 8004bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	8952      	ldrh	r2, [r2, #10]
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d12f      	bne.n	8004c3a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
 8004be8:	e013      	b.n	8004c12 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7fe faa5 	bl	8003148 <clmt_clust>
 8004bfe:	6338      	str	r0, [r7, #48]	; 0x30
 8004c00:	e007      	b.n	8004c12 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fd ffaf 	bl	8002b6e <get_fat>
 8004c10:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d804      	bhi.n	8004c22 <f_read+0xf2>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	755a      	strb	r2, [r3, #21]
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0e1      	b.n	8004de6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d104      	bne.n	8004c34 <f_read+0x104>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	755a      	strb	r2, [r3, #21]
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0d8      	b.n	8004de6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c38:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fd ff74 	bl	8002b30 <clust2sect>
 8004c48:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <f_read+0x12a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2202      	movs	r2, #2
 8004c54:	755a      	strb	r2, [r3, #21]
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0c5      	b.n	8004de6 <f_read+0x2b6>
			sect += csect;
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	899b      	ldrh	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d041      	beq.n	8004cfa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	4413      	add	r3, r2
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	8952      	ldrh	r2, [r2, #10]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d905      	bls.n	8004c90 <f_read+0x160>
					cc = fs->csize - csect;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	895b      	ldrh	r3, [r3, #10]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	7858      	ldrb	r0, [r3, #1]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c9a:	f7fd fb9d 	bl	80023d8 <disk_read>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <f_read+0x17e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	755a      	strb	r2, [r3, #21]
 8004caa:	2301      	movs	r3, #1
 8004cac:	e09b      	b.n	8004de6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	7d1b      	ldrb	r3, [r3, #20]
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da18      	bge.n	8004cea <f_read+0x1ba>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d911      	bls.n	8004cea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	8992      	ldrh	r2, [r2, #12]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd8:	18d0      	adds	r0, r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	899b      	ldrh	r3, [r3, #12]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f7fd fc57 	bl	8002598 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	899b      	ldrh	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8004cf8:	e05c      	b.n	8004db4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d02e      	beq.n	8004d62 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	7d1b      	ldrb	r3, [r3, #20]
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da18      	bge.n	8004d40 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	7858      	ldrb	r0, [r3, #1]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f7fd fb7b 	bl	8002418 <disk_write>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <f_read+0x202>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	755a      	strb	r2, [r3, #21]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e059      	b.n	8004de6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	7d1b      	ldrb	r3, [r3, #20]
 8004d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	7858      	ldrb	r0, [r3, #1]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	f7fd fb43 	bl	80023d8 <disk_read>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <f_read+0x232>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	755a      	strb	r2, [r3, #21]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e041      	b.n	8004de6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	899b      	ldrh	r3, [r3, #12]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	8992      	ldrh	r2, [r2, #12]
 8004d76:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d7a:	fb01 f202 	mul.w	r2, r1, r2
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	1ac3      	subs	r3, r0, r3
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d901      	bls.n	8004d90 <f_read+0x260>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	8992      	ldrh	r2, [r2, #12]
 8004d9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004da2:	fb00 f202 	mul.w	r2, r0, r2
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	440b      	add	r3, r1
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	4619      	mov	r1, r3
 8004dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004db0:	f7fd fbf2 	bl	8002598 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	4413      	add	r3, r2
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	619a      	str	r2, [r3, #24]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	441a      	add	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f47f aee1 	bne.w	8004ba6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3738      	adds	r7, #56	; 0x38
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b08c      	sub	sp, #48	; 0x30
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f107 0210 	add.w	r2, r7, #16
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fc46 	bl	80046a0 <validate>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <f_write+0x44>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	7d5b      	ldrb	r3, [r3, #21]
 8004e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <f_write+0x4a>
 8004e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e36:	e16a      	b.n	800510e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	7d1b      	ldrb	r3, [r3, #20]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <f_write+0x5a>
 8004e44:	2307      	movs	r3, #7
 8004e46:	e162      	b.n	800510e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	f080 814c 	bcs.w	80050f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004e62:	e146      	b.n	80050f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	8992      	ldrh	r2, [r2, #12]
 8004e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e70:	fb01 f202 	mul.w	r2, r1, r2
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 80f1 	bne.w	800505e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	8992      	ldrh	r2, [r2, #12]
 8004e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	8952      	ldrh	r2, [r2, #10]
 8004e8c:	3a01      	subs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d143      	bne.n	8004f20 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10c      	bne.n	8004eba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d11a      	bne.n	8004ee2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe f8b1 	bl	8003018 <create_chain>
 8004eb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8004eb8:	e013      	b.n	8004ee2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fe f93d 	bl	8003148 <clmt_clust>
 8004ece:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ed0:	e007      	b.n	8004ee2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fe f89c 	bl	8003018 <create_chain>
 8004ee0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8109 	beq.w	80050fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d104      	bne.n	8004efa <f_write+0x10c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	755a      	strb	r2, [r3, #21]
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e109      	b.n	800510e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d104      	bne.n	8004f0c <f_write+0x11e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	755a      	strb	r2, [r3, #21]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e100      	b.n	800510e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <f_write+0x132>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	7d1b      	ldrb	r3, [r3, #20]
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	da18      	bge.n	8004f5c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	7858      	ldrb	r0, [r3, #1]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f7fd fa6d 	bl	8002418 <disk_write>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d004      	beq.n	8004f4e <f_write+0x160>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	755a      	strb	r2, [r3, #21]
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0df      	b.n	800510e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	7d1b      	ldrb	r3, [r3, #20]
 8004f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	4619      	mov	r1, r3
 8004f64:	4610      	mov	r0, r2
 8004f66:	f7fd fde3 	bl	8002b30 <clust2sect>
 8004f6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <f_write+0x18e>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2202      	movs	r2, #2
 8004f76:	755a      	strb	r2, [r3, #21]
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e0c8      	b.n	800510e <f_write+0x320>
			sect += csect;
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	4413      	add	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	899b      	ldrh	r3, [r3, #12]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d043      	beq.n	8005020 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	8952      	ldrh	r2, [r2, #10]
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d905      	bls.n	8004fb2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	895b      	ldrh	r3, [r3, #10]
 8004faa:	461a      	mov	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	7858      	ldrb	r0, [r3, #1]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	69f9      	ldr	r1, [r7, #28]
 8004fbc:	f7fd fa2c 	bl	8002418 <disk_write>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <f_write+0x1e2>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	755a      	strb	r2, [r3, #21]
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e09e      	b.n	800510e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d918      	bls.n	8005010 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1a      	ldr	r2, [r3, #32]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	8992      	ldrh	r2, [r2, #12]
 8004ff0:	fb02 f303 	mul.w	r3, r2, r3
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	18d1      	adds	r1, r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	899b      	ldrh	r3, [r3, #12]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f7fd facb 	bl	8002598 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	7d1b      	ldrb	r3, [r3, #20]
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	899b      	ldrh	r3, [r3, #12]
 8005014:	461a      	mov	r2, r3
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	fb02 f303 	mul.w	r3, r2, r3
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800501e:	e04b      	b.n	80050b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d016      	beq.n	8005058 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005032:	429a      	cmp	r2, r3
 8005034:	d210      	bcs.n	8005058 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	7858      	ldrb	r0, [r3, #1]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005040:	2301      	movs	r3, #1
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	f7fd f9c8 	bl	80023d8 <disk_read>
 8005048:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	755a      	strb	r2, [r3, #21]
 8005054:	2301      	movs	r3, #1
 8005056:	e05a      	b.n	800510e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	899b      	ldrh	r3, [r3, #12]
 8005062:	4618      	mov	r0, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	8992      	ldrh	r2, [r2, #12]
 800506c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005070:	fb01 f202 	mul.w	r2, r1, r2
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	1ac3      	subs	r3, r0, r3
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	d901      	bls.n	8005086 <f_write+0x298>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	8992      	ldrh	r2, [r2, #12]
 8005094:	fbb3 f0f2 	udiv	r0, r3, r2
 8005098:	fb00 f202 	mul.w	r2, r0, r2
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	440b      	add	r3, r1
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	69f9      	ldr	r1, [r7, #28]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fd fa77 	bl	8002598 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	7d1b      	ldrb	r3, [r3, #20]
 80050ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	4413      	add	r3, r2
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	441a      	add	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	619a      	str	r2, [r3, #24]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf38      	it	cc
 80050d8:	461a      	movcc	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	441a      	add	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f aeb5 	bne.w	8004e64 <f_write+0x76>
 80050fa:	e000      	b.n	80050fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80050fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	7d1b      	ldrb	r3, [r3, #20]
 8005102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3730      	adds	r7, #48	; 0x30
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f107 0208 	add.w	r2, r7, #8
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff faba 	bl	80046a0 <validate>
 800512c:	4603      	mov	r3, r0
 800512e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d168      	bne.n	8005208 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	7d1b      	ldrb	r3, [r3, #20]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d062      	beq.n	8005208 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	7d1b      	ldrb	r3, [r3, #20]
 8005146:	b25b      	sxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	da15      	bge.n	8005178 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	7858      	ldrb	r0, [r3, #1]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	2301      	movs	r3, #1
 800515c:	f7fd f95c 	bl	8002418 <disk_write>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <f_sync+0x54>
 8005166:	2301      	movs	r3, #1
 8005168:	e04f      	b.n	800520a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7d1b      	ldrb	r3, [r3, #20]
 800516e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005172:	b2da      	uxtb	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005178:	f7fd f88e 	bl	8002298 <get_fattime>
 800517c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fd fc34 	bl	80029f4 <move_window>
 800518c:	4603      	mov	r3, r0
 800518e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d138      	bne.n	8005208 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	330b      	adds	r3, #11
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	330b      	adds	r3, #11
 80051a6:	f042 0220 	orr.w	r2, r2, #32
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	f7fe f9c2 	bl	8003542 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f103 021c 	add.w	r2, r3, #28
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fd f9b8 	bl	8002540 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3316      	adds	r3, #22
 80051d4:	6939      	ldr	r1, [r7, #16]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd f9b2 	bl	8002540 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3312      	adds	r3, #18
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fd f991 	bl	800250a <st_word>
					fs->wflag = 1;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2201      	movs	r2, #1
 80051ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fd fc2d 	bl	8002a50 <sync_fs>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	7d1b      	ldrb	r3, [r3, #20]
 80051fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005202:	b2da      	uxtb	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff7b 	bl	8005116 <f_sync>
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d118      	bne.n	800525c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f107 0208 	add.w	r2, r7, #8
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff fa34 	bl	80046a0 <validate>
 8005238:	4603      	mov	r3, r0
 800523a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10c      	bne.n	800525c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fd fb30 	bl	80028ac <dec_lock>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800525c:	7bfb      	ldrb	r3, [r7, #15]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800527e:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 8005280:	7a5b      	ldrb	r3, [r3, #9]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d131      	bne.n	80052ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005288:	4b1c      	ldr	r3, [pc, #112]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 800528a:	7a5b      	ldrb	r3, [r3, #9]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005296:	4b19      	ldr	r3, [pc, #100]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 8005298:	7a5b      	ldrb	r3, [r3, #9]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4a17      	ldr	r2, [pc, #92]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 80052a8:	7a5b      	ldrb	r3, [r3, #9]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 80052b0:	4413      	add	r3, r2
 80052b2:	79fa      	ldrb	r2, [r7, #7]
 80052b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80052b6:	4b11      	ldr	r3, [pc, #68]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 80052b8:	7a5b      	ldrb	r3, [r3, #9]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	b2d1      	uxtb	r1, r2
 80052c0:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <FATFS_LinkDriverEx+0x94>)
 80052c2:	7251      	strb	r1, [r2, #9]
 80052c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80052c6:	7dbb      	ldrb	r3, [r7, #22]
 80052c8:	3330      	adds	r3, #48	; 0x30
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3301      	adds	r3, #1
 80052d4:	223a      	movs	r2, #58	; 0x3a
 80052d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	3302      	adds	r3, #2
 80052dc:	222f      	movs	r2, #47	; 0x2f
 80052de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	3303      	adds	r3, #3
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	200013b8 	.word	0x200013b8

08005300 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ffaa 	bl	8005268 <FATFS_LinkDriverEx>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b7f      	cmp	r3, #127	; 0x7f
 8005330:	d802      	bhi.n	8005338 <ff_convert+0x18>
		c = chr;
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	81fb      	strh	r3, [r7, #14]
 8005336:	e025      	b.n	8005384 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2bff      	cmp	r3, #255	; 0xff
 8005342:	d805      	bhi.n	8005350 <ff_convert+0x30>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	3b80      	subs	r3, #128	; 0x80
 8005348:	4a12      	ldr	r2, [pc, #72]	; (8005394 <ff_convert+0x74>)
 800534a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800534e:	e000      	b.n	8005352 <ff_convert+0x32>
 8005350:	2300      	movs	r3, #0
 8005352:	81fb      	strh	r3, [r7, #14]
 8005354:	e016      	b.n	8005384 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005356:	2300      	movs	r3, #0
 8005358:	81fb      	strh	r3, [r7, #14]
 800535a:	e009      	b.n	8005370 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800535c:	89fb      	ldrh	r3, [r7, #14]
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <ff_convert+0x74>)
 8005360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	429a      	cmp	r2, r3
 8005368:	d006      	beq.n	8005378 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	3301      	adds	r3, #1
 800536e:	81fb      	strh	r3, [r7, #14]
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	2b7f      	cmp	r3, #127	; 0x7f
 8005374:	d9f2      	bls.n	800535c <ff_convert+0x3c>
 8005376:	e000      	b.n	800537a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005378:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	3380      	adds	r3, #128	; 0x80
 800537e:	b29b      	uxth	r3, r3
 8005380:	b2db      	uxtb	r3, r3
 8005382:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005384:	89fb      	ldrh	r3, [r7, #14]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	0800581c 	.word	0x0800581c

08005398 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	4603      	mov	r3, r0
 80053a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a8:	d201      	bcs.n	80053ae <ff_wtoupper+0x16>
 80053aa:	4b3e      	ldr	r3, [pc, #248]	; (80054a4 <ff_wtoupper+0x10c>)
 80053ac:	e000      	b.n	80053b0 <ff_wtoupper+0x18>
 80053ae:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <ff_wtoupper+0x110>)
 80053b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	617a      	str	r2, [r7, #20]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80053bc:	8a7b      	ldrh	r3, [r7, #18]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d068      	beq.n	8005494 <ff_wtoupper+0xfc>
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	8a7b      	ldrh	r3, [r7, #18]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d364      	bcc.n	8005494 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	617a      	str	r2, [r7, #20]
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	823b      	strh	r3, [r7, #16]
 80053d4:	8a3b      	ldrh	r3, [r7, #16]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	81fb      	strh	r3, [r7, #14]
 80053da:	8a3b      	ldrh	r3, [r7, #16]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	8a79      	ldrh	r1, [r7, #18]
 80053e4:	8a3b      	ldrh	r3, [r7, #16]
 80053e6:	440b      	add	r3, r1
 80053e8:	429a      	cmp	r2, r3
 80053ea:	da49      	bge.n	8005480 <ff_wtoupper+0xe8>
			switch (cmd) {
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d84f      	bhi.n	8005492 <ff_wtoupper+0xfa>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <ff_wtoupper+0x60>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800541d 	.word	0x0800541d
 80053fc:	0800542f 	.word	0x0800542f
 8005400:	08005445 	.word	0x08005445
 8005404:	0800544d 	.word	0x0800544d
 8005408:	08005455 	.word	0x08005455
 800540c:	0800545d 	.word	0x0800545d
 8005410:	08005465 	.word	0x08005465
 8005414:	0800546d 	.word	0x0800546d
 8005418:	08005475 	.word	0x08005475
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	8a7b      	ldrh	r3, [r7, #18]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	80fb      	strh	r3, [r7, #6]
 800542c:	e027      	b.n	800547e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	8a7b      	ldrh	r3, [r7, #18]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	b29b      	uxth	r3, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	b29b      	uxth	r3, r3
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	80fb      	strh	r3, [r7, #6]
 8005442:	e01c      	b.n	800547e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	3b10      	subs	r3, #16
 8005448:	80fb      	strh	r3, [r7, #6]
 800544a:	e018      	b.n	800547e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	3b20      	subs	r3, #32
 8005450:	80fb      	strh	r3, [r7, #6]
 8005452:	e014      	b.n	800547e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	3b30      	subs	r3, #48	; 0x30
 8005458:	80fb      	strh	r3, [r7, #6]
 800545a:	e010      	b.n	800547e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	3b1a      	subs	r3, #26
 8005460:	80fb      	strh	r3, [r7, #6]
 8005462:	e00c      	b.n	800547e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	3308      	adds	r3, #8
 8005468:	80fb      	strh	r3, [r7, #6]
 800546a:	e008      	b.n	800547e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	3b50      	subs	r3, #80	; 0x50
 8005470:	80fb      	strh	r3, [r7, #6]
 8005472:	e004      	b.n	800547e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800547a:	80fb      	strh	r3, [r7, #6]
 800547c:	bf00      	nop
			}
			break;
 800547e:	e008      	b.n	8005492 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d195      	bne.n	80053b2 <ff_wtoupper+0x1a>
 8005486:	8a3b      	ldrh	r3, [r7, #16]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005490:	e78f      	b.n	80053b2 <ff_wtoupper+0x1a>
			break;
 8005492:	bf00      	nop
	}

	return chr;
 8005494:	88fb      	ldrh	r3, [r7, #6]
}
 8005496:	4618      	mov	r0, r3
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	0800591c 	.word	0x0800591c
 80054a8:	08005b10 	.word	0x08005b10

080054ac <__errno>:
 80054ac:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <__errno+0x8>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000020 	.word	0x20000020

080054b8 <__libc_init_array>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4d0d      	ldr	r5, [pc, #52]	; (80054f0 <__libc_init_array+0x38>)
 80054bc:	4c0d      	ldr	r4, [pc, #52]	; (80054f4 <__libc_init_array+0x3c>)
 80054be:	1b64      	subs	r4, r4, r5
 80054c0:	10a4      	asrs	r4, r4, #2
 80054c2:	2600      	movs	r6, #0
 80054c4:	42a6      	cmp	r6, r4
 80054c6:	d109      	bne.n	80054dc <__libc_init_array+0x24>
 80054c8:	4d0b      	ldr	r5, [pc, #44]	; (80054f8 <__libc_init_array+0x40>)
 80054ca:	4c0c      	ldr	r4, [pc, #48]	; (80054fc <__libc_init_array+0x44>)
 80054cc:	f000 f8e8 	bl	80056a0 <_init>
 80054d0:	1b64      	subs	r4, r4, r5
 80054d2:	10a4      	asrs	r4, r4, #2
 80054d4:	2600      	movs	r6, #0
 80054d6:	42a6      	cmp	r6, r4
 80054d8:	d105      	bne.n	80054e6 <__libc_init_array+0x2e>
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e0:	4798      	blx	r3
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7ee      	b.n	80054c4 <__libc_init_array+0xc>
 80054e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ea:	4798      	blx	r3
 80054ec:	3601      	adds	r6, #1
 80054ee:	e7f2      	b.n	80054d6 <__libc_init_array+0x1e>
 80054f0:	08005bd4 	.word	0x08005bd4
 80054f4:	08005bd4 	.word	0x08005bd4
 80054f8:	08005bd4 	.word	0x08005bd4
 80054fc:	08005bd8 	.word	0x08005bd8

08005500 <malloc>:
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <malloc+0xc>)
 8005502:	4601      	mov	r1, r0
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	f000 b839 	b.w	800557c <_malloc_r>
 800550a:	bf00      	nop
 800550c:	20000020 	.word	0x20000020

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005526:	4291      	cmp	r1, r2
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <sbrk_aligned>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4e0e      	ldr	r6, [pc, #56]	; (8005578 <sbrk_aligned+0x3c>)
 8005540:	460c      	mov	r4, r1
 8005542:	6831      	ldr	r1, [r6, #0]
 8005544:	4605      	mov	r5, r0
 8005546:	b911      	cbnz	r1, 800554e <sbrk_aligned+0x12>
 8005548:	f000 f88c 	bl	8005664 <_sbrk_r>
 800554c:	6030      	str	r0, [r6, #0]
 800554e:	4621      	mov	r1, r4
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f887 	bl	8005664 <_sbrk_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	d00a      	beq.n	8005570 <sbrk_aligned+0x34>
 800555a:	1cc4      	adds	r4, r0, #3
 800555c:	f024 0403 	bic.w	r4, r4, #3
 8005560:	42a0      	cmp	r0, r4
 8005562:	d007      	beq.n	8005574 <sbrk_aligned+0x38>
 8005564:	1a21      	subs	r1, r4, r0
 8005566:	4628      	mov	r0, r5
 8005568:	f000 f87c 	bl	8005664 <_sbrk_r>
 800556c:	3001      	adds	r0, #1
 800556e:	d101      	bne.n	8005574 <sbrk_aligned+0x38>
 8005570:	f04f 34ff 	mov.w	r4, #4294967295
 8005574:	4620      	mov	r0, r4
 8005576:	bd70      	pop	{r4, r5, r6, pc}
 8005578:	200013c8 	.word	0x200013c8

0800557c <_malloc_r>:
 800557c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005580:	1ccd      	adds	r5, r1, #3
 8005582:	f025 0503 	bic.w	r5, r5, #3
 8005586:	3508      	adds	r5, #8
 8005588:	2d0c      	cmp	r5, #12
 800558a:	bf38      	it	cc
 800558c:	250c      	movcc	r5, #12
 800558e:	2d00      	cmp	r5, #0
 8005590:	4607      	mov	r7, r0
 8005592:	db01      	blt.n	8005598 <_malloc_r+0x1c>
 8005594:	42a9      	cmp	r1, r5
 8005596:	d905      	bls.n	80055a4 <_malloc_r+0x28>
 8005598:	230c      	movs	r3, #12
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	2600      	movs	r6, #0
 800559e:	4630      	mov	r0, r6
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	4e2e      	ldr	r6, [pc, #184]	; (8005660 <_malloc_r+0xe4>)
 80055a6:	f000 f86d 	bl	8005684 <__malloc_lock>
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	461c      	mov	r4, r3
 80055ae:	bb34      	cbnz	r4, 80055fe <_malloc_r+0x82>
 80055b0:	4629      	mov	r1, r5
 80055b2:	4638      	mov	r0, r7
 80055b4:	f7ff ffc2 	bl	800553c <sbrk_aligned>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	4604      	mov	r4, r0
 80055bc:	d14d      	bne.n	800565a <_malloc_r+0xde>
 80055be:	6834      	ldr	r4, [r6, #0]
 80055c0:	4626      	mov	r6, r4
 80055c2:	2e00      	cmp	r6, #0
 80055c4:	d140      	bne.n	8005648 <_malloc_r+0xcc>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4631      	mov	r1, r6
 80055ca:	4638      	mov	r0, r7
 80055cc:	eb04 0803 	add.w	r8, r4, r3
 80055d0:	f000 f848 	bl	8005664 <_sbrk_r>
 80055d4:	4580      	cmp	r8, r0
 80055d6:	d13a      	bne.n	800564e <_malloc_r+0xd2>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	3503      	adds	r5, #3
 80055dc:	1a6d      	subs	r5, r5, r1
 80055de:	f025 0503 	bic.w	r5, r5, #3
 80055e2:	3508      	adds	r5, #8
 80055e4:	2d0c      	cmp	r5, #12
 80055e6:	bf38      	it	cc
 80055e8:	250c      	movcc	r5, #12
 80055ea:	4629      	mov	r1, r5
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff ffa5 	bl	800553c <sbrk_aligned>
 80055f2:	3001      	adds	r0, #1
 80055f4:	d02b      	beq.n	800564e <_malloc_r+0xd2>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	442b      	add	r3, r5
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	e00e      	b.n	800561c <_malloc_r+0xa0>
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	1b52      	subs	r2, r2, r5
 8005602:	d41e      	bmi.n	8005642 <_malloc_r+0xc6>
 8005604:	2a0b      	cmp	r2, #11
 8005606:	d916      	bls.n	8005636 <_malloc_r+0xba>
 8005608:	1961      	adds	r1, r4, r5
 800560a:	42a3      	cmp	r3, r4
 800560c:	6025      	str	r5, [r4, #0]
 800560e:	bf18      	it	ne
 8005610:	6059      	strne	r1, [r3, #4]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	bf08      	it	eq
 8005616:	6031      	streq	r1, [r6, #0]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4638      	mov	r0, r7
 800561e:	f104 060b 	add.w	r6, r4, #11
 8005622:	f000 f835 	bl	8005690 <__malloc_unlock>
 8005626:	f026 0607 	bic.w	r6, r6, #7
 800562a:	1d23      	adds	r3, r4, #4
 800562c:	1af2      	subs	r2, r6, r3
 800562e:	d0b6      	beq.n	800559e <_malloc_r+0x22>
 8005630:	1b9b      	subs	r3, r3, r6
 8005632:	50a3      	str	r3, [r4, r2]
 8005634:	e7b3      	b.n	800559e <_malloc_r+0x22>
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	42a3      	cmp	r3, r4
 800563a:	bf0c      	ite	eq
 800563c:	6032      	streq	r2, [r6, #0]
 800563e:	605a      	strne	r2, [r3, #4]
 8005640:	e7ec      	b.n	800561c <_malloc_r+0xa0>
 8005642:	4623      	mov	r3, r4
 8005644:	6864      	ldr	r4, [r4, #4]
 8005646:	e7b2      	b.n	80055ae <_malloc_r+0x32>
 8005648:	4634      	mov	r4, r6
 800564a:	6876      	ldr	r6, [r6, #4]
 800564c:	e7b9      	b.n	80055c2 <_malloc_r+0x46>
 800564e:	230c      	movs	r3, #12
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	4638      	mov	r0, r7
 8005654:	f000 f81c 	bl	8005690 <__malloc_unlock>
 8005658:	e7a1      	b.n	800559e <_malloc_r+0x22>
 800565a:	6025      	str	r5, [r4, #0]
 800565c:	e7de      	b.n	800561c <_malloc_r+0xa0>
 800565e:	bf00      	nop
 8005660:	200013c4 	.word	0x200013c4

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4d06      	ldr	r5, [pc, #24]	; (8005680 <_sbrk_r+0x1c>)
 8005668:	2300      	movs	r3, #0
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fb fa76 	bl	8000b60 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	200013cc 	.word	0x200013cc

08005684 <__malloc_lock>:
 8005684:	4801      	ldr	r0, [pc, #4]	; (800568c <__malloc_lock+0x8>)
 8005686:	f000 b809 	b.w	800569c <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	200013d0 	.word	0x200013d0

08005690 <__malloc_unlock>:
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <__malloc_unlock+0x8>)
 8005692:	f000 b804 	b.w	800569e <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	200013d0 	.word	0x200013d0

0800569c <__retarget_lock_acquire_recursive>:
 800569c:	4770      	bx	lr

0800569e <__retarget_lock_release_recursive>:
 800569e:	4770      	bx	lr

080056a0 <_init>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr

080056ac <_fini>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	bf00      	nop
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr
