
MAX31865_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007438  08007438  00017438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007874  08007874  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800787c  0800787c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800787c  0800787c  0001787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001f0  08007a74  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08007a74  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026aa  00000000  00000000  0002fdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00032458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e30  00000000  00000000  00033e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110e1  00000000  00000000  00055cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5f8f  00000000  00000000  00066da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cd30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  0012cd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007420 	.word	0x08007420

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08007420 	.word	0x08007420

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <spi_write>:
 *
 * @param data Pointer to transmit buffer
 * @param len  Amount of bytest to send
 */
void spi_write(uint8_t *data, uint8_t len)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e040      	b.n	8001020 <spi_write+0x94>
    {
        for (int8_t i = 7; i >= 0; i--)
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	73bb      	strb	r3, [r7, #14]
 8000fa2:	e036      	b.n	8001012 <spi_write+0x86>
        {
            HAL_GPIO_WritePin(gpio->MOSI_PORT, gpio->MOSI_PIN, (data[x] & (1 << i)));
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <spi_write+0xa8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6918      	ldr	r0, [r3, #16]
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <spi_write+0xa8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	8a99      	ldrh	r1, [r3, #20]
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b25a      	sxtb	r2, r3
 8000fba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fbe:	2401      	movs	r4, #1
 8000fc0:	fa04 f303 	lsl.w	r3, r4, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f001 fc9d 	bl	800290c <HAL_GPIO_WritePin>
            DELAY(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fff4 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <spi_write+0xa8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6898      	ldr	r0, [r3, #8]
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <spi_write+0xa8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	899b      	ldrh	r3, [r3, #12]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f001 fc90 	bl	800290c <HAL_GPIO_WritePin>
            DELAY(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 ffe7 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 0);
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <spi_write+0xa8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <spi_write+0xa8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	899b      	ldrh	r3, [r3, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	f001 fc83 	bl	800290c <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 8001006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3b01      	subs	r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	73bb      	strb	r3, [r7, #14]
 8001012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dac4      	bge.n	8000fa4 <spi_write+0x18>
    for (uint8_t x = 0; x < len; x++)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3ba      	bcc.n	8000f9e <spi_write+0x12>
        }
    }

}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	bf00      	nop
 8001034:	2000020c 	.word	0x2000020c

08001038 <spi_read>:
 *
 * @param buffer Pointer to rx buffer
 * @param len Amount of bytes to receive
 */
void spi_read(uint8_t *buffer, uint8_t len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e04e      	b.n	80010e8 <spi_read+0xb0>
    {
        buffer[x] = 0;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]

        for (int8_t i = 7; i >= 0; i--)
 8001054:	2307      	movs	r3, #7
 8001056:	73bb      	strb	r3, [r7, #14]
 8001058:	e03f      	b.n	80010da <spi_read+0xa2>
        {
            buffer[x] <<= 1;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	440b      	add	r3, r1
 8001068:	0052      	lsls	r2, r2, #1
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <spi_read+0xc4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6898      	ldr	r0, [r3, #8]
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <spi_read+0xc4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	899b      	ldrh	r3, [r3, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	f001 fc45 	bl	800290c <HAL_GPIO_WritePin>
            DELAY(1);
 8001082:	2001      	movs	r0, #1
 8001084:	f000 ff9c 	bl	8001fc0 <HAL_Delay>
            buffer[x] |= HAL_GPIO_ReadPin(gpio->MISO_PORT, gpio->MISO_PIN);
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <spi_read+0xc4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <spi_read+0xc4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	8b9b      	ldrh	r3, [r3, #28]
 8001094:	4619      	mov	r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f001 fc20 	bl	80028dc <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	4618      	mov	r0, r3
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	440b      	add	r3, r1
 80010ae:	4302      	orrs	r2, r0
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
            DELAY(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f000 ff83 	bl	8001fc0 <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 0);
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <spi_read+0xc4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <spi_read+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	899b      	ldrh	r3, [r3, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f001 fc1f 	bl	800290c <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 80010ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73bb      	strb	r3, [r7, #14]
 80010da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dabb      	bge.n	800105a <spi_read+0x22>
    for (uint8_t x = 0; x < len; x++)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3301      	adds	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3ac      	bcc.n	800104a <spi_read+0x12>
        }
    }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000020c 	.word	0x2000020c

08001100 <MAX31865_read>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
    addr &= ~MAX31865_READ;                                     // Force read bit on address
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 0);          // Enable CE
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MAX31865_read+0x58>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MAX31865_read+0x58>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	f001 fbf2 	bl	800290c <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                        // Write addr
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff2d 	bl	8000f8c <spi_write>
    spi_read(buffer, len);                                      // Read data
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	4619      	mov	r1, r3
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f7ff ff7e 	bl	8001038 <spi_read>

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);          // Disable CE
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MAX31865_read+0x58>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <MAX31865_read+0x58>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	4619      	mov	r1, r3
 800114c:	f001 fbde 	bl	800290c <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000020c 	.word	0x2000020c

0800115c <MAX31865_write>:
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_write(uint8_t addr, uint8_t data)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	460a      	mov	r2, r1
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001172:	b2db      	uxtb	r3, r3
 8001174:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 0);      // Enable CE
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MAX31865_write+0x60>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MAX31865_write+0x60>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	889b      	ldrh	r3, [r3, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	f001 fbc1 	bl	800290c <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                    // Write addr
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fefc 	bl	8000f8c <spi_write>
    spi_write(&data, 1);                                    // Write data
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fef7 	bl	8000f8c <spi_write>

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);      // Disable CE
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <MAX31865_write+0x60>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <MAX31865_write+0x60>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	f001 fbad 	bl	800290c <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000020c 	.word	0x2000020c

080011c0 <enableBias>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void enableBias(uint8_t enable)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff ff94 	bl	8001100 <MAX31865_read>

    if (enable)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <enableBias+0x2a>
    {
        status |= MAX31856_CONFIG_BIAS;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <enableBias+0x34>
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4619      	mov	r1, r3
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ffaf 	bl	800115c <MAX31865_write>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <autoConvert>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void autoConvert(uint8_t enable)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 8001210:	f107 030f 	add.w	r3, r7, #15
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ff71 	bl	8001100 <MAX31865_read>

    if (enable)
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <autoConvert+0x2a>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e004      	b.n	800123a <autoConvert+0x34>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001236:	b2db      	uxtb	r3, r3
 8001238:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	4619      	mov	r1, r3
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff ff8c 	bl	800115c <MAX31865_write>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <setWires>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void setWires(uint8_t numwires)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 8001256:	f107 030f 	add.w	r3, r7, #15
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff4e 	bl	8001100 <MAX31865_read>

    if (numwires == 3) // 3-wire
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d105      	bne.n	8001276 <setWires+0x2a>
    {
        status |= MAX31856_CONFIG_3WIRE;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	b2db      	uxtb	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e004      	b.n	8001280 <setWires+0x34>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f023 0310 	bic.w	r3, r3, #16
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4619      	mov	r1, r3
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ff69 	bl	800115c <MAX31865_write>
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <single_shot>:

/**
 * Perform a single shot conversion
 */
void single_shot(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
    uint8_t status;

    // Read config register
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff2e 	bl	8001100 <MAX31865_read>

    // Enable 1shot bit, and write back
    status |= MAX31856_CONFIG_1SHOT;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f043 0320 	orr.w	r3, r3, #32
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	71fb      	strb	r3, [r7, #7]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4619      	mov	r1, r3
 80012b2:	2000      	movs	r0, #0
 80012b4:	f7ff ff52 	bl	800115c <MAX31865_write>

}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MAX31865_init>:
 *
 * @param max_gpio  MAX31865_GPIO structure with pinout
 * @param wires     Amount of wires on the temperature probe (2,3 or 4)
 */
void MAX31865_init(MAX31865_GPIO *max_gpio, uint8_t wires)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
	gpio = max_gpio;
 80012cc:	4a17      	ldr	r2, [pc, #92]	; (800132c <MAX31865_init+0x6c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]

    // Datalines in reset state
    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MAX31865_init+0x6c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MAX31865_init+0x6c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	4619      	mov	r1, r3
 80012e2:	f001 fb13 	bl	800290c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <MAX31865_init+0x6c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6898      	ldr	r0, [r3, #8]
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MAX31865_init+0x6c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	899b      	ldrh	r3, [r3, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	f001 fb09 	bl	800290c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio->MOSI_PORT, gpio->MOSI_PIN, 1);
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MAX31865_init+0x6c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6918      	ldr	r0, [r3, #16]
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <MAX31865_init+0x6c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	8a9b      	ldrh	r3, [r3, #20]
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	f001 faff 	bl	800290c <HAL_GPIO_WritePin>

    setWires(wires);           // Set 2,3 or 4 wire sensor
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff9b 	bl	800124c <setWires>
    enableBias(OFF);           // Disable bias voltage
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ff52 	bl	80011c0 <enableBias>
    autoConvert(OFF);          // Disable auto conversion
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff72 	bl	8001206 <autoConvert>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000020c 	.word	0x2000020c

08001330 <MAX31865_readTemp>:
 * Perform a single temperature conversion, and calculate the value
 *
 * @return  Temperature as float
 */
float MAX31865_readTemp()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ff42 	bl	80011c0 <enableBias>
    HAL_Delay(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f000 fe3f 	bl	8001fc0 <HAL_Delay>

    // Perform a single conversion, and wait for the result
    single_shot();
 8001342:	f7ff ffa6 	bl	8001292 <single_shot>
    HAL_Delay(65);
 8001346:	2041      	movs	r0, #65	; 0x41
 8001348:	f000 fe3a 	bl	8001fc0 <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t buffer[2];
    MAX31865_read(MAX31856_RTDMSB_REG, buffer, 2);
 800134c:	463b      	mov	r3, r7
 800134e:	2202      	movs	r2, #2
 8001350:	4619      	mov	r1, r3
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fed4 	bl	8001100 <MAX31865_read>

    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 8001358:	783b      	ldrb	r3, [r7, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	81fb      	strh	r3, [r7, #14]
    data |= buffer[1];
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	b29a      	uxth	r2, r3
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4313      	orrs	r3, r2
 8001368:	81fb      	strh	r3, [r7, #14]
    data >>= 1;
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	085b      	lsrs	r3, r3, #1
 800136e:	81fb      	strh	r3, [r7, #14]

    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013e8 <MAX31865_readTemp+0xb8>
 800137e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001382:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013ec <MAX31865_readTemp+0xbc>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 800138e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001392:	eddf 6a17 	vldr	s13, [pc, #92]	; 80013f0 <MAX31865_readTemp+0xc0>
 8001396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800139e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f7ff f8ef 	bl	8000588 <__aeabi_f2d>
 80013aa:	a30d      	add	r3, pc, #52	; (adr r3, 80013e0 <MAX31865_readTemp+0xb0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa6c 	bl	800088c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc14 	bl	8000be8 <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	607b      	str	r3, [r7, #4]

    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fefb 	bl	80011c0 <enableBias>

    return temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	ee07 3a90 	vmov	s15, r3
}
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	e1d2178f 	.word	0xe1d2178f
 80013e4:	3f6f8c21 	.word	0x3f6f8c21
 80013e8:	43d70000 	.word	0x43d70000
 80013ec:	47000000 	.word	0x47000000
 80013f0:	42c80000 	.word	0x42c80000

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b0f4      	sub	sp, #464	; 0x1d0
 80013f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 fd6f 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f8fd 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f000 fa37 	bl	8001874 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001406:	f000 f95b 	bl	80016c0 <MX_CAN1_Init>
  MX_RTC_Init();
 800140a:	f000 f9ad 	bl	8001768 <MX_RTC_Init>
  MX_SPI1_Init();
 800140e:	f000 f9d1 	bl	80017b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001412:	f000 fa05 	bl	8001820 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001416:	f003 f827 	bl	8004468 <MX_FATFS_Init>

  fres = f_open(&fil,"TemperatureSensorTest.csv",FA_CREATE_ALWAYS|FA_WRITE);
  if (fres != FR_OK)
	  Error_Handler();*/

  gpio1->CE_PIN = CS1_Pin;
 800141a:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <main+0x1cc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001422:	809a      	strh	r2, [r3, #4]
  gpio1->CE_PORT = CS1_GPIO_Port;
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <main+0x1cc>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a66      	ldr	r2, [pc, #408]	; (80015c4 <main+0x1d0>)
 800142a:	601a      	str	r2, [r3, #0]

  gpio1->CLK_PIN = SPI_CLK_Pin;
 800142c:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <main+0x1cc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	819a      	strh	r2, [r3, #12]
  gpio1->CLK_PORT = SPI_CLK_GPIO_Port;
 8001434:	4b62      	ldr	r3, [pc, #392]	; (80015c0 <main+0x1cc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <main+0x1d4>)
 800143a:	609a      	str	r2, [r3, #8]

  gpio1->MISO_PIN = MISO_Pin;
 800143c:	4b60      	ldr	r3, [pc, #384]	; (80015c0 <main+0x1cc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2204      	movs	r2, #4
 8001442:	839a      	strh	r2, [r3, #28]
  gpio1->MISO_PORT = MISO_GPIO_Port;
 8001444:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <main+0x1cc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <main+0x1d4>)
 800144a:	619a      	str	r2, [r3, #24]

  gpio1->MOSI_PIN = MOSI_Pin;
 800144c:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <main+0x1cc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2202      	movs	r2, #2
 8001452:	829a      	strh	r2, [r3, #20]
  gpio1->MOSI_PORT = MOSI_GPIO_Port;
 8001454:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <main+0x1cc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <main+0x1d4>)
 800145a:	611a      	str	r2, [r3, #16]

  MAX31865_init(gpio1,3);
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <main+0x1cc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2103      	movs	r1, #3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff2c 	bl	80012c0 <MAX31865_init>
  char headerList[216],stringTemp[216];
  strcpy(headerList,"Temperature CS1, Timestamp\n\0");
 8001468:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800146c:	4a57      	ldr	r2, [pc, #348]	; (80015cc <main+0x1d8>)
 800146e:	461c      	mov	r4, r3
 8001470:	4615      	mov	r5, r2
 8001472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001476:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800147a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /*fres = f_write(&fil,headerList,strlen(headerList),&fbyte);*/

  sTime.Hours = 0x10; // set hours
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <main+0x1dc>)
 8001480:	2210      	movs	r2, #16
 8001482:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20; // set minutes
 8001484:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <main+0x1dc>)
 8001486:	2220      	movs	r2, #32
 8001488:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x30; // set seconds
 800148a:	4b51      	ldr	r3, [pc, #324]	; (80015d0 <main+0x1dc>)
 800148c:	2230      	movs	r2, #48	; 0x30
 800148e:	709a      	strb	r2, [r3, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001490:	2201      	movs	r2, #1
 8001492:	494f      	ldr	r1, [pc, #316]	; (80015d0 <main+0x1dc>)
 8001494:	484f      	ldr	r0, [pc, #316]	; (80015d4 <main+0x1e0>)
 8001496:	f002 f8fb 	bl	8003690 <HAL_RTC_SetTime>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <main+0xb0>
  {
    Error_Handler();
 80014a0:	f000 fa80 	bl	80019a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY; // day
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <main+0x1e4>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST; //  month
 80014aa:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <main+0x1e4>)
 80014ac:	2208      	movs	r2, #8
 80014ae:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x9; // date
 80014b0:	4b49      	ldr	r3, [pc, #292]	; (80015d8 <main+0x1e4>)
 80014b2:	2209      	movs	r2, #9
 80014b4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x18; // year
 80014b6:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <main+0x1e4>)
 80014b8:	2218      	movs	r2, #24
 80014ba:	70da      	strb	r2, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014bc:	2201      	movs	r2, #1
 80014be:	4946      	ldr	r1, [pc, #280]	; (80015d8 <main+0x1e4>)
 80014c0:	4844      	ldr	r0, [pc, #272]	; (80015d4 <main+0x1e0>)
 80014c2:	f002 f9dd 	bl	8003880 <HAL_RTC_SetDate>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <main+0xdc>
  {
    Error_Handler();
 80014cc:	f000 fa6a 	bl	80019a4 <Error_Handler>
  }
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 80014d0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80014d4:	2101      	movs	r1, #1
 80014d6:	483f      	ldr	r0, [pc, #252]	; (80015d4 <main+0x1e0>)
 80014d8:	f002 fb62 	bl	8003ba0 <HAL_RTCEx_BKUPWrite>
  RTC_TimeTypeDef gTime;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (Stop == 0)
 80014dc:	e065      	b.n	80015aa <main+0x1b6>
  {
    /* USER CODE END WHILE */

	  /* Get the RTC current Time */
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80014de:	463b      	mov	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	4619      	mov	r1, r3
 80014e4:	483b      	ldr	r0, [pc, #236]	; (80015d4 <main+0x1e0>)
 80014e6:	f002 f96d 	bl	80037c4 <HAL_RTC_GetTime>
	  /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4838      	ldr	r0, [pc, #224]	; (80015d4 <main+0x1e0>)
 80014f4:	f002 fa48 	bl	8003988 <HAL_RTC_GetDate>
	  /* Display time Format: hh:mm:ss */
	  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80014f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80014fc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001508:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	4619      	mov	r1, r3
 8001510:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001514:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	460b      	mov	r3, r1
 800151e:	492f      	ldr	r1, [pc, #188]	; (80015dc <main+0x1e8>)
 8001520:	482f      	ldr	r0, [pc, #188]	; (80015e0 <main+0x1ec>)
 8001522:	f003 fdfb 	bl	800511c <siprintf>
	  /* Display date Format: dd-mm-yy */
	  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001526:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800152a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800152e:	789b      	ldrb	r3, [r3, #2]
 8001530:	461a      	mov	r2, r3
 8001532:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	4619      	mov	r1, r3
 800153e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001542:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	460b      	mov	r3, r1
 8001550:	4924      	ldr	r1, [pc, #144]	; (80015e4 <main+0x1f0>)
 8001552:	4825      	ldr	r0, [pc, #148]	; (80015e8 <main+0x1f4>)
 8001554:	f003 fde2 	bl	800511c <siprintf>

	  Temperature = MAX31865_readTemp();
 8001558:	f7ff feea 	bl	8001330 <MAX31865_readTemp>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <main+0x1f8>)
 8001562:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(stringTemp,"%f,%s-%s\n",Temperature,time,date);
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <main+0x1f8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f80c 	bl	8000588 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	f107 0018 	add.w	r0, r7, #24
 8001578:	491b      	ldr	r1, [pc, #108]	; (80015e8 <main+0x1f4>)
 800157a:	9101      	str	r1, [sp, #4]
 800157c:	4918      	ldr	r1, [pc, #96]	; (80015e0 <main+0x1ec>)
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	491b      	ldr	r1, [pc, #108]	; (80015f0 <main+0x1fc>)
 8001582:	f003 fdcb 	bl	800511c <siprintf>


	  HAL_UART_Transmit(&huart1,(uint8_t *)stringTemp,strlen(stringTemp),1000);
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe40 	bl	8000210 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	b29a      	uxth	r2, r3
 8001594:	f107 0118 	add.w	r1, r7, #24
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <main+0x200>)
 800159e:	f002 fbef 	bl	8003d80 <HAL_UART_Transmit>
	  /*fres = f_write(&fil,stringTemp,strlen(stringTemp),&fbyte);*/

	  HAL_Delay(1000);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f000 fd0b 	bl	8001fc0 <HAL_Delay>
  while (Stop == 0)
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <main+0x204>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d095      	beq.n	80014de <main+0xea>
 80015b2:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  }
  /*f_close(&fil);*/
  /* USER CODE END 3 */
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdb0      	pop	{r4, r5, r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002f4 	.word	0x200002f4
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	08007438 	.word	0x08007438
 80015d0:	200002fc 	.word	0x200002fc
 80015d4:	20000238 	.word	0x20000238
 80015d8:	20000310 	.word	0x20000310
 80015dc:	08007458 	.word	0x08007458
 80015e0:	20000314 	.word	0x20000314
 80015e4:	08007468 	.word	0x08007468
 80015e8:	20000320 	.word	0x20000320
 80015ec:	200002f8 	.word	0x200002f8
 80015f0:	08007478 	.word	0x08007478
 80015f4:	200002b0 	.word	0x200002b0
 80015f8:	2000032a 	.word	0x2000032a

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	2234      	movs	r2, #52	; 0x34
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f824 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <SystemClock_Config+0xbc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <SystemClock_Config+0xbc>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <SystemClock_Config+0xbc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <SystemClock_Config+0xc0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <SystemClock_Config+0xc0>)
 8001646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <SystemClock_Config+0xc0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001658:	230a      	movs	r3, #10
 800165a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001664:	2310      	movs	r3, #16
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001668:	2301      	movs	r3, #1
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fd11 	bl	800309c <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001680:	f000 f990 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f001 f94e 	bl	8002940 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80016aa:	f000 f97b 	bl	80019a4 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	; 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016c6:	4b25      	ldr	r3, [pc, #148]	; (800175c <MX_CAN1_Init+0x9c>)
 80016c8:	4a25      	ldr	r2, [pc, #148]	; (8001760 <MX_CAN1_Init+0xa0>)
 80016ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_CAN1_Init+0x9c>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_CAN1_Init+0x9c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_CAN1_Init+0x9c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_CAN1_Init+0x9c>)
 80016e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_CAN1_Init+0x9c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_CAN1_Init+0x9c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_CAN1_Init+0x9c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_CAN1_Init+0x9c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_CAN1_Init+0x9c>)
 8001700:	2200      	movs	r2, #0
 8001702:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_CAN1_Init+0x9c>)
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_CAN1_Init+0x9c>)
 800170c:	2200      	movs	r2, #0
 800170e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_CAN1_Init+0x9c>)
 8001712:	f000 fc79 	bl	8002008 <HAL_CAN_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800171c:	f000 f942 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN_Filt;

  CAN_Filt.FilterActivation = CAN_FILTER_ENABLE;
 8001720:	2301      	movs	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
  CAN_Filt.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001724:	2312      	movs	r3, #18
 8001726:	617b      	str	r3, [r7, #20]
  CAN_Filt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  CAN_Filt.FilterIdHigh = 0xFFF<<5; // No register filter
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <MX_CAN1_Init+0xa4>)
 800172e:	603b      	str	r3, [r7, #0]
  CAN_Filt.FilterIdLow = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  CAN_Filt.FilterMaskIdHigh = 0xFFF<<5; // No register filter
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_CAN1_Init+0xa4>)
 8001736:	60bb      	str	r3, [r7, #8]
  CAN_Filt.FilterMaskIdLow = 0x0000;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  CAN_Filt.FilterMode = CAN_FILTERMODE_IDMASK;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  CAN_Filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8001740:	2301      	movs	r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
  CAN_Filt.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001744:	2314      	movs	r3, #20
 8001746:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN_Filt);
 8001748:	463b      	mov	r3, r7
 800174a:	4619      	mov	r1, r3
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_CAN1_Init+0x9c>)
 800174e:	f000 fd57 	bl	8002200 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000210 	.word	0x20000210
 8001760:	40006400 	.word	0x40006400
 8001764:	0001ffe0 	.word	0x0001ffe0

08001768 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_RTC_Init+0x44>)
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <MX_RTC_Init+0x48>)
 8001770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_RTC_Init+0x44>)
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_RTC_Init+0x44>)
 800177a:	227f      	movs	r2, #127	; 0x7f
 800177c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_RTC_Init+0x44>)
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_RTC_Init+0x44>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_RTC_Init+0x44>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_RTC_Init+0x44>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_RTC_Init+0x44>)
 8001798:	f001 ff04 	bl	80035a4 <HAL_RTC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80017a2:	f000 f8ff 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000238 	.word	0x20000238
 80017b0:	40002800 	.word	0x40002800

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_SPI1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_SPI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_SPI1_Init+0x64>)
 8001800:	220a      	movs	r2, #10
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_SPI1_Init+0x64>)
 8001806:	f002 f9e5 	bl	8003bd4 <HAL_SPI_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 f8c8 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000258 	.word	0x20000258
 800181c:	40013000 	.word	0x40013000

08001820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_USART1_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART1_UART_Init+0x4c>)
 8001858:	f002 fa45 	bl	8003ce6 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f000 f89f 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002b0 	.word	0x200002b0
 8001870:	40011000 	.word	0x40011000

08001874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <MX_GPIO_Init+0x120>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a40      	ldr	r2, [pc, #256]	; (8001994 <MX_GPIO_Init+0x120>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <MX_GPIO_Init+0x120>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <MX_GPIO_Init+0x120>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a39      	ldr	r2, [pc, #228]	; (8001994 <MX_GPIO_Init+0x120>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <MX_GPIO_Init+0x120>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <MX_GPIO_Init+0x120>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a32      	ldr	r2, [pc, #200]	; (8001994 <MX_GPIO_Init+0x120>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <MX_GPIO_Init+0x120>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <MX_GPIO_Init+0x120>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <MX_GPIO_Init+0x120>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <MX_GPIO_Init+0x120>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CLK_Pin|MOSI_Pin|Status_L1_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8001900:	4825      	ldr	r0, [pc, #148]	; (8001998 <MX_GPIO_Init+0x124>)
 8001902:	f001 f803 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800190c:	4823      	ldr	r0, [pc, #140]	; (800199c <MX_GPIO_Init+0x128>)
 800190e:	f000 fffd 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_L2_GPIO_Port, Status_L2_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	4822      	ldr	r0, [pc, #136]	; (80019a0 <MX_GPIO_Init+0x12c>)
 8001918:	f000 fff8 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CLK_Pin MOSI_Pin Status_L1_Pin */
  GPIO_InitStruct.Pin = SPI_CLK_Pin|MOSI_Pin|Status_L1_Pin;
 800191c:	f248 0303 	movw	r3, #32771	; 0x8003
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4818      	ldr	r0, [pc, #96]	; (8001998 <MX_GPIO_Init+0x124>)
 8001936:	f000 fe55 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 800193a:	2304      	movs	r3, #4
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <MX_GPIO_Init+0x124>)
 800194e:	f000 fe49 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8001952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_GPIO_Init+0x128>)
 800196c:	f000 fe3a 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_L2_Pin */
  GPIO_InitStruct.Pin = Status_L2_Pin;
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_L2_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <MX_GPIO_Init+0x12c>)
 8001988:	f000 fe2c 	bl	80025e4 <HAL_GPIO_Init>

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020400 	.word	0x40020400

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d134      	bne.n	8001a8c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_CAN_MspInit+0x98>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4809      	ldr	r0, [pc, #36]	; (8001a9c <HAL_CAN_MspInit+0x9c>)
 8001a78:	f000 fdb4 	bl	80025e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2014      	movs	r0, #20
 8001a82:	f000 fd78 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a86:	2014      	movs	r0, #20
 8001a88:	f000 fd91 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40006400 	.word	0x40006400
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b092      	sub	sp, #72	; 0x48
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	223c      	movs	r2, #60	; 0x3c
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fdd1 	bl	8004658 <memset>
  if(hrtc->Instance==RTC)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_RTC_MspInit+0x4c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 f916 	bl	8002d00 <HAL_RCCEx_PeriphCLKConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ada:	f7ff ff63 	bl	80019a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_RTC_MspInit+0x50>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3748      	adds	r7, #72	; 0x48
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40002800 	.word	0x40002800
 8001af0:	42470e3c 	.word	0x42470e3c

08001af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a19      	ldr	r2, [pc, #100]	; (8001b78 <HAL_SPI_MspInit+0x84>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12b      	bne.n	8001b6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_SPI_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b4e:	23e0      	movs	r3, #224	; 0xe0
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_SPI_MspInit+0x8c>)
 8001b6a:	f000 fd3b 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	; 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_UART_MspInit+0x84>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12c      	bne.n	8001c00 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_UART_MspInit+0x88>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_UART_MspInit+0x8c>)
 8001bfc:	f000 fcf2 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000

08001c14 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <SDTimer_Handler+0x40>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <SDTimer_Handler+0x1c>
		Timer1 --;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <SDTimer_Handler+0x40>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <SDTimer_Handler+0x40>)
 8001c2e:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <SDTimer_Handler+0x44>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <SDTimer_Handler+0x34>
		Timer2 --;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <SDTimer_Handler+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SDTimer_Handler+0x44>)
 8001c46:	701a      	strb	r2, [r3, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	2000032d 	.word	0x2000032d

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <SysTick_Handler+0x30>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <SysTick_Handler+0x30>)
 8001cb4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <SysTick_Handler+0x30>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d904      	bls.n	8001cca <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Handler+0x30>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001cc6:	f7ff ffa5 	bl	8001c14 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f959 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000032b 	.word	0x2000032b

08001cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	return 1;
 8001cdc:	2301      	movs	r3, #1
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_kill>:

int _kill(int pid, int sig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cf2:	f002 fc7f 	bl	80045f4 <__errno>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2216      	movs	r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
	return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_exit>:

void _exit (int status)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe7 	bl	8001ce8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d1a:	e7fe      	b.n	8001d1a <_exit+0x12>

08001d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e00a      	b.n	8001d44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d2e:	f3af 8000 	nop.w
 8001d32:	4601      	mov	r1, r0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	b2ca      	uxtb	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbf0      	blt.n	8001d2e <_read+0x12>
	}

return len;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e009      	b.n	8001d7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf1      	blt.n	8001d68 <_write+0x12>
	}
	return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_close>:

int _close(int file)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	return -1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db6:	605a      	str	r2, [r3, #4]
	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_isatty>:

int _isatty(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
	return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f002 fbe4 	bl	80045f4 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20040000 	.word	0x20040000
 8001e58:	00000400 	.word	0x00000400
 8001e5c:	20000330 	.word	0x20000330
 8001e60:	20000360 	.word	0x20000360

08001e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea4:	4c0b      	ldr	r4, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb2:	f7ff ffd7 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f002 fba3 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff fa9b 	bl	80013f4 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001ecc:	08007884 	.word	0x08007884
  ldr r2, =_sbss
 8001ed0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001ed4:	2000035c 	.word	0x2000035c

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fb2b 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fd4e 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fb43 	bl	80025ca <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 fb0b 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000334 	.word	0x20000334

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000334 	.word	0x20000334

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0ed      	b.n	80021f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fcea 	bl	8001a00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800203c:	f7ff ffb4 	bl	8001fa8 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002042:	e012      	b.n	800206a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002044:	f7ff ffb0 	bl	8001fa8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b0a      	cmp	r3, #10
 8002050:	d90b      	bls.n	800206a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2205      	movs	r2, #5
 8002062:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0c5      	b.n	80021f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0e5      	beq.n	8002044 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0202 	bic.w	r2, r2, #2
 8002086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002088:	f7ff ff8e 	bl	8001fa8 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800208e:	e012      	b.n	80020b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002090:	f7ff ff8a 	bl	8001fa8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d90b      	bls.n	80020b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e09f      	b.n	80021f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e5      	bne.n	8002090 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d108      	bne.n	80020de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e007      	b.n	80020ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7e5b      	ldrb	r3, [r3, #25]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e007      	b.n	8002118 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002116:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e9b      	ldrb	r3, [r3, #26]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e007      	b.n	8002142 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0220 	bic.w	r2, r2, #32
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	7edb      	ldrb	r3, [r3, #27]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d108      	bne.n	800215c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e007      	b.n	800216c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0210 	orr.w	r2, r2, #16
 800216a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7f1b      	ldrb	r3, [r3, #28]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0208 	orr.w	r2, r2, #8
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e007      	b.n	8002196 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7f5b      	ldrb	r3, [r3, #29]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0204 	orr.w	r2, r2, #4
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	ea42 0103 	orr.w	r1, r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002216:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d003      	beq.n	8002226 <HAL_CAN_ConfigFilter+0x26>
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b02      	cmp	r3, #2
 8002222:	f040 80be 	bne.w	80023a2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <HAL_CAN_ConfigFilter+0x1bc>)
 8002228:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002240:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	431a      	orrs	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	401a      	ands	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d123      	bne.n	80022d0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3248      	adds	r2, #72	; 0x48
 80022b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022c6:	6979      	ldr	r1, [r7, #20]
 80022c8:	3348      	adds	r3, #72	; 0x48
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d122      	bne.n	800231e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80022f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3248      	adds	r2, #72	; 0x48
 80022fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002312:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	3348      	adds	r3, #72	; 0x48
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002338:	e007      	b.n	800234a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	43db      	mvns	r3, r3
 800235c:	401a      	ands	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002364:	e007      	b.n	8002376 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	431a      	orrs	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	431a      	orrs	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002394:	f023 0201 	bic.w	r2, r3, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e006      	b.n	80023b0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40006400 	.word	0x40006400

080023c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023dc:	4013      	ands	r3, r2
 80023de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <__NVIC_SetPriorityGrouping+0x44>)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	60d3      	str	r3, [r2, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <__NVIC_GetPriorityGrouping+0x18>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	0a1b      	lsrs	r3, r3, #8
 8002412:	f003 0307 	and.w	r3, r3, #7
}
 8002416:	4618      	mov	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	2b00      	cmp	r3, #0
 8002434:	db0b      	blt.n	800244e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 021f 	and.w	r2, r3, #31
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <__NVIC_EnableIRQ+0x38>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2001      	movs	r0, #1
 8002446:	fa00 f202 	lsl.w	r2, r0, r2
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000e100 	.word	0xe000e100

08002460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db0a      	blt.n	800248a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	490c      	ldr	r1, [pc, #48]	; (80024ac <__NVIC_SetPriority+0x4c>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	0112      	lsls	r2, r2, #4
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	440b      	add	r3, r1
 8002484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002488:	e00a      	b.n	80024a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4908      	ldr	r1, [pc, #32]	; (80024b0 <__NVIC_SetPriority+0x50>)
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3b04      	subs	r3, #4
 8002498:	0112      	lsls	r2, r2, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	440b      	add	r3, r1
 800249e:	761a      	strb	r2, [r3, #24]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f1c3 0307 	rsb	r3, r3, #7
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	bf28      	it	cs
 80024d2:	2304      	movcs	r3, #4
 80024d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3304      	adds	r3, #4
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d902      	bls.n	80024e4 <NVIC_EncodePriority+0x30>
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3b03      	subs	r3, #3
 80024e2:	e000      	b.n	80024e6 <NVIC_EncodePriority+0x32>
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	401a      	ands	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43d9      	mvns	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	4313      	orrs	r3, r2
         );
}
 800250e:	4618      	mov	r0, r3
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff8e 	bl	8002460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff29 	bl	80023c0 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff3e 	bl	8002408 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff8e 	bl	80024b4 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5d 	bl	8002460 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff31 	bl	8002424 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e153      	b.n	80028a8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8142 	bne.w	80028a2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 809c 	beq.w	80028a2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a53      	ldr	r2, [pc, #332]	; (80028c0 <HAL_GPIO_Init+0x2dc>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_GPIO_Init+0x2dc>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a4f      	ldr	r2, [pc, #316]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <HAL_GPIO_Init+0x2e4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x1f6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a45      	ldr	r2, [pc, #276]	; (80028cc <HAL_GPIO_Init+0x2e8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x1f2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a44      	ldr	r2, [pc, #272]	; (80028d0 <HAL_GPIO_Init+0x2ec>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x1ee>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_GPIO_Init+0x2f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x1ea>
 80027ca:	2303      	movs	r3, #3
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x1f8>
 80027ce:	2307      	movs	r3, #7
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x1f8>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x1f8>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x1f8>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4935      	ldr	r1, [pc, #212]	; (80028c4 <HAL_GPIO_Init+0x2e0>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_GPIO_Init+0x2f4>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f aea8 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e001      	b.n	80028fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7ff faba 	bl	8001fa8 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7ff fab6 	bl	8001fa8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	; (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fa1a 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08007484 	.word	0x08007484
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000004 	.word	0x20000004

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b090      	sub	sp, #64	; 0x40
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80a1 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e09b      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b44:	e09b      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b4a:	e098      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b74:	2100      	movs	r1, #0
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b78:	fb03 f201 	mul.w	r2, r3, r1
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	fb00 f303 	mul.w	r3, r0, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	4a43      	ldr	r2, [pc, #268]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b86:	fba0 1202 	umull	r1, r2, r0, r2
 8002b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	4413      	add	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ba6:	f7fe f86f 	bl	8000c88 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb2:	e053      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	2200      	movs	r2, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	617a      	str	r2, [r7, #20]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	4652      	mov	r2, sl
 8002bcc:	465b      	mov	r3, fp
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bdc:	0150      	lsls	r0, r2, #5
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ebb2 080a 	subs.w	r8, r2, sl
 8002be6:	eb63 090b 	sbc.w	r9, r3, fp
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8002c02:	eb63 0509 	sbc.w	r5, r3, r9
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	00eb      	lsls	r3, r5, #3
 8002c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c14:	00e2      	lsls	r2, r4, #3
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	eb14 030a 	adds.w	r3, r4, sl
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	eb45 030b 	adc.w	r3, r5, fp
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c32:	4629      	mov	r1, r5
 8002c34:	028b      	lsls	r3, r1, #10
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	028a      	lsls	r2, r1, #10
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c46:	2200      	movs	r2, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c50:	f7fe f81a 	bl	8000c88 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3740      	adds	r7, #64	; 0x40
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	017d7840 	.word	0x017d7840

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	08007494 	.word	0x08007494

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08007494 	.word	0x08007494

08002d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d20:	4b87      	ldr	r3, [pc, #540]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4984      	ldr	r1, [pc, #528]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	4978      	ldr	r1, [pc, #480]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8083 	beq.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d9a:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002da6:	f7ff f8ff 	bl	8001fa8 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7ff f8fb 	bl	8001fa8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e162      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dc0:	4b60      	ldr	r3, [pc, #384]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dcc:	4b5c      	ldr	r3, [pc, #368]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02f      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d028      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dea:	4b55      	ldr	r3, [pc, #340]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfa:	4b53      	ldr	r3, [pc, #332]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e06:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d114      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e12:	f7ff f8c9 	bl	8001fa8 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7ff f8c5 	bl	8001fa8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e12a      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e48:	d10d      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5e:	4938      	ldr	r1, [pc, #224]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	608b      	str	r3, [r1, #8]
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e70:	6093      	str	r3, [r2, #8]
 8002e72:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	4930      	ldr	r1, [pc, #192]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e98:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	4922      	ldr	r1, [pc, #136]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee6:	d101      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d004      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	f040 8091 	bne.w	8003040 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f24:	f7ff f840 	bl	8001fa8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f2a:	e013      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f2c:	f7ff f83c 	bl	8001fa8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0a3      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000
 8002f48:	42470e40 	.word	0x42470e40
 8002f4c:	424711e0 	.word	0x424711e0
 8002f50:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f54:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002f60:	4a4c      	ldr	r2, [pc, #304]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f66:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d019      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d110      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	019b      	lsls	r3, r3, #6
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	071b      	lsls	r3, r3, #28
 8002fde:	492c      	ldr	r1, [pc, #176]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d010      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	071b      	lsls	r3, r3, #28
 800300c:	4920      	ldr	r1, [pc, #128]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003014:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800301a:	f7fe ffc5 	bl	8001fa8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003022:	f7fe ffc1 	bl	8001fa8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e028      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800304e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003074:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	424710d8 	.word	0x424710d8
 8003098:	42470068 	.word	0x42470068

0800309c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e273      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030ba:	4b88      	ldr	r3, [pc, #544]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b85      	ldr	r3, [pc, #532]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b7e      	ldr	r3, [pc, #504]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e24e      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b76      	ldr	r3, [pc, #472]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b70      	ldr	r3, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6f      	ldr	r2, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b6d      	ldr	r3, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6c      	ldr	r2, [pc, #432]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b69      	ldr	r3, [pc, #420]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a68      	ldr	r2, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe ff28 	bl	8001fa8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe ff24 	bl	8001fa8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e213      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe ff14 	bl	8001fa8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe ff10 	bl	8001fa8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1ff      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b51      	ldr	r3, [pc, #324]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b44      	ldr	r3, [pc, #272]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1d3      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b34      	ldr	r3, [pc, #208]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe fec9 	bl	8001fa8 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe fec5 	bl	8001fa8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1b4      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4925      	ldr	r1, [pc, #148]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x244>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fea8 	bl	8001fa8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe fea4 	bl	8001fa8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e193      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d036      	beq.n	80032f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fe88 	bl	8001fa8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe fe84 	bl	8001fa8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e173      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_OscConfig+0x240>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e01b      	b.n	80032f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x248>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe fe71 	bl	8001fa8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00e      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe fe6d 	bl	8001fa8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d907      	bls.n	80032e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e15c      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
 80032dc:	40023800 	.word	0x40023800
 80032e0:	42470000 	.word	0x42470000
 80032e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b8a      	ldr	r3, [pc, #552]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ea      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8097 	beq.w	8003430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b83      	ldr	r3, [pc, #524]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a7e      	ldr	r2, [pc, #504]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b79      	ldr	r3, [pc, #484]	; (8003518 <HAL_RCC_OscConfig+0x47c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d118      	bne.n	8003370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x47c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a75      	ldr	r2, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x47c>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fe fe2d 	bl	8001fa8 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003352:	f7fe fe29 	bl	8001fa8 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e118      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x47c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x2ea>
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a65      	ldr	r2, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b05      	cmp	r3, #5
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x30c>
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5d      	ldr	r2, [pc, #372]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0x324>
 80033a8:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a59      	ldr	r2, [pc, #356]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b57      	ldr	r3, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fdee 	bl	8001fa8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe fdea 	bl	8001fa8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0d7      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	4b4b      	ldr	r3, [pc, #300]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ee      	beq.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f4:	f7fe fdd8 	bl	8001fa8 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fc:	f7fe fdd4 	bl	8001fa8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e0c1      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ee      	bne.n	80033fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 80ad 	beq.w	8003594 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800343a:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b08      	cmp	r3, #8
 8003444:	d060      	beq.n	8003508 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d145      	bne.n	80034da <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b33      	ldr	r3, [pc, #204]	; (800351c <HAL_RCC_OscConfig+0x480>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fda8 	bl	8001fa8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fda4 	bl	8001fa8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e093      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x480>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fd79 	bl	8001fa8 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fd75 	bl	8001fa8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e064      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x41e>
 80034d8:	e05c      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x480>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fd62 	bl	8001fa8 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fd5e 	bl	8001fa8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04d      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x478>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x44c>
 8003506:	e045      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e040      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCC_OscConfig+0x504>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d030      	beq.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d129      	bne.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d122      	bne.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d119      	bne.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d10f      	bne.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e066      	b.n	8003688 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7f5b      	ldrb	r3, [r3, #29]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fa68 	bl	8001aa0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	22ca      	movs	r2, #202	; 0xca
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2253      	movs	r2, #83	; 0x53
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa45 	bl	8003a76 <RTC_EnterInitMode>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d12c      	bne.n	8003650 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003608:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6919      	ldr	r1, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	041a      	lsls	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa4c 	bl	8003ae4 <RTC_ExitInitMode>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d113      	bne.n	800367e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003664:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	22ff      	movs	r2, #255	; 0xff
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	7f1b      	ldrb	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RTC_SetTime+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e087      	b.n	80037bc <HAL_RTC_SetTime+0x12c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d126      	bne.n	800370c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2200      	movs	r2, #0
 80036d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa29 	bl	8003b2e <RTC_ByteToBcd2>
 80036dc:	4603      	mov	r3, r0
 80036de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fa22 	bl	8003b2e <RTC_ByteToBcd2>
 80036ea:	4603      	mov	r3, r0
 80036ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80036ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fa1a 	bl	8003b2e <RTC_ByteToBcd2>
 80036fa:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e018      	b.n	800373e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2200      	movs	r2, #0
 800371e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800372c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003732:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	78db      	ldrb	r3, [r3, #3]
 8003738:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	22ca      	movs	r2, #202	; 0xca
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2253      	movs	r2, #83	; 0x53
 800374c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f991 	bl	8003a76 <RTC_EnterInitMode>
 8003754:	4603      	mov	r3, r0
 8003756:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d120      	bne.n	80037a0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003768:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800376c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800377c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f9a4 	bl	8003ae4 <RTC_ExitInitMode>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d102      	bne.n	80037ac <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	771a      	strb	r2, [r3, #28]

  return status;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	0d9b      	lsrs	r3, r3, #22
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11a      	bne.n	8003876 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f98f 	bl	8003b68 <RTC_Bcd2ToByte>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f986 	bl	8003b68 <RTC_Bcd2ToByte>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f97d 	bl	8003b68 <RTC_Bcd2ToByte>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	7f1b      	ldrb	r3, [r3, #28]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_RTC_SetDate+0x1c>
 8003898:	2302      	movs	r3, #2
 800389a:	e071      	b.n	8003980 <HAL_RTC_SetDate+0x100>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2202      	movs	r2, #2
 80038a6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <HAL_RTC_SetDate+0x4c>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	f023 0310 	bic.w	r3, r3, #16
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	330a      	adds	r3, #10
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11c      	bne.n	800390c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f929 	bl	8003b2e <RTC_ByteToBcd2>
 80038dc:	4603      	mov	r3, r0
 80038de:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f922 	bl	8003b2e <RTC_ByteToBcd2>
 80038ea:	4603      	mov	r3, r0
 80038ec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038ee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f91a 	bl	8003b2e <RTC_ByteToBcd2>
 80038fa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038fc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e00e      	b.n	800392a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	78db      	ldrb	r3, [r3, #3]
 8003910:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003918:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800391e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	22ca      	movs	r2, #202	; 0xca
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2253      	movs	r2, #83	; 0x53
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f89b 	bl	8003a76 <RTC_EnterInitMode>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003954:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003958:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8c2 	bl	8003ae4 <RTC_ExitInitMode>
 8003960:	4603      	mov	r3, r0
 8003962:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003964:	7cfb      	ldrb	r3, [r7, #19]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	771a      	strb	r2, [r3, #28]

  return status;
 800397e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd90      	pop	{r4, r7, pc}

08003988 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	0b5b      	lsrs	r3, r3, #13
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	78db      	ldrb	r3, [r3, #3]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f8bc 	bl	8003b68 <RTC_Bcd2ToByte>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f8b3 	bl	8003b68 <RTC_Bcd2ToByte>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	789b      	ldrb	r3, [r3, #2]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f8aa 	bl	8003b68 <RTC_Bcd2ToByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a40:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a42:	f7fe fab1 	bl	8001fa8 <HAL_GetTick>
 8003a46:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a48:	e009      	b.n	8003a5e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a4a:	f7fe faad 	bl	8001fa8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a58:	d901      	bls.n	8003a5e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e007      	b.n	8003a6e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d122      	bne.n	8003ada <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fe fa80 	bl	8001fa8 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003aaa:	e00c      	b.n	8003ac6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aac:	f7fe fa7c 	bl	8001fa8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aba:	d904      	bls.n	8003ac6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <RTC_EnterInitMode+0x64>
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d1e8      	bne.n	8003aac <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ff89 	bl	8003a26 <HAL_RTC_WaitForSynchro>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003b3c:	e005      	b.n	8003b4a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3301      	adds	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	3b0a      	subs	r3, #10
 8003b48:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d8f6      	bhi.n	8003b3e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b2db      	uxtb	r3, r3
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	4413      	add	r3, r2
 8003b92:	b2db      	uxtb	r3, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3350      	adds	r3, #80	; 0x50
 8003bb6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07b      	b.n	8003cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd ff64 	bl	8001af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	f003 0104 	and.w	r1, r3, #4
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0210 	and.w	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e03f      	b.n	8003d78 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd ff39 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2224      	movs	r2, #36	; 0x24
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f928 	bl	8003f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d17c      	bne.n	8003e9a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Transmit+0x2c>
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e075      	b.n	8003e9c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Transmit+0x3e>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e06e      	b.n	8003e9c <HAL_UART_Transmit+0x11c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd4:	f7fe f8e8 	bl	8001fa8 <HAL_GetTick>
 8003dd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dee:	d108      	bne.n	8003e02 <HAL_UART_Transmit+0x82>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e003      	b.n	8003e0a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e12:	e02a      	b.n	8003e6a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f840 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e036      	b.n	8003e9c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e42:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	3302      	adds	r3, #2
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	e007      	b.n	8003e5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1cf      	bne.n	8003e14 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f810 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e006      	b.n	8003e9c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3720      	adds	r7, #32
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b090      	sub	sp, #64	; 0x40
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb4:	e050      	b.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d04c      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec4:	f7fe f870 	bl	8001fa8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d241      	bcs.n	8003f58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efc:	e841 2300 	strex	r3, r2, [r1]
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e5      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	613b      	str	r3, [r7, #16]
   return(result);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f28:	623a      	str	r2, [r7, #32]
 8003f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e00f      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4013      	ands	r3, r2
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d09f      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3740      	adds	r7, #64	; 0x40
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b0c0      	sub	sp, #256	; 0x100
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	ea40 0301 	orr.w	r3, r0, r1
 8003fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	6999      	ldr	r1, [r3, #24]
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	ea40 0301 	orr.w	r3, r0, r1
 8004006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b8f      	ldr	r3, [pc, #572]	; (800424c <UART_SetConfig+0x2cc>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d005      	beq.n	8004020 <UART_SetConfig+0xa0>
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <UART_SetConfig+0x2d0>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d104      	bne.n	800402a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fe5a 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8004024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004028:	e003      	b.n	8004032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800402a:	f7fe fe41 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 800402e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	f040 810c 	bne.w	8004258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004044:	2200      	movs	r2, #0
 8004046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800404e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	1891      	adds	r1, r2, r2
 8004058:	65b9      	str	r1, [r7, #88]	; 0x58
 800405a:	415b      	adcs	r3, r3
 800405c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800405e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004062:	4621      	mov	r1, r4
 8004064:	eb12 0801 	adds.w	r8, r2, r1
 8004068:	4629      	mov	r1, r5
 800406a:	eb43 0901 	adc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004090:	462b      	mov	r3, r5
 8004092:	eb49 0303 	adc.w	r3, r9, r3
 8004096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800409a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040ae:	460b      	mov	r3, r1
 80040b0:	18db      	adds	r3, r3, r3
 80040b2:	653b      	str	r3, [r7, #80]	; 0x50
 80040b4:	4613      	mov	r3, r2
 80040b6:	eb42 0303 	adc.w	r3, r2, r3
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
 80040bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040c4:	f7fc fde0 	bl	8000c88 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4b61      	ldr	r3, [pc, #388]	; (8004254 <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2302 	umull	r2, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	011c      	lsls	r4, r3, #4
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80040f0:	415b      	adcs	r3, r3
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040f8:	4641      	mov	r1, r8
 80040fa:	eb12 0a01 	adds.w	sl, r2, r1
 80040fe:	4649      	mov	r1, r9
 8004100:	eb43 0b01 	adc.w	fp, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004118:	4692      	mov	sl, r2
 800411a:	469b      	mov	fp, r3
 800411c:	4643      	mov	r3, r8
 800411e:	eb1a 0303 	adds.w	r3, sl, r3
 8004122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004126:	464b      	mov	r3, r9
 8004128:	eb4b 0303 	adc.w	r3, fp, r3
 800412c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800413c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	643b      	str	r3, [r7, #64]	; 0x40
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
 8004152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800415a:	f7fc fd95 	bl	8000c88 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4611      	mov	r1, r2
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <UART_SetConfig+0x2d4>)
 8004166:	fba3 2301 	umull	r2, r3, r3, r1
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2264      	movs	r2, #100	; 0x64
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	1acb      	subs	r3, r1, r3
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <UART_SetConfig+0x2d4>)
 800417c:	fba3 2302 	umull	r2, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004188:	441c      	add	r4, r3
 800418a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004194:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800419c:	4642      	mov	r2, r8
 800419e:	464b      	mov	r3, r9
 80041a0:	1891      	adds	r1, r2, r2
 80041a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041a4:	415b      	adcs	r3, r3
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041ac:	4641      	mov	r1, r8
 80041ae:	1851      	adds	r1, r2, r1
 80041b0:	6339      	str	r1, [r7, #48]	; 0x30
 80041b2:	4649      	mov	r1, r9
 80041b4:	414b      	adcs	r3, r1
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041c4:	4659      	mov	r1, fp
 80041c6:	00cb      	lsls	r3, r1, #3
 80041c8:	4651      	mov	r1, sl
 80041ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ce:	4651      	mov	r1, sl
 80041d0:	00ca      	lsls	r2, r1, #3
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	4642      	mov	r2, r8
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041e0:	464b      	mov	r3, r9
 80041e2:	460a      	mov	r2, r1
 80041e4:	eb42 0303 	adc.w	r3, r2, r3
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004200:	460b      	mov	r3, r1
 8004202:	18db      	adds	r3, r3, r3
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
 8004206:	4613      	mov	r3, r2
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004216:	f7fc fd37 	bl	8000c88 <__aeabi_uldivmod>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <UART_SetConfig+0x2d4>)
 8004220:	fba3 1302 	umull	r1, r3, r3, r2
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	3332      	adds	r3, #50	; 0x32
 8004232:	4a08      	ldr	r2, [pc, #32]	; (8004254 <UART_SetConfig+0x2d4>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	f003 0207 	and.w	r2, r3, #7
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4422      	add	r2, r4
 8004246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004248:	e105      	b.n	8004456 <UART_SetConfig+0x4d6>
 800424a:	bf00      	nop
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004262:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	1891      	adds	r1, r2, r2
 8004270:	6239      	str	r1, [r7, #32]
 8004272:	415b      	adcs	r3, r3
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
 8004276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800427a:	4641      	mov	r1, r8
 800427c:	1854      	adds	r4, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb43 0501 	adc.w	r5, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	00eb      	lsls	r3, r5, #3
 800428e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004292:	00e2      	lsls	r2, r4, #3
 8004294:	4614      	mov	r4, r2
 8004296:	461d      	mov	r5, r3
 8004298:	4643      	mov	r3, r8
 800429a:	18e3      	adds	r3, r4, r3
 800429c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042a0:	464b      	mov	r3, r9
 80042a2:	eb45 0303 	adc.w	r3, r5, r3
 80042a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042c6:	4629      	mov	r1, r5
 80042c8:	008b      	lsls	r3, r1, #2
 80042ca:	4621      	mov	r1, r4
 80042cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d0:	4621      	mov	r1, r4
 80042d2:	008a      	lsls	r2, r1, #2
 80042d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042d8:	f7fc fcd6 	bl	8000c88 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4b60      	ldr	r3, [pc, #384]	; (8004464 <UART_SetConfig+0x4e4>)
 80042e2:	fba3 2302 	umull	r2, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	011c      	lsls	r4, r3, #4
 80042ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	1891      	adds	r1, r2, r2
 8004302:	61b9      	str	r1, [r7, #24]
 8004304:	415b      	adcs	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	4641      	mov	r1, r8
 800430e:	1851      	adds	r1, r2, r1
 8004310:	6139      	str	r1, [r7, #16]
 8004312:	4649      	mov	r1, r9
 8004314:	414b      	adcs	r3, r1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004324:	4659      	mov	r1, fp
 8004326:	00cb      	lsls	r3, r1, #3
 8004328:	4651      	mov	r1, sl
 800432a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800432e:	4651      	mov	r1, sl
 8004330:	00ca      	lsls	r2, r1, #3
 8004332:	4610      	mov	r0, r2
 8004334:	4619      	mov	r1, r3
 8004336:	4603      	mov	r3, r0
 8004338:	4642      	mov	r2, r8
 800433a:	189b      	adds	r3, r3, r2
 800433c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004340:	464b      	mov	r3, r9
 8004342:	460a      	mov	r2, r1
 8004344:	eb42 0303 	adc.w	r3, r2, r3
 8004348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	67bb      	str	r3, [r7, #120]	; 0x78
 8004356:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004364:	4649      	mov	r1, r9
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	4641      	mov	r1, r8
 800436a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436e:	4641      	mov	r1, r8
 8004370:	008a      	lsls	r2, r1, #2
 8004372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004376:	f7fc fc87 	bl	8000c88 <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4b39      	ldr	r3, [pc, #228]	; (8004464 <UART_SetConfig+0x4e4>)
 8004380:	fba3 1302 	umull	r1, r3, r3, r2
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	2164      	movs	r1, #100	; 0x64
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	3332      	adds	r3, #50	; 0x32
 8004392:	4a34      	ldr	r2, [pc, #208]	; (8004464 <UART_SetConfig+0x4e4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439e:	441c      	add	r4, r3
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a4:	2200      	movs	r2, #0
 80043a6:	673b      	str	r3, [r7, #112]	; 0x70
 80043a8:	677a      	str	r2, [r7, #116]	; 0x74
 80043aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043ae:	4642      	mov	r2, r8
 80043b0:	464b      	mov	r3, r9
 80043b2:	1891      	adds	r1, r2, r2
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	415b      	adcs	r3, r3
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043be:	4641      	mov	r1, r8
 80043c0:	1851      	adds	r1, r2, r1
 80043c2:	6039      	str	r1, [r7, #0]
 80043c4:	4649      	mov	r1, r9
 80043c6:	414b      	adcs	r3, r1
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043d6:	4659      	mov	r1, fp
 80043d8:	00cb      	lsls	r3, r1, #3
 80043da:	4651      	mov	r1, sl
 80043dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e0:	4651      	mov	r1, sl
 80043e2:	00ca      	lsls	r2, r1, #3
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	4603      	mov	r3, r0
 80043ea:	4642      	mov	r2, r8
 80043ec:	189b      	adds	r3, r3, r2
 80043ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f0:	464b      	mov	r3, r9
 80043f2:	460a      	mov	r2, r1
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	663b      	str	r3, [r7, #96]	; 0x60
 8004404:	667a      	str	r2, [r7, #100]	; 0x64
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004412:	4649      	mov	r1, r9
 8004414:	008b      	lsls	r3, r1, #2
 8004416:	4641      	mov	r1, r8
 8004418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441c:	4641      	mov	r1, r8
 800441e:	008a      	lsls	r2, r1, #2
 8004420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004424:	f7fc fc30 	bl	8000c88 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <UART_SetConfig+0x4e4>)
 800442e:	fba3 1302 	umull	r1, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2164      	movs	r1, #100	; 0x64
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	; 0x32
 8004440:	4a08      	ldr	r2, [pc, #32]	; (8004464 <UART_SetConfig+0x4e4>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 020f 	and.w	r2, r3, #15
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4422      	add	r2, r4
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	bf00      	nop
 8004458:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	51eb851f 	.word	0x51eb851f

08004468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800446c:	4904      	ldr	r1, [pc, #16]	; (8004480 <MX_FATFS_Init+0x18>)
 800446e:	4805      	ldr	r0, [pc, #20]	; (8004484 <MX_FATFS_Init+0x1c>)
 8004470:	f000 f8b0 	bl	80045d4 <FATFS_LinkDriver>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <MX_FATFS_Init+0x20>)
 800447a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000033c 	.word	0x2000033c
 8004484:	2000000c 	.word	0x2000000c
 8004488:	20000338 	.word	0x20000338

0800448c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <USER_initialize+0x24>)
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <USER_initialize+0x24>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000009 	.word	0x20000009

080044b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <USER_status+0x24>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <USER_status+0x24>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000009 	.word	0x20000009

080044dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4603      	mov	r3, r0
 80044ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80044ec:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800450a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	603a      	str	r2, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
 8004524:	460b      	mov	r3, r1
 8004526:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
    return res;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 8004554:	7a5b      	ldrb	r3, [r3, #9]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d131      	bne.n	80045c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800455c:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 800455e:	7a5b      	ldrb	r3, [r3, #9]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 800456c:	7a5b      	ldrb	r3, [r3, #9]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 800457c:	7a5b      	ldrb	r3, [r3, #9]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 8004584:	4413      	add	r3, r2
 8004586:	79fa      	ldrb	r2, [r7, #7]
 8004588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 800458c:	7a5b      	ldrb	r3, [r3, #9]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	b2d1      	uxtb	r1, r2
 8004594:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <FATFS_LinkDriverEx+0x94>)
 8004596:	7251      	strb	r1, [r2, #9]
 8004598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800459a:	7dbb      	ldrb	r3, [r7, #22]
 800459c:	3330      	adds	r3, #48	; 0x30
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3301      	adds	r3, #1
 80045a8:	223a      	movs	r2, #58	; 0x3a
 80045aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3302      	adds	r3, #2
 80045b0:	222f      	movs	r2, #47	; 0x2f
 80045b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	3303      	adds	r3, #3
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000340 	.word	0x20000340

080045d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	6839      	ldr	r1, [r7, #0]
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff ffaa 	bl	800453c <FATFS_LinkDriverEx>
 80045e8:	4603      	mov	r3, r0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000020 	.word	0x20000020

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f002 ff04 	bl	8007420 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	0800787c 	.word	0x0800787c
 800463c:	0800787c 	.word	0x0800787c
 8004640:	0800787c 	.word	0x0800787c
 8004644:	08007880 	.word	0x08007880

08004648 <malloc>:
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <malloc+0xc>)
 800464a:	4601      	mov	r1, r0
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f000 b877 	b.w	8004740 <_malloc_r>
 8004652:	bf00      	nop
 8004654:	20000020 	.word	0x20000020

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <_free_r>:
 8004668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800466a:	2900      	cmp	r1, #0
 800466c:	d044      	beq.n	80046f8 <_free_r+0x90>
 800466e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004672:	9001      	str	r0, [sp, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	f1a1 0404 	sub.w	r4, r1, #4
 800467a:	bfb8      	it	lt
 800467c:	18e4      	addlt	r4, r4, r3
 800467e:	f001 fbfb 	bl	8005e78 <__malloc_lock>
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <_free_r+0x94>)
 8004684:	9801      	ldr	r0, [sp, #4]
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	b933      	cbnz	r3, 8004698 <_free_r+0x30>
 800468a:	6063      	str	r3, [r4, #4]
 800468c:	6014      	str	r4, [r2, #0]
 800468e:	b003      	add	sp, #12
 8004690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004694:	f001 bbf6 	b.w	8005e84 <__malloc_unlock>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d908      	bls.n	80046ae <_free_r+0x46>
 800469c:	6825      	ldr	r5, [r4, #0]
 800469e:	1961      	adds	r1, r4, r5
 80046a0:	428b      	cmp	r3, r1
 80046a2:	bf01      	itttt	eq
 80046a4:	6819      	ldreq	r1, [r3, #0]
 80046a6:	685b      	ldreq	r3, [r3, #4]
 80046a8:	1949      	addeq	r1, r1, r5
 80046aa:	6021      	streq	r1, [r4, #0]
 80046ac:	e7ed      	b.n	800468a <_free_r+0x22>
 80046ae:	461a      	mov	r2, r3
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b10b      	cbz	r3, 80046b8 <_free_r+0x50>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d9fa      	bls.n	80046ae <_free_r+0x46>
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	1855      	adds	r5, r2, r1
 80046bc:	42a5      	cmp	r5, r4
 80046be:	d10b      	bne.n	80046d8 <_free_r+0x70>
 80046c0:	6824      	ldr	r4, [r4, #0]
 80046c2:	4421      	add	r1, r4
 80046c4:	1854      	adds	r4, r2, r1
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	d1e0      	bne.n	800468e <_free_r+0x26>
 80046cc:	681c      	ldr	r4, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	6053      	str	r3, [r2, #4]
 80046d2:	4421      	add	r1, r4
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	e7da      	b.n	800468e <_free_r+0x26>
 80046d8:	d902      	bls.n	80046e0 <_free_r+0x78>
 80046da:	230c      	movs	r3, #12
 80046dc:	6003      	str	r3, [r0, #0]
 80046de:	e7d6      	b.n	800468e <_free_r+0x26>
 80046e0:	6825      	ldr	r5, [r4, #0]
 80046e2:	1961      	adds	r1, r4, r5
 80046e4:	428b      	cmp	r3, r1
 80046e6:	bf04      	itt	eq
 80046e8:	6819      	ldreq	r1, [r3, #0]
 80046ea:	685b      	ldreq	r3, [r3, #4]
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	bf04      	itt	eq
 80046f0:	1949      	addeq	r1, r1, r5
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	6054      	str	r4, [r2, #4]
 80046f6:	e7ca      	b.n	800468e <_free_r+0x26>
 80046f8:	b003      	add	sp, #12
 80046fa:	bd30      	pop	{r4, r5, pc}
 80046fc:	2000034c 	.word	0x2000034c

08004700 <sbrk_aligned>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0e      	ldr	r6, [pc, #56]	; (800473c <sbrk_aligned+0x3c>)
 8004704:	460c      	mov	r4, r1
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	4605      	mov	r5, r0
 800470a:	b911      	cbnz	r1, 8004712 <sbrk_aligned+0x12>
 800470c:	f000 fcf6 	bl	80050fc <_sbrk_r>
 8004710:	6030      	str	r0, [r6, #0]
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 fcf1 	bl	80050fc <_sbrk_r>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d00a      	beq.n	8004734 <sbrk_aligned+0x34>
 800471e:	1cc4      	adds	r4, r0, #3
 8004720:	f024 0403 	bic.w	r4, r4, #3
 8004724:	42a0      	cmp	r0, r4
 8004726:	d007      	beq.n	8004738 <sbrk_aligned+0x38>
 8004728:	1a21      	subs	r1, r4, r0
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fce6 	bl	80050fc <_sbrk_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d101      	bne.n	8004738 <sbrk_aligned+0x38>
 8004734:	f04f 34ff 	mov.w	r4, #4294967295
 8004738:	4620      	mov	r0, r4
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	20000350 	.word	0x20000350

08004740 <_malloc_r>:
 8004740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004744:	1ccd      	adds	r5, r1, #3
 8004746:	f025 0503 	bic.w	r5, r5, #3
 800474a:	3508      	adds	r5, #8
 800474c:	2d0c      	cmp	r5, #12
 800474e:	bf38      	it	cc
 8004750:	250c      	movcc	r5, #12
 8004752:	2d00      	cmp	r5, #0
 8004754:	4607      	mov	r7, r0
 8004756:	db01      	blt.n	800475c <_malloc_r+0x1c>
 8004758:	42a9      	cmp	r1, r5
 800475a:	d905      	bls.n	8004768 <_malloc_r+0x28>
 800475c:	230c      	movs	r3, #12
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	2600      	movs	r6, #0
 8004762:	4630      	mov	r0, r6
 8004764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004768:	4e2e      	ldr	r6, [pc, #184]	; (8004824 <_malloc_r+0xe4>)
 800476a:	f001 fb85 	bl	8005e78 <__malloc_lock>
 800476e:	6833      	ldr	r3, [r6, #0]
 8004770:	461c      	mov	r4, r3
 8004772:	bb34      	cbnz	r4, 80047c2 <_malloc_r+0x82>
 8004774:	4629      	mov	r1, r5
 8004776:	4638      	mov	r0, r7
 8004778:	f7ff ffc2 	bl	8004700 <sbrk_aligned>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	4604      	mov	r4, r0
 8004780:	d14d      	bne.n	800481e <_malloc_r+0xde>
 8004782:	6834      	ldr	r4, [r6, #0]
 8004784:	4626      	mov	r6, r4
 8004786:	2e00      	cmp	r6, #0
 8004788:	d140      	bne.n	800480c <_malloc_r+0xcc>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	4631      	mov	r1, r6
 800478e:	4638      	mov	r0, r7
 8004790:	eb04 0803 	add.w	r8, r4, r3
 8004794:	f000 fcb2 	bl	80050fc <_sbrk_r>
 8004798:	4580      	cmp	r8, r0
 800479a:	d13a      	bne.n	8004812 <_malloc_r+0xd2>
 800479c:	6821      	ldr	r1, [r4, #0]
 800479e:	3503      	adds	r5, #3
 80047a0:	1a6d      	subs	r5, r5, r1
 80047a2:	f025 0503 	bic.w	r5, r5, #3
 80047a6:	3508      	adds	r5, #8
 80047a8:	2d0c      	cmp	r5, #12
 80047aa:	bf38      	it	cc
 80047ac:	250c      	movcc	r5, #12
 80047ae:	4629      	mov	r1, r5
 80047b0:	4638      	mov	r0, r7
 80047b2:	f7ff ffa5 	bl	8004700 <sbrk_aligned>
 80047b6:	3001      	adds	r0, #1
 80047b8:	d02b      	beq.n	8004812 <_malloc_r+0xd2>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	442b      	add	r3, r5
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	e00e      	b.n	80047e0 <_malloc_r+0xa0>
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	1b52      	subs	r2, r2, r5
 80047c6:	d41e      	bmi.n	8004806 <_malloc_r+0xc6>
 80047c8:	2a0b      	cmp	r2, #11
 80047ca:	d916      	bls.n	80047fa <_malloc_r+0xba>
 80047cc:	1961      	adds	r1, r4, r5
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	6025      	str	r5, [r4, #0]
 80047d2:	bf18      	it	ne
 80047d4:	6059      	strne	r1, [r3, #4]
 80047d6:	6863      	ldr	r3, [r4, #4]
 80047d8:	bf08      	it	eq
 80047da:	6031      	streq	r1, [r6, #0]
 80047dc:	5162      	str	r2, [r4, r5]
 80047de:	604b      	str	r3, [r1, #4]
 80047e0:	4638      	mov	r0, r7
 80047e2:	f104 060b 	add.w	r6, r4, #11
 80047e6:	f001 fb4d 	bl	8005e84 <__malloc_unlock>
 80047ea:	f026 0607 	bic.w	r6, r6, #7
 80047ee:	1d23      	adds	r3, r4, #4
 80047f0:	1af2      	subs	r2, r6, r3
 80047f2:	d0b6      	beq.n	8004762 <_malloc_r+0x22>
 80047f4:	1b9b      	subs	r3, r3, r6
 80047f6:	50a3      	str	r3, [r4, r2]
 80047f8:	e7b3      	b.n	8004762 <_malloc_r+0x22>
 80047fa:	6862      	ldr	r2, [r4, #4]
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	bf0c      	ite	eq
 8004800:	6032      	streq	r2, [r6, #0]
 8004802:	605a      	strne	r2, [r3, #4]
 8004804:	e7ec      	b.n	80047e0 <_malloc_r+0xa0>
 8004806:	4623      	mov	r3, r4
 8004808:	6864      	ldr	r4, [r4, #4]
 800480a:	e7b2      	b.n	8004772 <_malloc_r+0x32>
 800480c:	4634      	mov	r4, r6
 800480e:	6876      	ldr	r6, [r6, #4]
 8004810:	e7b9      	b.n	8004786 <_malloc_r+0x46>
 8004812:	230c      	movs	r3, #12
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4638      	mov	r0, r7
 8004818:	f001 fb34 	bl	8005e84 <__malloc_unlock>
 800481c:	e7a1      	b.n	8004762 <_malloc_r+0x22>
 800481e:	6025      	str	r5, [r4, #0]
 8004820:	e7de      	b.n	80047e0 <_malloc_r+0xa0>
 8004822:	bf00      	nop
 8004824:	2000034c 	.word	0x2000034c

08004828 <__cvt>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	ec55 4b10 	vmov	r4, r5, d0
 8004830:	2d00      	cmp	r5, #0
 8004832:	460e      	mov	r6, r1
 8004834:	4619      	mov	r1, r3
 8004836:	462b      	mov	r3, r5
 8004838:	bfbb      	ittet	lt
 800483a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800483e:	461d      	movlt	r5, r3
 8004840:	2300      	movge	r3, #0
 8004842:	232d      	movlt	r3, #45	; 0x2d
 8004844:	700b      	strb	r3, [r1, #0]
 8004846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004848:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800484c:	4691      	mov	r9, r2
 800484e:	f023 0820 	bic.w	r8, r3, #32
 8004852:	bfbc      	itt	lt
 8004854:	4622      	movlt	r2, r4
 8004856:	4614      	movlt	r4, r2
 8004858:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800485c:	d005      	beq.n	800486a <__cvt+0x42>
 800485e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004862:	d100      	bne.n	8004866 <__cvt+0x3e>
 8004864:	3601      	adds	r6, #1
 8004866:	2102      	movs	r1, #2
 8004868:	e000      	b.n	800486c <__cvt+0x44>
 800486a:	2103      	movs	r1, #3
 800486c:	ab03      	add	r3, sp, #12
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	ab02      	add	r3, sp, #8
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	ec45 4b10 	vmov	d0, r4, r5
 8004878:	4653      	mov	r3, sl
 800487a:	4632      	mov	r2, r6
 800487c:	f000 fcfc 	bl	8005278 <_dtoa_r>
 8004880:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004884:	4607      	mov	r7, r0
 8004886:	d102      	bne.n	800488e <__cvt+0x66>
 8004888:	f019 0f01 	tst.w	r9, #1
 800488c:	d022      	beq.n	80048d4 <__cvt+0xac>
 800488e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004892:	eb07 0906 	add.w	r9, r7, r6
 8004896:	d110      	bne.n	80048ba <__cvt+0x92>
 8004898:	783b      	ldrb	r3, [r7, #0]
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d10a      	bne.n	80048b4 <__cvt+0x8c>
 800489e:	2200      	movs	r2, #0
 80048a0:	2300      	movs	r3, #0
 80048a2:	4620      	mov	r0, r4
 80048a4:	4629      	mov	r1, r5
 80048a6:	f7fc f92f 	bl	8000b08 <__aeabi_dcmpeq>
 80048aa:	b918      	cbnz	r0, 80048b4 <__cvt+0x8c>
 80048ac:	f1c6 0601 	rsb	r6, r6, #1
 80048b0:	f8ca 6000 	str.w	r6, [sl]
 80048b4:	f8da 3000 	ldr.w	r3, [sl]
 80048b8:	4499      	add	r9, r3
 80048ba:	2200      	movs	r2, #0
 80048bc:	2300      	movs	r3, #0
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fc f921 	bl	8000b08 <__aeabi_dcmpeq>
 80048c6:	b108      	cbz	r0, 80048cc <__cvt+0xa4>
 80048c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	454b      	cmp	r3, r9
 80048d2:	d307      	bcc.n	80048e4 <__cvt+0xbc>
 80048d4:	9b03      	ldr	r3, [sp, #12]
 80048d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048d8:	1bdb      	subs	r3, r3, r7
 80048da:	4638      	mov	r0, r7
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	b004      	add	sp, #16
 80048e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	9103      	str	r1, [sp, #12]
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	e7f0      	b.n	80048ce <__cvt+0xa6>

080048ec <__exponent>:
 80048ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ee:	4603      	mov	r3, r0
 80048f0:	2900      	cmp	r1, #0
 80048f2:	bfb8      	it	lt
 80048f4:	4249      	neglt	r1, r1
 80048f6:	f803 2b02 	strb.w	r2, [r3], #2
 80048fa:	bfb4      	ite	lt
 80048fc:	222d      	movlt	r2, #45	; 0x2d
 80048fe:	222b      	movge	r2, #43	; 0x2b
 8004900:	2909      	cmp	r1, #9
 8004902:	7042      	strb	r2, [r0, #1]
 8004904:	dd2a      	ble.n	800495c <__exponent+0x70>
 8004906:	f10d 0407 	add.w	r4, sp, #7
 800490a:	46a4      	mov	ip, r4
 800490c:	270a      	movs	r7, #10
 800490e:	46a6      	mov	lr, r4
 8004910:	460a      	mov	r2, r1
 8004912:	fb91 f6f7 	sdiv	r6, r1, r7
 8004916:	fb07 1516 	mls	r5, r7, r6, r1
 800491a:	3530      	adds	r5, #48	; 0x30
 800491c:	2a63      	cmp	r2, #99	; 0x63
 800491e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004922:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004926:	4631      	mov	r1, r6
 8004928:	dcf1      	bgt.n	800490e <__exponent+0x22>
 800492a:	3130      	adds	r1, #48	; 0x30
 800492c:	f1ae 0502 	sub.w	r5, lr, #2
 8004930:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004934:	1c44      	adds	r4, r0, #1
 8004936:	4629      	mov	r1, r5
 8004938:	4561      	cmp	r1, ip
 800493a:	d30a      	bcc.n	8004952 <__exponent+0x66>
 800493c:	f10d 0209 	add.w	r2, sp, #9
 8004940:	eba2 020e 	sub.w	r2, r2, lr
 8004944:	4565      	cmp	r5, ip
 8004946:	bf88      	it	hi
 8004948:	2200      	movhi	r2, #0
 800494a:	4413      	add	r3, r2
 800494c:	1a18      	subs	r0, r3, r0
 800494e:	b003      	add	sp, #12
 8004950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004956:	f804 2f01 	strb.w	r2, [r4, #1]!
 800495a:	e7ed      	b.n	8004938 <__exponent+0x4c>
 800495c:	2330      	movs	r3, #48	; 0x30
 800495e:	3130      	adds	r1, #48	; 0x30
 8004960:	7083      	strb	r3, [r0, #2]
 8004962:	70c1      	strb	r1, [r0, #3]
 8004964:	1d03      	adds	r3, r0, #4
 8004966:	e7f1      	b.n	800494c <__exponent+0x60>

08004968 <_printf_float>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	ed2d 8b02 	vpush	{d8}
 8004970:	b08d      	sub	sp, #52	; 0x34
 8004972:	460c      	mov	r4, r1
 8004974:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004978:	4616      	mov	r6, r2
 800497a:	461f      	mov	r7, r3
 800497c:	4605      	mov	r5, r0
 800497e:	f001 fa69 	bl	8005e54 <_localeconv_r>
 8004982:	f8d0 a000 	ldr.w	sl, [r0]
 8004986:	4650      	mov	r0, sl
 8004988:	f7fb fc42 	bl	8000210 <strlen>
 800498c:	2300      	movs	r3, #0
 800498e:	930a      	str	r3, [sp, #40]	; 0x28
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	f8d8 3000 	ldr.w	r3, [r8]
 8004998:	f894 b018 	ldrb.w	fp, [r4, #24]
 800499c:	3307      	adds	r3, #7
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	f103 0208 	add.w	r2, r3, #8
 80049a6:	f8c8 2000 	str.w	r2, [r8]
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049ba:	9307      	str	r3, [sp, #28]
 80049bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80049c0:	ee08 0a10 	vmov	s16, r0
 80049c4:	4b9f      	ldr	r3, [pc, #636]	; (8004c44 <_printf_float+0x2dc>)
 80049c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	f7fc f8cd 	bl	8000b6c <__aeabi_dcmpun>
 80049d2:	bb88      	cbnz	r0, 8004a38 <_printf_float+0xd0>
 80049d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049d8:	4b9a      	ldr	r3, [pc, #616]	; (8004c44 <_printf_float+0x2dc>)
 80049da:	f04f 32ff 	mov.w	r2, #4294967295
 80049de:	f7fc f8a7 	bl	8000b30 <__aeabi_dcmple>
 80049e2:	bb48      	cbnz	r0, 8004a38 <_printf_float+0xd0>
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	4640      	mov	r0, r8
 80049ea:	4649      	mov	r1, r9
 80049ec:	f7fc f896 	bl	8000b1c <__aeabi_dcmplt>
 80049f0:	b110      	cbz	r0, 80049f8 <_printf_float+0x90>
 80049f2:	232d      	movs	r3, #45	; 0x2d
 80049f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f8:	4b93      	ldr	r3, [pc, #588]	; (8004c48 <_printf_float+0x2e0>)
 80049fa:	4894      	ldr	r0, [pc, #592]	; (8004c4c <_printf_float+0x2e4>)
 80049fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a00:	bf94      	ite	ls
 8004a02:	4698      	movls	r8, r3
 8004a04:	4680      	movhi	r8, r0
 8004a06:	2303      	movs	r3, #3
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	9b05      	ldr	r3, [sp, #20]
 8004a0c:	f023 0204 	bic.w	r2, r3, #4
 8004a10:	6022      	str	r2, [r4, #0]
 8004a12:	f04f 0900 	mov.w	r9, #0
 8004a16:	9700      	str	r7, [sp, #0]
 8004a18:	4633      	mov	r3, r6
 8004a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f000 f9d8 	bl	8004dd4 <_printf_common>
 8004a24:	3001      	adds	r0, #1
 8004a26:	f040 8090 	bne.w	8004b4a <_printf_float+0x1e2>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2e:	b00d      	add	sp, #52	; 0x34
 8004a30:	ecbd 8b02 	vpop	{d8}
 8004a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	4649      	mov	r1, r9
 8004a40:	f7fc f894 	bl	8000b6c <__aeabi_dcmpun>
 8004a44:	b140      	cbz	r0, 8004a58 <_printf_float+0xf0>
 8004a46:	464b      	mov	r3, r9
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfbc      	itt	lt
 8004a4c:	232d      	movlt	r3, #45	; 0x2d
 8004a4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a52:	487f      	ldr	r0, [pc, #508]	; (8004c50 <_printf_float+0x2e8>)
 8004a54:	4b7f      	ldr	r3, [pc, #508]	; (8004c54 <_printf_float+0x2ec>)
 8004a56:	e7d1      	b.n	80049fc <_printf_float+0x94>
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a5e:	9206      	str	r2, [sp, #24]
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	d13f      	bne.n	8004ae4 <_printf_float+0x17c>
 8004a64:	2306      	movs	r3, #6
 8004a66:	6063      	str	r3, [r4, #4]
 8004a68:	9b05      	ldr	r3, [sp, #20]
 8004a6a:	6861      	ldr	r1, [r4, #4]
 8004a6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a70:	2300      	movs	r3, #0
 8004a72:	9303      	str	r3, [sp, #12]
 8004a74:	ab0a      	add	r3, sp, #40	; 0x28
 8004a76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a7a:	ab09      	add	r3, sp, #36	; 0x24
 8004a7c:	ec49 8b10 	vmov	d0, r8, r9
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6022      	str	r2, [r4, #0]
 8004a84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a88:	4628      	mov	r0, r5
 8004a8a:	f7ff fecd 	bl	8004828 <__cvt>
 8004a8e:	9b06      	ldr	r3, [sp, #24]
 8004a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a92:	2b47      	cmp	r3, #71	; 0x47
 8004a94:	4680      	mov	r8, r0
 8004a96:	d108      	bne.n	8004aaa <_printf_float+0x142>
 8004a98:	1cc8      	adds	r0, r1, #3
 8004a9a:	db02      	blt.n	8004aa2 <_printf_float+0x13a>
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	dd41      	ble.n	8004b26 <_printf_float+0x1be>
 8004aa2:	f1ab 0b02 	sub.w	fp, fp, #2
 8004aa6:	fa5f fb8b 	uxtb.w	fp, fp
 8004aaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004aae:	d820      	bhi.n	8004af2 <_printf_float+0x18a>
 8004ab0:	3901      	subs	r1, #1
 8004ab2:	465a      	mov	r2, fp
 8004ab4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ab8:	9109      	str	r1, [sp, #36]	; 0x24
 8004aba:	f7ff ff17 	bl	80048ec <__exponent>
 8004abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac0:	1813      	adds	r3, r2, r0
 8004ac2:	2a01      	cmp	r2, #1
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	dc02      	bgt.n	8004ad0 <_printf_float+0x168>
 8004aca:	6822      	ldr	r2, [r4, #0]
 8004acc:	07d2      	lsls	r2, r2, #31
 8004ace:	d501      	bpl.n	8004ad4 <_printf_float+0x16c>
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d09c      	beq.n	8004a16 <_printf_float+0xae>
 8004adc:	232d      	movs	r3, #45	; 0x2d
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	e798      	b.n	8004a16 <_printf_float+0xae>
 8004ae4:	9a06      	ldr	r2, [sp, #24]
 8004ae6:	2a47      	cmp	r2, #71	; 0x47
 8004ae8:	d1be      	bne.n	8004a68 <_printf_float+0x100>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1bc      	bne.n	8004a68 <_printf_float+0x100>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e7b9      	b.n	8004a66 <_printf_float+0xfe>
 8004af2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004af6:	d118      	bne.n	8004b2a <_printf_float+0x1c2>
 8004af8:	2900      	cmp	r1, #0
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	dd0b      	ble.n	8004b16 <_printf_float+0x1ae>
 8004afe:	6121      	str	r1, [r4, #16]
 8004b00:	b913      	cbnz	r3, 8004b08 <_printf_float+0x1a0>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	07d0      	lsls	r0, r2, #31
 8004b06:	d502      	bpl.n	8004b0e <_printf_float+0x1a6>
 8004b08:	3301      	adds	r3, #1
 8004b0a:	440b      	add	r3, r1
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b10:	f04f 0900 	mov.w	r9, #0
 8004b14:	e7de      	b.n	8004ad4 <_printf_float+0x16c>
 8004b16:	b913      	cbnz	r3, 8004b1e <_printf_float+0x1b6>
 8004b18:	6822      	ldr	r2, [r4, #0]
 8004b1a:	07d2      	lsls	r2, r2, #31
 8004b1c:	d501      	bpl.n	8004b22 <_printf_float+0x1ba>
 8004b1e:	3302      	adds	r3, #2
 8004b20:	e7f4      	b.n	8004b0c <_printf_float+0x1a4>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e7f2      	b.n	8004b0c <_printf_float+0x1a4>
 8004b26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	db05      	blt.n	8004b3c <_printf_float+0x1d4>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	6121      	str	r1, [r4, #16]
 8004b34:	07d8      	lsls	r0, r3, #31
 8004b36:	d5ea      	bpl.n	8004b0e <_printf_float+0x1a6>
 8004b38:	1c4b      	adds	r3, r1, #1
 8004b3a:	e7e7      	b.n	8004b0c <_printf_float+0x1a4>
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	bfd4      	ite	le
 8004b40:	f1c1 0202 	rsble	r2, r1, #2
 8004b44:	2201      	movgt	r2, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	e7e0      	b.n	8004b0c <_printf_float+0x1a4>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	055a      	lsls	r2, r3, #21
 8004b4e:	d407      	bmi.n	8004b60 <_printf_float+0x1f8>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	4642      	mov	r2, r8
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d12c      	bne.n	8004bb8 <_printf_float+0x250>
 8004b5e:	e764      	b.n	8004a2a <_printf_float+0xc2>
 8004b60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b64:	f240 80e0 	bls.w	8004d28 <_printf_float+0x3c0>
 8004b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f7fb ffca 	bl	8000b08 <__aeabi_dcmpeq>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d034      	beq.n	8004be2 <_printf_float+0x27a>
 8004b78:	4a37      	ldr	r2, [pc, #220]	; (8004c58 <_printf_float+0x2f0>)
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4631      	mov	r1, r6
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b8      	blx	r7
 8004b82:	3001      	adds	r0, #1
 8004b84:	f43f af51 	beq.w	8004a2a <_printf_float+0xc2>
 8004b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	db02      	blt.n	8004b96 <_printf_float+0x22e>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07d8      	lsls	r0, r3, #31
 8004b94:	d510      	bpl.n	8004bb8 <_printf_float+0x250>
 8004b96:	ee18 3a10 	vmov	r3, s16
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f43f af41 	beq.w	8004a2a <_printf_float+0xc2>
 8004ba8:	f04f 0800 	mov.w	r8, #0
 8004bac:	f104 091a 	add.w	r9, r4, #26
 8004bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	4543      	cmp	r3, r8
 8004bb6:	dc09      	bgt.n	8004bcc <_printf_float+0x264>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	079b      	lsls	r3, r3, #30
 8004bbc:	f100 8105 	bmi.w	8004dca <_printf_float+0x462>
 8004bc0:	68e0      	ldr	r0, [r4, #12]
 8004bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc4:	4298      	cmp	r0, r3
 8004bc6:	bfb8      	it	lt
 8004bc8:	4618      	movlt	r0, r3
 8004bca:	e730      	b.n	8004a2e <_printf_float+0xc6>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	464a      	mov	r2, r9
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f af27 	beq.w	8004a2a <_printf_float+0xc2>
 8004bdc:	f108 0801 	add.w	r8, r8, #1
 8004be0:	e7e6      	b.n	8004bb0 <_printf_float+0x248>
 8004be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dc39      	bgt.n	8004c5c <_printf_float+0x2f4>
 8004be8:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <_printf_float+0x2f0>)
 8004bea:	2301      	movs	r3, #1
 8004bec:	4631      	mov	r1, r6
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b8      	blx	r7
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	f43f af19 	beq.w	8004a2a <_printf_float+0xc2>
 8004bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	d102      	bne.n	8004c06 <_printf_float+0x29e>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	07d9      	lsls	r1, r3, #31
 8004c04:	d5d8      	bpl.n	8004bb8 <_printf_float+0x250>
 8004c06:	ee18 3a10 	vmov	r3, s16
 8004c0a:	4652      	mov	r2, sl
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af09 	beq.w	8004a2a <_printf_float+0xc2>
 8004c18:	f04f 0900 	mov.w	r9, #0
 8004c1c:	f104 0a1a 	add.w	sl, r4, #26
 8004c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c22:	425b      	negs	r3, r3
 8004c24:	454b      	cmp	r3, r9
 8004c26:	dc01      	bgt.n	8004c2c <_printf_float+0x2c4>
 8004c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2a:	e792      	b.n	8004b52 <_printf_float+0x1ea>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4652      	mov	r2, sl
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f aef7 	beq.w	8004a2a <_printf_float+0xc2>
 8004c3c:	f109 0901 	add.w	r9, r9, #1
 8004c40:	e7ee      	b.n	8004c20 <_printf_float+0x2b8>
 8004c42:	bf00      	nop
 8004c44:	7fefffff 	.word	0x7fefffff
 8004c48:	080074a0 	.word	0x080074a0
 8004c4c:	080074a4 	.word	0x080074a4
 8004c50:	080074ac 	.word	0x080074ac
 8004c54:	080074a8 	.word	0x080074a8
 8004c58:	080074b0 	.word	0x080074b0
 8004c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c60:	429a      	cmp	r2, r3
 8004c62:	bfa8      	it	ge
 8004c64:	461a      	movge	r2, r3
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	4691      	mov	r9, r2
 8004c6a:	dc37      	bgt.n	8004cdc <_printf_float+0x374>
 8004c6c:	f04f 0b00 	mov.w	fp, #0
 8004c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c74:	f104 021a 	add.w	r2, r4, #26
 8004c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	eba3 0309 	sub.w	r3, r3, r9
 8004c80:	455b      	cmp	r3, fp
 8004c82:	dc33      	bgt.n	8004cec <_printf_float+0x384>
 8004c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	db3b      	blt.n	8004d04 <_printf_float+0x39c>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	07da      	lsls	r2, r3, #31
 8004c90:	d438      	bmi.n	8004d04 <_printf_float+0x39c>
 8004c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c94:	9a05      	ldr	r2, [sp, #20]
 8004c96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c98:	1a9a      	subs	r2, r3, r2
 8004c9a:	eba3 0901 	sub.w	r9, r3, r1
 8004c9e:	4591      	cmp	r9, r2
 8004ca0:	bfa8      	it	ge
 8004ca2:	4691      	movge	r9, r2
 8004ca4:	f1b9 0f00 	cmp.w	r9, #0
 8004ca8:	dc35      	bgt.n	8004d16 <_printf_float+0x3ae>
 8004caa:	f04f 0800 	mov.w	r8, #0
 8004cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb2:	f104 0a1a 	add.w	sl, r4, #26
 8004cb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	eba3 0309 	sub.w	r3, r3, r9
 8004cc0:	4543      	cmp	r3, r8
 8004cc2:	f77f af79 	ble.w	8004bb8 <_printf_float+0x250>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4652      	mov	r2, sl
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f aeaa 	beq.w	8004a2a <_printf_float+0xc2>
 8004cd6:	f108 0801 	add.w	r8, r8, #1
 8004cda:	e7ec      	b.n	8004cb6 <_printf_float+0x34e>
 8004cdc:	4613      	mov	r3, r2
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d1c0      	bne.n	8004c6c <_printf_float+0x304>
 8004cea:	e69e      	b.n	8004a2a <_printf_float+0xc2>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	9205      	str	r2, [sp, #20]
 8004cf4:	47b8      	blx	r7
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	f43f ae97 	beq.w	8004a2a <_printf_float+0xc2>
 8004cfc:	9a05      	ldr	r2, [sp, #20]
 8004cfe:	f10b 0b01 	add.w	fp, fp, #1
 8004d02:	e7b9      	b.n	8004c78 <_printf_float+0x310>
 8004d04:	ee18 3a10 	vmov	r3, s16
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1be      	bne.n	8004c92 <_printf_float+0x32a>
 8004d14:	e689      	b.n	8004a2a <_printf_float+0xc2>
 8004d16:	9a05      	ldr	r2, [sp, #20]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	4442      	add	r2, r8
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	d1c1      	bne.n	8004caa <_printf_float+0x342>
 8004d26:	e680      	b.n	8004a2a <_printf_float+0xc2>
 8004d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d2a:	2a01      	cmp	r2, #1
 8004d2c:	dc01      	bgt.n	8004d32 <_printf_float+0x3ca>
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d538      	bpl.n	8004da4 <_printf_float+0x43c>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4642      	mov	r2, r8
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f ae74 	beq.w	8004a2a <_printf_float+0xc2>
 8004d42:	ee18 3a10 	vmov	r3, s16
 8004d46:	4652      	mov	r2, sl
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b8      	blx	r7
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f43f ae6b 	beq.w	8004a2a <_printf_float+0xc2>
 8004d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f7fb fed4 	bl	8000b08 <__aeabi_dcmpeq>
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_printf_float+0x432>
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	f108 0201 	add.w	r2, r8, #1
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	d10e      	bne.n	8004d92 <_printf_float+0x42a>
 8004d74:	e659      	b.n	8004a2a <_printf_float+0xc2>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4652      	mov	r2, sl
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae52 	beq.w	8004a2a <_printf_float+0xc2>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4543      	cmp	r3, r8
 8004d90:	dcf1      	bgt.n	8004d76 <_printf_float+0x40e>
 8004d92:	464b      	mov	r3, r9
 8004d94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d98:	e6dc      	b.n	8004b54 <_printf_float+0x1ec>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	f104 0a1a 	add.w	sl, r4, #26
 8004da2:	e7f2      	b.n	8004d8a <_printf_float+0x422>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4642      	mov	r2, r8
 8004da8:	e7df      	b.n	8004d6a <_printf_float+0x402>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f ae38 	beq.w	8004a2a <_printf_float+0xc2>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	dcf0      	bgt.n	8004daa <_printf_float+0x442>
 8004dc8:	e6fa      	b.n	8004bc0 <_printf_float+0x258>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	f104 0919 	add.w	r9, r4, #25
 8004dd2:	e7f4      	b.n	8004dbe <_printf_float+0x456>

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4699      	mov	r9, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfb8      	it	lt
 8004de8:	4613      	movlt	r3, r2
 8004dea:	6033      	str	r3, [r6, #0]
 8004dec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004df0:	4607      	mov	r7, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc26      	bgt.n	8004e6a <_printf_common+0x96>
 8004e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e20:	1e13      	subs	r3, r2, #0
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d42b      	bmi.n	8004e84 <_printf_common+0xb0>
 8004e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e30:	4649      	mov	r1, r9
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	3001      	adds	r0, #1
 8004e38:	d01e      	beq.n	8004e78 <_printf_common+0xa4>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	68e5      	ldr	r5, [r4, #12]
 8004e3e:	6832      	ldr	r2, [r6, #0]
 8004e40:	f003 0306 	and.w	r3, r3, #6
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	bf08      	it	eq
 8004e48:	1aad      	subeq	r5, r5, r2
 8004e4a:	68a3      	ldr	r3, [r4, #8]
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	bf0c      	ite	eq
 8004e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e54:	2500      	movne	r5, #0
 8004e56:	4293      	cmp	r3, r2
 8004e58:	bfc4      	itt	gt
 8004e5a:	1a9b      	subgt	r3, r3, r2
 8004e5c:	18ed      	addgt	r5, r5, r3
 8004e5e:	2600      	movs	r6, #0
 8004e60:	341a      	adds	r4, #26
 8004e62:	42b5      	cmp	r5, r6
 8004e64:	d11a      	bne.n	8004e9c <_printf_common+0xc8>
 8004e66:	2000      	movs	r0, #0
 8004e68:	e008      	b.n	8004e7c <_printf_common+0xa8>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4638      	mov	r0, r7
 8004e72:	47c0      	blx	r8
 8004e74:	3001      	adds	r0, #1
 8004e76:	d103      	bne.n	8004e80 <_printf_common+0xac>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7c6      	b.n	8004e12 <_printf_common+0x3e>
 8004e84:	18e1      	adds	r1, r4, r3
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	2030      	movs	r0, #48	; 0x30
 8004e8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e8e:	4422      	add	r2, r4
 8004e90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e98:	3302      	adds	r3, #2
 8004e9a:	e7c7      	b.n	8004e2c <_printf_common+0x58>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	4649      	mov	r1, r9
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d0e6      	beq.n	8004e78 <_printf_common+0xa4>
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7d9      	b.n	8004e62 <_printf_common+0x8e>
	...

08004eb0 <_printf_i>:
 8004eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	7e0f      	ldrb	r7, [r1, #24]
 8004eb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eb8:	2f78      	cmp	r7, #120	; 0x78
 8004eba:	4691      	mov	r9, r2
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ec6:	d807      	bhi.n	8004ed8 <_printf_i+0x28>
 8004ec8:	2f62      	cmp	r7, #98	; 0x62
 8004eca:	d80a      	bhi.n	8004ee2 <_printf_i+0x32>
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f000 80d8 	beq.w	8005082 <_printf_i+0x1d2>
 8004ed2:	2f58      	cmp	r7, #88	; 0x58
 8004ed4:	f000 80a3 	beq.w	800501e <_printf_i+0x16e>
 8004ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee0:	e03a      	b.n	8004f58 <_printf_i+0xa8>
 8004ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ee6:	2b15      	cmp	r3, #21
 8004ee8:	d8f6      	bhi.n	8004ed8 <_printf_i+0x28>
 8004eea:	a101      	add	r1, pc, #4	; (adr r1, 8004ef0 <_printf_i+0x40>)
 8004eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef0:	08004f49 	.word	0x08004f49
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ed9 	.word	0x08004ed9
 8004efc:	08004ed9 	.word	0x08004ed9
 8004f00:	08004ed9 	.word	0x08004ed9
 8004f04:	08004ed9 	.word	0x08004ed9
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004ed9 	.word	0x08004ed9
 8004f10:	08004ed9 	.word	0x08004ed9
 8004f14:	08004ed9 	.word	0x08004ed9
 8004f18:	08004ed9 	.word	0x08004ed9
 8004f1c:	08005069 	.word	0x08005069
 8004f20:	08004f8d 	.word	0x08004f8d
 8004f24:	0800504b 	.word	0x0800504b
 8004f28:	08004ed9 	.word	0x08004ed9
 8004f2c:	08004ed9 	.word	0x08004ed9
 8004f30:	0800508b 	.word	0x0800508b
 8004f34:	08004ed9 	.word	0x08004ed9
 8004f38:	08004f8d 	.word	0x08004f8d
 8004f3c:	08004ed9 	.word	0x08004ed9
 8004f40:	08004ed9 	.word	0x08004ed9
 8004f44:	08005053 	.word	0x08005053
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	1d1a      	adds	r2, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0a3      	b.n	80050a4 <_printf_i+0x1f4>
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	6829      	ldr	r1, [r5, #0]
 8004f60:	0606      	lsls	r6, r0, #24
 8004f62:	f101 0304 	add.w	r3, r1, #4
 8004f66:	d50a      	bpl.n	8004f7e <_printf_i+0xce>
 8004f68:	680e      	ldr	r6, [r1, #0]
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	da03      	bge.n	8004f78 <_printf_i+0xc8>
 8004f70:	232d      	movs	r3, #45	; 0x2d
 8004f72:	4276      	negs	r6, r6
 8004f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f78:	485e      	ldr	r0, [pc, #376]	; (80050f4 <_printf_i+0x244>)
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	e019      	b.n	8004fb2 <_printf_i+0x102>
 8004f7e:	680e      	ldr	r6, [r1, #0]
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f86:	bf18      	it	ne
 8004f88:	b236      	sxthne	r6, r6
 8004f8a:	e7ef      	b.n	8004f6c <_printf_i+0xbc>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	6029      	str	r1, [r5, #0]
 8004f94:	0601      	lsls	r1, r0, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xec>
 8004f98:	681e      	ldr	r6, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0xf2>
 8004f9c:	0646      	lsls	r6, r0, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xe8>
 8004fa0:	881e      	ldrh	r6, [r3, #0]
 8004fa2:	4854      	ldr	r0, [pc, #336]	; (80050f4 <_printf_i+0x244>)
 8004fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2308      	moveq	r3, #8
 8004faa:	230a      	movne	r3, #10
 8004fac:	2100      	movs	r1, #0
 8004fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb2:	6865      	ldr	r5, [r4, #4]
 8004fb4:	60a5      	str	r5, [r4, #8]
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	bfa2      	ittt	ge
 8004fba:	6821      	ldrge	r1, [r4, #0]
 8004fbc:	f021 0104 	bicge.w	r1, r1, #4
 8004fc0:	6021      	strge	r1, [r4, #0]
 8004fc2:	b90e      	cbnz	r6, 8004fc8 <_printf_i+0x118>
 8004fc4:	2d00      	cmp	r5, #0
 8004fc6:	d04d      	beq.n	8005064 <_printf_i+0x1b4>
 8004fc8:	4615      	mov	r5, r2
 8004fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fce:	fb03 6711 	mls	r7, r3, r1, r6
 8004fd2:	5dc7      	ldrb	r7, [r0, r7]
 8004fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fd8:	4637      	mov	r7, r6
 8004fda:	42bb      	cmp	r3, r7
 8004fdc:	460e      	mov	r6, r1
 8004fde:	d9f4      	bls.n	8004fca <_printf_i+0x11a>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d10b      	bne.n	8004ffc <_printf_i+0x14c>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	07de      	lsls	r6, r3, #31
 8004fe8:	d508      	bpl.n	8004ffc <_printf_i+0x14c>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	6861      	ldr	r1, [r4, #4]
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	bfde      	ittt	le
 8004ff2:	2330      	movle	r3, #48	; 0x30
 8004ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ff8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ffc:	1b52      	subs	r2, r2, r5
 8004ffe:	6122      	str	r2, [r4, #16]
 8005000:	f8cd a000 	str.w	sl, [sp]
 8005004:	464b      	mov	r3, r9
 8005006:	aa03      	add	r2, sp, #12
 8005008:	4621      	mov	r1, r4
 800500a:	4640      	mov	r0, r8
 800500c:	f7ff fee2 	bl	8004dd4 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	d14c      	bne.n	80050ae <_printf_i+0x1fe>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	b004      	add	sp, #16
 800501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501e:	4835      	ldr	r0, [pc, #212]	; (80050f4 <_printf_i+0x244>)
 8005020:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005024:	6829      	ldr	r1, [r5, #0]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	f851 6b04 	ldr.w	r6, [r1], #4
 800502c:	6029      	str	r1, [r5, #0]
 800502e:	061d      	lsls	r5, r3, #24
 8005030:	d514      	bpl.n	800505c <_printf_i+0x1ac>
 8005032:	07df      	lsls	r7, r3, #31
 8005034:	bf44      	itt	mi
 8005036:	f043 0320 	orrmi.w	r3, r3, #32
 800503a:	6023      	strmi	r3, [r4, #0]
 800503c:	b91e      	cbnz	r6, 8005046 <_printf_i+0x196>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f023 0320 	bic.w	r3, r3, #32
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	2310      	movs	r3, #16
 8005048:	e7b0      	b.n	8004fac <_printf_i+0xfc>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	f043 0320 	orr.w	r3, r3, #32
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	2378      	movs	r3, #120	; 0x78
 8005054:	4828      	ldr	r0, [pc, #160]	; (80050f8 <_printf_i+0x248>)
 8005056:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800505a:	e7e3      	b.n	8005024 <_printf_i+0x174>
 800505c:	0659      	lsls	r1, r3, #25
 800505e:	bf48      	it	mi
 8005060:	b2b6      	uxthmi	r6, r6
 8005062:	e7e6      	b.n	8005032 <_printf_i+0x182>
 8005064:	4615      	mov	r5, r2
 8005066:	e7bb      	b.n	8004fe0 <_printf_i+0x130>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	6826      	ldr	r6, [r4, #0]
 800506c:	6961      	ldr	r1, [r4, #20]
 800506e:	1d18      	adds	r0, r3, #4
 8005070:	6028      	str	r0, [r5, #0]
 8005072:	0635      	lsls	r5, r6, #24
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	d501      	bpl.n	800507c <_printf_i+0x1cc>
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0x1d2>
 800507c:	0670      	lsls	r0, r6, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0x1c8>
 8005080:	8019      	strh	r1, [r3, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	4615      	mov	r5, r2
 8005088:	e7ba      	b.n	8005000 <_printf_i+0x150>
 800508a:	682b      	ldr	r3, [r5, #0]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	681d      	ldr	r5, [r3, #0]
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	2100      	movs	r1, #0
 8005096:	4628      	mov	r0, r5
 8005098:	f7fb f8c2 	bl	8000220 <memchr>
 800509c:	b108      	cbz	r0, 80050a2 <_printf_i+0x1f2>
 800509e:	1b40      	subs	r0, r0, r5
 80050a0:	6060      	str	r0, [r4, #4]
 80050a2:	6863      	ldr	r3, [r4, #4]
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	2300      	movs	r3, #0
 80050a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ac:	e7a8      	b.n	8005000 <_printf_i+0x150>
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	462a      	mov	r2, r5
 80050b2:	4649      	mov	r1, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	47d0      	blx	sl
 80050b8:	3001      	adds	r0, #1
 80050ba:	d0ab      	beq.n	8005014 <_printf_i+0x164>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	079b      	lsls	r3, r3, #30
 80050c0:	d413      	bmi.n	80050ea <_printf_i+0x23a>
 80050c2:	68e0      	ldr	r0, [r4, #12]
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	4298      	cmp	r0, r3
 80050c8:	bfb8      	it	lt
 80050ca:	4618      	movlt	r0, r3
 80050cc:	e7a4      	b.n	8005018 <_printf_i+0x168>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4632      	mov	r2, r6
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d09b      	beq.n	8005014 <_printf_i+0x164>
 80050dc:	3501      	adds	r5, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	9903      	ldr	r1, [sp, #12]
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dcf2      	bgt.n	80050ce <_printf_i+0x21e>
 80050e8:	e7eb      	b.n	80050c2 <_printf_i+0x212>
 80050ea:	2500      	movs	r5, #0
 80050ec:	f104 0619 	add.w	r6, r4, #25
 80050f0:	e7f5      	b.n	80050de <_printf_i+0x22e>
 80050f2:	bf00      	nop
 80050f4:	080074b2 	.word	0x080074b2
 80050f8:	080074c3 	.word	0x080074c3

080050fc <_sbrk_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4d06      	ldr	r5, [pc, #24]	; (8005118 <_sbrk_r+0x1c>)
 8005100:	2300      	movs	r3, #0
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	f7fc fe76 	bl	8001df8 <_sbrk>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d102      	bne.n	8005116 <_sbrk_r+0x1a>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	b103      	cbz	r3, 8005116 <_sbrk_r+0x1a>
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	20000354 	.word	0x20000354

0800511c <siprintf>:
 800511c:	b40e      	push	{r1, r2, r3}
 800511e:	b500      	push	{lr}
 8005120:	b09c      	sub	sp, #112	; 0x70
 8005122:	ab1d      	add	r3, sp, #116	; 0x74
 8005124:	9002      	str	r0, [sp, #8]
 8005126:	9006      	str	r0, [sp, #24]
 8005128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800512c:	4809      	ldr	r0, [pc, #36]	; (8005154 <siprintf+0x38>)
 800512e:	9107      	str	r1, [sp, #28]
 8005130:	9104      	str	r1, [sp, #16]
 8005132:	4909      	ldr	r1, [pc, #36]	; (8005158 <siprintf+0x3c>)
 8005134:	f853 2b04 	ldr.w	r2, [r3], #4
 8005138:	9105      	str	r1, [sp, #20]
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	a902      	add	r1, sp, #8
 8005140:	f001 fa9c 	bl	800667c <_svfiprintf_r>
 8005144:	9b02      	ldr	r3, [sp, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	b01c      	add	sp, #112	; 0x70
 800514c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005150:	b003      	add	sp, #12
 8005152:	4770      	bx	lr
 8005154:	20000020 	.word	0x20000020
 8005158:	ffff0208 	.word	0xffff0208

0800515c <quorem>:
 800515c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	6903      	ldr	r3, [r0, #16]
 8005162:	690c      	ldr	r4, [r1, #16]
 8005164:	42a3      	cmp	r3, r4
 8005166:	4607      	mov	r7, r0
 8005168:	f2c0 8081 	blt.w	800526e <quorem+0x112>
 800516c:	3c01      	subs	r4, #1
 800516e:	f101 0814 	add.w	r8, r1, #20
 8005172:	f100 0514 	add.w	r5, r0, #20
 8005176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005180:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005184:	3301      	adds	r3, #1
 8005186:	429a      	cmp	r2, r3
 8005188:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800518c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005190:	fbb2 f6f3 	udiv	r6, r2, r3
 8005194:	d331      	bcc.n	80051fa <quorem+0x9e>
 8005196:	f04f 0e00 	mov.w	lr, #0
 800519a:	4640      	mov	r0, r8
 800519c:	46ac      	mov	ip, r5
 800519e:	46f2      	mov	sl, lr
 80051a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051a4:	b293      	uxth	r3, r2
 80051a6:	fb06 e303 	mla	r3, r6, r3, lr
 80051aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	ebaa 0303 	sub.w	r3, sl, r3
 80051b4:	f8dc a000 	ldr.w	sl, [ip]
 80051b8:	0c12      	lsrs	r2, r2, #16
 80051ba:	fa13 f38a 	uxtah	r3, r3, sl
 80051be:	fb06 e202 	mla	r2, r6, r2, lr
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	9b00      	ldr	r3, [sp, #0]
 80051c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051ca:	b292      	uxth	r2, r2
 80051cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80051d8:	4581      	cmp	r9, r0
 80051da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051de:	f84c 3b04 	str.w	r3, [ip], #4
 80051e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051e6:	d2db      	bcs.n	80051a0 <quorem+0x44>
 80051e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80051ec:	b92b      	cbnz	r3, 80051fa <quorem+0x9e>
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	429d      	cmp	r5, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	d32e      	bcc.n	8005256 <quorem+0xfa>
 80051f8:	613c      	str	r4, [r7, #16]
 80051fa:	4638      	mov	r0, r7
 80051fc:	f001 f8ca 	bl	8006394 <__mcmp>
 8005200:	2800      	cmp	r0, #0
 8005202:	db24      	blt.n	800524e <quorem+0xf2>
 8005204:	3601      	adds	r6, #1
 8005206:	4628      	mov	r0, r5
 8005208:	f04f 0c00 	mov.w	ip, #0
 800520c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005210:	f8d0 e000 	ldr.w	lr, [r0]
 8005214:	b293      	uxth	r3, r2
 8005216:	ebac 0303 	sub.w	r3, ip, r3
 800521a:	0c12      	lsrs	r2, r2, #16
 800521c:	fa13 f38e 	uxtah	r3, r3, lr
 8005220:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005228:	b29b      	uxth	r3, r3
 800522a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800522e:	45c1      	cmp	r9, r8
 8005230:	f840 3b04 	str.w	r3, [r0], #4
 8005234:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005238:	d2e8      	bcs.n	800520c <quorem+0xb0>
 800523a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800523e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005242:	b922      	cbnz	r2, 800524e <quorem+0xf2>
 8005244:	3b04      	subs	r3, #4
 8005246:	429d      	cmp	r5, r3
 8005248:	461a      	mov	r2, r3
 800524a:	d30a      	bcc.n	8005262 <quorem+0x106>
 800524c:	613c      	str	r4, [r7, #16]
 800524e:	4630      	mov	r0, r6
 8005250:	b003      	add	sp, #12
 8005252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	3b04      	subs	r3, #4
 800525a:	2a00      	cmp	r2, #0
 800525c:	d1cc      	bne.n	80051f8 <quorem+0x9c>
 800525e:	3c01      	subs	r4, #1
 8005260:	e7c7      	b.n	80051f2 <quorem+0x96>
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	3b04      	subs	r3, #4
 8005266:	2a00      	cmp	r2, #0
 8005268:	d1f0      	bne.n	800524c <quorem+0xf0>
 800526a:	3c01      	subs	r4, #1
 800526c:	e7eb      	b.n	8005246 <quorem+0xea>
 800526e:	2000      	movs	r0, #0
 8005270:	e7ee      	b.n	8005250 <quorem+0xf4>
 8005272:	0000      	movs	r0, r0
 8005274:	0000      	movs	r0, r0
	...

08005278 <_dtoa_r>:
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	ed2d 8b04 	vpush	{d8-d9}
 8005280:	ec57 6b10 	vmov	r6, r7, d0
 8005284:	b093      	sub	sp, #76	; 0x4c
 8005286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800528c:	9106      	str	r1, [sp, #24]
 800528e:	ee10 aa10 	vmov	sl, s0
 8005292:	4604      	mov	r4, r0
 8005294:	9209      	str	r2, [sp, #36]	; 0x24
 8005296:	930c      	str	r3, [sp, #48]	; 0x30
 8005298:	46bb      	mov	fp, r7
 800529a:	b975      	cbnz	r5, 80052ba <_dtoa_r+0x42>
 800529c:	2010      	movs	r0, #16
 800529e:	f7ff f9d3 	bl	8004648 <malloc>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6260      	str	r0, [r4, #36]	; 0x24
 80052a6:	b920      	cbnz	r0, 80052b2 <_dtoa_r+0x3a>
 80052a8:	4ba7      	ldr	r3, [pc, #668]	; (8005548 <_dtoa_r+0x2d0>)
 80052aa:	21ea      	movs	r1, #234	; 0xea
 80052ac:	48a7      	ldr	r0, [pc, #668]	; (800554c <_dtoa_r+0x2d4>)
 80052ae:	f001 fae5 	bl	800687c <__assert_func>
 80052b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052b6:	6005      	str	r5, [r0, #0]
 80052b8:	60c5      	str	r5, [r0, #12]
 80052ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	b151      	cbz	r1, 80052d6 <_dtoa_r+0x5e>
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	604a      	str	r2, [r1, #4]
 80052c4:	2301      	movs	r3, #1
 80052c6:	4093      	lsls	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 fe20 	bl	8005f10 <_Bfree>
 80052d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	1e3b      	subs	r3, r7, #0
 80052d8:	bfaa      	itet	ge
 80052da:	2300      	movge	r3, #0
 80052dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052e0:	f8c8 3000 	strge.w	r3, [r8]
 80052e4:	4b9a      	ldr	r3, [pc, #616]	; (8005550 <_dtoa_r+0x2d8>)
 80052e6:	bfbc      	itt	lt
 80052e8:	2201      	movlt	r2, #1
 80052ea:	f8c8 2000 	strlt.w	r2, [r8]
 80052ee:	ea33 030b 	bics.w	r3, r3, fp
 80052f2:	d11b      	bne.n	800532c <_dtoa_r+0xb4>
 80052f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005300:	4333      	orrs	r3, r6
 8005302:	f000 8592 	beq.w	8005e2a <_dtoa_r+0xbb2>
 8005306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005308:	b963      	cbnz	r3, 8005324 <_dtoa_r+0xac>
 800530a:	4b92      	ldr	r3, [pc, #584]	; (8005554 <_dtoa_r+0x2dc>)
 800530c:	e022      	b.n	8005354 <_dtoa_r+0xdc>
 800530e:	4b92      	ldr	r3, [pc, #584]	; (8005558 <_dtoa_r+0x2e0>)
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	3308      	adds	r3, #8
 8005314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	9801      	ldr	r0, [sp, #4]
 800531a:	b013      	add	sp, #76	; 0x4c
 800531c:	ecbd 8b04 	vpop	{d8-d9}
 8005320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005324:	4b8b      	ldr	r3, [pc, #556]	; (8005554 <_dtoa_r+0x2dc>)
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	3303      	adds	r3, #3
 800532a:	e7f3      	b.n	8005314 <_dtoa_r+0x9c>
 800532c:	2200      	movs	r2, #0
 800532e:	2300      	movs	r3, #0
 8005330:	4650      	mov	r0, sl
 8005332:	4659      	mov	r1, fp
 8005334:	f7fb fbe8 	bl	8000b08 <__aeabi_dcmpeq>
 8005338:	ec4b ab19 	vmov	d9, sl, fp
 800533c:	4680      	mov	r8, r0
 800533e:	b158      	cbz	r0, 8005358 <_dtoa_r+0xe0>
 8005340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005342:	2301      	movs	r3, #1
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 856b 	beq.w	8005e24 <_dtoa_r+0xbac>
 800534e:	4883      	ldr	r0, [pc, #524]	; (800555c <_dtoa_r+0x2e4>)
 8005350:	6018      	str	r0, [r3, #0]
 8005352:	1e43      	subs	r3, r0, #1
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	e7df      	b.n	8005318 <_dtoa_r+0xa0>
 8005358:	ec4b ab10 	vmov	d0, sl, fp
 800535c:	aa10      	add	r2, sp, #64	; 0x40
 800535e:	a911      	add	r1, sp, #68	; 0x44
 8005360:	4620      	mov	r0, r4
 8005362:	f001 f8bd 	bl	80064e0 <__d2b>
 8005366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800536a:	ee08 0a10 	vmov	s16, r0
 800536e:	2d00      	cmp	r5, #0
 8005370:	f000 8084 	beq.w	800547c <_dtoa_r+0x204>
 8005374:	ee19 3a90 	vmov	r3, s19
 8005378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800537c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005380:	4656      	mov	r6, sl
 8005382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800538a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800538e:	4b74      	ldr	r3, [pc, #464]	; (8005560 <_dtoa_r+0x2e8>)
 8005390:	2200      	movs	r2, #0
 8005392:	4630      	mov	r0, r6
 8005394:	4639      	mov	r1, r7
 8005396:	f7fa ff97 	bl	80002c8 <__aeabi_dsub>
 800539a:	a365      	add	r3, pc, #404	; (adr r3, 8005530 <_dtoa_r+0x2b8>)
 800539c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a0:	f7fb f94a 	bl	8000638 <__aeabi_dmul>
 80053a4:	a364      	add	r3, pc, #400	; (adr r3, 8005538 <_dtoa_r+0x2c0>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa ff8f 	bl	80002cc <__adddf3>
 80053ae:	4606      	mov	r6, r0
 80053b0:	4628      	mov	r0, r5
 80053b2:	460f      	mov	r7, r1
 80053b4:	f7fb f8d6 	bl	8000564 <__aeabi_i2d>
 80053b8:	a361      	add	r3, pc, #388	; (adr r3, 8005540 <_dtoa_r+0x2c8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f93b 	bl	8000638 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fa ff7f 	bl	80002cc <__adddf3>
 80053ce:	4606      	mov	r6, r0
 80053d0:	460f      	mov	r7, r1
 80053d2:	f7fb fbe1 	bl	8000b98 <__aeabi_d2iz>
 80053d6:	2200      	movs	r2, #0
 80053d8:	9000      	str	r0, [sp, #0]
 80053da:	2300      	movs	r3, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fb fb9c 	bl	8000b1c <__aeabi_dcmplt>
 80053e4:	b150      	cbz	r0, 80053fc <_dtoa_r+0x184>
 80053e6:	9800      	ldr	r0, [sp, #0]
 80053e8:	f7fb f8bc 	bl	8000564 <__aeabi_i2d>
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	f7fb fb8a 	bl	8000b08 <__aeabi_dcmpeq>
 80053f4:	b910      	cbnz	r0, 80053fc <_dtoa_r+0x184>
 80053f6:	9b00      	ldr	r3, [sp, #0]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	9b00      	ldr	r3, [sp, #0]
 80053fe:	2b16      	cmp	r3, #22
 8005400:	d85a      	bhi.n	80054b8 <_dtoa_r+0x240>
 8005402:	9a00      	ldr	r2, [sp, #0]
 8005404:	4b57      	ldr	r3, [pc, #348]	; (8005564 <_dtoa_r+0x2ec>)
 8005406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	ec51 0b19 	vmov	r0, r1, d9
 8005412:	f7fb fb83 	bl	8000b1c <__aeabi_dcmplt>
 8005416:	2800      	cmp	r0, #0
 8005418:	d050      	beq.n	80054bc <_dtoa_r+0x244>
 800541a:	9b00      	ldr	r3, [sp, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	930b      	str	r3, [sp, #44]	; 0x2c
 8005424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005426:	1b5d      	subs	r5, r3, r5
 8005428:	1e6b      	subs	r3, r5, #1
 800542a:	9305      	str	r3, [sp, #20]
 800542c:	bf45      	ittet	mi
 800542e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005432:	9304      	strmi	r3, [sp, #16]
 8005434:	2300      	movpl	r3, #0
 8005436:	2300      	movmi	r3, #0
 8005438:	bf4c      	ite	mi
 800543a:	9305      	strmi	r3, [sp, #20]
 800543c:	9304      	strpl	r3, [sp, #16]
 800543e:	9b00      	ldr	r3, [sp, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	db3d      	blt.n	80054c0 <_dtoa_r+0x248>
 8005444:	9b05      	ldr	r3, [sp, #20]
 8005446:	9a00      	ldr	r2, [sp, #0]
 8005448:	920a      	str	r2, [sp, #40]	; 0x28
 800544a:	4413      	add	r3, r2
 800544c:	9305      	str	r3, [sp, #20]
 800544e:	2300      	movs	r3, #0
 8005450:	9307      	str	r3, [sp, #28]
 8005452:	9b06      	ldr	r3, [sp, #24]
 8005454:	2b09      	cmp	r3, #9
 8005456:	f200 8089 	bhi.w	800556c <_dtoa_r+0x2f4>
 800545a:	2b05      	cmp	r3, #5
 800545c:	bfc4      	itt	gt
 800545e:	3b04      	subgt	r3, #4
 8005460:	9306      	strgt	r3, [sp, #24]
 8005462:	9b06      	ldr	r3, [sp, #24]
 8005464:	f1a3 0302 	sub.w	r3, r3, #2
 8005468:	bfcc      	ite	gt
 800546a:	2500      	movgt	r5, #0
 800546c:	2501      	movle	r5, #1
 800546e:	2b03      	cmp	r3, #3
 8005470:	f200 8087 	bhi.w	8005582 <_dtoa_r+0x30a>
 8005474:	e8df f003 	tbb	[pc, r3]
 8005478:	59383a2d 	.word	0x59383a2d
 800547c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005480:	441d      	add	r5, r3
 8005482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005486:	2b20      	cmp	r3, #32
 8005488:	bfc1      	itttt	gt
 800548a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800548e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005492:	fa0b f303 	lslgt.w	r3, fp, r3
 8005496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800549a:	bfda      	itte	le
 800549c:	f1c3 0320 	rsble	r3, r3, #32
 80054a0:	fa06 f003 	lslle.w	r0, r6, r3
 80054a4:	4318      	orrgt	r0, r3
 80054a6:	f7fb f84d 	bl	8000544 <__aeabi_ui2d>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4606      	mov	r6, r0
 80054ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054b2:	3d01      	subs	r5, #1
 80054b4:	930e      	str	r3, [sp, #56]	; 0x38
 80054b6:	e76a      	b.n	800538e <_dtoa_r+0x116>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e7b2      	b.n	8005422 <_dtoa_r+0x1aa>
 80054bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80054be:	e7b1      	b.n	8005424 <_dtoa_r+0x1ac>
 80054c0:	9b04      	ldr	r3, [sp, #16]
 80054c2:	9a00      	ldr	r2, [sp, #0]
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	9304      	str	r3, [sp, #16]
 80054c8:	4253      	negs	r3, r2
 80054ca:	9307      	str	r3, [sp, #28]
 80054cc:	2300      	movs	r3, #0
 80054ce:	930a      	str	r3, [sp, #40]	; 0x28
 80054d0:	e7bf      	b.n	8005452 <_dtoa_r+0x1da>
 80054d2:	2300      	movs	r3, #0
 80054d4:	9308      	str	r3, [sp, #32]
 80054d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	dc55      	bgt.n	8005588 <_dtoa_r+0x310>
 80054dc:	2301      	movs	r3, #1
 80054de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054e2:	461a      	mov	r2, r3
 80054e4:	9209      	str	r2, [sp, #36]	; 0x24
 80054e6:	e00c      	b.n	8005502 <_dtoa_r+0x28a>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e7f3      	b.n	80054d4 <_dtoa_r+0x25c>
 80054ec:	2300      	movs	r3, #0
 80054ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f0:	9308      	str	r3, [sp, #32]
 80054f2:	9b00      	ldr	r3, [sp, #0]
 80054f4:	4413      	add	r3, r2
 80054f6:	9302      	str	r3, [sp, #8]
 80054f8:	3301      	adds	r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	9303      	str	r3, [sp, #12]
 80054fe:	bfb8      	it	lt
 8005500:	2301      	movlt	r3, #1
 8005502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005504:	2200      	movs	r2, #0
 8005506:	6042      	str	r2, [r0, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	f102 0614 	add.w	r6, r2, #20
 800550e:	429e      	cmp	r6, r3
 8005510:	6841      	ldr	r1, [r0, #4]
 8005512:	d93d      	bls.n	8005590 <_dtoa_r+0x318>
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fcbb 	bl	8005e90 <_Balloc>
 800551a:	9001      	str	r0, [sp, #4]
 800551c:	2800      	cmp	r0, #0
 800551e:	d13b      	bne.n	8005598 <_dtoa_r+0x320>
 8005520:	4b11      	ldr	r3, [pc, #68]	; (8005568 <_dtoa_r+0x2f0>)
 8005522:	4602      	mov	r2, r0
 8005524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005528:	e6c0      	b.n	80052ac <_dtoa_r+0x34>
 800552a:	2301      	movs	r3, #1
 800552c:	e7df      	b.n	80054ee <_dtoa_r+0x276>
 800552e:	bf00      	nop
 8005530:	636f4361 	.word	0x636f4361
 8005534:	3fd287a7 	.word	0x3fd287a7
 8005538:	8b60c8b3 	.word	0x8b60c8b3
 800553c:	3fc68a28 	.word	0x3fc68a28
 8005540:	509f79fb 	.word	0x509f79fb
 8005544:	3fd34413 	.word	0x3fd34413
 8005548:	080074e1 	.word	0x080074e1
 800554c:	080074f8 	.word	0x080074f8
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	080074dd 	.word	0x080074dd
 8005558:	080074d4 	.word	0x080074d4
 800555c:	080074b1 	.word	0x080074b1
 8005560:	3ff80000 	.word	0x3ff80000
 8005564:	080075e8 	.word	0x080075e8
 8005568:	08007553 	.word	0x08007553
 800556c:	2501      	movs	r5, #1
 800556e:	2300      	movs	r3, #0
 8005570:	9306      	str	r3, [sp, #24]
 8005572:	9508      	str	r5, [sp, #32]
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	2312      	movs	r3, #18
 8005580:	e7b0      	b.n	80054e4 <_dtoa_r+0x26c>
 8005582:	2301      	movs	r3, #1
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	e7f5      	b.n	8005574 <_dtoa_r+0x2fc>
 8005588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800558e:	e7b8      	b.n	8005502 <_dtoa_r+0x28a>
 8005590:	3101      	adds	r1, #1
 8005592:	6041      	str	r1, [r0, #4]
 8005594:	0052      	lsls	r2, r2, #1
 8005596:	e7b8      	b.n	800550a <_dtoa_r+0x292>
 8005598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800559a:	9a01      	ldr	r2, [sp, #4]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	2b0e      	cmp	r3, #14
 80055a2:	f200 809d 	bhi.w	80056e0 <_dtoa_r+0x468>
 80055a6:	2d00      	cmp	r5, #0
 80055a8:	f000 809a 	beq.w	80056e0 <_dtoa_r+0x468>
 80055ac:	9b00      	ldr	r3, [sp, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dd32      	ble.n	8005618 <_dtoa_r+0x3a0>
 80055b2:	4ab7      	ldr	r2, [pc, #732]	; (8005890 <_dtoa_r+0x618>)
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055c0:	9b00      	ldr	r3, [sp, #0]
 80055c2:	05d8      	lsls	r0, r3, #23
 80055c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055c8:	d516      	bpl.n	80055f8 <_dtoa_r+0x380>
 80055ca:	4bb2      	ldr	r3, [pc, #712]	; (8005894 <_dtoa_r+0x61c>)
 80055cc:	ec51 0b19 	vmov	r0, r1, d9
 80055d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055d4:	f7fb f95a 	bl	800088c <__aeabi_ddiv>
 80055d8:	f007 070f 	and.w	r7, r7, #15
 80055dc:	4682      	mov	sl, r0
 80055de:	468b      	mov	fp, r1
 80055e0:	2503      	movs	r5, #3
 80055e2:	4eac      	ldr	r6, [pc, #688]	; (8005894 <_dtoa_r+0x61c>)
 80055e4:	b957      	cbnz	r7, 80055fc <_dtoa_r+0x384>
 80055e6:	4642      	mov	r2, r8
 80055e8:	464b      	mov	r3, r9
 80055ea:	4650      	mov	r0, sl
 80055ec:	4659      	mov	r1, fp
 80055ee:	f7fb f94d 	bl	800088c <__aeabi_ddiv>
 80055f2:	4682      	mov	sl, r0
 80055f4:	468b      	mov	fp, r1
 80055f6:	e028      	b.n	800564a <_dtoa_r+0x3d2>
 80055f8:	2502      	movs	r5, #2
 80055fa:	e7f2      	b.n	80055e2 <_dtoa_r+0x36a>
 80055fc:	07f9      	lsls	r1, r7, #31
 80055fe:	d508      	bpl.n	8005612 <_dtoa_r+0x39a>
 8005600:	4640      	mov	r0, r8
 8005602:	4649      	mov	r1, r9
 8005604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005608:	f7fb f816 	bl	8000638 <__aeabi_dmul>
 800560c:	3501      	adds	r5, #1
 800560e:	4680      	mov	r8, r0
 8005610:	4689      	mov	r9, r1
 8005612:	107f      	asrs	r7, r7, #1
 8005614:	3608      	adds	r6, #8
 8005616:	e7e5      	b.n	80055e4 <_dtoa_r+0x36c>
 8005618:	f000 809b 	beq.w	8005752 <_dtoa_r+0x4da>
 800561c:	9b00      	ldr	r3, [sp, #0]
 800561e:	4f9d      	ldr	r7, [pc, #628]	; (8005894 <_dtoa_r+0x61c>)
 8005620:	425e      	negs	r6, r3
 8005622:	4b9b      	ldr	r3, [pc, #620]	; (8005890 <_dtoa_r+0x618>)
 8005624:	f006 020f 	and.w	r2, r6, #15
 8005628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	ec51 0b19 	vmov	r0, r1, d9
 8005634:	f7fb f800 	bl	8000638 <__aeabi_dmul>
 8005638:	1136      	asrs	r6, r6, #4
 800563a:	4682      	mov	sl, r0
 800563c:	468b      	mov	fp, r1
 800563e:	2300      	movs	r3, #0
 8005640:	2502      	movs	r5, #2
 8005642:	2e00      	cmp	r6, #0
 8005644:	d17a      	bne.n	800573c <_dtoa_r+0x4c4>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1d3      	bne.n	80055f2 <_dtoa_r+0x37a>
 800564a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8082 	beq.w	8005756 <_dtoa_r+0x4de>
 8005652:	4b91      	ldr	r3, [pc, #580]	; (8005898 <_dtoa_r+0x620>)
 8005654:	2200      	movs	r2, #0
 8005656:	4650      	mov	r0, sl
 8005658:	4659      	mov	r1, fp
 800565a:	f7fb fa5f 	bl	8000b1c <__aeabi_dcmplt>
 800565e:	2800      	cmp	r0, #0
 8005660:	d079      	beq.n	8005756 <_dtoa_r+0x4de>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d076      	beq.n	8005756 <_dtoa_r+0x4de>
 8005668:	9b02      	ldr	r3, [sp, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	dd36      	ble.n	80056dc <_dtoa_r+0x464>
 800566e:	9b00      	ldr	r3, [sp, #0]
 8005670:	4650      	mov	r0, sl
 8005672:	4659      	mov	r1, fp
 8005674:	1e5f      	subs	r7, r3, #1
 8005676:	2200      	movs	r2, #0
 8005678:	4b88      	ldr	r3, [pc, #544]	; (800589c <_dtoa_r+0x624>)
 800567a:	f7fa ffdd 	bl	8000638 <__aeabi_dmul>
 800567e:	9e02      	ldr	r6, [sp, #8]
 8005680:	4682      	mov	sl, r0
 8005682:	468b      	mov	fp, r1
 8005684:	3501      	adds	r5, #1
 8005686:	4628      	mov	r0, r5
 8005688:	f7fa ff6c 	bl	8000564 <__aeabi_i2d>
 800568c:	4652      	mov	r2, sl
 800568e:	465b      	mov	r3, fp
 8005690:	f7fa ffd2 	bl	8000638 <__aeabi_dmul>
 8005694:	4b82      	ldr	r3, [pc, #520]	; (80058a0 <_dtoa_r+0x628>)
 8005696:	2200      	movs	r2, #0
 8005698:	f7fa fe18 	bl	80002cc <__adddf3>
 800569c:	46d0      	mov	r8, sl
 800569e:	46d9      	mov	r9, fp
 80056a0:	4682      	mov	sl, r0
 80056a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d158      	bne.n	800575c <_dtoa_r+0x4e4>
 80056aa:	4b7e      	ldr	r3, [pc, #504]	; (80058a4 <_dtoa_r+0x62c>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	4640      	mov	r0, r8
 80056b0:	4649      	mov	r1, r9
 80056b2:	f7fa fe09 	bl	80002c8 <__aeabi_dsub>
 80056b6:	4652      	mov	r2, sl
 80056b8:	465b      	mov	r3, fp
 80056ba:	4680      	mov	r8, r0
 80056bc:	4689      	mov	r9, r1
 80056be:	f7fb fa4b 	bl	8000b58 <__aeabi_dcmpgt>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f040 8295 	bne.w	8005bf2 <_dtoa_r+0x97a>
 80056c8:	4652      	mov	r2, sl
 80056ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fb fa23 	bl	8000b1c <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f040 8289 	bne.w	8005bee <_dtoa_r+0x976>
 80056dc:	ec5b ab19 	vmov	sl, fp, d9
 80056e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f2c0 8148 	blt.w	8005978 <_dtoa_r+0x700>
 80056e8:	9a00      	ldr	r2, [sp, #0]
 80056ea:	2a0e      	cmp	r2, #14
 80056ec:	f300 8144 	bgt.w	8005978 <_dtoa_r+0x700>
 80056f0:	4b67      	ldr	r3, [pc, #412]	; (8005890 <_dtoa_r+0x618>)
 80056f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f280 80d5 	bge.w	80058ac <_dtoa_r+0x634>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f300 80d1 	bgt.w	80058ac <_dtoa_r+0x634>
 800570a:	f040 826f 	bne.w	8005bec <_dtoa_r+0x974>
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <_dtoa_r+0x62c>)
 8005710:	2200      	movs	r2, #0
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa ff8f 	bl	8000638 <__aeabi_dmul>
 800571a:	4652      	mov	r2, sl
 800571c:	465b      	mov	r3, fp
 800571e:	f7fb fa11 	bl	8000b44 <__aeabi_dcmpge>
 8005722:	9e03      	ldr	r6, [sp, #12]
 8005724:	4637      	mov	r7, r6
 8005726:	2800      	cmp	r0, #0
 8005728:	f040 8245 	bne.w	8005bb6 <_dtoa_r+0x93e>
 800572c:	9d01      	ldr	r5, [sp, #4]
 800572e:	2331      	movs	r3, #49	; 0x31
 8005730:	f805 3b01 	strb.w	r3, [r5], #1
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	3301      	adds	r3, #1
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	e240      	b.n	8005bbe <_dtoa_r+0x946>
 800573c:	07f2      	lsls	r2, r6, #31
 800573e:	d505      	bpl.n	800574c <_dtoa_r+0x4d4>
 8005740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005744:	f7fa ff78 	bl	8000638 <__aeabi_dmul>
 8005748:	3501      	adds	r5, #1
 800574a:	2301      	movs	r3, #1
 800574c:	1076      	asrs	r6, r6, #1
 800574e:	3708      	adds	r7, #8
 8005750:	e777      	b.n	8005642 <_dtoa_r+0x3ca>
 8005752:	2502      	movs	r5, #2
 8005754:	e779      	b.n	800564a <_dtoa_r+0x3d2>
 8005756:	9f00      	ldr	r7, [sp, #0]
 8005758:	9e03      	ldr	r6, [sp, #12]
 800575a:	e794      	b.n	8005686 <_dtoa_r+0x40e>
 800575c:	9901      	ldr	r1, [sp, #4]
 800575e:	4b4c      	ldr	r3, [pc, #304]	; (8005890 <_dtoa_r+0x618>)
 8005760:	4431      	add	r1, r6
 8005762:	910d      	str	r1, [sp, #52]	; 0x34
 8005764:	9908      	ldr	r1, [sp, #32]
 8005766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800576a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800576e:	2900      	cmp	r1, #0
 8005770:	d043      	beq.n	80057fa <_dtoa_r+0x582>
 8005772:	494d      	ldr	r1, [pc, #308]	; (80058a8 <_dtoa_r+0x630>)
 8005774:	2000      	movs	r0, #0
 8005776:	f7fb f889 	bl	800088c <__aeabi_ddiv>
 800577a:	4652      	mov	r2, sl
 800577c:	465b      	mov	r3, fp
 800577e:	f7fa fda3 	bl	80002c8 <__aeabi_dsub>
 8005782:	9d01      	ldr	r5, [sp, #4]
 8005784:	4682      	mov	sl, r0
 8005786:	468b      	mov	fp, r1
 8005788:	4649      	mov	r1, r9
 800578a:	4640      	mov	r0, r8
 800578c:	f7fb fa04 	bl	8000b98 <__aeabi_d2iz>
 8005790:	4606      	mov	r6, r0
 8005792:	f7fa fee7 	bl	8000564 <__aeabi_i2d>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fd93 	bl	80002c8 <__aeabi_dsub>
 80057a2:	3630      	adds	r6, #48	; 0x30
 80057a4:	f805 6b01 	strb.w	r6, [r5], #1
 80057a8:	4652      	mov	r2, sl
 80057aa:	465b      	mov	r3, fp
 80057ac:	4680      	mov	r8, r0
 80057ae:	4689      	mov	r9, r1
 80057b0:	f7fb f9b4 	bl	8000b1c <__aeabi_dcmplt>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d163      	bne.n	8005880 <_dtoa_r+0x608>
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	4936      	ldr	r1, [pc, #216]	; (8005898 <_dtoa_r+0x620>)
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fa fd82 	bl	80002c8 <__aeabi_dsub>
 80057c4:	4652      	mov	r2, sl
 80057c6:	465b      	mov	r3, fp
 80057c8:	f7fb f9a8 	bl	8000b1c <__aeabi_dcmplt>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f040 80b5 	bne.w	800593c <_dtoa_r+0x6c4>
 80057d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d4:	429d      	cmp	r5, r3
 80057d6:	d081      	beq.n	80056dc <_dtoa_r+0x464>
 80057d8:	4b30      	ldr	r3, [pc, #192]	; (800589c <_dtoa_r+0x624>)
 80057da:	2200      	movs	r2, #0
 80057dc:	4650      	mov	r0, sl
 80057de:	4659      	mov	r1, fp
 80057e0:	f7fa ff2a 	bl	8000638 <__aeabi_dmul>
 80057e4:	4b2d      	ldr	r3, [pc, #180]	; (800589c <_dtoa_r+0x624>)
 80057e6:	4682      	mov	sl, r0
 80057e8:	468b      	mov	fp, r1
 80057ea:	4640      	mov	r0, r8
 80057ec:	4649      	mov	r1, r9
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7fa ff22 	bl	8000638 <__aeabi_dmul>
 80057f4:	4680      	mov	r8, r0
 80057f6:	4689      	mov	r9, r1
 80057f8:	e7c6      	b.n	8005788 <_dtoa_r+0x510>
 80057fa:	4650      	mov	r0, sl
 80057fc:	4659      	mov	r1, fp
 80057fe:	f7fa ff1b 	bl	8000638 <__aeabi_dmul>
 8005802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005804:	9d01      	ldr	r5, [sp, #4]
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
 8005808:	4682      	mov	sl, r0
 800580a:	468b      	mov	fp, r1
 800580c:	4649      	mov	r1, r9
 800580e:	4640      	mov	r0, r8
 8005810:	f7fb f9c2 	bl	8000b98 <__aeabi_d2iz>
 8005814:	4606      	mov	r6, r0
 8005816:	f7fa fea5 	bl	8000564 <__aeabi_i2d>
 800581a:	3630      	adds	r6, #48	; 0x30
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4640      	mov	r0, r8
 8005822:	4649      	mov	r1, r9
 8005824:	f7fa fd50 	bl	80002c8 <__aeabi_dsub>
 8005828:	f805 6b01 	strb.w	r6, [r5], #1
 800582c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800582e:	429d      	cmp	r5, r3
 8005830:	4680      	mov	r8, r0
 8005832:	4689      	mov	r9, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	d124      	bne.n	8005884 <_dtoa_r+0x60c>
 800583a:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <_dtoa_r+0x630>)
 800583c:	4650      	mov	r0, sl
 800583e:	4659      	mov	r1, fp
 8005840:	f7fa fd44 	bl	80002cc <__adddf3>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fb f984 	bl	8000b58 <__aeabi_dcmpgt>
 8005850:	2800      	cmp	r0, #0
 8005852:	d173      	bne.n	800593c <_dtoa_r+0x6c4>
 8005854:	4652      	mov	r2, sl
 8005856:	465b      	mov	r3, fp
 8005858:	4913      	ldr	r1, [pc, #76]	; (80058a8 <_dtoa_r+0x630>)
 800585a:	2000      	movs	r0, #0
 800585c:	f7fa fd34 	bl	80002c8 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4640      	mov	r0, r8
 8005866:	4649      	mov	r1, r9
 8005868:	f7fb f958 	bl	8000b1c <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f af35 	beq.w	80056dc <_dtoa_r+0x464>
 8005872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005874:	1e6b      	subs	r3, r5, #1
 8005876:	930f      	str	r3, [sp, #60]	; 0x3c
 8005878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d0f8      	beq.n	8005872 <_dtoa_r+0x5fa>
 8005880:	9700      	str	r7, [sp, #0]
 8005882:	e049      	b.n	8005918 <_dtoa_r+0x6a0>
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <_dtoa_r+0x624>)
 8005886:	f7fa fed7 	bl	8000638 <__aeabi_dmul>
 800588a:	4680      	mov	r8, r0
 800588c:	4689      	mov	r9, r1
 800588e:	e7bd      	b.n	800580c <_dtoa_r+0x594>
 8005890:	080075e8 	.word	0x080075e8
 8005894:	080075c0 	.word	0x080075c0
 8005898:	3ff00000 	.word	0x3ff00000
 800589c:	40240000 	.word	0x40240000
 80058a0:	401c0000 	.word	0x401c0000
 80058a4:	40140000 	.word	0x40140000
 80058a8:	3fe00000 	.word	0x3fe00000
 80058ac:	9d01      	ldr	r5, [sp, #4]
 80058ae:	4656      	mov	r6, sl
 80058b0:	465f      	mov	r7, fp
 80058b2:	4642      	mov	r2, r8
 80058b4:	464b      	mov	r3, r9
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fa ffe7 	bl	800088c <__aeabi_ddiv>
 80058be:	f7fb f96b 	bl	8000b98 <__aeabi_d2iz>
 80058c2:	4682      	mov	sl, r0
 80058c4:	f7fa fe4e 	bl	8000564 <__aeabi_i2d>
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	f7fa feb4 	bl	8000638 <__aeabi_dmul>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4630      	mov	r0, r6
 80058d6:	4639      	mov	r1, r7
 80058d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058dc:	f7fa fcf4 	bl	80002c8 <__aeabi_dsub>
 80058e0:	f805 6b01 	strb.w	r6, [r5], #1
 80058e4:	9e01      	ldr	r6, [sp, #4]
 80058e6:	9f03      	ldr	r7, [sp, #12]
 80058e8:	1bae      	subs	r6, r5, r6
 80058ea:	42b7      	cmp	r7, r6
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	d135      	bne.n	800595e <_dtoa_r+0x6e6>
 80058f2:	f7fa fceb 	bl	80002cc <__adddf3>
 80058f6:	4642      	mov	r2, r8
 80058f8:	464b      	mov	r3, r9
 80058fa:	4606      	mov	r6, r0
 80058fc:	460f      	mov	r7, r1
 80058fe:	f7fb f92b 	bl	8000b58 <__aeabi_dcmpgt>
 8005902:	b9d0      	cbnz	r0, 800593a <_dtoa_r+0x6c2>
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fb f8fc 	bl	8000b08 <__aeabi_dcmpeq>
 8005910:	b110      	cbz	r0, 8005918 <_dtoa_r+0x6a0>
 8005912:	f01a 0f01 	tst.w	sl, #1
 8005916:	d110      	bne.n	800593a <_dtoa_r+0x6c2>
 8005918:	4620      	mov	r0, r4
 800591a:	ee18 1a10 	vmov	r1, s16
 800591e:	f000 faf7 	bl	8005f10 <_Bfree>
 8005922:	2300      	movs	r3, #0
 8005924:	9800      	ldr	r0, [sp, #0]
 8005926:	702b      	strb	r3, [r5, #0]
 8005928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800592a:	3001      	adds	r0, #1
 800592c:	6018      	str	r0, [r3, #0]
 800592e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005930:	2b00      	cmp	r3, #0
 8005932:	f43f acf1 	beq.w	8005318 <_dtoa_r+0xa0>
 8005936:	601d      	str	r5, [r3, #0]
 8005938:	e4ee      	b.n	8005318 <_dtoa_r+0xa0>
 800593a:	9f00      	ldr	r7, [sp, #0]
 800593c:	462b      	mov	r3, r5
 800593e:	461d      	mov	r5, r3
 8005940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005944:	2a39      	cmp	r2, #57	; 0x39
 8005946:	d106      	bne.n	8005956 <_dtoa_r+0x6de>
 8005948:	9a01      	ldr	r2, [sp, #4]
 800594a:	429a      	cmp	r2, r3
 800594c:	d1f7      	bne.n	800593e <_dtoa_r+0x6c6>
 800594e:	9901      	ldr	r1, [sp, #4]
 8005950:	2230      	movs	r2, #48	; 0x30
 8005952:	3701      	adds	r7, #1
 8005954:	700a      	strb	r2, [r1, #0]
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	3201      	adds	r2, #1
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e790      	b.n	8005880 <_dtoa_r+0x608>
 800595e:	4ba6      	ldr	r3, [pc, #664]	; (8005bf8 <_dtoa_r+0x980>)
 8005960:	2200      	movs	r2, #0
 8005962:	f7fa fe69 	bl	8000638 <__aeabi_dmul>
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	4606      	mov	r6, r0
 800596c:	460f      	mov	r7, r1
 800596e:	f7fb f8cb 	bl	8000b08 <__aeabi_dcmpeq>
 8005972:	2800      	cmp	r0, #0
 8005974:	d09d      	beq.n	80058b2 <_dtoa_r+0x63a>
 8005976:	e7cf      	b.n	8005918 <_dtoa_r+0x6a0>
 8005978:	9a08      	ldr	r2, [sp, #32]
 800597a:	2a00      	cmp	r2, #0
 800597c:	f000 80d7 	beq.w	8005b2e <_dtoa_r+0x8b6>
 8005980:	9a06      	ldr	r2, [sp, #24]
 8005982:	2a01      	cmp	r2, #1
 8005984:	f300 80ba 	bgt.w	8005afc <_dtoa_r+0x884>
 8005988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800598a:	2a00      	cmp	r2, #0
 800598c:	f000 80b2 	beq.w	8005af4 <_dtoa_r+0x87c>
 8005990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005994:	9e07      	ldr	r6, [sp, #28]
 8005996:	9d04      	ldr	r5, [sp, #16]
 8005998:	9a04      	ldr	r2, [sp, #16]
 800599a:	441a      	add	r2, r3
 800599c:	9204      	str	r2, [sp, #16]
 800599e:	9a05      	ldr	r2, [sp, #20]
 80059a0:	2101      	movs	r1, #1
 80059a2:	441a      	add	r2, r3
 80059a4:	4620      	mov	r0, r4
 80059a6:	9205      	str	r2, [sp, #20]
 80059a8:	f000 fb6a 	bl	8006080 <__i2b>
 80059ac:	4607      	mov	r7, r0
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	dd0c      	ble.n	80059cc <_dtoa_r+0x754>
 80059b2:	9b05      	ldr	r3, [sp, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dd09      	ble.n	80059cc <_dtoa_r+0x754>
 80059b8:	42ab      	cmp	r3, r5
 80059ba:	9a04      	ldr	r2, [sp, #16]
 80059bc:	bfa8      	it	ge
 80059be:	462b      	movge	r3, r5
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	9204      	str	r2, [sp, #16]
 80059c4:	9a05      	ldr	r2, [sp, #20]
 80059c6:	1aed      	subs	r5, r5, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	b31b      	cbz	r3, 8005a18 <_dtoa_r+0x7a0>
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80af 	beq.w	8005b36 <_dtoa_r+0x8be>
 80059d8:	2e00      	cmp	r6, #0
 80059da:	dd13      	ble.n	8005a04 <_dtoa_r+0x78c>
 80059dc:	4639      	mov	r1, r7
 80059de:	4632      	mov	r2, r6
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fc0d 	bl	8006200 <__pow5mult>
 80059e6:	ee18 2a10 	vmov	r2, s16
 80059ea:	4601      	mov	r1, r0
 80059ec:	4607      	mov	r7, r0
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 fb5c 	bl	80060ac <__multiply>
 80059f4:	ee18 1a10 	vmov	r1, s16
 80059f8:	4680      	mov	r8, r0
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fa88 	bl	8005f10 <_Bfree>
 8005a00:	ee08 8a10 	vmov	s16, r8
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	1b9a      	subs	r2, r3, r6
 8005a08:	d006      	beq.n	8005a18 <_dtoa_r+0x7a0>
 8005a0a:	ee18 1a10 	vmov	r1, s16
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 fbf6 	bl	8006200 <__pow5mult>
 8005a14:	ee08 0a10 	vmov	s16, r0
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fb30 	bl	8006080 <__i2b>
 8005a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	4606      	mov	r6, r0
 8005a26:	f340 8088 	ble.w	8005b3a <_dtoa_r+0x8c2>
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fbe6 	bl	8006200 <__pow5mult>
 8005a34:	9b06      	ldr	r3, [sp, #24]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	4606      	mov	r6, r0
 8005a3a:	f340 8081 	ble.w	8005b40 <_dtoa_r+0x8c8>
 8005a3e:	f04f 0800 	mov.w	r8, #0
 8005a42:	6933      	ldr	r3, [r6, #16]
 8005a44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a48:	6918      	ldr	r0, [r3, #16]
 8005a4a:	f000 fac9 	bl	8005fe0 <__hi0bits>
 8005a4e:	f1c0 0020 	rsb	r0, r0, #32
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	4418      	add	r0, r3
 8005a56:	f010 001f 	ands.w	r0, r0, #31
 8005a5a:	f000 8092 	beq.w	8005b82 <_dtoa_r+0x90a>
 8005a5e:	f1c0 0320 	rsb	r3, r0, #32
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	f340 808a 	ble.w	8005b7c <_dtoa_r+0x904>
 8005a68:	f1c0 001c 	rsb	r0, r0, #28
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	4403      	add	r3, r0
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	9b05      	ldr	r3, [sp, #20]
 8005a74:	4403      	add	r3, r0
 8005a76:	4405      	add	r5, r0
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	9b04      	ldr	r3, [sp, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dd07      	ble.n	8005a90 <_dtoa_r+0x818>
 8005a80:	ee18 1a10 	vmov	r1, s16
 8005a84:	461a      	mov	r2, r3
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fc14 	bl	80062b4 <__lshift>
 8005a8c:	ee08 0a10 	vmov	s16, r0
 8005a90:	9b05      	ldr	r3, [sp, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dd05      	ble.n	8005aa2 <_dtoa_r+0x82a>
 8005a96:	4631      	mov	r1, r6
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fc0a 	bl	80062b4 <__lshift>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d06e      	beq.n	8005b86 <_dtoa_r+0x90e>
 8005aa8:	ee18 0a10 	vmov	r0, s16
 8005aac:	4631      	mov	r1, r6
 8005aae:	f000 fc71 	bl	8006394 <__mcmp>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	da67      	bge.n	8005b86 <_dtoa_r+0x90e>
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	ee18 1a10 	vmov	r1, s16
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fa45 	bl	8005f54 <__multadd>
 8005aca:	9b08      	ldr	r3, [sp, #32]
 8005acc:	ee08 0a10 	vmov	s16, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 81b1 	beq.w	8005e38 <_dtoa_r+0xbc0>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4639      	mov	r1, r7
 8005ada:	220a      	movs	r2, #10
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fa39 	bl	8005f54 <__multadd>
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	f300 808e 	bgt.w	8005c08 <_dtoa_r+0x990>
 8005aec:	9b06      	ldr	r3, [sp, #24]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	dc51      	bgt.n	8005b96 <_dtoa_r+0x91e>
 8005af2:	e089      	b.n	8005c08 <_dtoa_r+0x990>
 8005af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005afa:	e74b      	b.n	8005994 <_dtoa_r+0x71c>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	1e5e      	subs	r6, r3, #1
 8005b00:	9b07      	ldr	r3, [sp, #28]
 8005b02:	42b3      	cmp	r3, r6
 8005b04:	bfbf      	itttt	lt
 8005b06:	9b07      	ldrlt	r3, [sp, #28]
 8005b08:	9607      	strlt	r6, [sp, #28]
 8005b0a:	1af2      	sublt	r2, r6, r3
 8005b0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b0e:	bfb6      	itet	lt
 8005b10:	189b      	addlt	r3, r3, r2
 8005b12:	1b9e      	subge	r6, r3, r6
 8005b14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	bfb8      	it	lt
 8005b1a:	2600      	movlt	r6, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bfb7      	itett	lt
 8005b20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b28:	1a9d      	sublt	r5, r3, r2
 8005b2a:	2300      	movlt	r3, #0
 8005b2c:	e734      	b.n	8005998 <_dtoa_r+0x720>
 8005b2e:	9e07      	ldr	r6, [sp, #28]
 8005b30:	9d04      	ldr	r5, [sp, #16]
 8005b32:	9f08      	ldr	r7, [sp, #32]
 8005b34:	e73b      	b.n	80059ae <_dtoa_r+0x736>
 8005b36:	9a07      	ldr	r2, [sp, #28]
 8005b38:	e767      	b.n	8005a0a <_dtoa_r+0x792>
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	dc18      	bgt.n	8005b72 <_dtoa_r+0x8fa>
 8005b40:	f1ba 0f00 	cmp.w	sl, #0
 8005b44:	d115      	bne.n	8005b72 <_dtoa_r+0x8fa>
 8005b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b4a:	b993      	cbnz	r3, 8005b72 <_dtoa_r+0x8fa>
 8005b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b50:	0d1b      	lsrs	r3, r3, #20
 8005b52:	051b      	lsls	r3, r3, #20
 8005b54:	b183      	cbz	r3, 8005b78 <_dtoa_r+0x900>
 8005b56:	9b04      	ldr	r3, [sp, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	9304      	str	r3, [sp, #16]
 8005b5c:	9b05      	ldr	r3, [sp, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	9305      	str	r3, [sp, #20]
 8005b62:	f04f 0801 	mov.w	r8, #1
 8005b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f47f af6a 	bne.w	8005a42 <_dtoa_r+0x7ca>
 8005b6e:	2001      	movs	r0, #1
 8005b70:	e76f      	b.n	8005a52 <_dtoa_r+0x7da>
 8005b72:	f04f 0800 	mov.w	r8, #0
 8005b76:	e7f6      	b.n	8005b66 <_dtoa_r+0x8ee>
 8005b78:	4698      	mov	r8, r3
 8005b7a:	e7f4      	b.n	8005b66 <_dtoa_r+0x8ee>
 8005b7c:	f43f af7d 	beq.w	8005a7a <_dtoa_r+0x802>
 8005b80:	4618      	mov	r0, r3
 8005b82:	301c      	adds	r0, #28
 8005b84:	e772      	b.n	8005a6c <_dtoa_r+0x7f4>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dc37      	bgt.n	8005bfc <_dtoa_r+0x984>
 8005b8c:	9b06      	ldr	r3, [sp, #24]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	dd34      	ble.n	8005bfc <_dtoa_r+0x984>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	9302      	str	r3, [sp, #8]
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	b96b      	cbnz	r3, 8005bb6 <_dtoa_r+0x93e>
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	2205      	movs	r2, #5
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 f9d8 	bl	8005f54 <__multadd>
 8005ba4:	4601      	mov	r1, r0
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	ee18 0a10 	vmov	r0, s16
 8005bac:	f000 fbf2 	bl	8006394 <__mcmp>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f73f adbb 	bgt.w	800572c <_dtoa_r+0x4b4>
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	9d01      	ldr	r5, [sp, #4]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f9a3 	bl	8005f10 <_Bfree>
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	f43f aea4 	beq.w	8005918 <_dtoa_r+0x6a0>
 8005bd0:	f1b8 0f00 	cmp.w	r8, #0
 8005bd4:	d005      	beq.n	8005be2 <_dtoa_r+0x96a>
 8005bd6:	45b8      	cmp	r8, r7
 8005bd8:	d003      	beq.n	8005be2 <_dtoa_r+0x96a>
 8005bda:	4641      	mov	r1, r8
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 f997 	bl	8005f10 <_Bfree>
 8005be2:	4639      	mov	r1, r7
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 f993 	bl	8005f10 <_Bfree>
 8005bea:	e695      	b.n	8005918 <_dtoa_r+0x6a0>
 8005bec:	2600      	movs	r6, #0
 8005bee:	4637      	mov	r7, r6
 8005bf0:	e7e1      	b.n	8005bb6 <_dtoa_r+0x93e>
 8005bf2:	9700      	str	r7, [sp, #0]
 8005bf4:	4637      	mov	r7, r6
 8005bf6:	e599      	b.n	800572c <_dtoa_r+0x4b4>
 8005bf8:	40240000 	.word	0x40240000
 8005bfc:	9b08      	ldr	r3, [sp, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80ca 	beq.w	8005d98 <_dtoa_r+0xb20>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	9302      	str	r3, [sp, #8]
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	dd05      	ble.n	8005c18 <_dtoa_r+0x9a0>
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	462a      	mov	r2, r5
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 fb4f 	bl	80062b4 <__lshift>
 8005c16:	4607      	mov	r7, r0
 8005c18:	f1b8 0f00 	cmp.w	r8, #0
 8005c1c:	d05b      	beq.n	8005cd6 <_dtoa_r+0xa5e>
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 f935 	bl	8005e90 <_Balloc>
 8005c26:	4605      	mov	r5, r0
 8005c28:	b928      	cbnz	r0, 8005c36 <_dtoa_r+0x9be>
 8005c2a:	4b87      	ldr	r3, [pc, #540]	; (8005e48 <_dtoa_r+0xbd0>)
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c32:	f7ff bb3b 	b.w	80052ac <_dtoa_r+0x34>
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	3202      	adds	r2, #2
 8005c3a:	0092      	lsls	r2, r2, #2
 8005c3c:	f107 010c 	add.w	r1, r7, #12
 8005c40:	300c      	adds	r0, #12
 8005c42:	f000 f90b 	bl	8005e5c <memcpy>
 8005c46:	2201      	movs	r2, #1
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fb32 	bl	80062b4 <__lshift>
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	f103 0901 	add.w	r9, r3, #1
 8005c56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	9305      	str	r3, [sp, #20]
 8005c5e:	f00a 0301 	and.w	r3, sl, #1
 8005c62:	46b8      	mov	r8, r7
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	4607      	mov	r7, r0
 8005c68:	4631      	mov	r1, r6
 8005c6a:	ee18 0a10 	vmov	r0, s16
 8005c6e:	f7ff fa75 	bl	800515c <quorem>
 8005c72:	4641      	mov	r1, r8
 8005c74:	9002      	str	r0, [sp, #8]
 8005c76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c7a:	ee18 0a10 	vmov	r0, s16
 8005c7e:	f000 fb89 	bl	8006394 <__mcmp>
 8005c82:	463a      	mov	r2, r7
 8005c84:	9003      	str	r0, [sp, #12]
 8005c86:	4631      	mov	r1, r6
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fb9f 	bl	80063cc <__mdiff>
 8005c8e:	68c2      	ldr	r2, [r0, #12]
 8005c90:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c94:	4605      	mov	r5, r0
 8005c96:	bb02      	cbnz	r2, 8005cda <_dtoa_r+0xa62>
 8005c98:	4601      	mov	r1, r0
 8005c9a:	ee18 0a10 	vmov	r0, s16
 8005c9e:	f000 fb79 	bl	8006394 <__mcmp>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	9207      	str	r2, [sp, #28]
 8005caa:	f000 f931 	bl	8005f10 <_Bfree>
 8005cae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005cb2:	ea43 0102 	orr.w	r1, r3, r2
 8005cb6:	9b04      	ldr	r3, [sp, #16]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	464d      	mov	r5, r9
 8005cbc:	d10f      	bne.n	8005cde <_dtoa_r+0xa66>
 8005cbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cc2:	d02a      	beq.n	8005d1a <_dtoa_r+0xaa2>
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	dd02      	ble.n	8005cd0 <_dtoa_r+0xa58>
 8005cca:	9b02      	ldr	r3, [sp, #8]
 8005ccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cd0:	f88b a000 	strb.w	sl, [fp]
 8005cd4:	e775      	b.n	8005bc2 <_dtoa_r+0x94a>
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	e7ba      	b.n	8005c50 <_dtoa_r+0x9d8>
 8005cda:	2201      	movs	r2, #1
 8005cdc:	e7e2      	b.n	8005ca4 <_dtoa_r+0xa2c>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	db04      	blt.n	8005cee <_dtoa_r+0xa76>
 8005ce4:	9906      	ldr	r1, [sp, #24]
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	9904      	ldr	r1, [sp, #16]
 8005cea:	430b      	orrs	r3, r1
 8005cec:	d122      	bne.n	8005d34 <_dtoa_r+0xabc>
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	ddee      	ble.n	8005cd0 <_dtoa_r+0xa58>
 8005cf2:	ee18 1a10 	vmov	r1, s16
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fadb 	bl	80062b4 <__lshift>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	ee08 0a10 	vmov	s16, r0
 8005d04:	f000 fb46 	bl	8006394 <__mcmp>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	dc03      	bgt.n	8005d14 <_dtoa_r+0xa9c>
 8005d0c:	d1e0      	bne.n	8005cd0 <_dtoa_r+0xa58>
 8005d0e:	f01a 0f01 	tst.w	sl, #1
 8005d12:	d0dd      	beq.n	8005cd0 <_dtoa_r+0xa58>
 8005d14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d18:	d1d7      	bne.n	8005cca <_dtoa_r+0xa52>
 8005d1a:	2339      	movs	r3, #57	; 0x39
 8005d1c:	f88b 3000 	strb.w	r3, [fp]
 8005d20:	462b      	mov	r3, r5
 8005d22:	461d      	mov	r5, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d2a:	2a39      	cmp	r2, #57	; 0x39
 8005d2c:	d071      	beq.n	8005e12 <_dtoa_r+0xb9a>
 8005d2e:	3201      	adds	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	e746      	b.n	8005bc2 <_dtoa_r+0x94a>
 8005d34:	2a00      	cmp	r2, #0
 8005d36:	dd07      	ble.n	8005d48 <_dtoa_r+0xad0>
 8005d38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d3c:	d0ed      	beq.n	8005d1a <_dtoa_r+0xaa2>
 8005d3e:	f10a 0301 	add.w	r3, sl, #1
 8005d42:	f88b 3000 	strb.w	r3, [fp]
 8005d46:	e73c      	b.n	8005bc2 <_dtoa_r+0x94a>
 8005d48:	9b05      	ldr	r3, [sp, #20]
 8005d4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d4e:	4599      	cmp	r9, r3
 8005d50:	d047      	beq.n	8005de2 <_dtoa_r+0xb6a>
 8005d52:	ee18 1a10 	vmov	r1, s16
 8005d56:	2300      	movs	r3, #0
 8005d58:	220a      	movs	r2, #10
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 f8fa 	bl	8005f54 <__multadd>
 8005d60:	45b8      	cmp	r8, r7
 8005d62:	ee08 0a10 	vmov	s16, r0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	f04f 020a 	mov.w	r2, #10
 8005d6e:	4641      	mov	r1, r8
 8005d70:	4620      	mov	r0, r4
 8005d72:	d106      	bne.n	8005d82 <_dtoa_r+0xb0a>
 8005d74:	f000 f8ee 	bl	8005f54 <__multadd>
 8005d78:	4680      	mov	r8, r0
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	f109 0901 	add.w	r9, r9, #1
 8005d80:	e772      	b.n	8005c68 <_dtoa_r+0x9f0>
 8005d82:	f000 f8e7 	bl	8005f54 <__multadd>
 8005d86:	4639      	mov	r1, r7
 8005d88:	4680      	mov	r8, r0
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 f8e0 	bl	8005f54 <__multadd>
 8005d94:	4607      	mov	r7, r0
 8005d96:	e7f1      	b.n	8005d7c <_dtoa_r+0xb04>
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	9d01      	ldr	r5, [sp, #4]
 8005d9e:	ee18 0a10 	vmov	r0, s16
 8005da2:	4631      	mov	r1, r6
 8005da4:	f7ff f9da 	bl	800515c <quorem>
 8005da8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dac:	9b01      	ldr	r3, [sp, #4]
 8005dae:	f805 ab01 	strb.w	sl, [r5], #1
 8005db2:	1aea      	subs	r2, r5, r3
 8005db4:	9b02      	ldr	r3, [sp, #8]
 8005db6:	4293      	cmp	r3, r2
 8005db8:	dd09      	ble.n	8005dce <_dtoa_r+0xb56>
 8005dba:	ee18 1a10 	vmov	r1, s16
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f8c6 	bl	8005f54 <__multadd>
 8005dc8:	ee08 0a10 	vmov	s16, r0
 8005dcc:	e7e7      	b.n	8005d9e <_dtoa_r+0xb26>
 8005dce:	9b02      	ldr	r3, [sp, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfc8      	it	gt
 8005dd4:	461d      	movgt	r5, r3
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	bfd8      	it	le
 8005dda:	2501      	movle	r5, #1
 8005ddc:	441d      	add	r5, r3
 8005dde:	f04f 0800 	mov.w	r8, #0
 8005de2:	ee18 1a10 	vmov	r1, s16
 8005de6:	2201      	movs	r2, #1
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fa63 	bl	80062b4 <__lshift>
 8005dee:	4631      	mov	r1, r6
 8005df0:	ee08 0a10 	vmov	s16, r0
 8005df4:	f000 face 	bl	8006394 <__mcmp>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	dc91      	bgt.n	8005d20 <_dtoa_r+0xaa8>
 8005dfc:	d102      	bne.n	8005e04 <_dtoa_r+0xb8c>
 8005dfe:	f01a 0f01 	tst.w	sl, #1
 8005e02:	d18d      	bne.n	8005d20 <_dtoa_r+0xaa8>
 8005e04:	462b      	mov	r3, r5
 8005e06:	461d      	mov	r5, r3
 8005e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e0c:	2a30      	cmp	r2, #48	; 0x30
 8005e0e:	d0fa      	beq.n	8005e06 <_dtoa_r+0xb8e>
 8005e10:	e6d7      	b.n	8005bc2 <_dtoa_r+0x94a>
 8005e12:	9a01      	ldr	r2, [sp, #4]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d184      	bne.n	8005d22 <_dtoa_r+0xaaa>
 8005e18:	9b00      	ldr	r3, [sp, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	2331      	movs	r3, #49	; 0x31
 8005e20:	7013      	strb	r3, [r2, #0]
 8005e22:	e6ce      	b.n	8005bc2 <_dtoa_r+0x94a>
 8005e24:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <_dtoa_r+0xbd4>)
 8005e26:	f7ff ba95 	b.w	8005354 <_dtoa_r+0xdc>
 8005e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f aa6e 	bne.w	800530e <_dtoa_r+0x96>
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <_dtoa_r+0xbd8>)
 8005e34:	f7ff ba8e 	b.w	8005354 <_dtoa_r+0xdc>
 8005e38:	9b02      	ldr	r3, [sp, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	dcae      	bgt.n	8005d9c <_dtoa_r+0xb24>
 8005e3e:	9b06      	ldr	r3, [sp, #24]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	f73f aea8 	bgt.w	8005b96 <_dtoa_r+0x91e>
 8005e46:	e7a9      	b.n	8005d9c <_dtoa_r+0xb24>
 8005e48:	08007553 	.word	0x08007553
 8005e4c:	080074b0 	.word	0x080074b0
 8005e50:	080074d4 	.word	0x080074d4

08005e54 <_localeconv_r>:
 8005e54:	4800      	ldr	r0, [pc, #0]	; (8005e58 <_localeconv_r+0x4>)
 8005e56:	4770      	bx	lr
 8005e58:	20000174 	.word	0x20000174

08005e5c <memcpy>:
 8005e5c:	440a      	add	r2, r1
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e64:	d100      	bne.n	8005e68 <memcpy+0xc>
 8005e66:	4770      	bx	lr
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d1f9      	bne.n	8005e6a <memcpy+0xe>
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <__malloc_lock>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__malloc_lock+0x8>)
 8005e7a:	f000 bd30 	b.w	80068de <__retarget_lock_acquire_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20000358 	.word	0x20000358

08005e84 <__malloc_unlock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__malloc_unlock+0x8>)
 8005e86:	f000 bd2b 	b.w	80068e0 <__retarget_lock_release_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000358 	.word	0x20000358

08005e90 <_Balloc>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e94:	4604      	mov	r4, r0
 8005e96:	460d      	mov	r5, r1
 8005e98:	b976      	cbnz	r6, 8005eb8 <_Balloc+0x28>
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	f7fe fbd4 	bl	8004648 <malloc>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ea4:	b920      	cbnz	r0, 8005eb0 <_Balloc+0x20>
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <_Balloc+0x78>)
 8005ea8:	4818      	ldr	r0, [pc, #96]	; (8005f0c <_Balloc+0x7c>)
 8005eaa:	2166      	movs	r1, #102	; 0x66
 8005eac:	f000 fce6 	bl	800687c <__assert_func>
 8005eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005eb4:	6006      	str	r6, [r0, #0]
 8005eb6:	60c6      	str	r6, [r0, #12]
 8005eb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005eba:	68f3      	ldr	r3, [r6, #12]
 8005ebc:	b183      	cbz	r3, 8005ee0 <_Balloc+0x50>
 8005ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ec6:	b9b8      	cbnz	r0, 8005ef8 <_Balloc+0x68>
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f605 	lsl.w	r6, r1, r5
 8005ece:	1d72      	adds	r2, r6, #5
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 fb60 	bl	8006598 <_calloc_r>
 8005ed8:	b160      	cbz	r0, 8005ef4 <_Balloc+0x64>
 8005eda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ede:	e00e      	b.n	8005efe <_Balloc+0x6e>
 8005ee0:	2221      	movs	r2, #33	; 0x21
 8005ee2:	2104      	movs	r1, #4
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fb57 	bl	8006598 <_calloc_r>
 8005eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eec:	60f0      	str	r0, [r6, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e4      	bne.n	8005ebe <_Balloc+0x2e>
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	6802      	ldr	r2, [r0, #0]
 8005efa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005efe:	2300      	movs	r3, #0
 8005f00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f04:	e7f7      	b.n	8005ef6 <_Balloc+0x66>
 8005f06:	bf00      	nop
 8005f08:	080074e1 	.word	0x080074e1
 8005f0c:	08007564 	.word	0x08007564

08005f10 <_Bfree>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f14:	4605      	mov	r5, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	b976      	cbnz	r6, 8005f38 <_Bfree+0x28>
 8005f1a:	2010      	movs	r0, #16
 8005f1c:	f7fe fb94 	bl	8004648 <malloc>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6268      	str	r0, [r5, #36]	; 0x24
 8005f24:	b920      	cbnz	r0, 8005f30 <_Bfree+0x20>
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <_Bfree+0x3c>)
 8005f28:	4809      	ldr	r0, [pc, #36]	; (8005f50 <_Bfree+0x40>)
 8005f2a:	218a      	movs	r1, #138	; 0x8a
 8005f2c:	f000 fca6 	bl	800687c <__assert_func>
 8005f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f34:	6006      	str	r6, [r0, #0]
 8005f36:	60c6      	str	r6, [r0, #12]
 8005f38:	b13c      	cbz	r4, 8005f4a <_Bfree+0x3a>
 8005f3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f3c:	6862      	ldr	r2, [r4, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f44:	6021      	str	r1, [r4, #0]
 8005f46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f4a:	bd70      	pop	{r4, r5, r6, pc}
 8005f4c:	080074e1 	.word	0x080074e1
 8005f50:	08007564 	.word	0x08007564

08005f54 <__multadd>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	690d      	ldr	r5, [r1, #16]
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	461e      	mov	r6, r3
 8005f60:	f101 0c14 	add.w	ip, r1, #20
 8005f64:	2000      	movs	r0, #0
 8005f66:	f8dc 3000 	ldr.w	r3, [ip]
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f70:	0c1e      	lsrs	r6, r3, #16
 8005f72:	0c0b      	lsrs	r3, r1, #16
 8005f74:	fb02 3306 	mla	r3, r2, r6, r3
 8005f78:	b289      	uxth	r1, r1
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f80:	4285      	cmp	r5, r0
 8005f82:	f84c 1b04 	str.w	r1, [ip], #4
 8005f86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f8a:	dcec      	bgt.n	8005f66 <__multadd+0x12>
 8005f8c:	b30e      	cbz	r6, 8005fd2 <__multadd+0x7e>
 8005f8e:	68a3      	ldr	r3, [r4, #8]
 8005f90:	42ab      	cmp	r3, r5
 8005f92:	dc19      	bgt.n	8005fc8 <__multadd+0x74>
 8005f94:	6861      	ldr	r1, [r4, #4]
 8005f96:	4638      	mov	r0, r7
 8005f98:	3101      	adds	r1, #1
 8005f9a:	f7ff ff79 	bl	8005e90 <_Balloc>
 8005f9e:	4680      	mov	r8, r0
 8005fa0:	b928      	cbnz	r0, 8005fae <__multadd+0x5a>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <__multadd+0x84>)
 8005fa6:	480d      	ldr	r0, [pc, #52]	; (8005fdc <__multadd+0x88>)
 8005fa8:	21b5      	movs	r1, #181	; 0xb5
 8005faa:	f000 fc67 	bl	800687c <__assert_func>
 8005fae:	6922      	ldr	r2, [r4, #16]
 8005fb0:	3202      	adds	r2, #2
 8005fb2:	f104 010c 	add.w	r1, r4, #12
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	300c      	adds	r0, #12
 8005fba:	f7ff ff4f 	bl	8005e5c <memcpy>
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f7ff ffa5 	bl	8005f10 <_Bfree>
 8005fc6:	4644      	mov	r4, r8
 8005fc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fcc:	3501      	adds	r5, #1
 8005fce:	615e      	str	r6, [r3, #20]
 8005fd0:	6125      	str	r5, [r4, #16]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd8:	08007553 	.word	0x08007553
 8005fdc:	08007564 	.word	0x08007564

08005fe0 <__hi0bits>:
 8005fe0:	0c03      	lsrs	r3, r0, #16
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	b9d3      	cbnz	r3, 800601c <__hi0bits+0x3c>
 8005fe6:	0400      	lsls	r0, r0, #16
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fee:	bf04      	itt	eq
 8005ff0:	0200      	lsleq	r0, r0, #8
 8005ff2:	3308      	addeq	r3, #8
 8005ff4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ff8:	bf04      	itt	eq
 8005ffa:	0100      	lsleq	r0, r0, #4
 8005ffc:	3304      	addeq	r3, #4
 8005ffe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006002:	bf04      	itt	eq
 8006004:	0080      	lsleq	r0, r0, #2
 8006006:	3302      	addeq	r3, #2
 8006008:	2800      	cmp	r0, #0
 800600a:	db05      	blt.n	8006018 <__hi0bits+0x38>
 800600c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006010:	f103 0301 	add.w	r3, r3, #1
 8006014:	bf08      	it	eq
 8006016:	2320      	moveq	r3, #32
 8006018:	4618      	mov	r0, r3
 800601a:	4770      	bx	lr
 800601c:	2300      	movs	r3, #0
 800601e:	e7e4      	b.n	8005fea <__hi0bits+0xa>

08006020 <__lo0bits>:
 8006020:	6803      	ldr	r3, [r0, #0]
 8006022:	f013 0207 	ands.w	r2, r3, #7
 8006026:	4601      	mov	r1, r0
 8006028:	d00b      	beq.n	8006042 <__lo0bits+0x22>
 800602a:	07da      	lsls	r2, r3, #31
 800602c:	d423      	bmi.n	8006076 <__lo0bits+0x56>
 800602e:	0798      	lsls	r0, r3, #30
 8006030:	bf49      	itett	mi
 8006032:	085b      	lsrmi	r3, r3, #1
 8006034:	089b      	lsrpl	r3, r3, #2
 8006036:	2001      	movmi	r0, #1
 8006038:	600b      	strmi	r3, [r1, #0]
 800603a:	bf5c      	itt	pl
 800603c:	600b      	strpl	r3, [r1, #0]
 800603e:	2002      	movpl	r0, #2
 8006040:	4770      	bx	lr
 8006042:	b298      	uxth	r0, r3
 8006044:	b9a8      	cbnz	r0, 8006072 <__lo0bits+0x52>
 8006046:	0c1b      	lsrs	r3, r3, #16
 8006048:	2010      	movs	r0, #16
 800604a:	b2da      	uxtb	r2, r3
 800604c:	b90a      	cbnz	r2, 8006052 <__lo0bits+0x32>
 800604e:	3008      	adds	r0, #8
 8006050:	0a1b      	lsrs	r3, r3, #8
 8006052:	071a      	lsls	r2, r3, #28
 8006054:	bf04      	itt	eq
 8006056:	091b      	lsreq	r3, r3, #4
 8006058:	3004      	addeq	r0, #4
 800605a:	079a      	lsls	r2, r3, #30
 800605c:	bf04      	itt	eq
 800605e:	089b      	lsreq	r3, r3, #2
 8006060:	3002      	addeq	r0, #2
 8006062:	07da      	lsls	r2, r3, #31
 8006064:	d403      	bmi.n	800606e <__lo0bits+0x4e>
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f100 0001 	add.w	r0, r0, #1
 800606c:	d005      	beq.n	800607a <__lo0bits+0x5a>
 800606e:	600b      	str	r3, [r1, #0]
 8006070:	4770      	bx	lr
 8006072:	4610      	mov	r0, r2
 8006074:	e7e9      	b.n	800604a <__lo0bits+0x2a>
 8006076:	2000      	movs	r0, #0
 8006078:	4770      	bx	lr
 800607a:	2020      	movs	r0, #32
 800607c:	4770      	bx	lr
	...

08006080 <__i2b>:
 8006080:	b510      	push	{r4, lr}
 8006082:	460c      	mov	r4, r1
 8006084:	2101      	movs	r1, #1
 8006086:	f7ff ff03 	bl	8005e90 <_Balloc>
 800608a:	4602      	mov	r2, r0
 800608c:	b928      	cbnz	r0, 800609a <__i2b+0x1a>
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <__i2b+0x24>)
 8006090:	4805      	ldr	r0, [pc, #20]	; (80060a8 <__i2b+0x28>)
 8006092:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006096:	f000 fbf1 	bl	800687c <__assert_func>
 800609a:	2301      	movs	r3, #1
 800609c:	6144      	str	r4, [r0, #20]
 800609e:	6103      	str	r3, [r0, #16]
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	bf00      	nop
 80060a4:	08007553 	.word	0x08007553
 80060a8:	08007564 	.word	0x08007564

080060ac <__multiply>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	4691      	mov	r9, r2
 80060b2:	690a      	ldr	r2, [r1, #16]
 80060b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bfb8      	it	lt
 80060bc:	460b      	movlt	r3, r1
 80060be:	460c      	mov	r4, r1
 80060c0:	bfbc      	itt	lt
 80060c2:	464c      	movlt	r4, r9
 80060c4:	4699      	movlt	r9, r3
 80060c6:	6927      	ldr	r7, [r4, #16]
 80060c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060cc:	68a3      	ldr	r3, [r4, #8]
 80060ce:	6861      	ldr	r1, [r4, #4]
 80060d0:	eb07 060a 	add.w	r6, r7, sl
 80060d4:	42b3      	cmp	r3, r6
 80060d6:	b085      	sub	sp, #20
 80060d8:	bfb8      	it	lt
 80060da:	3101      	addlt	r1, #1
 80060dc:	f7ff fed8 	bl	8005e90 <_Balloc>
 80060e0:	b930      	cbnz	r0, 80060f0 <__multiply+0x44>
 80060e2:	4602      	mov	r2, r0
 80060e4:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <__multiply+0x14c>)
 80060e6:	4845      	ldr	r0, [pc, #276]	; (80061fc <__multiply+0x150>)
 80060e8:	f240 115d 	movw	r1, #349	; 0x15d
 80060ec:	f000 fbc6 	bl	800687c <__assert_func>
 80060f0:	f100 0514 	add.w	r5, r0, #20
 80060f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060f8:	462b      	mov	r3, r5
 80060fa:	2200      	movs	r2, #0
 80060fc:	4543      	cmp	r3, r8
 80060fe:	d321      	bcc.n	8006144 <__multiply+0x98>
 8006100:	f104 0314 	add.w	r3, r4, #20
 8006104:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006108:	f109 0314 	add.w	r3, r9, #20
 800610c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	1b3a      	subs	r2, r7, r4
 8006114:	3a15      	subs	r2, #21
 8006116:	f022 0203 	bic.w	r2, r2, #3
 800611a:	3204      	adds	r2, #4
 800611c:	f104 0115 	add.w	r1, r4, #21
 8006120:	428f      	cmp	r7, r1
 8006122:	bf38      	it	cc
 8006124:	2204      	movcc	r2, #4
 8006126:	9201      	str	r2, [sp, #4]
 8006128:	9a02      	ldr	r2, [sp, #8]
 800612a:	9303      	str	r3, [sp, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d80c      	bhi.n	800614a <__multiply+0x9e>
 8006130:	2e00      	cmp	r6, #0
 8006132:	dd03      	ble.n	800613c <__multiply+0x90>
 8006134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006138:	2b00      	cmp	r3, #0
 800613a:	d05a      	beq.n	80061f2 <__multiply+0x146>
 800613c:	6106      	str	r6, [r0, #16]
 800613e:	b005      	add	sp, #20
 8006140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006144:	f843 2b04 	str.w	r2, [r3], #4
 8006148:	e7d8      	b.n	80060fc <__multiply+0x50>
 800614a:	f8b3 a000 	ldrh.w	sl, [r3]
 800614e:	f1ba 0f00 	cmp.w	sl, #0
 8006152:	d024      	beq.n	800619e <__multiply+0xf2>
 8006154:	f104 0e14 	add.w	lr, r4, #20
 8006158:	46a9      	mov	r9, r5
 800615a:	f04f 0c00 	mov.w	ip, #0
 800615e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006162:	f8d9 1000 	ldr.w	r1, [r9]
 8006166:	fa1f fb82 	uxth.w	fp, r2
 800616a:	b289      	uxth	r1, r1
 800616c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006170:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006174:	f8d9 2000 	ldr.w	r2, [r9]
 8006178:	4461      	add	r1, ip
 800617a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800617e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006186:	b289      	uxth	r1, r1
 8006188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800618c:	4577      	cmp	r7, lr
 800618e:	f849 1b04 	str.w	r1, [r9], #4
 8006192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006196:	d8e2      	bhi.n	800615e <__multiply+0xb2>
 8006198:	9a01      	ldr	r2, [sp, #4]
 800619a:	f845 c002 	str.w	ip, [r5, r2]
 800619e:	9a03      	ldr	r2, [sp, #12]
 80061a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80061a4:	3304      	adds	r3, #4
 80061a6:	f1b9 0f00 	cmp.w	r9, #0
 80061aa:	d020      	beq.n	80061ee <__multiply+0x142>
 80061ac:	6829      	ldr	r1, [r5, #0]
 80061ae:	f104 0c14 	add.w	ip, r4, #20
 80061b2:	46ae      	mov	lr, r5
 80061b4:	f04f 0a00 	mov.w	sl, #0
 80061b8:	f8bc b000 	ldrh.w	fp, [ip]
 80061bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061c0:	fb09 220b 	mla	r2, r9, fp, r2
 80061c4:	4492      	add	sl, r2
 80061c6:	b289      	uxth	r1, r1
 80061c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061cc:	f84e 1b04 	str.w	r1, [lr], #4
 80061d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061d4:	f8be 1000 	ldrh.w	r1, [lr]
 80061d8:	0c12      	lsrs	r2, r2, #16
 80061da:	fb09 1102 	mla	r1, r9, r2, r1
 80061de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061e2:	4567      	cmp	r7, ip
 80061e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061e8:	d8e6      	bhi.n	80061b8 <__multiply+0x10c>
 80061ea:	9a01      	ldr	r2, [sp, #4]
 80061ec:	50a9      	str	r1, [r5, r2]
 80061ee:	3504      	adds	r5, #4
 80061f0:	e79a      	b.n	8006128 <__multiply+0x7c>
 80061f2:	3e01      	subs	r6, #1
 80061f4:	e79c      	b.n	8006130 <__multiply+0x84>
 80061f6:	bf00      	nop
 80061f8:	08007553 	.word	0x08007553
 80061fc:	08007564 	.word	0x08007564

08006200 <__pow5mult>:
 8006200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006204:	4615      	mov	r5, r2
 8006206:	f012 0203 	ands.w	r2, r2, #3
 800620a:	4606      	mov	r6, r0
 800620c:	460f      	mov	r7, r1
 800620e:	d007      	beq.n	8006220 <__pow5mult+0x20>
 8006210:	4c25      	ldr	r4, [pc, #148]	; (80062a8 <__pow5mult+0xa8>)
 8006212:	3a01      	subs	r2, #1
 8006214:	2300      	movs	r3, #0
 8006216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800621a:	f7ff fe9b 	bl	8005f54 <__multadd>
 800621e:	4607      	mov	r7, r0
 8006220:	10ad      	asrs	r5, r5, #2
 8006222:	d03d      	beq.n	80062a0 <__pow5mult+0xa0>
 8006224:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006226:	b97c      	cbnz	r4, 8006248 <__pow5mult+0x48>
 8006228:	2010      	movs	r0, #16
 800622a:	f7fe fa0d 	bl	8004648 <malloc>
 800622e:	4602      	mov	r2, r0
 8006230:	6270      	str	r0, [r6, #36]	; 0x24
 8006232:	b928      	cbnz	r0, 8006240 <__pow5mult+0x40>
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <__pow5mult+0xac>)
 8006236:	481e      	ldr	r0, [pc, #120]	; (80062b0 <__pow5mult+0xb0>)
 8006238:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800623c:	f000 fb1e 	bl	800687c <__assert_func>
 8006240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006244:	6004      	str	r4, [r0, #0]
 8006246:	60c4      	str	r4, [r0, #12]
 8006248:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800624c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006250:	b94c      	cbnz	r4, 8006266 <__pow5mult+0x66>
 8006252:	f240 2171 	movw	r1, #625	; 0x271
 8006256:	4630      	mov	r0, r6
 8006258:	f7ff ff12 	bl	8006080 <__i2b>
 800625c:	2300      	movs	r3, #0
 800625e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006262:	4604      	mov	r4, r0
 8006264:	6003      	str	r3, [r0, #0]
 8006266:	f04f 0900 	mov.w	r9, #0
 800626a:	07eb      	lsls	r3, r5, #31
 800626c:	d50a      	bpl.n	8006284 <__pow5mult+0x84>
 800626e:	4639      	mov	r1, r7
 8006270:	4622      	mov	r2, r4
 8006272:	4630      	mov	r0, r6
 8006274:	f7ff ff1a 	bl	80060ac <__multiply>
 8006278:	4639      	mov	r1, r7
 800627a:	4680      	mov	r8, r0
 800627c:	4630      	mov	r0, r6
 800627e:	f7ff fe47 	bl	8005f10 <_Bfree>
 8006282:	4647      	mov	r7, r8
 8006284:	106d      	asrs	r5, r5, #1
 8006286:	d00b      	beq.n	80062a0 <__pow5mult+0xa0>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	b938      	cbnz	r0, 800629c <__pow5mult+0x9c>
 800628c:	4622      	mov	r2, r4
 800628e:	4621      	mov	r1, r4
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff ff0b 	bl	80060ac <__multiply>
 8006296:	6020      	str	r0, [r4, #0]
 8006298:	f8c0 9000 	str.w	r9, [r0]
 800629c:	4604      	mov	r4, r0
 800629e:	e7e4      	b.n	800626a <__pow5mult+0x6a>
 80062a0:	4638      	mov	r0, r7
 80062a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a6:	bf00      	nop
 80062a8:	080076b0 	.word	0x080076b0
 80062ac:	080074e1 	.word	0x080074e1
 80062b0:	08007564 	.word	0x08007564

080062b4 <__lshift>:
 80062b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	6849      	ldr	r1, [r1, #4]
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	4607      	mov	r7, r0
 80062c6:	4691      	mov	r9, r2
 80062c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062cc:	f108 0601 	add.w	r6, r8, #1
 80062d0:	42b3      	cmp	r3, r6
 80062d2:	db0b      	blt.n	80062ec <__lshift+0x38>
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff fddb 	bl	8005e90 <_Balloc>
 80062da:	4605      	mov	r5, r0
 80062dc:	b948      	cbnz	r0, 80062f2 <__lshift+0x3e>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <__lshift+0xd8>)
 80062e2:	482b      	ldr	r0, [pc, #172]	; (8006390 <__lshift+0xdc>)
 80062e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062e8:	f000 fac8 	bl	800687c <__assert_func>
 80062ec:	3101      	adds	r1, #1
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	e7ee      	b.n	80062d0 <__lshift+0x1c>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f100 0114 	add.w	r1, r0, #20
 80062f8:	f100 0210 	add.w	r2, r0, #16
 80062fc:	4618      	mov	r0, r3
 80062fe:	4553      	cmp	r3, sl
 8006300:	db37      	blt.n	8006372 <__lshift+0xbe>
 8006302:	6920      	ldr	r0, [r4, #16]
 8006304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006308:	f104 0314 	add.w	r3, r4, #20
 800630c:	f019 091f 	ands.w	r9, r9, #31
 8006310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006314:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006318:	d02f      	beq.n	800637a <__lshift+0xc6>
 800631a:	f1c9 0e20 	rsb	lr, r9, #32
 800631e:	468a      	mov	sl, r1
 8006320:	f04f 0c00 	mov.w	ip, #0
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	fa02 f209 	lsl.w	r2, r2, r9
 800632a:	ea42 020c 	orr.w	r2, r2, ip
 800632e:	f84a 2b04 	str.w	r2, [sl], #4
 8006332:	f853 2b04 	ldr.w	r2, [r3], #4
 8006336:	4298      	cmp	r0, r3
 8006338:	fa22 fc0e 	lsr.w	ip, r2, lr
 800633c:	d8f2      	bhi.n	8006324 <__lshift+0x70>
 800633e:	1b03      	subs	r3, r0, r4
 8006340:	3b15      	subs	r3, #21
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	3304      	adds	r3, #4
 8006348:	f104 0215 	add.w	r2, r4, #21
 800634c:	4290      	cmp	r0, r2
 800634e:	bf38      	it	cc
 8006350:	2304      	movcc	r3, #4
 8006352:	f841 c003 	str.w	ip, [r1, r3]
 8006356:	f1bc 0f00 	cmp.w	ip, #0
 800635a:	d001      	beq.n	8006360 <__lshift+0xac>
 800635c:	f108 0602 	add.w	r6, r8, #2
 8006360:	3e01      	subs	r6, #1
 8006362:	4638      	mov	r0, r7
 8006364:	612e      	str	r6, [r5, #16]
 8006366:	4621      	mov	r1, r4
 8006368:	f7ff fdd2 	bl	8005f10 <_Bfree>
 800636c:	4628      	mov	r0, r5
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	f842 0f04 	str.w	r0, [r2, #4]!
 8006376:	3301      	adds	r3, #1
 8006378:	e7c1      	b.n	80062fe <__lshift+0x4a>
 800637a:	3904      	subs	r1, #4
 800637c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006380:	f841 2f04 	str.w	r2, [r1, #4]!
 8006384:	4298      	cmp	r0, r3
 8006386:	d8f9      	bhi.n	800637c <__lshift+0xc8>
 8006388:	e7ea      	b.n	8006360 <__lshift+0xac>
 800638a:	bf00      	nop
 800638c:	08007553 	.word	0x08007553
 8006390:	08007564 	.word	0x08007564

08006394 <__mcmp>:
 8006394:	b530      	push	{r4, r5, lr}
 8006396:	6902      	ldr	r2, [r0, #16]
 8006398:	690c      	ldr	r4, [r1, #16]
 800639a:	1b12      	subs	r2, r2, r4
 800639c:	d10e      	bne.n	80063bc <__mcmp+0x28>
 800639e:	f100 0314 	add.w	r3, r0, #20
 80063a2:	3114      	adds	r1, #20
 80063a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80063a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80063ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063b4:	42a5      	cmp	r5, r4
 80063b6:	d003      	beq.n	80063c0 <__mcmp+0x2c>
 80063b8:	d305      	bcc.n	80063c6 <__mcmp+0x32>
 80063ba:	2201      	movs	r2, #1
 80063bc:	4610      	mov	r0, r2
 80063be:	bd30      	pop	{r4, r5, pc}
 80063c0:	4283      	cmp	r3, r0
 80063c2:	d3f3      	bcc.n	80063ac <__mcmp+0x18>
 80063c4:	e7fa      	b.n	80063bc <__mcmp+0x28>
 80063c6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ca:	e7f7      	b.n	80063bc <__mcmp+0x28>

080063cc <__mdiff>:
 80063cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	4606      	mov	r6, r0
 80063d4:	4611      	mov	r1, r2
 80063d6:	4620      	mov	r0, r4
 80063d8:	4690      	mov	r8, r2
 80063da:	f7ff ffdb 	bl	8006394 <__mcmp>
 80063de:	1e05      	subs	r5, r0, #0
 80063e0:	d110      	bne.n	8006404 <__mdiff+0x38>
 80063e2:	4629      	mov	r1, r5
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7ff fd53 	bl	8005e90 <_Balloc>
 80063ea:	b930      	cbnz	r0, 80063fa <__mdiff+0x2e>
 80063ec:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <__mdiff+0x10c>)
 80063ee:	4602      	mov	r2, r0
 80063f0:	f240 2132 	movw	r1, #562	; 0x232
 80063f4:	4839      	ldr	r0, [pc, #228]	; (80064dc <__mdiff+0x110>)
 80063f6:	f000 fa41 	bl	800687c <__assert_func>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	bfa4      	itt	ge
 8006406:	4643      	movge	r3, r8
 8006408:	46a0      	movge	r8, r4
 800640a:	4630      	mov	r0, r6
 800640c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006410:	bfa6      	itte	ge
 8006412:	461c      	movge	r4, r3
 8006414:	2500      	movge	r5, #0
 8006416:	2501      	movlt	r5, #1
 8006418:	f7ff fd3a 	bl	8005e90 <_Balloc>
 800641c:	b920      	cbnz	r0, 8006428 <__mdiff+0x5c>
 800641e:	4b2e      	ldr	r3, [pc, #184]	; (80064d8 <__mdiff+0x10c>)
 8006420:	4602      	mov	r2, r0
 8006422:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006426:	e7e5      	b.n	80063f4 <__mdiff+0x28>
 8006428:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800642c:	6926      	ldr	r6, [r4, #16]
 800642e:	60c5      	str	r5, [r0, #12]
 8006430:	f104 0914 	add.w	r9, r4, #20
 8006434:	f108 0514 	add.w	r5, r8, #20
 8006438:	f100 0e14 	add.w	lr, r0, #20
 800643c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006440:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006444:	f108 0210 	add.w	r2, r8, #16
 8006448:	46f2      	mov	sl, lr
 800644a:	2100      	movs	r1, #0
 800644c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006450:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006454:	fa1f f883 	uxth.w	r8, r3
 8006458:	fa11 f18b 	uxtah	r1, r1, fp
 800645c:	0c1b      	lsrs	r3, r3, #16
 800645e:	eba1 0808 	sub.w	r8, r1, r8
 8006462:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006466:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800646a:	fa1f f888 	uxth.w	r8, r8
 800646e:	1419      	asrs	r1, r3, #16
 8006470:	454e      	cmp	r6, r9
 8006472:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006476:	f84a 3b04 	str.w	r3, [sl], #4
 800647a:	d8e7      	bhi.n	800644c <__mdiff+0x80>
 800647c:	1b33      	subs	r3, r6, r4
 800647e:	3b15      	subs	r3, #21
 8006480:	f023 0303 	bic.w	r3, r3, #3
 8006484:	3304      	adds	r3, #4
 8006486:	3415      	adds	r4, #21
 8006488:	42a6      	cmp	r6, r4
 800648a:	bf38      	it	cc
 800648c:	2304      	movcc	r3, #4
 800648e:	441d      	add	r5, r3
 8006490:	4473      	add	r3, lr
 8006492:	469e      	mov	lr, r3
 8006494:	462e      	mov	r6, r5
 8006496:	4566      	cmp	r6, ip
 8006498:	d30e      	bcc.n	80064b8 <__mdiff+0xec>
 800649a:	f10c 0203 	add.w	r2, ip, #3
 800649e:	1b52      	subs	r2, r2, r5
 80064a0:	f022 0203 	bic.w	r2, r2, #3
 80064a4:	3d03      	subs	r5, #3
 80064a6:	45ac      	cmp	ip, r5
 80064a8:	bf38      	it	cc
 80064aa:	2200      	movcc	r2, #0
 80064ac:	441a      	add	r2, r3
 80064ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064b2:	b17b      	cbz	r3, 80064d4 <__mdiff+0x108>
 80064b4:	6107      	str	r7, [r0, #16]
 80064b6:	e7a3      	b.n	8006400 <__mdiff+0x34>
 80064b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80064bc:	fa11 f288 	uxtah	r2, r1, r8
 80064c0:	1414      	asrs	r4, r2, #16
 80064c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064c6:	b292      	uxth	r2, r2
 80064c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064cc:	f84e 2b04 	str.w	r2, [lr], #4
 80064d0:	1421      	asrs	r1, r4, #16
 80064d2:	e7e0      	b.n	8006496 <__mdiff+0xca>
 80064d4:	3f01      	subs	r7, #1
 80064d6:	e7ea      	b.n	80064ae <__mdiff+0xe2>
 80064d8:	08007553 	.word	0x08007553
 80064dc:	08007564 	.word	0x08007564

080064e0 <__d2b>:
 80064e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064e4:	4689      	mov	r9, r1
 80064e6:	2101      	movs	r1, #1
 80064e8:	ec57 6b10 	vmov	r6, r7, d0
 80064ec:	4690      	mov	r8, r2
 80064ee:	f7ff fccf 	bl	8005e90 <_Balloc>
 80064f2:	4604      	mov	r4, r0
 80064f4:	b930      	cbnz	r0, 8006504 <__d2b+0x24>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <__d2b+0xb0>)
 80064fa:	4826      	ldr	r0, [pc, #152]	; (8006594 <__d2b+0xb4>)
 80064fc:	f240 310a 	movw	r1, #778	; 0x30a
 8006500:	f000 f9bc 	bl	800687c <__assert_func>
 8006504:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800650c:	bb35      	cbnz	r5, 800655c <__d2b+0x7c>
 800650e:	2e00      	cmp	r6, #0
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	d028      	beq.n	8006566 <__d2b+0x86>
 8006514:	4668      	mov	r0, sp
 8006516:	9600      	str	r6, [sp, #0]
 8006518:	f7ff fd82 	bl	8006020 <__lo0bits>
 800651c:	9900      	ldr	r1, [sp, #0]
 800651e:	b300      	cbz	r0, 8006562 <__d2b+0x82>
 8006520:	9a01      	ldr	r2, [sp, #4]
 8006522:	f1c0 0320 	rsb	r3, r0, #32
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	430b      	orrs	r3, r1
 800652c:	40c2      	lsrs	r2, r0
 800652e:	6163      	str	r3, [r4, #20]
 8006530:	9201      	str	r2, [sp, #4]
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	61a3      	str	r3, [r4, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2202      	movne	r2, #2
 800653c:	2201      	moveq	r2, #1
 800653e:	6122      	str	r2, [r4, #16]
 8006540:	b1d5      	cbz	r5, 8006578 <__d2b+0x98>
 8006542:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006546:	4405      	add	r5, r0
 8006548:	f8c9 5000 	str.w	r5, [r9]
 800654c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006550:	f8c8 0000 	str.w	r0, [r8]
 8006554:	4620      	mov	r0, r4
 8006556:	b003      	add	sp, #12
 8006558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800655c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006560:	e7d5      	b.n	800650e <__d2b+0x2e>
 8006562:	6161      	str	r1, [r4, #20]
 8006564:	e7e5      	b.n	8006532 <__d2b+0x52>
 8006566:	a801      	add	r0, sp, #4
 8006568:	f7ff fd5a 	bl	8006020 <__lo0bits>
 800656c:	9b01      	ldr	r3, [sp, #4]
 800656e:	6163      	str	r3, [r4, #20]
 8006570:	2201      	movs	r2, #1
 8006572:	6122      	str	r2, [r4, #16]
 8006574:	3020      	adds	r0, #32
 8006576:	e7e3      	b.n	8006540 <__d2b+0x60>
 8006578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800657c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006580:	f8c9 0000 	str.w	r0, [r9]
 8006584:	6918      	ldr	r0, [r3, #16]
 8006586:	f7ff fd2b 	bl	8005fe0 <__hi0bits>
 800658a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800658e:	e7df      	b.n	8006550 <__d2b+0x70>
 8006590:	08007553 	.word	0x08007553
 8006594:	08007564 	.word	0x08007564

08006598 <_calloc_r>:
 8006598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800659a:	fba1 2402 	umull	r2, r4, r1, r2
 800659e:	b94c      	cbnz	r4, 80065b4 <_calloc_r+0x1c>
 80065a0:	4611      	mov	r1, r2
 80065a2:	9201      	str	r2, [sp, #4]
 80065a4:	f7fe f8cc 	bl	8004740 <_malloc_r>
 80065a8:	9a01      	ldr	r2, [sp, #4]
 80065aa:	4605      	mov	r5, r0
 80065ac:	b930      	cbnz	r0, 80065bc <_calloc_r+0x24>
 80065ae:	4628      	mov	r0, r5
 80065b0:	b003      	add	sp, #12
 80065b2:	bd30      	pop	{r4, r5, pc}
 80065b4:	220c      	movs	r2, #12
 80065b6:	6002      	str	r2, [r0, #0]
 80065b8:	2500      	movs	r5, #0
 80065ba:	e7f8      	b.n	80065ae <_calloc_r+0x16>
 80065bc:	4621      	mov	r1, r4
 80065be:	f7fe f84b 	bl	8004658 <memset>
 80065c2:	e7f4      	b.n	80065ae <_calloc_r+0x16>

080065c4 <__ssputs_r>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	688e      	ldr	r6, [r1, #8]
 80065ca:	429e      	cmp	r6, r3
 80065cc:	4682      	mov	sl, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	4690      	mov	r8, r2
 80065d2:	461f      	mov	r7, r3
 80065d4:	d838      	bhi.n	8006648 <__ssputs_r+0x84>
 80065d6:	898a      	ldrh	r2, [r1, #12]
 80065d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065dc:	d032      	beq.n	8006644 <__ssputs_r+0x80>
 80065de:	6825      	ldr	r5, [r4, #0]
 80065e0:	6909      	ldr	r1, [r1, #16]
 80065e2:	eba5 0901 	sub.w	r9, r5, r1
 80065e6:	6965      	ldr	r5, [r4, #20]
 80065e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065f0:	3301      	adds	r3, #1
 80065f2:	444b      	add	r3, r9
 80065f4:	106d      	asrs	r5, r5, #1
 80065f6:	429d      	cmp	r5, r3
 80065f8:	bf38      	it	cc
 80065fa:	461d      	movcc	r5, r3
 80065fc:	0553      	lsls	r3, r2, #21
 80065fe:	d531      	bpl.n	8006664 <__ssputs_r+0xa0>
 8006600:	4629      	mov	r1, r5
 8006602:	f7fe f89d 	bl	8004740 <_malloc_r>
 8006606:	4606      	mov	r6, r0
 8006608:	b950      	cbnz	r0, 8006620 <__ssputs_r+0x5c>
 800660a:	230c      	movs	r3, #12
 800660c:	f8ca 3000 	str.w	r3, [sl]
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006620:	6921      	ldr	r1, [r4, #16]
 8006622:	464a      	mov	r2, r9
 8006624:	f7ff fc1a 	bl	8005e5c <memcpy>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	6126      	str	r6, [r4, #16]
 8006636:	6165      	str	r5, [r4, #20]
 8006638:	444e      	add	r6, r9
 800663a:	eba5 0509 	sub.w	r5, r5, r9
 800663e:	6026      	str	r6, [r4, #0]
 8006640:	60a5      	str	r5, [r4, #8]
 8006642:	463e      	mov	r6, r7
 8006644:	42be      	cmp	r6, r7
 8006646:	d900      	bls.n	800664a <__ssputs_r+0x86>
 8006648:	463e      	mov	r6, r7
 800664a:	6820      	ldr	r0, [r4, #0]
 800664c:	4632      	mov	r2, r6
 800664e:	4641      	mov	r1, r8
 8006650:	f000 f959 	bl	8006906 <memmove>
 8006654:	68a3      	ldr	r3, [r4, #8]
 8006656:	1b9b      	subs	r3, r3, r6
 8006658:	60a3      	str	r3, [r4, #8]
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	4433      	add	r3, r6
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	2000      	movs	r0, #0
 8006662:	e7db      	b.n	800661c <__ssputs_r+0x58>
 8006664:	462a      	mov	r2, r5
 8006666:	f000 f968 	bl	800693a <_realloc_r>
 800666a:	4606      	mov	r6, r0
 800666c:	2800      	cmp	r0, #0
 800666e:	d1e1      	bne.n	8006634 <__ssputs_r+0x70>
 8006670:	6921      	ldr	r1, [r4, #16]
 8006672:	4650      	mov	r0, sl
 8006674:	f7fd fff8 	bl	8004668 <_free_r>
 8006678:	e7c7      	b.n	800660a <__ssputs_r+0x46>
	...

0800667c <_svfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	4698      	mov	r8, r3
 8006682:	898b      	ldrh	r3, [r1, #12]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	b09d      	sub	sp, #116	; 0x74
 8006688:	4607      	mov	r7, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4614      	mov	r4, r2
 800668e:	d50e      	bpl.n	80066ae <_svfiprintf_r+0x32>
 8006690:	690b      	ldr	r3, [r1, #16]
 8006692:	b963      	cbnz	r3, 80066ae <_svfiprintf_r+0x32>
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	f7fe f853 	bl	8004740 <_malloc_r>
 800669a:	6028      	str	r0, [r5, #0]
 800669c:	6128      	str	r0, [r5, #16]
 800669e:	b920      	cbnz	r0, 80066aa <_svfiprintf_r+0x2e>
 80066a0:	230c      	movs	r3, #12
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	e0d1      	b.n	800684e <_svfiprintf_r+0x1d2>
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	616b      	str	r3, [r5, #20]
 80066ae:	2300      	movs	r3, #0
 80066b0:	9309      	str	r3, [sp, #36]	; 0x24
 80066b2:	2320      	movs	r3, #32
 80066b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066bc:	2330      	movs	r3, #48	; 0x30
 80066be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006868 <_svfiprintf_r+0x1ec>
 80066c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066c6:	f04f 0901 	mov.w	r9, #1
 80066ca:	4623      	mov	r3, r4
 80066cc:	469a      	mov	sl, r3
 80066ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d2:	b10a      	cbz	r2, 80066d8 <_svfiprintf_r+0x5c>
 80066d4:	2a25      	cmp	r2, #37	; 0x25
 80066d6:	d1f9      	bne.n	80066cc <_svfiprintf_r+0x50>
 80066d8:	ebba 0b04 	subs.w	fp, sl, r4
 80066dc:	d00b      	beq.n	80066f6 <_svfiprintf_r+0x7a>
 80066de:	465b      	mov	r3, fp
 80066e0:	4622      	mov	r2, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ff6d 	bl	80065c4 <__ssputs_r>
 80066ea:	3001      	adds	r0, #1
 80066ec:	f000 80aa 	beq.w	8006844 <_svfiprintf_r+0x1c8>
 80066f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f2:	445a      	add	r2, fp
 80066f4:	9209      	str	r2, [sp, #36]	; 0x24
 80066f6:	f89a 3000 	ldrb.w	r3, [sl]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80a2 	beq.w	8006844 <_svfiprintf_r+0x1c8>
 8006700:	2300      	movs	r3, #0
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670a:	f10a 0a01 	add.w	sl, sl, #1
 800670e:	9304      	str	r3, [sp, #16]
 8006710:	9307      	str	r3, [sp, #28]
 8006712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006716:	931a      	str	r3, [sp, #104]	; 0x68
 8006718:	4654      	mov	r4, sl
 800671a:	2205      	movs	r2, #5
 800671c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006720:	4851      	ldr	r0, [pc, #324]	; (8006868 <_svfiprintf_r+0x1ec>)
 8006722:	f7f9 fd7d 	bl	8000220 <memchr>
 8006726:	9a04      	ldr	r2, [sp, #16]
 8006728:	b9d8      	cbnz	r0, 8006762 <_svfiprintf_r+0xe6>
 800672a:	06d0      	lsls	r0, r2, #27
 800672c:	bf44      	itt	mi
 800672e:	2320      	movmi	r3, #32
 8006730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006734:	0711      	lsls	r1, r2, #28
 8006736:	bf44      	itt	mi
 8006738:	232b      	movmi	r3, #43	; 0x2b
 800673a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800673e:	f89a 3000 	ldrb.w	r3, [sl]
 8006742:	2b2a      	cmp	r3, #42	; 0x2a
 8006744:	d015      	beq.n	8006772 <_svfiprintf_r+0xf6>
 8006746:	9a07      	ldr	r2, [sp, #28]
 8006748:	4654      	mov	r4, sl
 800674a:	2000      	movs	r0, #0
 800674c:	f04f 0c0a 	mov.w	ip, #10
 8006750:	4621      	mov	r1, r4
 8006752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006756:	3b30      	subs	r3, #48	; 0x30
 8006758:	2b09      	cmp	r3, #9
 800675a:	d94e      	bls.n	80067fa <_svfiprintf_r+0x17e>
 800675c:	b1b0      	cbz	r0, 800678c <_svfiprintf_r+0x110>
 800675e:	9207      	str	r2, [sp, #28]
 8006760:	e014      	b.n	800678c <_svfiprintf_r+0x110>
 8006762:	eba0 0308 	sub.w	r3, r0, r8
 8006766:	fa09 f303 	lsl.w	r3, r9, r3
 800676a:	4313      	orrs	r3, r2
 800676c:	9304      	str	r3, [sp, #16]
 800676e:	46a2      	mov	sl, r4
 8006770:	e7d2      	b.n	8006718 <_svfiprintf_r+0x9c>
 8006772:	9b03      	ldr	r3, [sp, #12]
 8006774:	1d19      	adds	r1, r3, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	9103      	str	r1, [sp, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	bfbb      	ittet	lt
 800677e:	425b      	neglt	r3, r3
 8006780:	f042 0202 	orrlt.w	r2, r2, #2
 8006784:	9307      	strge	r3, [sp, #28]
 8006786:	9307      	strlt	r3, [sp, #28]
 8006788:	bfb8      	it	lt
 800678a:	9204      	strlt	r2, [sp, #16]
 800678c:	7823      	ldrb	r3, [r4, #0]
 800678e:	2b2e      	cmp	r3, #46	; 0x2e
 8006790:	d10c      	bne.n	80067ac <_svfiprintf_r+0x130>
 8006792:	7863      	ldrb	r3, [r4, #1]
 8006794:	2b2a      	cmp	r3, #42	; 0x2a
 8006796:	d135      	bne.n	8006804 <_svfiprintf_r+0x188>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	1d1a      	adds	r2, r3, #4
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	9203      	str	r2, [sp, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfb8      	it	lt
 80067a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80067a8:	3402      	adds	r4, #2
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006878 <_svfiprintf_r+0x1fc>
 80067b0:	7821      	ldrb	r1, [r4, #0]
 80067b2:	2203      	movs	r2, #3
 80067b4:	4650      	mov	r0, sl
 80067b6:	f7f9 fd33 	bl	8000220 <memchr>
 80067ba:	b140      	cbz	r0, 80067ce <_svfiprintf_r+0x152>
 80067bc:	2340      	movs	r3, #64	; 0x40
 80067be:	eba0 000a 	sub.w	r0, r0, sl
 80067c2:	fa03 f000 	lsl.w	r0, r3, r0
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	4303      	orrs	r3, r0
 80067ca:	3401      	adds	r4, #1
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d2:	4826      	ldr	r0, [pc, #152]	; (800686c <_svfiprintf_r+0x1f0>)
 80067d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067d8:	2206      	movs	r2, #6
 80067da:	f7f9 fd21 	bl	8000220 <memchr>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d038      	beq.n	8006854 <_svfiprintf_r+0x1d8>
 80067e2:	4b23      	ldr	r3, [pc, #140]	; (8006870 <_svfiprintf_r+0x1f4>)
 80067e4:	bb1b      	cbnz	r3, 800682e <_svfiprintf_r+0x1b2>
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	3307      	adds	r3, #7
 80067ea:	f023 0307 	bic.w	r3, r3, #7
 80067ee:	3308      	adds	r3, #8
 80067f0:	9303      	str	r3, [sp, #12]
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	4433      	add	r3, r6
 80067f6:	9309      	str	r3, [sp, #36]	; 0x24
 80067f8:	e767      	b.n	80066ca <_svfiprintf_r+0x4e>
 80067fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80067fe:	460c      	mov	r4, r1
 8006800:	2001      	movs	r0, #1
 8006802:	e7a5      	b.n	8006750 <_svfiprintf_r+0xd4>
 8006804:	2300      	movs	r3, #0
 8006806:	3401      	adds	r4, #1
 8006808:	9305      	str	r3, [sp, #20]
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0c0a 	mov.w	ip, #10
 8006810:	4620      	mov	r0, r4
 8006812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006816:	3a30      	subs	r2, #48	; 0x30
 8006818:	2a09      	cmp	r2, #9
 800681a:	d903      	bls.n	8006824 <_svfiprintf_r+0x1a8>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0c5      	beq.n	80067ac <_svfiprintf_r+0x130>
 8006820:	9105      	str	r1, [sp, #20]
 8006822:	e7c3      	b.n	80067ac <_svfiprintf_r+0x130>
 8006824:	fb0c 2101 	mla	r1, ip, r1, r2
 8006828:	4604      	mov	r4, r0
 800682a:	2301      	movs	r3, #1
 800682c:	e7f0      	b.n	8006810 <_svfiprintf_r+0x194>
 800682e:	ab03      	add	r3, sp, #12
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	462a      	mov	r2, r5
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <_svfiprintf_r+0x1f8>)
 8006836:	a904      	add	r1, sp, #16
 8006838:	4638      	mov	r0, r7
 800683a:	f7fe f895 	bl	8004968 <_printf_float>
 800683e:	1c42      	adds	r2, r0, #1
 8006840:	4606      	mov	r6, r0
 8006842:	d1d6      	bne.n	80067f2 <_svfiprintf_r+0x176>
 8006844:	89ab      	ldrh	r3, [r5, #12]
 8006846:	065b      	lsls	r3, r3, #25
 8006848:	f53f af2c 	bmi.w	80066a4 <_svfiprintf_r+0x28>
 800684c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800684e:	b01d      	add	sp, #116	; 0x74
 8006850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006854:	ab03      	add	r3, sp, #12
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	462a      	mov	r2, r5
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <_svfiprintf_r+0x1f8>)
 800685c:	a904      	add	r1, sp, #16
 800685e:	4638      	mov	r0, r7
 8006860:	f7fe fb26 	bl	8004eb0 <_printf_i>
 8006864:	e7eb      	b.n	800683e <_svfiprintf_r+0x1c2>
 8006866:	bf00      	nop
 8006868:	080076bc 	.word	0x080076bc
 800686c:	080076c6 	.word	0x080076c6
 8006870:	08004969 	.word	0x08004969
 8006874:	080065c5 	.word	0x080065c5
 8006878:	080076c2 	.word	0x080076c2

0800687c <__assert_func>:
 800687c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800687e:	4614      	mov	r4, r2
 8006880:	461a      	mov	r2, r3
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <__assert_func+0x2c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4605      	mov	r5, r0
 8006888:	68d8      	ldr	r0, [r3, #12]
 800688a:	b14c      	cbz	r4, 80068a0 <__assert_func+0x24>
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <__assert_func+0x30>)
 800688e:	9100      	str	r1, [sp, #0]
 8006890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006894:	4906      	ldr	r1, [pc, #24]	; (80068b0 <__assert_func+0x34>)
 8006896:	462b      	mov	r3, r5
 8006898:	f000 f80e 	bl	80068b8 <fiprintf>
 800689c:	f000 faa4 	bl	8006de8 <abort>
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <__assert_func+0x38>)
 80068a2:	461c      	mov	r4, r3
 80068a4:	e7f3      	b.n	800688e <__assert_func+0x12>
 80068a6:	bf00      	nop
 80068a8:	20000020 	.word	0x20000020
 80068ac:	080076cd 	.word	0x080076cd
 80068b0:	080076da 	.word	0x080076da
 80068b4:	08007708 	.word	0x08007708

080068b8 <fiprintf>:
 80068b8:	b40e      	push	{r1, r2, r3}
 80068ba:	b503      	push	{r0, r1, lr}
 80068bc:	4601      	mov	r1, r0
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	4805      	ldr	r0, [pc, #20]	; (80068d8 <fiprintf+0x20>)
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	6800      	ldr	r0, [r0, #0]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	f000 f88f 	bl	80069ec <_vfiprintf_r>
 80068ce:	b002      	add	sp, #8
 80068d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d4:	b003      	add	sp, #12
 80068d6:	4770      	bx	lr
 80068d8:	20000020 	.word	0x20000020

080068dc <__retarget_lock_init_recursive>:
 80068dc:	4770      	bx	lr

080068de <__retarget_lock_acquire_recursive>:
 80068de:	4770      	bx	lr

080068e0 <__retarget_lock_release_recursive>:
 80068e0:	4770      	bx	lr

080068e2 <__ascii_mbtowc>:
 80068e2:	b082      	sub	sp, #8
 80068e4:	b901      	cbnz	r1, 80068e8 <__ascii_mbtowc+0x6>
 80068e6:	a901      	add	r1, sp, #4
 80068e8:	b142      	cbz	r2, 80068fc <__ascii_mbtowc+0x1a>
 80068ea:	b14b      	cbz	r3, 8006900 <__ascii_mbtowc+0x1e>
 80068ec:	7813      	ldrb	r3, [r2, #0]
 80068ee:	600b      	str	r3, [r1, #0]
 80068f0:	7812      	ldrb	r2, [r2, #0]
 80068f2:	1e10      	subs	r0, r2, #0
 80068f4:	bf18      	it	ne
 80068f6:	2001      	movne	r0, #1
 80068f8:	b002      	add	sp, #8
 80068fa:	4770      	bx	lr
 80068fc:	4610      	mov	r0, r2
 80068fe:	e7fb      	b.n	80068f8 <__ascii_mbtowc+0x16>
 8006900:	f06f 0001 	mvn.w	r0, #1
 8006904:	e7f8      	b.n	80068f8 <__ascii_mbtowc+0x16>

08006906 <memmove>:
 8006906:	4288      	cmp	r0, r1
 8006908:	b510      	push	{r4, lr}
 800690a:	eb01 0402 	add.w	r4, r1, r2
 800690e:	d902      	bls.n	8006916 <memmove+0x10>
 8006910:	4284      	cmp	r4, r0
 8006912:	4623      	mov	r3, r4
 8006914:	d807      	bhi.n	8006926 <memmove+0x20>
 8006916:	1e43      	subs	r3, r0, #1
 8006918:	42a1      	cmp	r1, r4
 800691a:	d008      	beq.n	800692e <memmove+0x28>
 800691c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006920:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006924:	e7f8      	b.n	8006918 <memmove+0x12>
 8006926:	4402      	add	r2, r0
 8006928:	4601      	mov	r1, r0
 800692a:	428a      	cmp	r2, r1
 800692c:	d100      	bne.n	8006930 <memmove+0x2a>
 800692e:	bd10      	pop	{r4, pc}
 8006930:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006934:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006938:	e7f7      	b.n	800692a <memmove+0x24>

0800693a <_realloc_r>:
 800693a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693e:	4680      	mov	r8, r0
 8006940:	4614      	mov	r4, r2
 8006942:	460e      	mov	r6, r1
 8006944:	b921      	cbnz	r1, 8006950 <_realloc_r+0x16>
 8006946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694a:	4611      	mov	r1, r2
 800694c:	f7fd bef8 	b.w	8004740 <_malloc_r>
 8006950:	b92a      	cbnz	r2, 800695e <_realloc_r+0x24>
 8006952:	f7fd fe89 	bl	8004668 <_free_r>
 8006956:	4625      	mov	r5, r4
 8006958:	4628      	mov	r0, r5
 800695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800695e:	f000 fc67 	bl	8007230 <_malloc_usable_size_r>
 8006962:	4284      	cmp	r4, r0
 8006964:	4607      	mov	r7, r0
 8006966:	d802      	bhi.n	800696e <_realloc_r+0x34>
 8006968:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800696c:	d812      	bhi.n	8006994 <_realloc_r+0x5a>
 800696e:	4621      	mov	r1, r4
 8006970:	4640      	mov	r0, r8
 8006972:	f7fd fee5 	bl	8004740 <_malloc_r>
 8006976:	4605      	mov	r5, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d0ed      	beq.n	8006958 <_realloc_r+0x1e>
 800697c:	42bc      	cmp	r4, r7
 800697e:	4622      	mov	r2, r4
 8006980:	4631      	mov	r1, r6
 8006982:	bf28      	it	cs
 8006984:	463a      	movcs	r2, r7
 8006986:	f7ff fa69 	bl	8005e5c <memcpy>
 800698a:	4631      	mov	r1, r6
 800698c:	4640      	mov	r0, r8
 800698e:	f7fd fe6b 	bl	8004668 <_free_r>
 8006992:	e7e1      	b.n	8006958 <_realloc_r+0x1e>
 8006994:	4635      	mov	r5, r6
 8006996:	e7df      	b.n	8006958 <_realloc_r+0x1e>

08006998 <__sfputc_r>:
 8006998:	6893      	ldr	r3, [r2, #8]
 800699a:	3b01      	subs	r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	b410      	push	{r4}
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	da08      	bge.n	80069b6 <__sfputc_r+0x1e>
 80069a4:	6994      	ldr	r4, [r2, #24]
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	db01      	blt.n	80069ae <__sfputc_r+0x16>
 80069aa:	290a      	cmp	r1, #10
 80069ac:	d103      	bne.n	80069b6 <__sfputc_r+0x1e>
 80069ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b2:	f000 b94b 	b.w	8006c4c <__swbuf_r>
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	1c58      	adds	r0, r3, #1
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	7019      	strb	r1, [r3, #0]
 80069be:	4608      	mov	r0, r1
 80069c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <__sfputs_r>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	18d5      	adds	r5, r2, r3
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	d101      	bne.n	80069d8 <__sfputs_r+0x12>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e007      	b.n	80069e8 <__sfputs_r+0x22>
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	463a      	mov	r2, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffda 	bl	8006998 <__sfputc_r>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d1f3      	bne.n	80069d0 <__sfputs_r+0xa>
 80069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ec <_vfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	460d      	mov	r5, r1
 80069f2:	b09d      	sub	sp, #116	; 0x74
 80069f4:	4614      	mov	r4, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	4606      	mov	r6, r0
 80069fa:	b118      	cbz	r0, 8006a04 <_vfiprintf_r+0x18>
 80069fc:	6983      	ldr	r3, [r0, #24]
 80069fe:	b90b      	cbnz	r3, 8006a04 <_vfiprintf_r+0x18>
 8006a00:	f000 fb14 	bl	800702c <__sinit>
 8006a04:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <_vfiprintf_r+0x240>)
 8006a06:	429d      	cmp	r5, r3
 8006a08:	d11b      	bne.n	8006a42 <_vfiprintf_r+0x56>
 8006a0a:	6875      	ldr	r5, [r6, #4]
 8006a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f7ff ff60 	bl	80068de <__retarget_lock_acquire_recursive>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	d501      	bpl.n	8006a28 <_vfiprintf_r+0x3c>
 8006a24:	692b      	ldr	r3, [r5, #16]
 8006a26:	b9eb      	cbnz	r3, 8006a64 <_vfiprintf_r+0x78>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 f96e 	bl	8006d0c <__swsetup_r>
 8006a30:	b1c0      	cbz	r0, 8006a64 <_vfiprintf_r+0x78>
 8006a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a34:	07dc      	lsls	r4, r3, #31
 8006a36:	d50e      	bpl.n	8006a56 <_vfiprintf_r+0x6a>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b01d      	add	sp, #116	; 0x74
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <_vfiprintf_r+0x244>)
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d101      	bne.n	8006a4c <_vfiprintf_r+0x60>
 8006a48:	68b5      	ldr	r5, [r6, #8]
 8006a4a:	e7df      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a4c:	4b79      	ldr	r3, [pc, #484]	; (8006c34 <_vfiprintf_r+0x248>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf08      	it	eq
 8006a52:	68f5      	ldreq	r5, [r6, #12]
 8006a54:	e7da      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	0598      	lsls	r0, r3, #22
 8006a5a:	d4ed      	bmi.n	8006a38 <_vfiprintf_r+0x4c>
 8006a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5e:	f7ff ff3f 	bl	80068e0 <__retarget_lock_release_recursive>
 8006a62:	e7e9      	b.n	8006a38 <_vfiprintf_r+0x4c>
 8006a64:	2300      	movs	r3, #0
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a72:	2330      	movs	r3, #48	; 0x30
 8006a74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c38 <_vfiprintf_r+0x24c>
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	f04f 0901 	mov.w	r9, #1
 8006a80:	4623      	mov	r3, r4
 8006a82:	469a      	mov	sl, r3
 8006a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a88:	b10a      	cbz	r2, 8006a8e <_vfiprintf_r+0xa2>
 8006a8a:	2a25      	cmp	r2, #37	; 0x25
 8006a8c:	d1f9      	bne.n	8006a82 <_vfiprintf_r+0x96>
 8006a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a92:	d00b      	beq.n	8006aac <_vfiprintf_r+0xc0>
 8006a94:	465b      	mov	r3, fp
 8006a96:	4622      	mov	r2, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ff93 	bl	80069c6 <__sfputs_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f000 80aa 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa8:	445a      	add	r2, fp
 8006aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006aac:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80a2 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	f10a 0a01 	add.w	sl, sl, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006acc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ace:	4654      	mov	r4, sl
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	4858      	ldr	r0, [pc, #352]	; (8006c38 <_vfiprintf_r+0x24c>)
 8006ad8:	f7f9 fba2 	bl	8000220 <memchr>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	b9d8      	cbnz	r0, 8006b18 <_vfiprintf_r+0x12c>
 8006ae0:	06d1      	lsls	r1, r2, #27
 8006ae2:	bf44      	itt	mi
 8006ae4:	2320      	movmi	r3, #32
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	0713      	lsls	r3, r2, #28
 8006aec:	bf44      	itt	mi
 8006aee:	232b      	movmi	r3, #43	; 0x2b
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d015      	beq.n	8006b28 <_vfiprintf_r+0x13c>
 8006afc:	9a07      	ldr	r2, [sp, #28]
 8006afe:	4654      	mov	r4, sl
 8006b00:	2000      	movs	r0, #0
 8006b02:	f04f 0c0a 	mov.w	ip, #10
 8006b06:	4621      	mov	r1, r4
 8006b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0c:	3b30      	subs	r3, #48	; 0x30
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d94e      	bls.n	8006bb0 <_vfiprintf_r+0x1c4>
 8006b12:	b1b0      	cbz	r0, 8006b42 <_vfiprintf_r+0x156>
 8006b14:	9207      	str	r2, [sp, #28]
 8006b16:	e014      	b.n	8006b42 <_vfiprintf_r+0x156>
 8006b18:	eba0 0308 	sub.w	r3, r0, r8
 8006b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b20:	4313      	orrs	r3, r2
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	46a2      	mov	sl, r4
 8006b26:	e7d2      	b.n	8006ace <_vfiprintf_r+0xe2>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbb      	ittet	lt
 8006b34:	425b      	neglt	r3, r3
 8006b36:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3a:	9307      	strge	r3, [sp, #28]
 8006b3c:	9307      	strlt	r3, [sp, #28]
 8006b3e:	bfb8      	it	lt
 8006b40:	9204      	strlt	r2, [sp, #16]
 8006b42:	7823      	ldrb	r3, [r4, #0]
 8006b44:	2b2e      	cmp	r3, #46	; 0x2e
 8006b46:	d10c      	bne.n	8006b62 <_vfiprintf_r+0x176>
 8006b48:	7863      	ldrb	r3, [r4, #1]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d135      	bne.n	8006bba <_vfiprintf_r+0x1ce>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	9203      	str	r2, [sp, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfb8      	it	lt
 8006b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b5e:	3402      	adds	r4, #2
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c48 <_vfiprintf_r+0x25c>
 8006b66:	7821      	ldrb	r1, [r4, #0]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f7f9 fb58 	bl	8000220 <memchr>
 8006b70:	b140      	cbz	r0, 8006b84 <_vfiprintf_r+0x198>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	eba0 000a 	sub.w	r0, r0, sl
 8006b78:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	4303      	orrs	r3, r0
 8006b80:	3401      	adds	r4, #1
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	482c      	ldr	r0, [pc, #176]	; (8006c3c <_vfiprintf_r+0x250>)
 8006b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b8e:	2206      	movs	r2, #6
 8006b90:	f7f9 fb46 	bl	8000220 <memchr>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d03f      	beq.n	8006c18 <_vfiprintf_r+0x22c>
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <_vfiprintf_r+0x254>)
 8006b9a:	bb1b      	cbnz	r3, 8006be4 <_vfiprintf_r+0x1f8>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	443b      	add	r3, r7
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	e767      	b.n	8006a80 <_vfiprintf_r+0x94>
 8006bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	e7a5      	b.n	8006b06 <_vfiprintf_r+0x11a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	3401      	adds	r4, #1
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f04f 0c0a 	mov.w	ip, #10
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bcc:	3a30      	subs	r2, #48	; 0x30
 8006bce:	2a09      	cmp	r2, #9
 8006bd0:	d903      	bls.n	8006bda <_vfiprintf_r+0x1ee>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0c5      	beq.n	8006b62 <_vfiprintf_r+0x176>
 8006bd6:	9105      	str	r1, [sp, #20]
 8006bd8:	e7c3      	b.n	8006b62 <_vfiprintf_r+0x176>
 8006bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bde:	4604      	mov	r4, r0
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7f0      	b.n	8006bc6 <_vfiprintf_r+0x1da>
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <_vfiprintf_r+0x258>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7fd feba 	bl	8004968 <_printf_float>
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	1c78      	adds	r0, r7, #1
 8006bf8:	d1d6      	bne.n	8006ba8 <_vfiprintf_r+0x1bc>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	d405      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c00:	89ab      	ldrh	r3, [r5, #12]
 8006c02:	059a      	lsls	r2, r3, #22
 8006c04:	d402      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c08:	f7ff fe6a 	bl	80068e0 <__retarget_lock_release_recursive>
 8006c0c:	89ab      	ldrh	r3, [r5, #12]
 8006c0e:	065b      	lsls	r3, r3, #25
 8006c10:	f53f af12 	bmi.w	8006a38 <_vfiprintf_r+0x4c>
 8006c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c16:	e711      	b.n	8006a3c <_vfiprintf_r+0x50>
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <_vfiprintf_r+0x258>)
 8006c20:	a904      	add	r1, sp, #16
 8006c22:	4630      	mov	r0, r6
 8006c24:	f7fe f944 	bl	8004eb0 <_printf_i>
 8006c28:	e7e4      	b.n	8006bf4 <_vfiprintf_r+0x208>
 8006c2a:	bf00      	nop
 8006c2c:	08007834 	.word	0x08007834
 8006c30:	08007854 	.word	0x08007854
 8006c34:	08007814 	.word	0x08007814
 8006c38:	080076bc 	.word	0x080076bc
 8006c3c:	080076c6 	.word	0x080076c6
 8006c40:	08004969 	.word	0x08004969
 8006c44:	080069c7 	.word	0x080069c7
 8006c48:	080076c2 	.word	0x080076c2

08006c4c <__swbuf_r>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460e      	mov	r6, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <__swbuf_r+0x12>
 8006c56:	6983      	ldr	r3, [r0, #24]
 8006c58:	b90b      	cbnz	r3, 8006c5e <__swbuf_r+0x12>
 8006c5a:	f000 f9e7 	bl	800702c <__sinit>
 8006c5e:	4b21      	ldr	r3, [pc, #132]	; (8006ce4 <__swbuf_r+0x98>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d12b      	bne.n	8006cbc <__swbuf_r+0x70>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	69a3      	ldr	r3, [r4, #24]
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	071a      	lsls	r2, r3, #28
 8006c6e:	d52f      	bpl.n	8006cd0 <__swbuf_r+0x84>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	b36b      	cbz	r3, 8006cd0 <__swbuf_r+0x84>
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1ac0      	subs	r0, r0, r3
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	b2f6      	uxtb	r6, r6
 8006c7e:	4283      	cmp	r3, r0
 8006c80:	4637      	mov	r7, r6
 8006c82:	dc04      	bgt.n	8006c8e <__swbuf_r+0x42>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f93c 	bl	8006f04 <_fflush_r>
 8006c8c:	bb30      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006c8e:	68a3      	ldr	r3, [r4, #8]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	701e      	strb	r6, [r3, #0]
 8006c9c:	6963      	ldr	r3, [r4, #20]
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	4283      	cmp	r3, r0
 8006ca2:	d004      	beq.n	8006cae <__swbuf_r+0x62>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d506      	bpl.n	8006cb8 <__swbuf_r+0x6c>
 8006caa:	2e0a      	cmp	r6, #10
 8006cac:	d104      	bne.n	8006cb8 <__swbuf_r+0x6c>
 8006cae:	4621      	mov	r1, r4
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f927 	bl	8006f04 <_fflush_r>
 8006cb6:	b988      	cbnz	r0, 8006cdc <__swbuf_r+0x90>
 8006cb8:	4638      	mov	r0, r7
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <__swbuf_r+0x9c>)
 8006cbe:	429c      	cmp	r4, r3
 8006cc0:	d101      	bne.n	8006cc6 <__swbuf_r+0x7a>
 8006cc2:	68ac      	ldr	r4, [r5, #8]
 8006cc4:	e7cf      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cc6:	4b09      	ldr	r3, [pc, #36]	; (8006cec <__swbuf_r+0xa0>)
 8006cc8:	429c      	cmp	r4, r3
 8006cca:	bf08      	it	eq
 8006ccc:	68ec      	ldreq	r4, [r5, #12]
 8006cce:	e7ca      	b.n	8006c66 <__swbuf_r+0x1a>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f81a 	bl	8006d0c <__swsetup_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d0cb      	beq.n	8006c74 <__swbuf_r+0x28>
 8006cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce0:	e7ea      	b.n	8006cb8 <__swbuf_r+0x6c>
 8006ce2:	bf00      	nop
 8006ce4:	08007834 	.word	0x08007834
 8006ce8:	08007854 	.word	0x08007854
 8006cec:	08007814 	.word	0x08007814

08006cf0 <__ascii_wctomb>:
 8006cf0:	b149      	cbz	r1, 8006d06 <__ascii_wctomb+0x16>
 8006cf2:	2aff      	cmp	r2, #255	; 0xff
 8006cf4:	bf85      	ittet	hi
 8006cf6:	238a      	movhi	r3, #138	; 0x8a
 8006cf8:	6003      	strhi	r3, [r0, #0]
 8006cfa:	700a      	strbls	r2, [r1, #0]
 8006cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d00:	bf98      	it	ls
 8006d02:	2001      	movls	r0, #1
 8006d04:	4770      	bx	lr
 8006d06:	4608      	mov	r0, r1
 8006d08:	4770      	bx	lr
	...

08006d0c <__swsetup_r>:
 8006d0c:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <__swsetup_r+0xcc>)
 8006d0e:	b570      	push	{r4, r5, r6, lr}
 8006d10:	681d      	ldr	r5, [r3, #0]
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	b125      	cbz	r5, 8006d22 <__swsetup_r+0x16>
 8006d18:	69ab      	ldr	r3, [r5, #24]
 8006d1a:	b913      	cbnz	r3, 8006d22 <__swsetup_r+0x16>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 f985 	bl	800702c <__sinit>
 8006d22:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <__swsetup_r+0xd0>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	d10f      	bne.n	8006d48 <__swsetup_r+0x3c>
 8006d28:	686c      	ldr	r4, [r5, #4]
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d42c      	bmi.n	8006d8e <__swsetup_r+0x82>
 8006d34:	06dd      	lsls	r5, r3, #27
 8006d36:	d411      	bmi.n	8006d5c <__swsetup_r+0x50>
 8006d38:	2309      	movs	r3, #9
 8006d3a:	6033      	str	r3, [r6, #0]
 8006d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	e03e      	b.n	8006dc6 <__swsetup_r+0xba>
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <__swsetup_r+0xd4>)
 8006d4a:	429c      	cmp	r4, r3
 8006d4c:	d101      	bne.n	8006d52 <__swsetup_r+0x46>
 8006d4e:	68ac      	ldr	r4, [r5, #8]
 8006d50:	e7eb      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d52:	4b24      	ldr	r3, [pc, #144]	; (8006de4 <__swsetup_r+0xd8>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	bf08      	it	eq
 8006d58:	68ec      	ldreq	r4, [r5, #12]
 8006d5a:	e7e6      	b.n	8006d2a <__swsetup_r+0x1e>
 8006d5c:	0758      	lsls	r0, r3, #29
 8006d5e:	d512      	bpl.n	8006d86 <__swsetup_r+0x7a>
 8006d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d62:	b141      	cbz	r1, 8006d76 <__swsetup_r+0x6a>
 8006d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d002      	beq.n	8006d72 <__swsetup_r+0x66>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7fd fc7b 	bl	8004668 <_free_r>
 8006d72:	2300      	movs	r3, #0
 8006d74:	6363      	str	r3, [r4, #52]	; 0x34
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	6923      	ldr	r3, [r4, #16]
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	b94b      	cbnz	r3, 8006da6 <__swsetup_r+0x9a>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d9c:	d003      	beq.n	8006da6 <__swsetup_r+0x9a>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fa05 	bl	80071b0 <__smakebuf_r>
 8006da6:	89a0      	ldrh	r0, [r4, #12]
 8006da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dac:	f010 0301 	ands.w	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <__swsetup_r+0xbc>
 8006db2:	2300      	movs	r3, #0
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6963      	ldr	r3, [r4, #20]
 8006db8:	425b      	negs	r3, r3
 8006dba:	61a3      	str	r3, [r4, #24]
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	b943      	cbnz	r3, 8006dd2 <__swsetup_r+0xc6>
 8006dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dc4:	d1ba      	bne.n	8006d3c <__swsetup_r+0x30>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	0781      	lsls	r1, r0, #30
 8006dca:	bf58      	it	pl
 8006dcc:	6963      	ldrpl	r3, [r4, #20]
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	e7f4      	b.n	8006dbc <__swsetup_r+0xb0>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e7f7      	b.n	8006dc6 <__swsetup_r+0xba>
 8006dd6:	bf00      	nop
 8006dd8:	20000020 	.word	0x20000020
 8006ddc:	08007834 	.word	0x08007834
 8006de0:	08007854 	.word	0x08007854
 8006de4:	08007814 	.word	0x08007814

08006de8 <abort>:
 8006de8:	b508      	push	{r3, lr}
 8006dea:	2006      	movs	r0, #6
 8006dec:	f000 fa50 	bl	8007290 <raise>
 8006df0:	2001      	movs	r0, #1
 8006df2:	f7fa ff89 	bl	8001d08 <_exit>
	...

08006df8 <__sflush_r>:
 8006df8:	898a      	ldrh	r2, [r1, #12]
 8006dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfe:	4605      	mov	r5, r0
 8006e00:	0710      	lsls	r0, r2, #28
 8006e02:	460c      	mov	r4, r1
 8006e04:	d458      	bmi.n	8006eb8 <__sflush_r+0xc0>
 8006e06:	684b      	ldr	r3, [r1, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc05      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dc02      	bgt.n	8006e18 <__sflush_r+0x20>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	d0f9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e24:	682f      	ldr	r7, [r5, #0]
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	d032      	beq.n	8006e90 <__sflush_r+0x98>
 8006e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	075a      	lsls	r2, r3, #29
 8006e30:	d505      	bpl.n	8006e3e <__sflush_r+0x46>
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	1ac0      	subs	r0, r0, r3
 8006e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e38:	b10b      	cbz	r3, 8006e3e <__sflush_r+0x46>
 8006e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e3c:	1ac0      	subs	r0, r0, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4602      	mov	r2, r0
 8006e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e44:	6a21      	ldr	r1, [r4, #32]
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b0      	blx	r6
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	d106      	bne.n	8006e5e <__sflush_r+0x66>
 8006e50:	6829      	ldr	r1, [r5, #0]
 8006e52:	291d      	cmp	r1, #29
 8006e54:	d82c      	bhi.n	8006eb0 <__sflush_r+0xb8>
 8006e56:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <__sflush_r+0x108>)
 8006e58:	40ca      	lsrs	r2, r1
 8006e5a:	07d6      	lsls	r6, r2, #31
 8006e5c:	d528      	bpl.n	8006eb0 <__sflush_r+0xb8>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	6062      	str	r2, [r4, #4]
 8006e62:	04d9      	lsls	r1, r3, #19
 8006e64:	6922      	ldr	r2, [r4, #16]
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	d504      	bpl.n	8006e74 <__sflush_r+0x7c>
 8006e6a:	1c42      	adds	r2, r0, #1
 8006e6c:	d101      	bne.n	8006e72 <__sflush_r+0x7a>
 8006e6e:	682b      	ldr	r3, [r5, #0]
 8006e70:	b903      	cbnz	r3, 8006e74 <__sflush_r+0x7c>
 8006e72:	6560      	str	r0, [r4, #84]	; 0x54
 8006e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e76:	602f      	str	r7, [r5, #0]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d0ca      	beq.n	8006e12 <__sflush_r+0x1a>
 8006e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e80:	4299      	cmp	r1, r3
 8006e82:	d002      	beq.n	8006e8a <__sflush_r+0x92>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f7fd fbef 	bl	8004668 <_free_r>
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e8e:	e7c1      	b.n	8006e14 <__sflush_r+0x1c>
 8006e90:	6a21      	ldr	r1, [r4, #32]
 8006e92:	2301      	movs	r3, #1
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b0      	blx	r6
 8006e98:	1c41      	adds	r1, r0, #1
 8006e9a:	d1c7      	bne.n	8006e2c <__sflush_r+0x34>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0c4      	beq.n	8006e2c <__sflush_r+0x34>
 8006ea2:	2b1d      	cmp	r3, #29
 8006ea4:	d001      	beq.n	8006eaa <__sflush_r+0xb2>
 8006ea6:	2b16      	cmp	r3, #22
 8006ea8:	d101      	bne.n	8006eae <__sflush_r+0xb6>
 8006eaa:	602f      	str	r7, [r5, #0]
 8006eac:	e7b1      	b.n	8006e12 <__sflush_r+0x1a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	e7ad      	b.n	8006e14 <__sflush_r+0x1c>
 8006eb8:	690f      	ldr	r7, [r1, #16]
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	d0a9      	beq.n	8006e12 <__sflush_r+0x1a>
 8006ebe:	0793      	lsls	r3, r2, #30
 8006ec0:	680e      	ldr	r6, [r1, #0]
 8006ec2:	bf08      	it	eq
 8006ec4:	694b      	ldreq	r3, [r1, #20]
 8006ec6:	600f      	str	r7, [r1, #0]
 8006ec8:	bf18      	it	ne
 8006eca:	2300      	movne	r3, #0
 8006ecc:	eba6 0807 	sub.w	r8, r6, r7
 8006ed0:	608b      	str	r3, [r1, #8]
 8006ed2:	f1b8 0f00 	cmp.w	r8, #0
 8006ed6:	dd9c      	ble.n	8006e12 <__sflush_r+0x1a>
 8006ed8:	6a21      	ldr	r1, [r4, #32]
 8006eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006edc:	4643      	mov	r3, r8
 8006ede:	463a      	mov	r2, r7
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	47b0      	blx	r6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	dc06      	bgt.n	8006ef6 <__sflush_r+0xfe>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e78e      	b.n	8006e14 <__sflush_r+0x1c>
 8006ef6:	4407      	add	r7, r0
 8006ef8:	eba8 0800 	sub.w	r8, r8, r0
 8006efc:	e7e9      	b.n	8006ed2 <__sflush_r+0xda>
 8006efe:	bf00      	nop
 8006f00:	20400001 	.word	0x20400001

08006f04 <_fflush_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b913      	cbnz	r3, 8006f14 <_fflush_r+0x10>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	4628      	mov	r0, r5
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	b118      	cbz	r0, 8006f1e <_fflush_r+0x1a>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <_fflush_r+0x1a>
 8006f1a:	f000 f887 	bl	800702c <__sinit>
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <_fflush_r+0x6c>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d11b      	bne.n	8006f5c <_fflush_r+0x58>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ef      	beq.n	8006f0e <_fflush_r+0xa>
 8006f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f30:	07d0      	lsls	r0, r2, #31
 8006f32:	d404      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f34:	0599      	lsls	r1, r3, #22
 8006f36:	d402      	bmi.n	8006f3e <_fflush_r+0x3a>
 8006f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3a:	f7ff fcd0 	bl	80068de <__retarget_lock_acquire_recursive>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	4621      	mov	r1, r4
 8006f42:	f7ff ff59 	bl	8006df8 <__sflush_r>
 8006f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f48:	07da      	lsls	r2, r3, #31
 8006f4a:	4605      	mov	r5, r0
 8006f4c:	d4e0      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	059b      	lsls	r3, r3, #22
 8006f52:	d4dd      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f56:	f7ff fcc3 	bl	80068e0 <__retarget_lock_release_recursive>
 8006f5a:	e7d9      	b.n	8006f10 <_fflush_r+0xc>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <_fflush_r+0x70>)
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	d101      	bne.n	8006f66 <_fflush_r+0x62>
 8006f62:	68ac      	ldr	r4, [r5, #8]
 8006f64:	e7df      	b.n	8006f26 <_fflush_r+0x22>
 8006f66:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <_fflush_r+0x74>)
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	bf08      	it	eq
 8006f6c:	68ec      	ldreq	r4, [r5, #12]
 8006f6e:	e7da      	b.n	8006f26 <_fflush_r+0x22>
 8006f70:	08007834 	.word	0x08007834
 8006f74:	08007854 	.word	0x08007854
 8006f78:	08007814 	.word	0x08007814

08006f7c <std>:
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	4604      	mov	r4, r0
 8006f82:	e9c0 3300 	strd	r3, r3, [r0]
 8006f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f8a:	6083      	str	r3, [r0, #8]
 8006f8c:	8181      	strh	r1, [r0, #12]
 8006f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f90:	81c2      	strh	r2, [r0, #14]
 8006f92:	6183      	str	r3, [r0, #24]
 8006f94:	4619      	mov	r1, r3
 8006f96:	2208      	movs	r2, #8
 8006f98:	305c      	adds	r0, #92	; 0x5c
 8006f9a:	f7fd fb5d 	bl	8004658 <memset>
 8006f9e:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <std+0x38>)
 8006fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8006fa2:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <std+0x3c>)
 8006fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fa6:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <std+0x40>)
 8006fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x44>)
 8006fac:	6224      	str	r4, [r4, #32]
 8006fae:	6323      	str	r3, [r4, #48]	; 0x30
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	080072c9 	.word	0x080072c9
 8006fb8:	080072eb 	.word	0x080072eb
 8006fbc:	08007323 	.word	0x08007323
 8006fc0:	08007347 	.word	0x08007347

08006fc4 <_cleanup_r>:
 8006fc4:	4901      	ldr	r1, [pc, #4]	; (8006fcc <_cleanup_r+0x8>)
 8006fc6:	f000 b8af 	b.w	8007128 <_fwalk_reent>
 8006fca:	bf00      	nop
 8006fcc:	08006f05 	.word	0x08006f05

08006fd0 <__sfmoreglue>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	2268      	movs	r2, #104	; 0x68
 8006fd4:	1e4d      	subs	r5, r1, #1
 8006fd6:	4355      	muls	r5, r2
 8006fd8:	460e      	mov	r6, r1
 8006fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fde:	f7fd fbaf 	bl	8004740 <_malloc_r>
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	b140      	cbz	r0, 8006ff8 <__sfmoreglue+0x28>
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fec:	300c      	adds	r0, #12
 8006fee:	60a0      	str	r0, [r4, #8]
 8006ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ff4:	f7fd fb30 	bl	8004658 <memset>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}

08006ffc <__sfp_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sfp_lock_acquire+0x8>)
 8006ffe:	f7ff bc6e 	b.w	80068de <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	20000359 	.word	0x20000359

08007008 <__sfp_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_release+0x8>)
 800700a:	f7ff bc69 	b.w	80068e0 <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	20000359 	.word	0x20000359

08007014 <__sinit_lock_acquire>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sinit_lock_acquire+0x8>)
 8007016:	f7ff bc62 	b.w	80068de <__retarget_lock_acquire_recursive>
 800701a:	bf00      	nop
 800701c:	2000035a 	.word	0x2000035a

08007020 <__sinit_lock_release>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_release+0x8>)
 8007022:	f7ff bc5d 	b.w	80068e0 <__retarget_lock_release_recursive>
 8007026:	bf00      	nop
 8007028:	2000035a 	.word	0x2000035a

0800702c <__sinit>:
 800702c:	b510      	push	{r4, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	f7ff fff0 	bl	8007014 <__sinit_lock_acquire>
 8007034:	69a3      	ldr	r3, [r4, #24]
 8007036:	b11b      	cbz	r3, 8007040 <__sinit+0x14>
 8007038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703c:	f7ff bff0 	b.w	8007020 <__sinit_lock_release>
 8007040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007044:	6523      	str	r3, [r4, #80]	; 0x50
 8007046:	4b13      	ldr	r3, [pc, #76]	; (8007094 <__sinit+0x68>)
 8007048:	4a13      	ldr	r2, [pc, #76]	; (8007098 <__sinit+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	62a2      	str	r2, [r4, #40]	; 0x28
 800704e:	42a3      	cmp	r3, r4
 8007050:	bf04      	itt	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	61a3      	streq	r3, [r4, #24]
 8007056:	4620      	mov	r0, r4
 8007058:	f000 f820 	bl	800709c <__sfp>
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	4620      	mov	r0, r4
 8007060:	f000 f81c 	bl	800709c <__sfp>
 8007064:	60a0      	str	r0, [r4, #8]
 8007066:	4620      	mov	r0, r4
 8007068:	f000 f818 	bl	800709c <__sfp>
 800706c:	2200      	movs	r2, #0
 800706e:	60e0      	str	r0, [r4, #12]
 8007070:	2104      	movs	r1, #4
 8007072:	6860      	ldr	r0, [r4, #4]
 8007074:	f7ff ff82 	bl	8006f7c <std>
 8007078:	68a0      	ldr	r0, [r4, #8]
 800707a:	2201      	movs	r2, #1
 800707c:	2109      	movs	r1, #9
 800707e:	f7ff ff7d 	bl	8006f7c <std>
 8007082:	68e0      	ldr	r0, [r4, #12]
 8007084:	2202      	movs	r2, #2
 8007086:	2112      	movs	r1, #18
 8007088:	f7ff ff78 	bl	8006f7c <std>
 800708c:	2301      	movs	r3, #1
 800708e:	61a3      	str	r3, [r4, #24]
 8007090:	e7d2      	b.n	8007038 <__sinit+0xc>
 8007092:	bf00      	nop
 8007094:	0800749c 	.word	0x0800749c
 8007098:	08006fc5 	.word	0x08006fc5

0800709c <__sfp>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	4607      	mov	r7, r0
 80070a0:	f7ff ffac 	bl	8006ffc <__sfp_lock_acquire>
 80070a4:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <__sfp+0x84>)
 80070a6:	681e      	ldr	r6, [r3, #0]
 80070a8:	69b3      	ldr	r3, [r6, #24]
 80070aa:	b913      	cbnz	r3, 80070b2 <__sfp+0x16>
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff ffbd 	bl	800702c <__sinit>
 80070b2:	3648      	adds	r6, #72	; 0x48
 80070b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070b8:	3b01      	subs	r3, #1
 80070ba:	d503      	bpl.n	80070c4 <__sfp+0x28>
 80070bc:	6833      	ldr	r3, [r6, #0]
 80070be:	b30b      	cbz	r3, 8007104 <__sfp+0x68>
 80070c0:	6836      	ldr	r6, [r6, #0]
 80070c2:	e7f7      	b.n	80070b4 <__sfp+0x18>
 80070c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070c8:	b9d5      	cbnz	r5, 8007100 <__sfp+0x64>
 80070ca:	4b16      	ldr	r3, [pc, #88]	; (8007124 <__sfp+0x88>)
 80070cc:	60e3      	str	r3, [r4, #12]
 80070ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070d2:	6665      	str	r5, [r4, #100]	; 0x64
 80070d4:	f7ff fc02 	bl	80068dc <__retarget_lock_init_recursive>
 80070d8:	f7ff ff96 	bl	8007008 <__sfp_lock_release>
 80070dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070e4:	6025      	str	r5, [r4, #0]
 80070e6:	61a5      	str	r5, [r4, #24]
 80070e8:	2208      	movs	r2, #8
 80070ea:	4629      	mov	r1, r5
 80070ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070f0:	f7fd fab2 	bl	8004658 <memset>
 80070f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070fc:	4620      	mov	r0, r4
 80070fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007100:	3468      	adds	r4, #104	; 0x68
 8007102:	e7d9      	b.n	80070b8 <__sfp+0x1c>
 8007104:	2104      	movs	r1, #4
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff ff62 	bl	8006fd0 <__sfmoreglue>
 800710c:	4604      	mov	r4, r0
 800710e:	6030      	str	r0, [r6, #0]
 8007110:	2800      	cmp	r0, #0
 8007112:	d1d5      	bne.n	80070c0 <__sfp+0x24>
 8007114:	f7ff ff78 	bl	8007008 <__sfp_lock_release>
 8007118:	230c      	movs	r3, #12
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	e7ee      	b.n	80070fc <__sfp+0x60>
 800711e:	bf00      	nop
 8007120:	0800749c 	.word	0x0800749c
 8007124:	ffff0001 	.word	0xffff0001

08007128 <_fwalk_reent>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	4688      	mov	r8, r1
 8007130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007134:	2700      	movs	r7, #0
 8007136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800713a:	f1b9 0901 	subs.w	r9, r9, #1
 800713e:	d505      	bpl.n	800714c <_fwalk_reent+0x24>
 8007140:	6824      	ldr	r4, [r4, #0]
 8007142:	2c00      	cmp	r4, #0
 8007144:	d1f7      	bne.n	8007136 <_fwalk_reent+0xe>
 8007146:	4638      	mov	r0, r7
 8007148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714c:	89ab      	ldrh	r3, [r5, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d907      	bls.n	8007162 <_fwalk_reent+0x3a>
 8007152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007156:	3301      	adds	r3, #1
 8007158:	d003      	beq.n	8007162 <_fwalk_reent+0x3a>
 800715a:	4629      	mov	r1, r5
 800715c:	4630      	mov	r0, r6
 800715e:	47c0      	blx	r8
 8007160:	4307      	orrs	r7, r0
 8007162:	3568      	adds	r5, #104	; 0x68
 8007164:	e7e9      	b.n	800713a <_fwalk_reent+0x12>

08007166 <__swhatbuf_r>:
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	460e      	mov	r6, r1
 800716a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716e:	2900      	cmp	r1, #0
 8007170:	b096      	sub	sp, #88	; 0x58
 8007172:	4614      	mov	r4, r2
 8007174:	461d      	mov	r5, r3
 8007176:	da08      	bge.n	800718a <__swhatbuf_r+0x24>
 8007178:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	061a      	lsls	r2, r3, #24
 8007182:	d410      	bmi.n	80071a6 <__swhatbuf_r+0x40>
 8007184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007188:	e00e      	b.n	80071a8 <__swhatbuf_r+0x42>
 800718a:	466a      	mov	r2, sp
 800718c:	f000 f902 	bl	8007394 <_fstat_r>
 8007190:	2800      	cmp	r0, #0
 8007192:	dbf1      	blt.n	8007178 <__swhatbuf_r+0x12>
 8007194:	9a01      	ldr	r2, [sp, #4]
 8007196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800719a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800719e:	425a      	negs	r2, r3
 80071a0:	415a      	adcs	r2, r3
 80071a2:	602a      	str	r2, [r5, #0]
 80071a4:	e7ee      	b.n	8007184 <__swhatbuf_r+0x1e>
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	2000      	movs	r0, #0
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	b016      	add	sp, #88	; 0x58
 80071ae:	bd70      	pop	{r4, r5, r6, pc}

080071b0 <__smakebuf_r>:
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071b4:	079d      	lsls	r5, r3, #30
 80071b6:	4606      	mov	r6, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	d507      	bpl.n	80071cc <__smakebuf_r+0x1c>
 80071bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	2301      	movs	r3, #1
 80071c6:	6163      	str	r3, [r4, #20]
 80071c8:	b002      	add	sp, #8
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	ab01      	add	r3, sp, #4
 80071ce:	466a      	mov	r2, sp
 80071d0:	f7ff ffc9 	bl	8007166 <__swhatbuf_r>
 80071d4:	9900      	ldr	r1, [sp, #0]
 80071d6:	4605      	mov	r5, r0
 80071d8:	4630      	mov	r0, r6
 80071da:	f7fd fab1 	bl	8004740 <_malloc_r>
 80071de:	b948      	cbnz	r0, 80071f4 <__smakebuf_r+0x44>
 80071e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e4:	059a      	lsls	r2, r3, #22
 80071e6:	d4ef      	bmi.n	80071c8 <__smakebuf_r+0x18>
 80071e8:	f023 0303 	bic.w	r3, r3, #3
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	e7e3      	b.n	80071bc <__smakebuf_r+0xc>
 80071f4:	4b0d      	ldr	r3, [pc, #52]	; (800722c <__smakebuf_r+0x7c>)
 80071f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	6020      	str	r0, [r4, #0]
 80071fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	6163      	str	r3, [r4, #20]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	b15b      	cbz	r3, 8007224 <__smakebuf_r+0x74>
 800720c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007210:	4630      	mov	r0, r6
 8007212:	f000 f8d1 	bl	80073b8 <_isatty_r>
 8007216:	b128      	cbz	r0, 8007224 <__smakebuf_r+0x74>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	89a0      	ldrh	r0, [r4, #12]
 8007226:	4305      	orrs	r5, r0
 8007228:	81a5      	strh	r5, [r4, #12]
 800722a:	e7cd      	b.n	80071c8 <__smakebuf_r+0x18>
 800722c:	08006fc5 	.word	0x08006fc5

08007230 <_malloc_usable_size_r>:
 8007230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007234:	1f18      	subs	r0, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfbc      	itt	lt
 800723a:	580b      	ldrlt	r3, [r1, r0]
 800723c:	18c0      	addlt	r0, r0, r3
 800723e:	4770      	bx	lr

08007240 <_raise_r>:
 8007240:	291f      	cmp	r1, #31
 8007242:	b538      	push	{r3, r4, r5, lr}
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	d904      	bls.n	8007254 <_raise_r+0x14>
 800724a:	2316      	movs	r3, #22
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007256:	b112      	cbz	r2, 800725e <_raise_r+0x1e>
 8007258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800725c:	b94b      	cbnz	r3, 8007272 <_raise_r+0x32>
 800725e:	4620      	mov	r0, r4
 8007260:	f000 f830 	bl	80072c4 <_getpid_r>
 8007264:	462a      	mov	r2, r5
 8007266:	4601      	mov	r1, r0
 8007268:	4620      	mov	r0, r4
 800726a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800726e:	f000 b817 	b.w	80072a0 <_kill_r>
 8007272:	2b01      	cmp	r3, #1
 8007274:	d00a      	beq.n	800728c <_raise_r+0x4c>
 8007276:	1c59      	adds	r1, r3, #1
 8007278:	d103      	bne.n	8007282 <_raise_r+0x42>
 800727a:	2316      	movs	r3, #22
 800727c:	6003      	str	r3, [r0, #0]
 800727e:	2001      	movs	r0, #1
 8007280:	e7e7      	b.n	8007252 <_raise_r+0x12>
 8007282:	2400      	movs	r4, #0
 8007284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007288:	4628      	mov	r0, r5
 800728a:	4798      	blx	r3
 800728c:	2000      	movs	r0, #0
 800728e:	e7e0      	b.n	8007252 <_raise_r+0x12>

08007290 <raise>:
 8007290:	4b02      	ldr	r3, [pc, #8]	; (800729c <raise+0xc>)
 8007292:	4601      	mov	r1, r0
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	f7ff bfd3 	b.w	8007240 <_raise_r>
 800729a:	bf00      	nop
 800729c:	20000020 	.word	0x20000020

080072a0 <_kill_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	; (80072c0 <_kill_r+0x20>)
 80072a4:	2300      	movs	r3, #0
 80072a6:	4604      	mov	r4, r0
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	602b      	str	r3, [r5, #0]
 80072ae:	f7fa fd1b 	bl	8001ce8 <_kill>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d102      	bne.n	80072bc <_kill_r+0x1c>
 80072b6:	682b      	ldr	r3, [r5, #0]
 80072b8:	b103      	cbz	r3, 80072bc <_kill_r+0x1c>
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	bd38      	pop	{r3, r4, r5, pc}
 80072be:	bf00      	nop
 80072c0:	20000354 	.word	0x20000354

080072c4 <_getpid_r>:
 80072c4:	f7fa bd08 	b.w	8001cd8 <_getpid>

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f000 f894 	bl	80073fc <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__swrite>:
 80072ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	898b      	ldrh	r3, [r1, #12]
 80072f2:	05db      	lsls	r3, r3, #23
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4616      	mov	r6, r2
 80072fa:	d505      	bpl.n	8007308 <__swrite+0x1e>
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	2302      	movs	r3, #2
 8007302:	2200      	movs	r2, #0
 8007304:	f000 f868 	bl	80073d8 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	f000 b817 	b.w	8007350 <_write_r>

08007322 <__sseek>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 f855 	bl	80073d8 <_lseek_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	bf15      	itete	ne
 8007334:	6560      	strne	r0, [r4, #84]	; 0x54
 8007336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800733a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800733e:	81a3      	strheq	r3, [r4, #12]
 8007340:	bf18      	it	ne
 8007342:	81a3      	strhne	r3, [r4, #12]
 8007344:	bd10      	pop	{r4, pc}

08007346 <__sclose>:
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 b813 	b.w	8007374 <_close_r>
	...

08007350 <_write_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	; (8007370 <_write_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fa fcf9 	bl	8001d56 <_write>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_write_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_write_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20000354 	.word	0x20000354

08007374 <_close_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	; (8007390 <_close_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7fa fd05 	bl	8001d8e <_close>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_close_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_close_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20000354 	.word	0x20000354

08007394 <_fstat_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d07      	ldr	r5, [pc, #28]	; (80073b4 <_fstat_r+0x20>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f7fa fd00 	bl	8001da6 <_fstat>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d102      	bne.n	80073b0 <_fstat_r+0x1c>
 80073aa:	682b      	ldr	r3, [r5, #0]
 80073ac:	b103      	cbz	r3, 80073b0 <_fstat_r+0x1c>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
 80073b2:	bf00      	nop
 80073b4:	20000354 	.word	0x20000354

080073b8 <_isatty_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	; (80073d4 <_isatty_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7fa fcff 	bl	8001dc6 <_isatty>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_isatty_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_isatty_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20000354 	.word	0x20000354

080073d8 <_lseek_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d07      	ldr	r5, [pc, #28]	; (80073f8 <_lseek_r+0x20>)
 80073dc:	4604      	mov	r4, r0
 80073de:	4608      	mov	r0, r1
 80073e0:	4611      	mov	r1, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	602a      	str	r2, [r5, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f7fa fcf8 	bl	8001ddc <_lseek>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_lseek_r+0x1e>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_lseek_r+0x1e>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	20000354 	.word	0x20000354

080073fc <_read_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	; (800741c <_read_r+0x20>)
 8007400:	4604      	mov	r4, r0
 8007402:	4608      	mov	r0, r1
 8007404:	4611      	mov	r1, r2
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f7fa fc86 	bl	8001d1c <_read>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_read_r+0x1e>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_read_r+0x1e>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	20000354 	.word	0x20000354

08007420 <_init>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr

0800742c <_fini>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr
