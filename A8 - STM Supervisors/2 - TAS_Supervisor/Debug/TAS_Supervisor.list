
TAS_Supervisor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  0800f788  0800f788  0001f788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010170  08010170  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010170  08010170  00020170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010178  08010178  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010178  08010178  00020178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801017c  0801017c  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010180  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a414  200001f8  08010378  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a60c  08010378  0003a60c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ced1  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d6  00000000  00000000  0004d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  00050ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  000520e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252f9  00000000  00000000  00053558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d412  00000000  00000000  00078851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d063f  00000000  00000000  00095c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001662a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d8  00000000  00000000  001662f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f770 	.word	0x0800f770

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800f770 	.word	0x0800f770

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <startNewRecordFile>:
#include "1-ConfigurationParser.h"

int startNewRecordFile(GeneralCard* Card)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800103e:	af02      	add	r7, sp, #8
 8001040:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001044:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001048:	6018      	str	r0, [r3, #0]
	FRESULT fresult;
	/*
	 * Close current record file
	 */
	if (Card->TAS.RecordFile != NULL)
 800104a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800104e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d012      	beq.n	8001082 <startNewRecordFile+0x4a>
	{
	fresult = f_close(Card->TAS.RecordFile);
 800105c:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001060:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800106a:	4618      	mov	r0, r3
 800106c:	f009 fb5b 	bl	800a726 <f_close>
 8001070:	4603      	mov	r3, r0
 8001072:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
	if (fresult != FR_OK)
 8001076:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <startNewRecordFile+0x4a>
		Error_Handler();
 800107e:	f002 fa61 	bl	8003544 <Error_Handler>
	/*
	 * Check folder size and open new file
	 */


	if (Card->TAS.RecordFileCount == Card->TAS.MaxRecordFolder)
 8001082:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001086:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8d3 22dc 	ldr.w	r2, [r3, #732]	; 0x2dc
 8001090:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001094:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800109e:	429a      	cmp	r2, r3
 80010a0:	f040 8087 	bne.w	80011b2 <startNewRecordFile+0x17a>
	{
		DIR dp;
		uint32_t Oldest = 0xFFFFFFFF;
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		uint32_t Last = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
		fresult = f_opendir(&dp,Card->TAS.RecordFolderName);
 80010b2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80010b6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f103 02cf 	add.w	r2, r3, #207	; 0xcf
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f009 fb57 	bl	800a77a <f_opendir>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
		if (fresult != FR_OK)
 80010d2:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <startNewRecordFile+0xa6>
			Error_Handler();
 80010da:	f002 fa33 	bl	8003544 <Error_Handler>

		FILINFO fno,*fnres;
		for (uint8_t i = 0;i< Card->TAS.MaxRecordFolder;i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
 80010e4:	e035      	b.n	8001152 <startNewRecordFile+0x11a>
		{
			fresult = f_readdir(&dp,&fno);
 80010e6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 fbc5 	bl	800a880 <f_readdir>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
			if (fresult != FR_OK)
 80010fc:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <startNewRecordFile+0xd0>
				Error_Handler();
 8001104:	f002 fa1e 	bl	8003544 <Error_Handler>
			Last = (uint16_t)((fno.fdate) << 16 | fno.ftime);
 8001108:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800110c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	b21a      	sxth	r2, r3
 8001116:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800111a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 800111e:	88db      	ldrh	r3, [r3, #6]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	b29b      	uxth	r3, r3
 8001128:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
			if (Last < Oldest)
 800112c:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 8001130:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001134:	429a      	cmp	r2, r3
 8001136:	d207      	bcs.n	8001148 <startNewRecordFile+0x110>
			{
				Oldest = Last;
 8001138:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 800113c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
				fnres = &fno;
 8001140:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001144:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
		for (uint8_t i = 0;i< Card->TAS.MaxRecordFolder;i++)
 8001148:	f897 335f 	ldrb.w	r3, [r7, #863]	; 0x35f
 800114c:	3301      	adds	r3, #1
 800114e:	f887 335f 	strb.w	r3, [r7, #863]	; 0x35f
 8001152:	f897 235f 	ldrb.w	r2, [r7, #863]	; 0x35f
 8001156:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800115a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8001164:	429a      	cmp	r2, r3
 8001166:	d3be      	bcc.n	80010e6 <startNewRecordFile+0xae>
			}
		}
		char AuxPath[128];
		strcpy(AuxPath,Card->TAS.RecordFolderName);
 8001168:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800116c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f103 02cf 	add.w	r2, r3, #207	; 0xcf
 8001176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f00a fda3 	bl	800bcc8 <strcpy>
		strcat(AuxPath,fnres->altname);
 8001182:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001186:	f103 0209 	add.w	r2, r3, #9
 800118a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f00a fd7d 	bl	800bc90 <strcat>
		fresult = f_unlink(AuxPath);
 8001196:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800119a:	4618      	mov	r0, r3
 800119c:	f009 fbbd 	bl	800a91a <f_unlink>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
		if (fresult != FR_OK)
 80011a6:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <startNewRecordFile+0x17a>
			Error_Handler();
 80011ae:	f002 f9c9 	bl	8003544 <Error_Handler>
	}

	Card->TAS.RecordFileCount++;
 80011b2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80011b6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80011c6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc


	char timestr[128],datestr[128],aux[128];
	HAL_RTC_GetTime(Card->sRTC, &Card->Time, RTC_FORMAT_BIN);
 80011d0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80011d4:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80011de:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80011e2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	339c      	adds	r3, #156	; 0x9c
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	f004 fd31 	bl	8005c54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Card->sRTC, &Card->Date, RTC_FORMAT_BIN);
 80011f2:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80011f6:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8001200:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001204:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3398      	adds	r3, #152	; 0x98
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f004 fd7e 	bl	8005d10 <HAL_RTC_GetDate>
	sprintf((char*)timestr,"%02d_%02d_%02d.csv",Card->Time.Hours, Card->Time.Minutes, Card->Time.Seconds);
 8001214:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001218:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001222:	461a      	mov	r2, r3
 8001224:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001228:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8001232:	4619      	mov	r1, r3
 8001234:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001238:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001242:	f507 7036 	add.w	r0, r7, #728	; 0x2d8
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	460b      	mov	r3, r1
 800124a:	4987      	ldr	r1, [pc, #540]	; (8001468 <startNewRecordFile+0x430>)
 800124c:	f00a fd00 	bl	800bc50 <siprintf>
	sprintf((char*)datestr,"%02d_%02d_%2d_",Card->Date.Date, Card->Date.Month, 2000 + Card->Date.Year);
 8001250:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001254:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800125e:	461a      	mov	r2, r3
 8001260:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001264:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800126e:	4619      	mov	r1, r3
 8001270:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001274:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800127e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001282:	f507 7016 	add.w	r0, r7, #600	; 0x258
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	460b      	mov	r3, r1
 800128a:	4978      	ldr	r1, [pc, #480]	; (800146c <startNewRecordFile+0x434>)
 800128c:	f00a fce0 	bl	800bc50 <siprintf>

	memcpy(Card->TAS.RecordFileName,Card->TAS.RecordFolderName,256);
 8001290:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001294:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f203 10cf 	addw	r0, r3, #463	; 0x1cf
 800129e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80012a2:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	33cf      	adds	r3, #207	; 0xcf
 80012aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ae:	4619      	mov	r1, r3
 80012b0:	f009 ff5e 	bl	800b170 <memcpy>
	strcat(Card->TAS.RecordFileName,"/");
 80012b4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80012b8:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f203 14cf 	addw	r4, r3, #463	; 0x1cf
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7fe ffa4 	bl	8000210 <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4423      	add	r3, r4
 80012cc:	4968      	ldr	r1, [pc, #416]	; (8001470 <startNewRecordFile+0x438>)
 80012ce:	461a      	mov	r2, r3
 80012d0:	460b      	mov	r3, r1
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	8013      	strh	r3, [r2, #0]
	strcat(Card->TAS.RecordFileName,datestr);
 80012d6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80012da:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80012e4:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00a fcd0 	bl	800bc90 <strcat>
	strcat(Card->TAS.RecordFileName,timestr);
 80012f0:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80012f4:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 80012fe:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f00a fcc3 	bl	800bc90 <strcat>
	fresult = f_open(Card->TAS.RecordFile,Card->TAS.RecordFileName,FA_WRITE | FA_CREATE_ALWAYS);
 800130a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800130e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8001318:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800131c:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8001326:	220a      	movs	r2, #10
 8001328:	4619      	mov	r1, r3
 800132a:	f008 fcaf 	bl	8009c8c <f_open>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
	if (fresult != FR_OK)
 8001334:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <startNewRecordFile+0x308>
		Error_Handler();
 800133c:	f002 f902 	bl	8003544 <Error_Handler>


	/*
	 * Try on headers
	 */
	for (uint8_t i = 0; i < 8; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
 8001346:	e029      	b.n	800139c <startNewRecordFile+0x364>
	{
		if (Card->TAS.PT100_SENS[i].ActiveFlag)
 8001348:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 800134c:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8001350:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	2198      	movs	r1, #152	; 0x98
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4413      	add	r3, r2
 800135e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d014      	beq.n	8001392 <startNewRecordFile+0x35a>
		{
			strcat(aux, Card->TAS.PT100_SENS[i].ChannelNickname);
 8001368:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 800136c:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8001370:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 8001374:	2198      	movs	r1, #152	; 0x98
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4413      	add	r3, r2
 8001382:	f103 0209 	add.w	r2, r3, #9
 8001386:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f00a fc7f 	bl	800bc90 <strcat>
	for (uint8_t i = 0; i < 8; i++)
 8001392:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 8001396:	3301      	adds	r3, #1
 8001398:	f887 335e 	strb.w	r3, [r7, #862]	; 0x35e
 800139c:	f897 335e 	ldrb.w	r3, [r7, #862]	; 0x35e
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d9d1      	bls.n	8001348 <startNewRecordFile+0x310>
		}
	}
	for (uint8_t i = 0; i < 8; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 335d 	strb.w	r3, [r7, #861]	; 0x35d
 80013aa:	e03c      	b.n	8001426 <startNewRecordFile+0x3ee>
	{
		if (Card->TAS.TERMSTATE[i].ActiveFlag)
 80013ac:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 80013b0:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80013b4:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	2194      	movs	r1, #148	; 0x94
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d027      	beq.n	800141c <startNewRecordFile+0x3e4>
		{
			strcat(aux, Card->TAS.TERMSTATE[i].ChannelNickname);
 80013cc:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 80013d0:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80013d4:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 80013d8:	2194      	movs	r1, #148	; 0x94
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	4413      	add	r3, r2
 80013e6:	f103 0209 	add.w	r2, r3, #9
 80013ea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00a fc4d 	bl	800bc90 <strcat>
			if (i < 7) strcat(aux, ",");
 80013f6:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d80e      	bhi.n	800141c <startNewRecordFile+0x3e4>
 80013fe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff04 	bl	8000210 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001410:	4413      	add	r3, r2
 8001412:	4918      	ldr	r1, [pc, #96]	; (8001474 <startNewRecordFile+0x43c>)
 8001414:	461a      	mov	r2, r3
 8001416:	460b      	mov	r3, r1
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 8; i++)
 800141c:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 8001420:	3301      	adds	r3, #1
 8001422:	f887 335d 	strb.w	r3, [r7, #861]	; 0x35d
 8001426:	f897 335d 	ldrb.w	r3, [r7, #861]	; 0x35d
 800142a:	2b07      	cmp	r3, #7
 800142c:	d9be      	bls.n	80013ac <startNewRecordFile+0x374>
		}
	}
	fresult = f_puts(aux,Card->TAS.RecordFile);
 800142e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8001432:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800143c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f009 fcf5 	bl	800ae32 <f_puts>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 335c 	strb.w	r3, [r7, #860]	; 0x35c
	if (fresult != FR_OK)
 800144e:	f897 335c 	ldrb.w	r3, [r7, #860]	; 0x35c
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <startNewRecordFile+0x422>
		Error_Handler();
 8001456:	f002 f875 	bl	8003544 <Error_Handler>

	/*
	 * return successful
	 */
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	f507 775b 	add.w	r7, r7, #876	; 0x36c
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	0800f788 	.word	0x0800f788
 800146c:	0800f79c 	.word	0x0800f79c
 8001470:	0800f7ac 	.word	0x0800f7ac
 8001474:	0800f7b0 	.word	0x0800f7b0

08001478 <recordFile>:


int recordFile(GeneralCard* Card)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0b4      	sub	sp, #208	; 0xd0
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	FRESULT fresult;
	if (f_size(Card->TAS.RecordFile) > Card->TAS.MaxRecordFile)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800148e:	429a      	cmp	r2, r3
 8001490:	d902      	bls.n	8001498 <recordFile+0x20>
		startNewRecordFile(Card);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fdd0 	bl	8001038 <startNewRecordFile>

	char aux[128],aux_data[64];

	for (uint8_t i = 0; i < 8; i++)
 8001498:	2300      	movs	r3, #0
 800149a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800149e:	e02c      	b.n	80014fa <recordFile+0x82>
	{
		if (Card->TAS.PT100_SENS[i].ActiveFlag)
 80014a0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	2198      	movs	r1, #152	; 0x98
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01b      	beq.n	80014f0 <recordFile+0x78>
		{
			sprintf(aux_data,"%.6f,",
								Card->TAS.PT100_SENS[i].CurrentTemperature);
 80014b8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	2198      	movs	r1, #152	; 0x98
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80014ca:	681b      	ldr	r3, [r3, #0]
			sprintf(aux_data,"%.6f,",
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f85b 	bl	8000588 <__aeabi_f2d>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	f107 000c 	add.w	r0, r7, #12
 80014da:	4938      	ldr	r1, [pc, #224]	; (80015bc <recordFile+0x144>)
 80014dc:	f00a fbb8 	bl	800bc50 <siprintf>
			strcat(aux, aux_data);
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e8:	4611      	mov	r1, r2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00a fbd0 	bl	800bc90 <strcat>
	for (uint8_t i = 0; i < 8; i++)
 80014f0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80014f4:	3301      	adds	r3, #1
 80014f6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80014fa:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80014fe:	2b07      	cmp	r3, #7
 8001500:	d9ce      	bls.n	80014a0 <recordFile+0x28>
		}
	}
	for (uint8_t i = 0; i < 8; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8001508:	e03c      	b.n	8001584 <recordFile+0x10c>
	{
		if (Card->TAS.TERMSTATE[i].ActiveFlag)
 800150a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	2194      	movs	r1, #148	; 0x94
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02b      	beq.n	800157a <recordFile+0x102>
		{
			sprintf(aux_data,"%d,",
								Card->TAS.TERMSTATE[i].State);
 8001522:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	2194      	movs	r1, #148	; 0x94
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	f603 0329 	addw	r3, r3, #2089	; 0x829
 8001534:	781b      	ldrb	r3, [r3, #0]
			sprintf(aux_data,"%d,",
 8001536:	461a      	mov	r2, r3
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4920      	ldr	r1, [pc, #128]	; (80015c0 <recordFile+0x148>)
 800153e:	4618      	mov	r0, r3
 8001540:	f00a fb86 	bl	800bc50 <siprintf>
			strcat(aux, aux_data);
 8001544:	f107 020c 	add.w	r2, r7, #12
 8001548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f00a fb9e 	bl	800bc90 <strcat>
			if (i < 7) strcat(aux, ",");
 8001554:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001558:	2b06      	cmp	r3, #6
 800155a:	d80e      	bhi.n	800157a <recordFile+0x102>
 800155c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fe55 	bl	8000210 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800156e:	4413      	add	r3, r2
 8001570:	4914      	ldr	r1, [pc, #80]	; (80015c4 <recordFile+0x14c>)
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 8; i++)
 800157a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800157e:	3301      	adds	r3, #1
 8001580:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8001584:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8001588:	2b07      	cmp	r3, #7
 800158a:	d9be      	bls.n	800150a <recordFile+0x92>
		}
	}

	fresult = f_puts(aux,Card->TAS.RecordFile);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8001592:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fc4a 	bl	800ae32 <f_puts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
	if (fresult != FR_OK)
 80015a4:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <recordFile+0x138>
		Error_Handler();
 80015ac:	f001 ffca 	bl	8003544 <Error_Handler>
	return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	37d0      	adds	r7, #208	; 0xd0
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800f7b4 	.word	0x0800f7b4
 80015c0:	0800f7bc 	.word	0x0800f7bc
 80015c4:	0800f7b0 	.word	0x0800f7b0

080015c8 <saveEvent>:

int saveEvent(GeneralCard* Card,uint8_t CH,uint8_t Flag)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	4613      	mov	r3, r2
 80015d6:	70bb      	strb	r3, [r7, #2]
	return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <CreateFoldersStartHeaders>:

int CreateFoldersStartHeaders(GeneralCard* Card)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
	/*
	 * Get RTC time
	 */

	HAL_RTC_GetTime(Card->sRTC, &Card->Time, RTC_FORMAT_BIN);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	339c      	adds	r3, #156	; 0x9c
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	f004 fb2a 	bl	8005c54 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Card->sRTC, &Card->Date, RTC_FORMAT_BIN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3398      	adds	r3, #152	; 0x98
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f004 fb7f 	bl	8005d10 <HAL_RTC_GetDate>

	/*
	 * Create Event and Record Directory
	 */
	FRESULT Res;
	Res = f_mkdir((TCHAR*)Card->TAS.RecordFolderName);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	33cf      	adds	r3, #207	; 0xcf
 8001616:	4618      	mov	r0, r3
 8001618:	f009 fa3a 	bl	800aa90 <f_mkdir>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
	if (Res != FR_OK || Res != FR_EXIST)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <CreateFoldersStartHeaders+0x46>
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d001      	beq.n	8001630 <CreateFoldersStartHeaders+0x4a>
		Error_Handler();
 800162c:	f001 ff8a 	bl	8003544 <Error_Handler>

	startNewRecordFile(Card);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fd01 	bl	8001038 <startNewRecordFile>

	return 1;
 8001636:	2301      	movs	r3, #1

}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <ReadConfigFile>:


int ReadConfigFile(RawConfig* Config)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	f5ad 5da2 	sub.w	sp, sp, #5184	; 0x1440
 8001646:	b081      	sub	sp, #4
 8001648:	af00      	add	r7, sp, #0
 800164a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800164e:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8001652:	6018      	str	r0, [r3, #0]
	FIL fil;
	FRESULT fresult;

	fresult = f_open(&fil,"TAS.csv",FA_READ);
 8001654:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001658:	3b18      	subs	r3, #24
 800165a:	2201      	movs	r2, #1
 800165c:	4939      	ldr	r1, [pc, #228]	; (8001744 <ReadConfigFile+0x104>)
 800165e:	4618      	mov	r0, r3
 8001660:	f008 fb14 	bl	8009c8c <f_open>
 8001664:	4603      	mov	r3, r0
 8001666:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 800166a:	f102 021b 	add.w	r2, r2, #27
 800166e:	7013      	strb	r3, [r2, #0]
	if (fresult != FR_OK)
 8001670:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001674:	f103 031b 	add.w	r3, r3, #27
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <ReadConfigFile+0x42>
		Error_Handler();
 800167e:	f001 ff61 	bl	8003544 <Error_Handler>

    int LineCount = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001688:	f102 021c 	add.w	r2, r2, #28
 800168c:	6013      	str	r3, [r2, #0]
    char LineBuffer[1024];
    while (f_gets(LineBuffer,1024,&fil) != NULL)
 800168e:	e03a      	b.n	8001706 <ReadConfigFile+0xc6>
    {
        strcpy(Config->Labels[LineCount-1],strtok(LineBuffer,","));
 8001690:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001694:	f103 031c 	add.w	r3, r3, #28
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3b01      	subs	r3, #1
 800169c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80016a0:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80016a4:	3396      	adds	r3, #150	; 0x96
 80016a6:	01db      	lsls	r3, r3, #7
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	18d4      	adds	r4, r2, r3
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	3b18      	subs	r3, #24
 80016b2:	4925      	ldr	r1, [pc, #148]	; (8001748 <ReadConfigFile+0x108>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00b f955 	bl	800c964 <strtok>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4619      	mov	r1, r3
 80016be:	4620      	mov	r0, r4
 80016c0:	f00a fb02 	bl	800bcc8 <strcpy>
        strcpy(Config->Values[LineCount-1],strtok(NULL,","));
 80016c4:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80016c8:	f103 031c 	add.w	r3, r3, #28
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80016d4:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	18d4      	adds	r4, r2, r3
 80016de:	491a      	ldr	r1, [pc, #104]	; (8001748 <ReadConfigFile+0x108>)
 80016e0:	2000      	movs	r0, #0
 80016e2:	f00b f93f 	bl	800c964 <strtok>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4620      	mov	r0, r4
 80016ec:	f00a faec 	bl	800bcc8 <strcpy>
        LineCount++;
 80016f0:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 80016f4:	f103 031c 	add.w	r3, r3, #28
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8001700:	f102 021c 	add.w	r2, r2, #28
 8001704:	6013      	str	r3, [r2, #0]
    while (f_gets(LineBuffer,1024,&fil) != NULL)
 8001706:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800170a:	3a18      	subs	r2, #24
 800170c:	f107 0320 	add.w	r3, r7, #32
 8001710:	3b18      	subs	r3, #24
 8001712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001716:	4618      	mov	r0, r3
 8001718:	f009 fad7 	bl	800acca <f_gets>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1b6      	bne.n	8001690 <ReadConfigFile+0x50>
        //HAL_UART_Transmit(&huart6,(uint8_t *)buffer,26,1000);
    }


    f_close(&fil);
 8001722:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001726:	3b18      	subs	r3, #24
 8001728:	4618      	mov	r0, r3
 800172a:	f008 fffc 	bl	800a726 <f_close>
    return LineCount;
 800172e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8001732:	f103 031c 	add.w	r3, r3, #28
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	f507 57a2 	add.w	r7, r7, #5184	; 0x1440
 800173e:	3704      	adds	r7, #4
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	0800f7c0 	.word	0x0800f7c0
 8001748:	0800f7b0 	.word	0x0800f7b0

0800174c <Parser>:

int Parser(GeneralCard* TAS_Card, RawConfig* Config)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	/*
	 * Set CS, EN and TS pins
	 */
	TAS_Card->TAS.PT100_SENS[0].CS_Pin = CS_0_Pin;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175c:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
	TAS_Card->TAS.PT100_SENS[1].CS_Pin = CS_1_Pin;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001766:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
	TAS_Card->TAS.PT100_SENS[2].CS_Pin = CS_2_Pin;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	f8a3 24ac 	strh.w	r2, [r3, #1196]	; 0x4ac
	TAS_Card->TAS.PT100_SENS[3].CS_Pin = CS_3_Pin;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2240      	movs	r2, #64	; 0x40
 8001776:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
	TAS_Card->TAS.PT100_SENS[4].CS_Pin = CS_4_Pin;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001780:	f8a3 25dc 	strh.w	r2, [r3, #1500]	; 0x5dc
	TAS_Card->TAS.PT100_SENS[5].CS_Pin = CS_5_Pin;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	f8a3 2674 	strh.w	r2, [r3, #1652]	; 0x674
	TAS_Card->TAS.PT100_SENS[6].CS_Pin = CS_6_Pin;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001794:	f8a3 270c 	strh.w	r2, [r3, #1804]	; 0x70c
	TAS_Card->TAS.PT100_SENS[7].CS_Pin = CS_7_Pin;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800179e:	f8a3 27a4 	strh.w	r2, [r3, #1956]	; 0x7a4

	TAS_Card->TAS.PT100_SENS[0].CS_Port = CS_0_GPIO_Port;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a9e      	ldr	r2, [pc, #632]	; (8001a20 <Parser+0x2d4>)
 80017a6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
	TAS_Card->TAS.PT100_SENS[1].CS_Port = CS_1_GPIO_Port;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a9c      	ldr	r2, [pc, #624]	; (8001a20 <Parser+0x2d4>)
 80017ae:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	TAS_Card->TAS.PT100_SENS[2].CS_Port = CS_2_GPIO_Port;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a9a      	ldr	r2, [pc, #616]	; (8001a20 <Parser+0x2d4>)
 80017b6:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
	TAS_Card->TAS.PT100_SENS[3].CS_Port = CS_3_GPIO_Port;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a98      	ldr	r2, [pc, #608]	; (8001a20 <Parser+0x2d4>)
 80017be:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	TAS_Card->TAS.PT100_SENS[4].CS_Port = CS_4_GPIO_Port;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a97      	ldr	r2, [pc, #604]	; (8001a24 <Parser+0x2d8>)
 80017c6:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
	TAS_Card->TAS.PT100_SENS[5].CS_Port = CS_5_GPIO_Port;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a95      	ldr	r2, [pc, #596]	; (8001a24 <Parser+0x2d8>)
 80017ce:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
	TAS_Card->TAS.PT100_SENS[6].CS_Port = CS_6_GPIO_Port;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a93      	ldr	r2, [pc, #588]	; (8001a24 <Parser+0x2d8>)
 80017d6:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
	TAS_Card->TAS.PT100_SENS[7].CS_Port = CS_7_GPIO_Port;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a91      	ldr	r2, [pc, #580]	; (8001a24 <Parser+0x2d8>)
 80017de:	f8c3 27a0 	str.w	r2, [r3, #1952]	; 0x7a0

	TAS_Card->TAS.TERMSTATE[0].EN_Pin = EN_0_Pin;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2204      	movs	r2, #4
 80017e6:	f8a3 2838 	strh.w	r2, [r3, #2104]	; 0x838
	TAS_Card->TAS.TERMSTATE[1].EN_Pin = EN_1_Pin;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2208      	movs	r2, #8
 80017ee:	f8a3 28cc 	strh.w	r2, [r3, #2252]	; 0x8cc
	TAS_Card->TAS.TERMSTATE[2].EN_Pin = EN_2_Pin;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2208      	movs	r2, #8
 80017f6:	f8a3 2960 	strh.w	r2, [r3, #2400]	; 0x960
	TAS_Card->TAS.TERMSTATE[3].EN_Pin = EN_3_Pin;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001800:	f8a3 29f4 	strh.w	r2, [r3, #2548]	; 0x9f4
	TAS_Card->TAS.TERMSTATE[4].EN_Pin = EN_4_Pin;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800180a:	f8a3 2a88 	strh.w	r2, [r3, #2696]	; 0xa88
	TAS_Card->TAS.TERMSTATE[5].EN_Pin = EN_5_Pin;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001814:	f8a3 2b1c 	strh.w	r2, [r3, #2844]	; 0xb1c
	TAS_Card->TAS.TERMSTATE[6].EN_Pin = EN_6_Pin;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800181e:	f8a3 2bb0 	strh.w	r2, [r3, #2992]	; 0xbb0
	TAS_Card->TAS.TERMSTATE[7].EN_Pin = EN_7_Pin;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001828:	f8a3 2c44 	strh.w	r2, [r3, #3140]	; 0xc44

	TAS_Card->TAS.TERMSTATE[0].EN_Port = EN_0_GPIO_Port;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <Parser+0x2d4>)
 8001830:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
	TAS_Card->TAS.TERMSTATE[1].EN_Port = EN_1_GPIO_Port;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a7a      	ldr	r2, [pc, #488]	; (8001a20 <Parser+0x2d4>)
 8001838:	f8c3 28c8 	str.w	r2, [r3, #2248]	; 0x8c8
	TAS_Card->TAS.TERMSTATE[2].EN_Port = EN_2_GPIO_Port;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <Parser+0x2dc>)
 8001840:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
	TAS_Card->TAS.TERMSTATE[3].EN_Port = EN_3_GPIO_Port;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a77      	ldr	r2, [pc, #476]	; (8001a24 <Parser+0x2d8>)
 8001848:	f8c3 29f0 	str.w	r2, [r3, #2544]	; 0x9f0
	TAS_Card->TAS.TERMSTATE[4].EN_Port = EN_4_GPIO_Port;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a76      	ldr	r2, [pc, #472]	; (8001a28 <Parser+0x2dc>)
 8001850:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
	TAS_Card->TAS.TERMSTATE[5].EN_Port = EN_5_GPIO_Port;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a74      	ldr	r2, [pc, #464]	; (8001a28 <Parser+0x2dc>)
 8001858:	f8c3 2b18 	str.w	r2, [r3, #2840]	; 0xb18
	TAS_Card->TAS.TERMSTATE[6].EN_Port = EN_6_GPIO_Port;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a72      	ldr	r2, [pc, #456]	; (8001a28 <Parser+0x2dc>)
 8001860:	f8c3 2bac 	str.w	r2, [r3, #2988]	; 0xbac
	TAS_Card->TAS.TERMSTATE[7].EN_Port = EN_7_GPIO_Port;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <Parser+0x2d4>)
 8001868:	f8c3 2c40 	str.w	r2, [r3, #3136]	; 0xc40

	TAS_Card->TAS.TERMSTATE[0].TERM_Pin = TS_0_Pin;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f8a3 2830 	strh.w	r2, [r3, #2096]	; 0x830
	TAS_Card->TAS.TERMSTATE[1].TERM_Pin = TS_1_Pin;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f8a3 28c4 	strh.w	r2, [r3, #2244]	; 0x8c4
	TAS_Card->TAS.TERMSTATE[2].TERM_Pin = TS_2_Pin;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2220      	movs	r2, #32
 8001880:	f8a3 2958 	strh.w	r2, [r3, #2392]	; 0x958
	TAS_Card->TAS.TERMSTATE[3].TERM_Pin = TS_3_Pin;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2210      	movs	r2, #16
 8001888:	f8a3 29ec 	strh.w	r2, [r3, #2540]	; 0x9ec
	TAS_Card->TAS.TERMSTATE[4].TERM_Pin = TS_4_Pin;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2204      	movs	r2, #4
 8001890:	f8a3 2a80 	strh.w	r2, [r3, #2688]	; 0xa80
	TAS_Card->TAS.TERMSTATE[5].TERM_Pin = TS_5_Pin;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800189a:	f8a3 2b14 	strh.w	r2, [r3, #2836]	; 0xb14
	TAS_Card->TAS.TERMSTATE[6].TERM_Pin = TS_6_Pin;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a4:	f8a3 2ba8 	strh.w	r2, [r3, #2984]	; 0xba8
	TAS_Card->TAS.TERMSTATE[7].TERM_Pin = TS_7_Pin;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ae:	f8a3 2c3c 	strh.w	r2, [r3, #3132]	; 0xc3c

	TAS_Card->TAS.TERMSTATE[0].TERM_Port = TS_0_GPIO_Port;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a5a      	ldr	r2, [pc, #360]	; (8001a20 <Parser+0x2d4>)
 80018b6:	f8c3 282c 	str.w	r2, [r3, #2092]	; 0x82c
	TAS_Card->TAS.TERMSTATE[1].TERM_Port = TS_1_GPIO_Port;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <Parser+0x2d4>)
 80018be:	f8c3 28c0 	str.w	r2, [r3, #2240]	; 0x8c0
	TAS_Card->TAS.TERMSTATE[2].TERM_Port = TS_2_GPIO_Port;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <Parser+0x2d8>)
 80018c6:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
	TAS_Card->TAS.TERMSTATE[3].TERM_Port = TS_3_GPIO_Port;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <Parser+0x2d8>)
 80018ce:	f8c3 29e8 	str.w	r2, [r3, #2536]	; 0x9e8
	TAS_Card->TAS.TERMSTATE[4].TERM_Port = TS_4_GPIO_Port;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <Parser+0x2e0>)
 80018d6:	f8c3 2a7c 	str.w	r2, [r3, #2684]	; 0xa7c
	TAS_Card->TAS.TERMSTATE[5].TERM_Port = TS_5_GPIO_Port;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <Parser+0x2d4>)
 80018de:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
	TAS_Card->TAS.TERMSTATE[6].TERM_Port = TS_6_GPIO_Port;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4e      	ldr	r2, [pc, #312]	; (8001a20 <Parser+0x2d4>)
 80018e6:	f8c3 2ba4 	str.w	r2, [r3, #2980]	; 0xba4
	TAS_Card->TAS.TERMSTATE[7].TERM_Port = TS_7_GPIO_Port;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <Parser+0x2d4>)
 80018ee:	f8c3 2c38 	str.w	r2, [r3, #3128]	; 0xc38

    // Set Name
    memcpy(TAS_Card->Card_Name,Config->Values[0],128);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	4618      	mov	r0, r3
 80018fa:	f009 fc39 	bl	800b170 <memcpy>

    // CAN Id
    TAS_Card->Card_Id = atoi(Config->Values[1]);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3380      	adds	r3, #128	; 0x80
 8001902:	4618      	mov	r0, r3
 8001904:	f009 fbf6 	bl	800b0f4 <atoi>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Accept Master Comms
    if (strstr(Config->Values[2],"FALSE") != NULL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001918:	4945      	ldr	r1, [pc, #276]	; (8001a30 <Parser+0x2e4>)
 800191a:	4618      	mov	r0, r3
 800191c:	f00a f9dc 	bl	800bcd8 <strstr>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <Parser+0x1f0>
    else
    {
        TAS_Card->ACH[0] = atoi(Config->Values[2]);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800192c:	4618      	mov	r0, r3
 800192e:	f009 fbe1 	bl	800b0f4 <atoi>
 8001932:	4603      	mov	r3, r0
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    }
    // Accept Communication Card Tx
    if (strstr(Config->Values[3],"FALSE") != NULL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001942:	493b      	ldr	r1, [pc, #236]	; (8001a30 <Parser+0x2e4>)
 8001944:	4618      	mov	r0, r3
 8001946:	f00a f9c7 	bl	800bcd8 <strstr>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d10a      	bne.n	8001966 <Parser+0x21a>
    else
    {
        TAS_Card->ACH[1] = atoi(Config->Values[3]);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001956:	4618      	mov	r0, r3
 8001958:	f009 fbcc 	bl	800b0f4 <atoi>
 800195c:	4603      	mov	r3, r0
 800195e:	b2da      	uxtb	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    }
    
    // Supervisor frequency
    TAS_Card->SuperFSW = atof(Config->Values[4]);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800196c:	4618      	mov	r0, r3
 800196e:	f009 fbbe 	bl	800b0ee <atof>
 8001972:	ec53 2b10 	vmov	r2, r3, d0
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f955 	bl	8000c28 <__aeabi_d2f>
 800197e:	4602      	mov	r2, r0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    TAS_Card->SuperTime = 1/TAS_Card->SuperFSW;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800198c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    // Number of channels

    TAS_Card->TAS.RecordTime = atof(Config->Values[6]);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80019a0:	4618      	mov	r0, r3
 80019a2:	f009 fba4 	bl	800b0ee <atof>
 80019a6:	ec53 2b10 	vmov	r2, r3, d0
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff f91b 	bl	8000be8 <__aeabi_d2uiz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce

    TAS_Card->TAS.MaxRecordFolder = atoi(Config->Values[7]);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80019c2:	4618      	mov	r0, r3
 80019c4:	f009 fb96 	bl	800b0f4 <atoi>
 80019c8:	4603      	mov	r3, r0
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

    TAS_Card->TAS.MaxRecordFile = atoi(Config->Values[8]);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fb8b 	bl	800b0f4 <atoi>
 80019de:	4603      	mov	r3, r0
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

    TAS_Card->TAS.PubTime 		= atoi(Config->Values[10]);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	4618      	mov	r0, r3
 80019f0:	f009 fb80 	bl	800b0f4 <atoi>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8c3 2c48 	str.w	r2, [r3, #3144]	; 0xc48

    memcpy(TAS_Card->TAS.RecordFolderName,Config->Values[9],256);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f103 00cf 	add.w	r0, r3, #207	; 0xcf
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8001a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f009 fbae 	bl	800b170 <memcpy>

    // PT100 Configurations
    for (uint8_t i = 0,j = 11; i < 8; i++,j+=3)
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	230b      	movs	r3, #11
 8001a1a:	73bb      	strb	r3, [r7, #14]
 8001a1c:	e068      	b.n	8001af0 <Parser+0x3a4>
 8001a1e:	bf00      	nop
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	0800f7c8 	.word	0x0800f7c8
    {
    	if (strstr(Config->Values[j],"0") != NULL);
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	01db      	lsls	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2130      	movs	r1, #48	; 0x30
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00a f935 	bl	800bcae <strchr>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d14c      	bne.n	8001ae4 <Parser+0x398>
    	else
    	{
    		TAS_Card->TAS.PT100_SENS[i].ActiveFlag = 1;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	2198      	movs	r1, #152	; 0x98
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
    		memcpy(TAS_Card->TAS.PT100_SENS[i].ChannelNickname,Config->Values[j+1],128);
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2298      	movs	r2, #152	; 0x98
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f103 0009 	add.w	r0, r3, #9
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	3301      	adds	r3, #1
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f009 fb76 	bl	800b170 <memcpy>
    		TAS_Card->TAS.PT100_SENS[i].WarningTemperature = atof(Config->Values[j+2]);
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	3302      	adds	r3, #2
 8001a88:	01db      	lsls	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f009 fb2d 	bl	800b0ee <atof>
 8001a94:	ec53 2b10 	vmov	r2, r3, d0
 8001a98:	7bfc      	ldrb	r4, [r7, #15]
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8c3 	bl	8000c28 <__aeabi_d2f>
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	2398      	movs	r3, #152	; 0x98
 8001aa8:	fb04 f303 	mul.w	r3, r4, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001ab2:	6019      	str	r1, [r3, #0]
    		TAS_Card->TAS.PT100_SENS[i].LimitTemperature = atof(Config->Values[j+3]);
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	3303      	adds	r3, #3
 8001ab8:	01db      	lsls	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f009 fb15 	bl	800b0ee <atof>
 8001ac4:	ec53 2b10 	vmov	r2, r3, d0
 8001ac8:	7bfc      	ldrb	r4, [r7, #15]
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7ff f8ab 	bl	8000c28 <__aeabi_d2f>
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	2398      	movs	r3, #152	; 0x98
 8001ad8:	fb04 f303 	mul.w	r3, r4, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001ae2:	6019      	str	r1, [r3, #0]
    for (uint8_t i = 0,j = 11; i < 8; i++,j+=3)
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	7bbb      	ldrb	r3, [r7, #14]
 8001aec:	3303      	adds	r3, #3
 8001aee:	73bb      	strb	r3, [r7, #14]
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d99e      	bls.n	8001a34 <Parser+0x2e8>
    	}
    }
    // Thermostat Configurations
   for (uint8_t i = 0,j = 43; i < 8; i++,j+=2)
 8001af6:	2300      	movs	r3, #0
 8001af8:	737b      	strb	r3, [r7, #13]
 8001afa:	232b      	movs	r3, #43	; 0x2b
 8001afc:	733b      	strb	r3, [r7, #12]
 8001afe:	e043      	b.n	8001b88 <Parser+0x43c>
   {
	if (strstr(Config->Values[j],"0") != NULL);
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	01db      	lsls	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	2130      	movs	r1, #48	; 0x30
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00a f8cf 	bl	800bcae <strchr>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d132      	bne.n	8001b7c <Parser+0x430>
	else
	{
		TAS_Card->TAS.TERMSTATE[i].ActiveFlag = 1;
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	2194      	movs	r1, #148	; 0x94
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(TAS_Card->TAS.TERMSTATE[i].EN_Port,TAS_Card->TAS.TERMSTATE[i].EN_Pin,GPIO_PIN_SET);
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	2194      	movs	r1, #148	; 0x94
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	2194      	movs	r1, #148	; 0x94
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	f603 0338 	addw	r3, r3, #2104	; 0x838
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4619      	mov	r1, r3
 8001b52:	f003 f97f 	bl	8004e54 <HAL_GPIO_WritePin>
		memcpy(TAS_Card->TAS.TERMSTATE[i].ChannelNickname,Config->Values[j+1],128);
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	2294      	movs	r2, #148	; 0x94
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	f103 0009 	add.w	r0, r3, #9
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	4619      	mov	r1, r3
 8001b78:	f009 fafa 	bl	800b170 <memcpy>
   for (uint8_t i = 0,j = 43; i < 8; i++,j+=2)
 8001b7c:	7b7b      	ldrb	r3, [r7, #13]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	737b      	strb	r3, [r7, #13]
 8001b82:	7b3b      	ldrb	r3, [r7, #12]
 8001b84:	3302      	adds	r3, #2
 8001b86:	733b      	strb	r3, [r7, #12]
 8001b88:	7b7b      	ldrb	r3, [r7, #13]
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d9b8      	bls.n	8001b00 <Parser+0x3b4>

	}
   }
    TAS_Card->ConfiguredFlag = 1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd90      	pop	{r4, r7, pc}

08001ba0 <lowerSFL>:
/**
 * Other Functions
 */

void lowerSFL()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SFLH_Out_GPIO_Port,SFLH_Out_Pin,SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <lowerSFL+0x1c>)
 8001baa:	f003 f953 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SFLL_Out_GPIO_Port,SFLL_Out_Pin,SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <lowerSFL+0x20>)
 8001bb4:	f003 f94e 	bl	8004e54 <HAL_GPIO_WritePin>
	return;
 8001bb8:	bf00      	nop
}
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <superRoutine>:

/**
 * Supervision Routines
 */
void superRoutine(GeneralCard* Card)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b091      	sub	sp, #68	; 0x44
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	static uint8_t OutSideSFL = 0;

	/*
	 * Get Temperatures
	 */
	for (uint8_t i = 0;i < 8; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001bd2:	e023      	b.n	8001c1c <superRoutine+0x58>
	{
		if (Card->TAS.PT100_SENS[i].ActiveFlag)
 8001bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	2198      	movs	r1, #152	; 0x98
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <superRoutine+0x4e>
		{
			Card->TAS.PT100_SENS[i].CurrentTemperature = MAX31865_readTemp(Card,i);
 8001bec:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8001bf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fc9a 	bl	8002530 <MAX31865_readTemp>
 8001bfc:	eef0 7a40 	vmov.f32	s15, s0
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	2398      	movs	r3, #152	; 0x98
 8001c04:	fb04 f303 	mul.w	r3, r4, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0;i < 8; i++)
 8001c12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c16:	3301      	adds	r3, #1
 8001c18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001c20:	2b07      	cmp	r3, #7
 8001c22:	d9d7      	bls.n	8001bd4 <superRoutine+0x10>
	}

	/*
	 * Check Thermostat
	 */
	for (uint8_t i = 0;i < 8; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c2a:	e034      	b.n	8001c96 <superRoutine+0xd2>
	{
		if (Card->TAS.TERMSTATE[i].ActiveFlag)
 8001c2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	2194      	movs	r1, #148	; 0x94
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <superRoutine+0xc8>
		{
			Card->TAS.TERMSTATE[i].State = HAL_GPIO_ReadPin(Card->TAS.TERMSTATE[i].TERM_Port,Card->TAS.TERMSTATE[i].TERM_Pin);
 8001c44:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	2194      	movs	r1, #148	; 0x94
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	2194      	movs	r1, #148	; 0x94
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6303 	add.w	r3, r3, #2096	; 0x830
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8001c70:	4619      	mov	r1, r3
 8001c72:	f003 f8d7 	bl	8004e24 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	2394      	movs	r3, #148	; 0x94
 8001c7e:	fb04 f303 	mul.w	r3, r4, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	f603 0329 	addw	r3, r3, #2089	; 0x829
 8001c88:	460a      	mov	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0;i < 8; i++)
 8001c8c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c90:	3301      	adds	r3, #1
 8001c92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c9a:	2b07      	cmp	r3, #7
 8001c9c:	d9c6      	bls.n	8001c2c <superRoutine+0x68>
	}

	/*
	 * Check SFL
	 */
	if ((!HAL_GPIO_ReadPin(SFLH_In_GPIO_Port,SFLH_In_Pin) || HAL_GPIO_ReadPin(SFLL_In_GPIO_Port,SFLL_In_Pin)) && !OutSideSFL)
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	4891      	ldr	r0, [pc, #580]	; (8001ee8 <superRoutine+0x324>)
 8001ca2:	f003 f8bf 	bl	8004e24 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <superRoutine+0xf6>
 8001cac:	2101      	movs	r1, #1
 8001cae:	488f      	ldr	r0, [pc, #572]	; (8001eec <superRoutine+0x328>)
 8001cb0:	f003 f8b8 	bl	8004e24 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <superRoutine+0x10e>
 8001cba:	4b8d      	ldr	r3, [pc, #564]	; (8001ef0 <superRoutine+0x32c>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <superRoutine+0x10e>
	{
		saveEvent(Card,100,SFL);
 8001cc2:	2264      	movs	r2, #100	; 0x64
 8001cc4:	2164      	movs	r1, #100	; 0x64
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fc7e 	bl	80015c8 <saveEvent>
		OutSideSFL = 1;
 8001ccc:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <superRoutine+0x32c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
	}

	/*
	 * Check if Out-Of-Bounds
	 */
	for (uint8_t i = 0;i < 8; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001cd8:	e0a1      	b.n	8001e1e <superRoutine+0x25a>
	{
		 if (Card->TAS.PT100_SENS[i].CurrentTemperature > Card->TAS.PT100_SENS[i].LimitTemperature)
 8001cda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2198      	movs	r1, #152	; 0x98
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001cec:	ed93 7a00 	vldr	s14, [r3]
 8001cf0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	2198      	movs	r1, #152	; 0x98
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	dd34      	ble.n	8001d7a <superRoutine+0x1b6>
		 {
			 /*
			  * Lower SFL
			  */

			 lowerSFL();
 8001d10:	f7ff ff46 	bl	8001ba0 <lowerSFL>

			 uint8_t Message[5];
			 union Data d;
			 d.Number = Card->TAS.PT100_SENS[i].CurrentTemperature;
 8001d14:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	2198      	movs	r1, #152	; 0x98
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
			 memcpy(Message,d.String,4);
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
			 Message[4] = i;
 8001d2e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			 Card->Tx.DLC = 6;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2206      	movs	r2, #6
 8001d3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			 Card->Tx.IDE = CAN_ID_STD;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			 Card->Tx.RTR = CAN_RTR_DATA;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			 Card->Tx.StdId = idBuilder(Card, MASTER, FAIL);
 8001d4e:	2211      	movs	r2, #17
 8001d50:	2110      	movs	r1, #16
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f934 	bl	8001fc0 <idBuilder>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			 uint32_t MailBox;
			 HAL_CAN_AddTxMessage(Card->CAN,&Card->Tx,Message,&MailBox);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8001d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d70:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d74:	f002 f986 	bl	8004084 <HAL_CAN_AddTxMessage>
 8001d78:	e04c      	b.n	8001e14 <superRoutine+0x250>
		 }
		 else if (Card->TAS.PT100_SENS[i].CurrentTemperature > Card->TAS.PT100_SENS[i].WarningTemperature)
 8001d7a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	2198      	movs	r1, #152	; 0x98
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	2198      	movs	r1, #152	; 0x98
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd31      	ble.n	8001e14 <superRoutine+0x250>
		 {
			 uint8_t Message[5];
			 union Data d;
			 d.Number = Card->TAS.PT100_SENS[i].CurrentTemperature;
 8001db0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	2198      	movs	r1, #152	; 0x98
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
			 memcpy(Message,d.String,4);
 8001dc8:	623b      	str	r3, [r7, #32]
			 Message[4] = i;
 8001dca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			 Card->Tx.DLC = 6;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			 Card->Tx.IDE = CAN_ID_STD;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			 Card->Tx.RTR = CAN_RTR_DATA;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			 Card->Tx.StdId = idBuilder(Card, MASTER, WARN);
 8001dea:	2210      	movs	r2, #16
 8001dec:	2110      	movs	r1, #16
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8e6 	bl	8001fc0 <idBuilder>
 8001df4:	4602      	mov	r2, r0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			 uint32_t MailBox;
			 HAL_CAN_AddTxMessage(Card->CAN,&Card->Tx,Message,&MailBox);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	f107 0220 	add.w	r2, r7, #32
 8001e10:	f002 f938 	bl	8004084 <HAL_CAN_AddTxMessage>
	for (uint8_t i = 0;i < 8; i++)
 8001e14:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001e1e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	f67f af59 	bls.w	8001cda <superRoutine+0x116>
		 }
	}

	for (int i = 0;i < 6; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e2c:	e03f      	b.n	8001eae <superRoutine+0x2ea>
	{
		 if (!Card->TAS.TERMSTATE[i].State)
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e32:	2194      	movs	r1, #148	; 0x94
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f603 0329 	addw	r3, r3, #2089	; 0x829
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d131      	bne.n	8001ea8 <superRoutine+0x2e4>
		 {
			 /*
			  * Lower SFL
			  */

			 lowerSFL();
 8001e44:	f7ff feac 	bl	8001ba0 <lowerSFL>

			 uint8_t Message[5];
			 union Data d;
			 d.Number = Card->TAS.PT100_SENS[i].CurrentTemperature;
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	2198      	movs	r1, #152	; 0x98
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
			 memcpy(Message,d.String,4);
 8001e5e:	613b      	str	r3, [r7, #16]
			 Message[4] = i;
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	753b      	strb	r3, [r7, #20]
			 Card->Tx.DLC = 6;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2206      	movs	r2, #6
 8001e6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			 Card->Tx.IDE = CAN_ID_STD;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			 Card->Tx.RTR = CAN_RTR_DATA;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			 Card->Tx.StdId = idBuilder(Card, MASTER, FAIL);
 8001e7e:	2211      	movs	r2, #17
 8001e80:	2110      	movs	r1, #16
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f89c 	bl	8001fc0 <idBuilder>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			 uint32_t MailBox;
			 HAL_CAN_AddTxMessage(Card->CAN,&Card->Tx,Message,&MailBox);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f103 01b4 	add.w	r1, r3, #180	; 0xb4
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	f107 0210 	add.w	r2, r7, #16
 8001ea4:	f002 f8ee 	bl	8004084 <HAL_CAN_AddTxMessage>
	for (int i = 0;i < 6; i++)
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	3301      	adds	r3, #1
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	ddbc      	ble.n	8001e2e <superRoutine+0x26a>
	}
	/*
	 * Increase Event Buffer and Check for Record Time
	 */

	Card->TAS.SuperRecCounter++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

	if (Card->TAS.SuperRecCounter >= Card->TAS.RecordTime)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	f892 20ce 	ldrb.w	r2, [r2, #206]	; 0xce
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d306      	bcc.n	8001ee0 <superRoutine+0x31c>
	{
		Card->TAS.SuperRecCounter = 0;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
		recordFile(Card);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff facc 	bl	8001478 <recordFile>
	}

}
 8001ee0:	bf00      	nop
 8001ee2:	3744      	adds	r7, #68	; 0x44
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd90      	pop	{r4, r7, pc}
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	20000214 	.word	0x20000214

08001ef4 <startRoutine>:

/**
 * Start Routine
 */
void startRoutine(GeneralCard* Card)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	/**
	 * Create Folder Structures
	 */
	CreateFoldersStartHeaders(Card);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fb72 	bl	80015e6 <CreateFoldersStartHeaders>

	/*
	 * Initialise MAX31865s
	 */
	MAX31865_init(Card,3);
 8001f02:	2103      	movs	r1, #3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fabf 	bl	8002488 <MAX31865_init>

	/**
	 * Configures Timer
	 */
	uint32_t SystFreq = HAL_RCC_GetHCLKFreq();
 8001f0a:	f003 f9a7 	bl	800525c <HAL_RCC_GetHCLKFreq>
 8001f0e:	60f8      	str	r0, [r7, #12]

	Card->sTim->Init.Prescaler = 2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	2202      	movs	r2, #2
 8001f18:	605a      	str	r2, [r3, #4]
	Card->sTim->Init.Period = (uint32_t)(SystFreq/Card->SuperFSW*0.5);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	ee07 3a90 	vmov	s15, r3
 8001f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001f2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f2e:	ee16 0a90 	vmov	r0, s13
 8001f32:	f7fe fb29 	bl	8000588 <__aeabi_f2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <startRoutine+0xa0>)
 8001f3c:	f7fe fb7c 	bl	8000638 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8001f4e:	f7fe fe4b 	bl	8000be8 <__aeabi_d2uiz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60e3      	str	r3, [r4, #12]

	if (HAL_TIM_Base_Init(Card->sTim) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f004 fbf7 	bl	8006750 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <startRoutine+0x78>
	{
	   Error_Handler();
 8001f68:	f001 faec 	bl	8003544 <Error_Handler>
	}

	/*
	 * Start Interrupt
	 */
	HAL_TIM_Base_Start_IT(Card->sTim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fc3c 	bl	80067f0 <HAL_TIM_Base_Start_IT>

	/*
	 * Transmit Start Successful
	 */
	uint8_t Data[2];
	uint8_t DLC = 2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	72fb      	strb	r3, [r7, #11]
	canTX(Card,Data,DLC,FILT);
 8001f7c:	7afa      	ldrb	r2, [r7, #11]
 8001f7e:	f107 0108 	add.w	r1, r7, #8
 8001f82:	2303      	movs	r3, #3
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f8a7 	bl	80020d8 <canTX>
}
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	3fe00000 	.word	0x3fe00000

08001f98 <stopRoutine>:

/**
 * Stop Routine not used in SAC
 */
void stopRoutine(GeneralCard* Card)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <recalRoutine>:

/*
 * Recal Routine
 */
void recalRoutine(GeneralCard* Card)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <idBuilder>:
 **********************************/
/**
 * CAN Id Builder
 */
uint32_t idBuilder(GeneralCard* Card,uint8_t Dest, uint8_t Function)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	70bb      	strb	r3, [r7, #2]
	// Build identifier
	uint32_t Header = Card->Card_Id<<7;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001fd6:	01db      	lsls	r3, r3, #7
 8001fd8:	60fb      	str	r3, [r7, #12]
	Header = Header + (Dest << 3);
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
	Header = Header + (Function);
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
	Header = Header << 5;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	60fb      	str	r3, [r7, #12]

	return Header;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <idParser>:

/**
 * CAN Id Parser
 */
uint8_t idParser(GeneralCard* Card, uint32_t Id)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	// Save Rx Id in separate variable
		uint16_t Header = Id;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	81fb      	strh	r3, [r7, #14]

		// Parse
		uint8_t Source = (Header >> 5) >> 7;
 8002010:	89fb      	ldrh	r3, [r7, #14]
 8002012:	0b1b      	lsrs	r3, r3, #12
 8002014:	b29b      	uxth	r3, r3
 8002016:	737b      	strb	r3, [r7, #13]
		uint8_t Destination = ((Header >> 5) >> 3) & 0b00000000000000000000000000001111;
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	b29b      	uxth	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	733b      	strb	r3, [r7, #12]
		uint8_t Function = (Header >> 5) & 0b00000000000000000000000000000111;
 8002026:	89fb      	ldrh	r3, [r7, #14]
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b29b      	uxth	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	72fb      	strb	r3, [r7, #11]

		// Check Source Id
		if (Source != Card->ACH[0] && Source != Card->ACH[1])
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800203a:	7b7a      	ldrb	r2, [r7, #13]
 800203c:	429a      	cmp	r2, r3
 800203e:	d007      	beq.n	8002050 <idParser+0x4e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8002046:	7b7a      	ldrb	r2, [r7, #13]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <idParser+0x4e>
			return 0;
 800204c:	2300      	movs	r3, #0
 800204e:	e00c      	b.n	800206a <idParser+0x68>

		// Check if destination Id is valid
		if (Destination != Card->Card_Id)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002056:	7b3a      	ldrb	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <idParser+0x5e>
			return 0;
 800205c:	2300      	movs	r3, #0
 800205e:	e004      	b.n	800206a <idParser+0x68>

		Card->RecentRx = Source;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7b7a      	ldrb	r2, [r7, #13]
 8002064:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		// Return Function
		return Function;
 8002068:	7afb      	ldrb	r3, [r7, #11]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <canParser>:

/**
 * CAN Router
 */
void canParser(GeneralCard* Card, uint32_t DLC,CAN_RxHeaderTypeDef* RxHeader,uint8_t *Data)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
	uint8_t Function;

	/*
	 * Check Payload Size
	 */
	if (DLC < 1)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01e      	beq.n	80020c8 <canParser+0x52>
		return;

	/*
	 * Check if relevant id
	 */
	Function = idParser(Card,RxHeader->StdId);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff ffb6 	bl	8002002 <idParser>
 8002096:	4603      	mov	r3, r0
 8002098:	75fb      	strb	r3, [r7, #23]
	if (!Function)
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <canParser+0x56>
		return;

	/*
	 * Parse Function
	 */
	switch (Function)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d00c      	beq.n	80020c0 <canParser+0x4a>
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	dc12      	bgt.n	80020d0 <canParser+0x5a>
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <canParser+0x3e>
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <canParser+0x44>
			stopRoutine(Card);
		case RECAL:
			recalRoutine(Card);
		}

	return;
 80020b2:	e00d      	b.n	80020d0 <canParser+0x5a>
			startRoutine(Card);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff ff1d 	bl	8001ef4 <startRoutine>
			stopRoutine(Card);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff ff6c 	bl	8001f98 <stopRoutine>
			recalRoutine(Card);
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff ff73 	bl	8001fac <recalRoutine>
	return;
 80020c6:	e003      	b.n	80020d0 <canParser+0x5a>
		return;
 80020c8:	bf00      	nop
 80020ca:	e002      	b.n	80020d2 <canParser+0x5c>
		return;
 80020cc:	bf00      	nop
 80020ce:	e000      	b.n	80020d2 <canParser+0x5c>
	return;
 80020d0:	bf00      	nop
}
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <canTX>:

/**
 * CAN Tx Build
 */
void canTX(GeneralCard* Card,uint8_t* Data,uint8_t DLC,uint8_t Function)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	460b      	mov	r3, r1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	4613      	mov	r3, r2
 80020ec:	71bb      	strb	r3, [r7, #6]

}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <spi_write>:
 *
 * @param data Pointer to transmit buffer
 * @param len  Amount of bytest to send
 */
void spi_write(uint8_t *data, uint8_t len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	e032      	b.n	8002174 <spi_write+0x78>
    {
        for (int8_t i = 7; i >= 0; i--)
 800210e:	2307      	movs	r3, #7
 8002110:	73bb      	strb	r3, [r7, #14]
 8002112:	e028      	b.n	8002166 <spi_write+0x6a>
        {
            HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, (data[x] & (1 << i)));
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b25a      	sxtb	r2, r3
 800211e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	b25b      	sxtb	r3, r3
 800212a:	4013      	ands	r3, r2
 800212c:	b25b      	sxtb	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	2102      	movs	r1, #2
 8002134:	4814      	ldr	r0, [pc, #80]	; (8002188 <spi_write+0x8c>)
 8002136:	f002 fe8d 	bl	8004e54 <HAL_GPIO_WritePin>
            DELAY(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f001 fd5e 	bl	8003bfc <HAL_Delay>
            HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	2101      	movs	r1, #1
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <spi_write+0x8c>)
 8002146:	f002 fe85 	bl	8004e54 <HAL_GPIO_WritePin>
            DELAY(1);
 800214a:	2001      	movs	r0, #1
 800214c:	f001 fd56 	bl	8003bfc <HAL_Delay>
            HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2101      	movs	r1, #1
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <spi_write+0x8c>)
 8002156:	f002 fe7d 	bl	8004e54 <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 800215a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	73bb      	strb	r3, [r7, #14]
 8002166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	dad2      	bge.n	8002114 <spi_write+0x18>
    for (uint8_t x = 0; x < len; x++)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3301      	adds	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3c8      	bcc.n	800210e <spi_write+0x12>
        }
    }

}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40020000 	.word	0x40020000

0800218c <spi_read>:
 *
 * @param buffer Pointer to rx buffer
 * @param len Amount of bytes to receive
 */
void spi_read(uint8_t *buffer, uint8_t len)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e03e      	b.n	800221c <spi_read+0x90>
    {
        buffer[x] = 0;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]

        for (int8_t i = 7; i >= 0; i--)
 80021a8:	2307      	movs	r3, #7
 80021aa:	73bb      	strb	r3, [r7, #14]
 80021ac:	e02f      	b.n	800220e <spi_read+0x82>
        {
            buffer[x] <<= 1;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	440b      	add	r3, r1
 80021bc:	0052      	lsls	r2, r2, #1
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2101      	movs	r1, #1
 80021c6:	481a      	ldr	r0, [pc, #104]	; (8002230 <spi_read+0xa4>)
 80021c8:	f002 fe44 	bl	8004e54 <HAL_GPIO_WritePin>
            DELAY(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f001 fd15 	bl	8003bfc <HAL_Delay>
            buffer[x] |= HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin);
 80021d2:	2104      	movs	r1, #4
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <spi_read+0xa4>)
 80021d6:	f002 fe25 	bl	8004e24 <HAL_GPIO_ReadPin>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	440b      	add	r3, r1
 80021ec:	4302      	orrs	r2, r0
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
            DELAY(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f001 fd02 	bl	8003bfc <HAL_Delay>
            HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2101      	movs	r1, #1
 80021fc:	480c      	ldr	r0, [pc, #48]	; (8002230 <spi_read+0xa4>)
 80021fe:	f002 fe29 	bl	8004e54 <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 8002202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73bb      	strb	r3, [r7, #14]
 800220e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dacb      	bge.n	80021ae <spi_read+0x22>
    for (uint8_t x = 0; x < len; x++)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	3301      	adds	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	429a      	cmp	r2, r3
 8002222:	d3bc      	bcc.n	800219e <spi_read+0x12>
        }
    }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40020000 	.word	0x40020000

08002234 <MAX31865_read>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len,GeneralCard* TAS,uint8_t Id)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	4613      	mov	r3, r2
 8002244:	73bb      	strb	r3, [r7, #14]
    addr &= ~MAX31865_READ;                                     // Force read bit on address
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(TAS->TAS.PT100_SENS[Id].CS_Port, TAS->TAS.PT100_SENS[Id].CS_Pin, 0);          // Enable CE
 800224a:	7e3b      	ldrb	r3, [r7, #24]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	2198      	movs	r1, #152	; 0x98
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	7e3b      	ldrb	r3, [r7, #24]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	2198      	movs	r1, #152	; 0x98
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	4619      	mov	r1, r3
 8002272:	f002 fdef 	bl	8004e54 <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                        // Write addr
 8002276:	f107 030f 	add.w	r3, r7, #15
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff3d 	bl	80020fc <spi_write>
    spi_read(buffer, len);                                      // Read data
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	4619      	mov	r1, r3
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f7ff ff80 	bl	800218c <spi_read>

    HAL_GPIO_WritePin(TAS->TAS.PT100_SENS[Id].CS_Port, TAS->TAS.PT100_SENS[Id].CS_Pin, 1);          // Disable CE
 800228c:	7e3b      	ldrb	r3, [r7, #24]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	2198      	movs	r1, #152	; 0x98
 8002292:	fb01 f303 	mul.w	r3, r1, r3
 8002296:	4413      	add	r3, r2
 8002298:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	7e3b      	ldrb	r3, [r7, #24]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	2198      	movs	r1, #152	; 0x98
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4619      	mov	r1, r3
 80022b4:	f002 fdce 	bl	8004e54 <HAL_GPIO_WritePin>
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <MAX31865_write>:
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_write(uint8_t addr, uint8_t data,GeneralCard* TAS,uint8_t Id)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	603a      	str	r2, [r7, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	460b      	mov	r3, r1
 80022d0:	71bb      	strb	r3, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	717b      	strb	r3, [r7, #5]
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(TAS->TAS.PT100_SENS[Id].CS_Port, TAS->TAS.PT100_SENS[Id].CS_Pin, 0);      // Enable CE
 80022e0:	797b      	ldrb	r3, [r7, #5]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	2198      	movs	r1, #152	; 0x98
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	797b      	ldrb	r3, [r7, #5]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	2198      	movs	r1, #152	; 0x98
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2200      	movs	r2, #0
 8002306:	4619      	mov	r1, r3
 8002308:	f002 fda4 	bl	8004e54 <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                    // Write addr
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fef3 	bl	80020fc <spi_write>
    spi_write(&data, 1);                                    // Write data
 8002316:	1dbb      	adds	r3, r7, #6
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff feee 	bl	80020fc <spi_write>

    HAL_GPIO_WritePin(TAS->TAS.PT100_SENS[Id].CS_Port, TAS->TAS.PT100_SENS[Id].CS_Pin, 1);      // Disable CE
 8002320:	797b      	ldrb	r3, [r7, #5]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	2198      	movs	r1, #152	; 0x98
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	797b      	ldrb	r3, [r7, #5]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	2198      	movs	r1, #152	; 0x98
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f002 fd84 	bl	8004e54 <HAL_GPIO_WritePin>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <enableBias>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void enableBias(uint8_t enable,GeneralCard* TAS,uint8_t Id)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af02      	add	r7, sp, #8
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	4613      	mov	r3, r2
 8002362:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1,TAS,Id);
 8002364:	f107 010f 	add.w	r1, r7, #15
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff ff5f 	bl	8002234 <MAX31865_read>

    if (enable)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <enableBias+0x34>
    {
        status |= MAX31856_CONFIG_BIAS;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002382:	b2db      	uxtb	r3, r3
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e004      	b.n	8002392 <enableBias+0x3e>
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status,TAS,Id);
 8002392:	7bf9      	ldrb	r1, [r7, #15]
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ff91 	bl	80022c0 <MAX31865_write>
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <autoConvert>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void autoConvert(uint8_t enable,GeneralCard* TAS,uint8_t Id)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	4603      	mov	r3, r0
 80023ae:	6039      	str	r1, [r7, #0]
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1,TAS,Id);
 80023b6:	f107 010f 	add.w	r1, r7, #15
 80023ba:	79bb      	ldrb	r3, [r7, #6]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff ff36 	bl	8002234 <MAX31865_read>

    if (enable)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <autoConvert+0x34>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e004      	b.n	80023e4 <autoConvert+0x3e>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status,TAS,Id);
 80023e4:	7bf9      	ldrb	r1, [r7, #15]
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff ff68 	bl	80022c0 <MAX31865_write>
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <setWires>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void setWires(uint8_t numwires,GeneralCard* TAS,uint8_t Id)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	4613      	mov	r3, r2
 8002406:	71bb      	strb	r3, [r7, #6]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1,TAS,Id);
 8002408:	f107 010f 	add.w	r1, r7, #15
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff ff0d 	bl	8002234 <MAX31865_read>

    if (numwires == 3) // 3-wire
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d105      	bne.n	800242c <setWires+0x34>
    {
        status |= MAX31856_CONFIG_3WIRE;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	b2db      	uxtb	r3, r3
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e004      	b.n	8002436 <setWires+0x3e>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	f023 0310 	bic.w	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status,TAS,Id);
 8002436:	7bf9      	ldrb	r1, [r7, #15]
 8002438:	79bb      	ldrb	r3, [r7, #6]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff ff3f 	bl	80022c0 <MAX31865_write>
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <single_shot>:

/**
 * Perform a single shot conversion
 */
void single_shot(GeneralCard* TAS,uint8_t Id)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af02      	add	r7, sp, #8
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
    uint8_t status;

    // Read config register
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1,TAS,Id);
 8002456:	f107 010f 	add.w	r1, r7, #15
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff fee6 	bl	8002234 <MAX31865_read>

    // Enable 1shot bit, and write back
    status |= MAX31856_CONFIG_1SHOT;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	f043 0320 	orr.w	r3, r3, #32
 800246e:	b2db      	uxtb	r3, r3
 8002470:	73fb      	strb	r3, [r7, #15]
    MAX31865_write(MAX31856_CONFIG_REG, status,TAS,Id);
 8002472:	7bf9      	ldrb	r1, [r7, #15]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff ff21 	bl	80022c0 <MAX31865_write>

}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <MAX31865_init>:
 *
 * @param max_gpio  MAX31865_GPIO structure with pinout
 * @param wires     Amount of wires on the temperature probe (2,3 or 4)
 */
void MAX31865_init(GeneralCard* TAS,uint8_t wires)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
    //m_gpio = max_gpio;


    // Datalines in reset state
	for (uint8_t i = 0; i < 8; i++)
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e03f      	b.n	800251a <MAX31865_init+0x92>
	{
		if (TAS->TAS.PT100_SENS[i].ActiveFlag)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	2198      	movs	r1, #152	; 0x98
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d031      	beq.n	8002514 <MAX31865_init+0x8c>
		{
			HAL_GPIO_WritePin(TAS->TAS.PT100_SENS[i].CS_Port,TAS->TAS.PT100_SENS[i].CS_Pin, 1);
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	2198      	movs	r1, #152	; 0x98
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	2198      	movs	r1, #152	; 0x98
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4619      	mov	r1, r3
 80024d8:	f002 fcbc 	bl	8004e54 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, 1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2101      	movs	r1, #1
 80024e0:	4812      	ldr	r0, [pc, #72]	; (800252c <MAX31865_init+0xa4>)
 80024e2:	f002 fcb7 	bl	8004e54 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, 1);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2102      	movs	r1, #2
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <MAX31865_init+0xa4>)
 80024ec:	f002 fcb2 	bl	8004e54 <HAL_GPIO_WritePin>

			setWires(wires,TAS,i);           // Set 2,3 or 4 wire sensor
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff7e 	bl	80023f8 <setWires>
			enableBias(OFF,TAS,i);           // Disable bias voltage
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	461a      	mov	r2, r3
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff ff26 	bl	8002354 <enableBias>
			autoConvert(OFF,TAS,i);          // Disable auto conversion
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	461a      	mov	r2, r3
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff ff49 	bl	80023a6 <autoConvert>
	for (uint8_t i = 0; i < 8; i++)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	3301      	adds	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	2b07      	cmp	r3, #7
 800251e:	d9bc      	bls.n	800249a <MAX31865_init+0x12>
		}
	}



}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40020000 	.word	0x40020000

08002530 <MAX31865_readTemp>:
 * Perform a single temperature conversion, and calculate the value
 *
 * @return  Temperature as float
 */
float MAX31865_readTemp(GeneralCard* TAS,uint8_t Id)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af02      	add	r7, sp, #8
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON,TAS,Id);
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	461a      	mov	r2, r3
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff ff06 	bl	8002354 <enableBias>
    HAL_Delay(10);
 8002548:	200a      	movs	r0, #10
 800254a:	f001 fb57 	bl	8003bfc <HAL_Delay>

    // Perform a single conversion, and wait for the result
    single_shot(TAS,Id);
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ff79 	bl	800244a <single_shot>
    HAL_Delay(65);
 8002558:	2041      	movs	r0, #65	; 0x41
 800255a:	f001 fb4f 	bl	8003bfc <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t buffer[2];
    MAX31865_read(MAX31856_RTDMSB_REG, buffer, 2,TAS,Id);
 800255e:	f107 0108 	add.w	r1, r7, #8
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fe62 	bl	8002234 <MAX31865_read>

    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 8002570:	7a3b      	ldrb	r3, [r7, #8]
 8002572:	b29b      	uxth	r3, r3
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	82fb      	strh	r3, [r7, #22]
    data |= buffer[1];
 8002578:	7a7b      	ldrb	r3, [r7, #9]
 800257a:	b29a      	uxth	r2, r3
 800257c:	8afb      	ldrh	r3, [r7, #22]
 800257e:	4313      	orrs	r3, r2
 8002580:	82fb      	strh	r3, [r7, #22]
    data >>= 1;
 8002582:	8afb      	ldrh	r3, [r7, #22]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	82fb      	strh	r3, [r7, #22]

    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 8002588:	8afb      	ldrh	r3, [r7, #22]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002600 <MAX31865_readTemp+0xd0>
 8002596:	ee27 7a87 	vmul.f32	s14, s15, s14
 800259a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002604 <MAX31865_readTemp+0xd4>
 800259e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a2:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 80025a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80025aa:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002608 <MAX31865_readTemp+0xd8>
 80025ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025ba:	ee17 0a90 	vmov	r0, s15
 80025be:	f7fd ffe3 	bl	8000588 <__aeabi_f2d>
 80025c2:	a30d      	add	r3, pc, #52	; (adr r3, 80025f8 <MAX31865_readTemp+0xc8>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f960 	bl	800088c <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fb28 	bl	8000c28 <__aeabi_d2f>
 80025d8:	4603      	mov	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

    // Disable bias voltage to reduce power usage
    enableBias(OFF,TAS,Id);
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	461a      	mov	r2, r3
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff feb6 	bl	8002354 <enableBias>

    return temp;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	ee07 3a90 	vmov	s15, r3
}
 80025ee:	eeb0 0a67 	vmov.f32	s0, s15
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	e1d2178f 	.word	0xe1d2178f
 80025fc:	3f6f8c21 	.word	0x3f6f8c21
 8002600:	43d70000 	.word	0x43d70000
 8002604:	47000000 	.word	0x47000000
 8002608:	42c80000 	.word	0x42c80000

0800260c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002610:	2200      	movs	r2, #0
 8002612:	2110      	movs	r1, #16
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <SELECT+0x18>)
 8002616:	f002 fc1d 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800261a:	2001      	movs	r0, #1
 800261c:	f001 faee 	bl	8003bfc <HAL_Delay>
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40020000 	.word	0x40020000

08002628 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800262c:	2201      	movs	r2, #1
 800262e:	2110      	movs	r1, #16
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <DESELECT+0x18>)
 8002632:	f002 fc0f 	bl	8004e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f001 fae0 	bl	8003bfc <HAL_Delay>
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020000 	.word	0x40020000

08002644 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800264e:	bf00      	nop
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <SPI_TxByte+0x30>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d1f8      	bne.n	8002650 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800265e:	1df9      	adds	r1, r7, #7
 8002660:	2364      	movs	r3, #100	; 0x64
 8002662:	2201      	movs	r2, #1
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <SPI_TxByte+0x30>)
 8002666:	f003 fccb 	bl	8006000 <HAL_SPI_Transmit>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000260 	.word	0x20000260

08002678 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002684:	bf00      	nop
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <SPI_TxBuffer+0x30>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d1f8      	bne.n	8002686 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002694:	887a      	ldrh	r2, [r7, #2]
 8002696:	2364      	movs	r3, #100	; 0x64
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4803      	ldr	r0, [pc, #12]	; (80026a8 <SPI_TxBuffer+0x30>)
 800269c:	f003 fcb0 	bl	8006000 <HAL_SPI_Transmit>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000260 	.word	0x20000260

080026ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80026b2:	23ff      	movs	r3, #255	; 0xff
 80026b4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80026b6:	bf00      	nop
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <SPI_RxByte+0x34>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d1f8      	bne.n	80026b8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80026c6:	1dba      	adds	r2, r7, #6
 80026c8:	1df9      	adds	r1, r7, #7
 80026ca:	2364      	movs	r3, #100	; 0x64
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2301      	movs	r3, #1
 80026d0:	4803      	ldr	r0, [pc, #12]	; (80026e0 <SPI_RxByte+0x34>)
 80026d2:	f003 fdd1 	bl	8006278 <HAL_SPI_TransmitReceive>

	return data;
 80026d6:	79bb      	ldrb	r3, [r7, #6]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000260 	.word	0x20000260

080026e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80026ec:	f7ff ffde 	bl	80026ac <SPI_RxByte>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	701a      	strb	r2, [r3, #0]
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <SD_ReadyWait+0x30>)
 8002708:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800270c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800270e:	f7ff ffcd 	bl	80026ac <SPI_RxByte>
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	2bff      	cmp	r3, #255	; 0xff
 800271a:	d004      	beq.n	8002726 <SD_ReadyWait+0x26>
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SD_ReadyWait+0x30>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f3      	bne.n	800270e <SD_ReadyWait+0xe>

	return res;
 8002726:	79fb      	ldrb	r3, [r7, #7]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000a5b6 	.word	0x2000a5b6

08002734 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800273a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800273e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002740:	f7ff ff72 	bl	8002628 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	e005      	b.n	8002756 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800274a:	20ff      	movs	r0, #255	; 0xff
 800274c:	f7ff ff7a 	bl	8002644 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b09      	cmp	r3, #9
 800275a:	ddf6      	ble.n	800274a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800275c:	f7ff ff56 	bl	800260c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002774:	2395      	movs	r3, #149	; 0x95
 8002776:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002778:	463b      	mov	r3, r7
 800277a:	2106      	movs	r1, #6
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff7b 	bl	8002678 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002782:	e002      	b.n	800278a <SD_PowerOn+0x56>
	{
		cnt--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3b01      	subs	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800278a:	f7ff ff8f 	bl	80026ac <SPI_RxByte>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <SD_PowerOn+0x66>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f4      	bne.n	8002784 <SD_PowerOn+0x50>
	}

	DESELECT();
 800279a:	f7ff ff45 	bl	8002628 <DESELECT>
	SPI_TxByte(0XFF);
 800279e:	20ff      	movs	r0, #255	; 0xff
 80027a0:	f7ff ff50 	bl	8002644 <SPI_TxByte>

	PowerFlag = 1;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <SD_PowerOn+0x80>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000216 	.word	0x20000216

080027b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <SD_PowerOff+0x14>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20000216 	.word	0x20000216

080027d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <SD_CheckPower+0x14>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000216 	.word	0x20000216

080027e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <SD_RxDataBlock+0x5c>)
 80027f4:	22c8      	movs	r2, #200	; 0xc8
 80027f6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80027f8:	f7ff ff58 	bl	80026ac <SPI_RxByte>
 80027fc:	4603      	mov	r3, r0
 80027fe:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d104      	bne.n	8002810 <SD_RxDataBlock+0x28>
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <SD_RxDataBlock+0x5c>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f3      	bne.n	80027f8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2bfe      	cmp	r3, #254	; 0xfe
 8002814:	d001      	beq.n	800281a <SD_RxDataBlock+0x32>
 8002816:	2300      	movs	r3, #0
 8002818:	e00f      	b.n	800283a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff5f 	bl	80026e4 <SPI_RxBytePtr>
	} while(len--);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	603a      	str	r2, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f4      	bne.n	800281a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002830:	f7ff ff3c 	bl	80026ac <SPI_RxByte>
	SPI_RxByte();
 8002834:	f7ff ff3a 	bl	80026ac <SPI_RxByte>

	return TRUE;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000a5b5 	.word	0x2000a5b5

08002848 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002858:	f7ff ff52 	bl	8002700 <SD_ReadyWait>
 800285c:	4603      	mov	r3, r0
 800285e:	2bff      	cmp	r3, #255	; 0xff
 8002860:	d001      	beq.n	8002866 <SD_TxDataBlock+0x1e>
 8002862:	2300      	movs	r3, #0
 8002864:	e02f      	b.n	80028c6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff feeb 	bl	8002644 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	2bfd      	cmp	r3, #253	; 0xfd
 8002872:	d020      	beq.n	80028b6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fefd 	bl	8002678 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800287e:	f7ff ff15 	bl	80026ac <SPI_RxByte>
		SPI_RxByte();
 8002882:	f7ff ff13 	bl	80026ac <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002886:	e00b      	b.n	80028a0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002888:	f7ff ff10 	bl	80026ac <SPI_RxByte>
 800288c:	4603      	mov	r3, r0
 800288e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2b05      	cmp	r3, #5
 8002898:	d006      	beq.n	80028a8 <SD_TxDataBlock+0x60>
			i++;
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	3301      	adds	r3, #1
 800289e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d9f0      	bls.n	8002888 <SD_TxDataBlock+0x40>
 80028a6:	e000      	b.n	80028aa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80028a8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80028aa:	bf00      	nop
 80028ac:	f7ff fefe 	bl	80026ac <SPI_RxByte>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0fa      	beq.n	80028ac <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d101      	bne.n	80028c4 <SD_TxDataBlock+0x7c>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	6039      	str	r1, [r7, #0]
 80028d8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80028da:	f7ff ff11 	bl	8002700 <SD_ReadyWait>
 80028de:	4603      	mov	r3, r0
 80028e0:	2bff      	cmp	r3, #255	; 0xff
 80028e2:	d001      	beq.n	80028e8 <SD_SendCmd+0x1a>
 80028e4:	23ff      	movs	r3, #255	; 0xff
 80028e6:	e042      	b.n	800296e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff feaa 	bl	8002644 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	0e1b      	lsrs	r3, r3, #24
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fea4 	bl	8002644 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fe9e 	bl	8002644 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fe98 	bl	8002644 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fe93 	bl	8002644 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d102      	bne.n	800292a <SD_SendCmd+0x5c>
 8002924:	2395      	movs	r3, #149	; 0x95
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e007      	b.n	800293a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b48      	cmp	r3, #72	; 0x48
 800292e:	d102      	bne.n	8002936 <SD_SendCmd+0x68>
 8002930:	2387      	movs	r3, #135	; 0x87
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <SD_SendCmd+0x6c>
	else crc = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe81 	bl	8002644 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b4c      	cmp	r3, #76	; 0x4c
 8002946:	d101      	bne.n	800294c <SD_SendCmd+0x7e>
 8002948:	f7ff feb0 	bl	80026ac <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800294c:	230a      	movs	r3, #10
 800294e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002950:	f7ff feac 	bl	80026ac <SPI_RxByte>
 8002954:	4603      	mov	r3, r0
 8002956:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002958:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da05      	bge.n	800296c <SD_SendCmd+0x9e>
 8002960:	7bbb      	ldrb	r3, [r7, #14]
 8002962:	3b01      	subs	r3, #1
 8002964:	73bb      	strb	r3, [r7, #14]
 8002966:	7bbb      	ldrb	r3, [r7, #14]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f1      	bne.n	8002950 <SD_SendCmd+0x82>

	return res;
 800296c:	7b7b      	ldrb	r3, [r7, #13]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <SD_disk_initialize+0x14>
 8002988:	2301      	movs	r3, #1
 800298a:	e0d6      	b.n	8002b3a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800298c:	4b6d      	ldr	r3, [pc, #436]	; (8002b44 <SD_disk_initialize+0x1cc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <SD_disk_initialize+0x2a>
 800299a:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <SD_disk_initialize+0x1cc>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e0cb      	b.n	8002b3a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80029a2:	f7ff fec7 	bl	8002734 <SD_PowerOn>

	/* slave select */
	SELECT();
 80029a6:	f7ff fe31 	bl	800260c <SELECT>

	/* check disk type */
	type = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80029ae:	2100      	movs	r1, #0
 80029b0:	2040      	movs	r0, #64	; 0x40
 80029b2:	f7ff ff8c 	bl	80028ce <SD_SendCmd>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 80a6 	bne.w	8002b0a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <SD_disk_initialize+0x1d0>)
 80029c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80029c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80029ca:	2048      	movs	r0, #72	; 0x48
 80029cc:	f7ff ff7f 	bl	80028ce <SD_SendCmd>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d158      	bne.n	8002a88 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e00c      	b.n	80029f6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80029dc:	7bfc      	ldrb	r4, [r7, #15]
 80029de:	f7ff fe65 	bl	80026ac <SPI_RxByte>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461a      	mov	r2, r3
 80029e6:	f104 0310 	add.w	r3, r4, #16
 80029ea:	443b      	add	r3, r7
 80029ec:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d9ef      	bls.n	80029dc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80029fc:	7abb      	ldrb	r3, [r7, #10]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	f040 8083 	bne.w	8002b0a <SD_disk_initialize+0x192>
 8002a04:	7afb      	ldrb	r3, [r7, #11]
 8002a06:	2baa      	cmp	r3, #170	; 0xaa
 8002a08:	d17f      	bne.n	8002b0a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2077      	movs	r0, #119	; 0x77
 8002a0e:	f7ff ff5e 	bl	80028ce <SD_SendCmd>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d807      	bhi.n	8002a28 <SD_disk_initialize+0xb0>
 8002a18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a1c:	2069      	movs	r0, #105	; 0x69
 8002a1e:	f7ff ff56 	bl	80028ce <SD_SendCmd>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002a28:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <SD_disk_initialize+0x1d0>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1eb      	bne.n	8002a0a <SD_disk_initialize+0x92>
 8002a32:	e000      	b.n	8002a36 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002a34:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <SD_disk_initialize+0x1d0>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d064      	beq.n	8002b0a <SD_disk_initialize+0x192>
 8002a40:	2100      	movs	r1, #0
 8002a42:	207a      	movs	r0, #122	; 0x7a
 8002a44:	f7ff ff43 	bl	80028ce <SD_SendCmd>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d15d      	bne.n	8002b0a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e00c      	b.n	8002a6e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002a54:	7bfc      	ldrb	r4, [r7, #15]
 8002a56:	f7ff fe29 	bl	80026ac <SPI_RxByte>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f104 0310 	add.w	r3, r4, #16
 8002a62:	443b      	add	r3, r7
 8002a64:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d9ef      	bls.n	8002a54 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002a74:	7a3b      	ldrb	r3, [r7, #8]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SD_disk_initialize+0x10a>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	e000      	b.n	8002a84 <SD_disk_initialize+0x10c>
 8002a82:	2304      	movs	r3, #4
 8002a84:	73bb      	strb	r3, [r7, #14]
 8002a86:	e040      	b.n	8002b0a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2077      	movs	r0, #119	; 0x77
 8002a8c:	f7ff ff1f 	bl	80028ce <SD_SendCmd>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d808      	bhi.n	8002aa8 <SD_disk_initialize+0x130>
 8002a96:	2100      	movs	r1, #0
 8002a98:	2069      	movs	r0, #105	; 0x69
 8002a9a:	f7ff ff18 	bl	80028ce <SD_SendCmd>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d801      	bhi.n	8002aa8 <SD_disk_initialize+0x130>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e000      	b.n	8002aaa <SD_disk_initialize+0x132>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d10e      	bne.n	8002ad0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2077      	movs	r0, #119	; 0x77
 8002ab6:	f7ff ff0a 	bl	80028ce <SD_SendCmd>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d80e      	bhi.n	8002ade <SD_disk_initialize+0x166>
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2069      	movs	r0, #105	; 0x69
 8002ac4:	f7ff ff03 	bl	80028ce <SD_SendCmd>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <SD_disk_initialize+0x166>
 8002ace:	e00d      	b.n	8002aec <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2041      	movs	r0, #65	; 0x41
 8002ad4:	f7ff fefb 	bl	80028ce <SD_SendCmd>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <SD_disk_initialize+0x1d0>)
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e1      	bne.n	8002aac <SD_disk_initialize+0x134>
 8002ae8:	e000      	b.n	8002aec <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002aea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <SD_disk_initialize+0x1d0>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <SD_disk_initialize+0x18e>
 8002af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002afa:	2050      	movs	r0, #80	; 0x50
 8002afc:	f7ff fee7 	bl	80028ce <SD_SendCmd>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <SD_disk_initialize+0x192>
 8002b06:	2300      	movs	r3, #0
 8002b08:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002b0a:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <SD_disk_initialize+0x1d4>)
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002b10:	f7ff fd8a 	bl	8002628 <DESELECT>
	SPI_RxByte();
 8002b14:	f7ff fdca 	bl	80026ac <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002b18:	7bbb      	ldrb	r3, [r7, #14]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <SD_disk_initialize+0x1cc>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <SD_disk_initialize+0x1cc>)
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e001      	b.n	8002b34 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002b30:	f7ff fe42 	bl	80027b8 <SD_PowerOff>
	}

	return Stat;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <SD_disk_initialize+0x1cc>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	b2db      	uxtb	r3, r3
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000000 	.word	0x20000000
 8002b48:	2000a5b5 	.word	0x2000a5b5
 8002b4c:	20000215 	.word	0x20000215

08002b50 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <SD_disk_status+0x14>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e002      	b.n	8002b6a <SD_disk_status+0x1a>
	return Stat;
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SD_disk_status+0x28>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <SD_disk_read+0x1c>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <SD_disk_read+0x20>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	e051      	b.n	8002c40 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b9c:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <SD_disk_read+0xcc>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <SD_disk_read+0x32>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e048      	b.n	8002c40 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <SD_disk_read+0xd0>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <SD_disk_read+0x44>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	025b      	lsls	r3, r3, #9
 8002bbe:	607b      	str	r3, [r7, #4]

	SELECT();
 8002bc0:	f7ff fd24 	bl	800260c <SELECT>

	if (count == 1)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d111      	bne.n	8002bee <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	2051      	movs	r0, #81	; 0x51
 8002bce:	f7ff fe7e 	bl	80028ce <SD_SendCmd>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d129      	bne.n	8002c2c <SD_disk_read+0xb0>
 8002bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bdc:	68b8      	ldr	r0, [r7, #8]
 8002bde:	f7ff fe03 	bl	80027e8 <SD_RxDataBlock>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d021      	beq.n	8002c2c <SD_disk_read+0xb0>
 8002be8:	2300      	movs	r3, #0
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	e01e      	b.n	8002c2c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	2052      	movs	r0, #82	; 0x52
 8002bf2:	f7ff fe6c 	bl	80028ce <SD_SendCmd>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d117      	bne.n	8002c2c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c00:	68b8      	ldr	r0, [r7, #8]
 8002c02:	f7ff fdf1 	bl	80027e8 <SD_RxDataBlock>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <SD_disk_read+0xa6>
				buff += 512;
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ed      	bne.n	8002bfc <SD_disk_read+0x80>
 8002c20:	e000      	b.n	8002c24 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002c22:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002c24:	2100      	movs	r1, #0
 8002c26:	204c      	movs	r0, #76	; 0x4c
 8002c28:	f7ff fe51 	bl	80028ce <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002c2c:	f7ff fcfc 	bl	8002628 <DESELECT>
	SPI_RxByte();
 8002c30:	f7ff fd3c 	bl	80026ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	20000215 	.word	0x20000215

08002c50 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <SD_disk_write+0x1c>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <SD_disk_write+0x20>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e06b      	b.n	8002d48 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002c70:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <SD_disk_write+0x100>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SD_disk_write+0x32>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e062      	b.n	8002d48 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <SD_disk_write+0x100>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <SD_disk_write+0x44>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e059      	b.n	8002d48 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002c94:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <SD_disk_write+0x104>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <SD_disk_write+0x56>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	025b      	lsls	r3, r3, #9
 8002ca4:	607b      	str	r3, [r7, #4]

	SELECT();
 8002ca6:	f7ff fcb1 	bl	800260c <SELECT>

	if (count == 1)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d110      	bne.n	8002cd2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	2058      	movs	r0, #88	; 0x58
 8002cb4:	f7ff fe0b 	bl	80028ce <SD_SendCmd>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d13a      	bne.n	8002d34 <SD_disk_write+0xe4>
 8002cbe:	21fe      	movs	r1, #254	; 0xfe
 8002cc0:	68b8      	ldr	r0, [r7, #8]
 8002cc2:	f7ff fdc1 	bl	8002848 <SD_TxDataBlock>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d033      	beq.n	8002d34 <SD_disk_write+0xe4>
			count = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	e030      	b.n	8002d34 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <SD_disk_write+0x104>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2077      	movs	r0, #119	; 0x77
 8002ce2:	f7ff fdf4 	bl	80028ce <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	2057      	movs	r0, #87	; 0x57
 8002cea:	f7ff fdf0 	bl	80028ce <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	2059      	movs	r0, #89	; 0x59
 8002cf2:	f7ff fdec 	bl	80028ce <SD_SendCmd>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11b      	bne.n	8002d34 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002cfc:	21fc      	movs	r1, #252	; 0xfc
 8002cfe:	68b8      	ldr	r0, [r7, #8]
 8002d00:	f7ff fda2 	bl	8002848 <SD_TxDataBlock>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <SD_disk_write+0xd0>
				buff += 512;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d10:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ee      	bne.n	8002cfc <SD_disk_write+0xac>
 8002d1e:	e000      	b.n	8002d22 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002d20:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002d22:	21fd      	movs	r1, #253	; 0xfd
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7ff fd8f 	bl	8002848 <SD_TxDataBlock>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <SD_disk_write+0xe4>
			{
				count = 1;
 8002d30:	2301      	movs	r3, #1
 8002d32:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002d34:	f7ff fc78 	bl	8002628 <DESELECT>
	SPI_RxByte();
 8002d38:	f7ff fcb8 	bl	80026ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000215 	.word	0x20000215

08002d58 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08b      	sub	sp, #44	; 0x2c
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	603a      	str	r2, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
 8002d64:	460b      	mov	r3, r1
 8002d66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SD_disk_ioctl+0x1e>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e115      	b.n	8002fa2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002d7c:	79bb      	ldrb	r3, [r7, #6]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d124      	bne.n	8002dcc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d012      	beq.n	8002db0 <SD_disk_ioctl+0x58>
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	dc1a      	bgt.n	8002dc4 <SD_disk_ioctl+0x6c>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <SD_disk_ioctl+0x40>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d006      	beq.n	8002da4 <SD_disk_ioctl+0x4c>
 8002d96:	e015      	b.n	8002dc4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002d98:	f7ff fd0e 	bl	80027b8 <SD_PowerOff>
			res = RES_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002da2:	e0fc      	b.n	8002f9e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002da4:	f7ff fcc6 	bl	8002734 <SD_PowerOn>
			res = RES_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002dae:	e0f6      	b.n	8002f9e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	1c5c      	adds	r4, r3, #1
 8002db4:	f7ff fd0c 	bl	80027d0 <SD_CheckPower>
 8002db8:	4603      	mov	r3, r0
 8002dba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002dc2:	e0ec      	b.n	8002f9e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002dca:	e0e8      	b.n	8002f9e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002dcc:	4b77      	ldr	r3, [pc, #476]	; (8002fac <SD_disk_ioctl+0x254>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <SD_disk_ioctl+0x86>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0e1      	b.n	8002fa2 <SD_disk_ioctl+0x24a>

		SELECT();
 8002dde:	f7ff fc15 	bl	800260c <SELECT>

		switch (ctrl)
 8002de2:	79bb      	ldrb	r3, [r7, #6]
 8002de4:	2b0d      	cmp	r3, #13
 8002de6:	f200 80cb 	bhi.w	8002f80 <SD_disk_ioctl+0x228>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <SD_disk_ioctl+0x98>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002eeb 	.word	0x08002eeb
 8002df4:	08002e29 	.word	0x08002e29
 8002df8:	08002edb 	.word	0x08002edb
 8002dfc:	08002f81 	.word	0x08002f81
 8002e00:	08002f81 	.word	0x08002f81
 8002e04:	08002f81 	.word	0x08002f81
 8002e08:	08002f81 	.word	0x08002f81
 8002e0c:	08002f81 	.word	0x08002f81
 8002e10:	08002f81 	.word	0x08002f81
 8002e14:	08002f81 	.word	0x08002f81
 8002e18:	08002f81 	.word	0x08002f81
 8002e1c:	08002efd 	.word	0x08002efd
 8002e20:	08002f21 	.word	0x08002f21
 8002e24:	08002f45 	.word	0x08002f45
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2049      	movs	r0, #73	; 0x49
 8002e2c:	f7ff fd4f 	bl	80028ce <SD_SendCmd>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 80a8 	bne.w	8002f88 <SD_disk_ioctl+0x230>
 8002e38:	f107 030c 	add.w	r3, r7, #12
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fcd2 	bl	80027e8 <SD_RxDataBlock>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 809e 	beq.w	8002f88 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10e      	bne.n	8002e74 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002e56:	7d7b      	ldrb	r3, [r7, #21]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	7d3b      	ldrb	r3, [r7, #20]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002e6a:	8bfb      	ldrh	r3, [r7, #30]
 8002e6c:	029a      	lsls	r2, r3, #10
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e02e      	b.n	8002ed2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002e74:	7c7b      	ldrb	r3, [r7, #17]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	7dbb      	ldrb	r3, [r7, #22]
 8002e7e:	09db      	lsrs	r3, r3, #7
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	7d7b      	ldrb	r3, [r7, #21]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 0306 	and.w	r3, r3, #6
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3302      	adds	r3, #2
 8002e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002e9c:	7d3b      	ldrb	r3, [r7, #20]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	7cbb      	ldrb	r3, [r7, #18]
 8002eb2:	029b      	lsls	r3, r3, #10
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002ec4:	8bfa      	ldrh	r2, [r7, #30]
 8002ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eca:	3b09      	subs	r3, #9
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002ed8:	e056      	b.n	8002f88 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ee8:	e055      	b.n	8002f96 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002eea:	f7ff fc09 	bl	8002700 <SD_ReadyWait>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2bff      	cmp	r3, #255	; 0xff
 8002ef2:	d14b      	bne.n	8002f8c <SD_disk_ioctl+0x234>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002efa:	e047      	b.n	8002f8c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002efc:	2100      	movs	r1, #0
 8002efe:	2049      	movs	r0, #73	; 0x49
 8002f00:	f7ff fce5 	bl	80028ce <SD_SendCmd>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d142      	bne.n	8002f90 <SD_disk_ioctl+0x238>
 8002f0a:	2110      	movs	r1, #16
 8002f0c:	6a38      	ldr	r0, [r7, #32]
 8002f0e:	f7ff fc6b 	bl	80027e8 <SD_RxDataBlock>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03b      	beq.n	8002f90 <SD_disk_ioctl+0x238>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002f1e:	e037      	b.n	8002f90 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002f20:	2100      	movs	r1, #0
 8002f22:	204a      	movs	r0, #74	; 0x4a
 8002f24:	f7ff fcd3 	bl	80028ce <SD_SendCmd>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d132      	bne.n	8002f94 <SD_disk_ioctl+0x23c>
 8002f2e:	2110      	movs	r1, #16
 8002f30:	6a38      	ldr	r0, [r7, #32]
 8002f32:	f7ff fc59 	bl	80027e8 <SD_RxDataBlock>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02b      	beq.n	8002f94 <SD_disk_ioctl+0x23c>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002f42:	e027      	b.n	8002f94 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002f44:	2100      	movs	r1, #0
 8002f46:	207a      	movs	r0, #122	; 0x7a
 8002f48:	f7ff fcc1 	bl	80028ce <SD_SendCmd>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f58:	e00b      	b.n	8002f72 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002f5a:	6a3c      	ldr	r4, [r7, #32]
 8002f5c:	1c63      	adds	r3, r4, #1
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	f7ff fba4 	bl	80026ac <SPI_RxByte>
 8002f64:	4603      	mov	r3, r0
 8002f66:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002f68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d9ef      	bls.n	8002f5a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002f80:	2304      	movs	r3, #4
 8002f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f86:	e006      	b.n	8002f96 <SD_disk_ioctl+0x23e>
			break;
 8002f88:	bf00      	nop
 8002f8a:	e004      	b.n	8002f96 <SD_disk_ioctl+0x23e>
			break;
 8002f8c:	bf00      	nop
 8002f8e:	e002      	b.n	8002f96 <SD_disk_ioctl+0x23e>
			break;
 8002f90:	bf00      	nop
 8002f92:	e000      	b.n	8002f96 <SD_disk_ioctl+0x23e>
			break;
 8002f94:	bf00      	nop
		}

		DESELECT();
 8002f96:	f7ff fb47 	bl	8002628 <DESELECT>
		SPI_RxByte();
 8002f9a:	f7ff fb87 	bl	80026ac <SPI_RxByte>
	}

	return res;
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	372c      	adds	r7, #44	; 0x2c
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb8:	f000 fdae 	bl	8003b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fbc:	f000 f856 	bl	800306c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fc0:	f000 f9c6 	bl	8003350 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002fc4:	f000 f8b4 	bl	8003130 <MX_CAN1_Init>
  MX_RTC_Init();
 8002fc8:	f000 f906 	bl	80031d8 <MX_RTC_Init>
  MX_SPI1_Init();
 8002fcc:	f000 f92a 	bl	8003224 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002fd0:	f000 f95e 	bl	8003290 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002fd4:	f000 f992 	bl	80032fc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8002fd8:	f004 f99c 	bl	8007314 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 8002fdc:	481d      	ldr	r0, [pc, #116]	; (8003054 <main+0xa4>)
 8002fde:	f003 fed7 	bl	8006d90 <HAL_UART_Init>
  HAL_CAN_Start(&hcan1);
 8002fe2:	481d      	ldr	r0, [pc, #116]	; (8003058 <main+0xa8>)
 8002fe4:	f001 f80a 	bl	8003ffc <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8002fe8:	2102      	movs	r1, #2
 8002fea:	481b      	ldr	r0, [pc, #108]	; (8003058 <main+0xa8>)
 8002fec:	f001 fa37 	bl	800445e <HAL_CAN_ActivateNotification>

  fresult = f_mount(&fs,"",0);
 8002ff0:	f107 0320 	add.w	r3, r7, #32
 8002ff4:	3b1c      	subs	r3, #28
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4918      	ldr	r1, [pc, #96]	; (800305c <main+0xac>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f006 fe00 	bl	8009c00 <f_mount>
 8003000:	4603      	mov	r3, r0
 8003002:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8003006:	f102 021f 	add.w	r2, r2, #31
 800300a:	7013      	strb	r3, [r2, #0]
  if (fresult != FR_OK)
 800300c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8003010:	f103 031f 	add.w	r3, r3, #31
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <main+0x6e>
	  Error_Handler();
 800301a:	f000 fa93 	bl	8003544 <Error_Handler>

  if (ReadConfigFile(&Config) != TAS_CONFIG_NUM)
 800301e:	4810      	ldr	r0, [pc, #64]	; (8003060 <main+0xb0>)
 8003020:	f7fe fb0e 	bl	8001640 <ReadConfigFile>
 8003024:	4603      	mov	r3, r0
 8003026:	2b2c      	cmp	r3, #44	; 0x2c
 8003028:	d001      	beq.n	800302e <main+0x7e>
	  Error_Handler();
 800302a:	f000 fa8b 	bl	8003544 <Error_Handler>
  if (!Parser(&Card,&Config))
 800302e:	490c      	ldr	r1, [pc, #48]	; (8003060 <main+0xb0>)
 8003030:	480c      	ldr	r0, [pc, #48]	; (8003064 <main+0xb4>)
 8003032:	f7fe fb8b 	bl	800174c <Parser>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <main+0x90>
	  Error_Handler();
 800303c:	f000 fa82 	bl	8003544 <Error_Handler>

  Card.sTim = &htim6;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <main+0xb4>)
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <main+0xb8>)
 8003044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  Card.CAN = &hcan1;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <main+0xb4>)
 800304a:	4a03      	ldr	r2, [pc, #12]	; (8003058 <main+0xa8>)
 800304c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003050:	e7fe      	b.n	8003050 <main+0xa0>
 8003052:	bf00      	nop
 8003054:	20000300 	.word	0x20000300
 8003058:	20000218 	.word	0x20000218
 800305c:	0800f7d0 	.word	0x0800f7d0
 8003060:	20000f90 	.word	0x20000f90
 8003064:	20000344 	.word	0x20000344
 8003068:	200002b8 	.word	0x200002b8

0800306c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b094      	sub	sp, #80	; 0x50
 8003070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	2234      	movs	r2, #52	; 0x34
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f008 f886 	bl	800b18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <SystemClock_Config+0xbc>)
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <SystemClock_Config+0xbc>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6413      	str	r3, [r2, #64]	; 0x40
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <SystemClock_Config+0xbc>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ac:	2300      	movs	r3, #0
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <SystemClock_Config+0xc0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <SystemClock_Config+0xc0>)
 80030b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <SystemClock_Config+0xc0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80030c8:	230a      	movs	r3, #10
 80030ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030d0:	2301      	movs	r3, #1
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d4:	2310      	movs	r3, #16
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030d8:	2301      	movs	r3, #1
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030dc:	2300      	movs	r3, #0
 80030de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 fabb 	bl	8005660 <HAL_RCC_OscConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80030f0:	f000 fa28 	bl	8003544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f4:	230f      	movs	r3, #15
 80030f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f001 feb9 	bl	8004e88 <HAL_RCC_ClockConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800311c:	f000 fa12 	bl	8003544 <Error_Handler>
  }
}
 8003120:	bf00      	nop
 8003122:	3750      	adds	r7, #80	; 0x50
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003138:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <MX_CAN1_Init+0xa0>)
 800313a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800313c:	4b23      	ldr	r3, [pc, #140]	; (80031cc <MX_CAN1_Init+0x9c>)
 800313e:	2209      	movs	r2, #9
 8003140:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <MX_CAN1_Init+0x9c>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003156:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800315a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <MX_CAN1_Init+0x9c>)
 800315e:	2200      	movs	r2, #0
 8003160:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003164:	2200      	movs	r2, #0
 8003166:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <MX_CAN1_Init+0x9c>)
 800316a:	2200      	movs	r2, #0
 800316c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003170:	2200      	movs	r2, #0
 8003172:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <MX_CAN1_Init+0x9c>)
 800317c:	2200      	movs	r2, #0
 800317e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003180:	4812      	ldr	r0, [pc, #72]	; (80031cc <MX_CAN1_Init+0x9c>)
 8003182:	f000 fd5f 	bl	8003c44 <HAL_CAN_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800318c:	f000 f9da 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN_Filt;

  CAN_Filt.FilterActivation = CAN_FILTER_ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	623b      	str	r3, [r7, #32]
  CAN_Filt.FilterBank = 18;  // which filter bank to use from the assigned ones
 8003194:	2312      	movs	r3, #18
 8003196:	617b      	str	r3, [r7, #20]
  CAN_Filt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  CAN_Filt.FilterIdHigh = 0xFFF<<5;
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <MX_CAN1_Init+0xa4>)
 800319e:	603b      	str	r3, [r7, #0]
  CAN_Filt.FilterIdLow = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	607b      	str	r3, [r7, #4]
  CAN_Filt.FilterMaskIdHigh = 0xFFF<<5;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <MX_CAN1_Init+0xa4>)
 80031a6:	60bb      	str	r3, [r7, #8]
  CAN_Filt.FilterMaskIdLow = 0x1000;
 80031a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ac:	60fb      	str	r3, [r7, #12]
  CAN_Filt.FilterMode = CAN_FILTERMODE_IDMASK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  CAN_Filt.FilterScale = CAN_FILTERSCALE_32BIT;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
  CAN_Filt.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80031b6:	2314      	movs	r3, #20
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN_Filt);
 80031ba:	463b      	mov	r3, r7
 80031bc:	4619      	mov	r1, r3
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <MX_CAN1_Init+0x9c>)
 80031c0:	f000 fe3c 	bl	8003e3c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80031c4:	bf00      	nop
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000218 	.word	0x20000218
 80031d0:	40006400 	.word	0x40006400
 80031d4:	0001ffe0 	.word	0x0001ffe0

080031d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_RTC_Init+0x44>)
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <MX_RTC_Init+0x48>)
 80031e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_RTC_Init+0x44>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_RTC_Init+0x44>)
 80031ea:	227f      	movs	r2, #127	; 0x7f
 80031ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <MX_RTC_Init+0x44>)
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_RTC_Init+0x44>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <MX_RTC_Init+0x44>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_RTC_Init+0x44>)
 8003202:	2200      	movs	r2, #0
 8003204:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003206:	4805      	ldr	r0, [pc, #20]	; (800321c <MX_RTC_Init+0x44>)
 8003208:	f002 fcae 	bl	8005b68 <HAL_RTC_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003212:	f000 f997 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000240 	.word	0x20000240
 8003220:	40002800 	.word	0x40002800

08003224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <MX_SPI1_Init+0x64>)
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <MX_SPI1_Init+0x68>)
 800322c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <MX_SPI1_Init+0x64>)
 8003230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <MX_SPI1_Init+0x64>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <MX_SPI1_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <MX_SPI1_Init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <MX_SPI1_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <MX_SPI1_Init+0x64>)
 8003250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <MX_SPI1_Init+0x64>)
 8003258:	2220      	movs	r2, #32
 800325a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <MX_SPI1_Init+0x64>)
 800325e:	2200      	movs	r2, #0
 8003260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <MX_SPI1_Init+0x64>)
 8003264:	2200      	movs	r2, #0
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <MX_SPI1_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <MX_SPI1_Init+0x64>)
 8003270:	220a      	movs	r2, #10
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003274:	4804      	ldr	r0, [pc, #16]	; (8003288 <MX_SPI1_Init+0x64>)
 8003276:	f002 fe3a 	bl	8005eee <HAL_SPI_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003280:	f000 f960 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000260 	.word	0x20000260
 800328c:	40013000 	.word	0x40013000

08003290 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003296:	463b      	mov	r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032a0:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <MX_TIM6_Init+0x68>)
 80032a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032c0:	f003 fa46 	bl	8006750 <HAL_TIM_Base_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80032ca:	f000 f93b 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80032d6:	463b      	mov	r3, r7
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	; (80032f4 <MX_TIM6_Init+0x64>)
 80032dc:	f003 fcc8 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80032e6:	f000 f92d 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200002b8 	.word	0x200002b8
 80032f8:	40001000 	.word	0x40001000

080032fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <MX_USART1_UART_Init+0x50>)
 8003304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800330c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003322:	220c      	movs	r2, #12
 8003324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_USART1_UART_Init+0x4c>)
 8003334:	f003 fd2c 	bl	8006d90 <HAL_UART_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800333e:	f000 f901 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000300 	.word	0x20000300
 800334c:	40011000 	.word	0x40011000

08003350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	4b5c      	ldr	r3, [pc, #368]	; (80034dc <MX_GPIO_Init+0x18c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a5b      	ldr	r2, [pc, #364]	; (80034dc <MX_GPIO_Init+0x18c>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <MX_GPIO_Init+0x18c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b55      	ldr	r3, [pc, #340]	; (80034dc <MX_GPIO_Init+0x18c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a54      	ldr	r2, [pc, #336]	; (80034dc <MX_GPIO_Init+0x18c>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b52      	ldr	r3, [pc, #328]	; (80034dc <MX_GPIO_Init+0x18c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a4d      	ldr	r2, [pc, #308]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a46      	ldr	r2, [pc, #280]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b44      	ldr	r3, [pc, #272]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a3f      	ldr	r2, [pc, #252]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <MX_GPIO_Init+0x18c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_7_Pin|EN_0_Pin|EN_1_Pin|SFLH_Out_Pin
 80033f2:	2200      	movs	r2, #0
 80033f4:	f242 31ec 	movw	r1, #9196	; 0x23ec
 80033f8:	4839      	ldr	r0, [pc, #228]	; (80034e0 <MX_GPIO_Init+0x190>)
 80033fa:	f001 fd2b 	bl	8004e54 <HAL_GPIO_WritePin>
                          |CS_3_Pin|CS_2_Pin|CS_1_Pin|CS_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|MOSI_Pin|EN_2_Pin|uSD_CS_Pin
 80033fe:	2200      	movs	r2, #0
 8003400:	f641 111b 	movw	r1, #6427	; 0x191b
 8003404:	4837      	ldr	r0, [pc, #220]	; (80034e4 <MX_GPIO_Init+0x194>)
 8003406:	f001 fd25 	bl	8004e54 <HAL_GPIO_WritePin>
                          |EN_6_Pin|EN_5_Pin|EN_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SFLL_Out_Pin|EN_3_Pin|CS_7_Pin|CS_6_Pin
 800340a:	2200      	movs	r2, #0
 800340c:	f24f 4102 	movw	r1, #62466	; 0xf402
 8003410:	4835      	ldr	r0, [pc, #212]	; (80034e8 <MX_GPIO_Init+0x198>)
 8003412:	f001 fd1f 	bl	8004e54 <HAL_GPIO_WritePin>
                          |CS_5_Pin|CS_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_7_Pin EN_0_Pin EN_1_Pin SFLH_Out_Pin
                           CS_3_Pin CS_2_Pin CS_1_Pin CS_0_Pin */
  GPIO_InitStruct.Pin = EN_7_Pin|EN_0_Pin|EN_1_Pin|SFLH_Out_Pin
 8003416:	f242 33ec 	movw	r3, #9196	; 0x23ec
 800341a:	617b      	str	r3, [r7, #20]
                          |CS_3_Pin|CS_2_Pin|CS_1_Pin|CS_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	2301      	movs	r3, #1
 800341e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	482c      	ldr	r0, [pc, #176]	; (80034e0 <MX_GPIO_Init+0x190>)
 8003430:	f001 fb7c 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_0_Pin TS_1_Pin SFLH_In_Pin TS_7_Pin
                           TS_6_Pin TS_5_Pin */
  GPIO_InitStruct.Pin = TS_0_Pin|TS_1_Pin|SFLH_In_Pin|TS_7_Pin
 8003434:	f641 4313 	movw	r3, #7187	; 0x1c13
 8003438:	617b      	str	r3, [r7, #20]
                          |TS_6_Pin|TS_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4825      	ldr	r0, [pc, #148]	; (80034e0 <MX_GPIO_Init+0x190>)
 800344a:	f001 fb6f 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin MOSI_Pin EN_2_Pin uSD_CS_Pin
                           EN_6_Pin EN_5_Pin EN_4_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|MOSI_Pin|EN_2_Pin|uSD_CS_Pin
 800344e:	f641 131b 	movw	r3, #6427	; 0x191b
 8003452:	617b      	str	r3, [r7, #20]
                          |EN_6_Pin|EN_5_Pin|EN_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003454:	2301      	movs	r3, #1
 8003456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	481f      	ldr	r0, [pc, #124]	; (80034e4 <MX_GPIO_Init+0x194>)
 8003468:	f001 fb60 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 800346c:	2304      	movs	r3, #4
 800346e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	4819      	ldr	r0, [pc, #100]	; (80034e4 <MX_GPIO_Init+0x194>)
 8003480:	f001 fb54 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SFLL_In_Pin TS_3_Pin TS_2_Pin */
  GPIO_InitStruct.Pin = SFLL_In_Pin|TS_3_Pin|TS_2_Pin;
 8003484:	2331      	movs	r3, #49	; 0x31
 8003486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	4619      	mov	r1, r3
 8003496:	4814      	ldr	r0, [pc, #80]	; (80034e8 <MX_GPIO_Init+0x198>)
 8003498:	f001 fb48 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SFLL_Out_Pin EN_3_Pin CS_7_Pin CS_6_Pin
                           CS_5_Pin CS_4_Pin */
  GPIO_InitStruct.Pin = SFLL_Out_Pin|EN_3_Pin|CS_7_Pin|CS_6_Pin
 800349c:	f24f 4302 	movw	r3, #62466	; 0xf402
 80034a0:	617b      	str	r3, [r7, #20]
                          |CS_5_Pin|CS_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a2:	2301      	movs	r3, #1
 80034a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	f107 0314 	add.w	r3, r7, #20
 80034b2:	4619      	mov	r1, r3
 80034b4:	480c      	ldr	r0, [pc, #48]	; (80034e8 <MX_GPIO_Init+0x198>)
 80034b6:	f001 fb39 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : TS_4_Pin */
  GPIO_InitStruct.Pin = TS_4_Pin;
 80034ba:	2304      	movs	r3, #4
 80034bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TS_4_GPIO_Port, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4807      	ldr	r0, [pc, #28]	; (80034ec <MX_GPIO_Init+0x19c>)
 80034ce:	f001 fb2d 	bl	8004b2c <HAL_GPIO_Init>

}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40020c00 	.word	0x40020c00

080034f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	superRoutine(&Card);
 80034f8:	4803      	ldr	r0, [pc, #12]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80034fa:	f7fe fb63 	bl	8001bc4 <superRoutine>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000344 	.word	0x20000344

0800350c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0, &RxHeader, RxData);
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fe8d 	bl	800423a <HAL_CAN_GetRxMessage>
	canParser(&Card,RxHeader.DLC,&RxHeader,RxData);
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003522:	6919      	ldr	r1, [r3, #16]
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8003526:	4a05      	ldr	r2, [pc, #20]	; (800353c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003528:	4805      	ldr	r0, [pc, #20]	; (8003540 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800352a:	f7fe fda4 	bl	8002076 <canParser>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000a5ac 	.word	0x2000a5ac
 800353c:	2000a590 	.word	0x2000a590
 8003540:	20000344 	.word	0x20000344

08003544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
}
 800354a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800354c:	e7fe      	b.n	800354c <Error_Handler+0x8>
	...

08003550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_MspInit+0x4c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_MspInit+0x4c>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_MspInit+0x4c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_MspInit+0x4c>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_MspInit+0x4c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_CAN_MspInit+0xa4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d13c      	bne.n	800363c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_CAN_MspInit+0xa8>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003608:	2303      	movs	r3, #3
 800360a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 800360c:	2308      	movs	r3, #8
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	4619      	mov	r1, r3
 8003616:	480d      	ldr	r0, [pc, #52]	; (800364c <HAL_CAN_MspInit+0xac>)
 8003618:	f001 fa88 	bl	8004b2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	2100      	movs	r1, #0
 8003620:	2013      	movs	r0, #19
 8003622:	f001 fa4c 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003626:	2013      	movs	r0, #19
 8003628:	f001 fa65 	bl	8004af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	2014      	movs	r0, #20
 8003632:	f001 fa44 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003636:	2014      	movs	r0, #20
 8003638:	f001 fa5d 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40006400 	.word	0x40006400
 8003648:	40023800 	.word	0x40023800
 800364c:	40020400 	.word	0x40020400

08003650 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b092      	sub	sp, #72	; 0x48
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003658:	f107 030c 	add.w	r3, r7, #12
 800365c:	223c      	movs	r2, #60	; 0x3c
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f007 fd93 	bl	800b18c <memset>
  if(hrtc->Instance==RTC)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a0c      	ldr	r2, [pc, #48]	; (800369c <HAL_RTC_MspInit+0x4c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003670:	2308      	movs	r3, #8
 8003672:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fe20 	bl	80052c4 <HAL_RCCEx_PeriphCLKConfig>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800368a:	f7ff ff5b 	bl	8003544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_RTC_MspInit+0x50>)
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003694:	bf00      	nop
 8003696:	3748      	adds	r7, #72	; 0x48
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40002800 	.word	0x40002800
 80036a0:	42470e3c 	.word	0x42470e3c

080036a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_SPI_MspInit+0x84>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d12b      	bne.n	800371e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <HAL_SPI_MspInit+0x88>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036fe:	23e0      	movs	r3, #224	; 0xe0
 8003700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370a:	2303      	movs	r3, #3
 800370c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800370e:	2305      	movs	r3, #5
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003712:	f107 0314 	add.w	r3, r7, #20
 8003716:	4619      	mov	r1, r3
 8003718:	4805      	ldr	r0, [pc, #20]	; (8003730 <HAL_SPI_MspInit+0x8c>)
 800371a:	f001 fa07 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800371e:	bf00      	nop
 8003720:	3728      	adds	r7, #40	; 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40013000 	.word	0x40013000
 800372c:	40023800 	.word	0x40023800
 8003730:	40020000 	.word	0x40020000

08003734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_TIM_Base_MspInit+0x48>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d115      	bne.n	8003772 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_TIM_Base_MspInit+0x4c>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_TIM_Base_MspInit+0x4c>)
 8003750:	f043 0310 	orr.w	r3, r3, #16
 8003754:	6413      	str	r3, [r2, #64]	; 0x40
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <HAL_TIM_Base_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	2036      	movs	r0, #54	; 0x36
 8003768:	f001 f9a9 	bl	8004abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800376c:	2036      	movs	r0, #54	; 0x36
 800376e:	f001 f9c2 	bl	8004af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40001000 	.word	0x40001000
 8003780:	40023800 	.word	0x40023800

08003784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_UART_MspInit+0x84>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d12c      	bne.n	8003800 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_UART_MspInit+0x88>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_UART_MspInit+0x88>)
 80037b0:	f043 0310 	orr.w	r3, r3, #16
 80037b4:	6453      	str	r3, [r2, #68]	; 0x44
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_UART_MspInit+0x88>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_UART_MspInit+0x88>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_UART_MspInit+0x88>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_UART_MspInit+0x88>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037f0:	2307      	movs	r3, #7
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	4619      	mov	r1, r3
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <HAL_UART_MspInit+0x8c>)
 80037fc:	f001 f996 	bl	8004b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003800:	bf00      	nop
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40011000 	.word	0x40011000
 800380c:	40023800 	.word	0x40023800
 8003810:	40020000 	.word	0x40020000

08003814 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <SDTimer_Handler+0x40>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <SDTimer_Handler+0x1c>
		Timer1 --;
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <SDTimer_Handler+0x40>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <SDTimer_Handler+0x40>)
 800382e:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <SDTimer_Handler+0x44>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <SDTimer_Handler+0x34>
		Timer2 --;
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <SDTimer_Handler+0x44>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <SDTimer_Handler+0x44>)
 8003846:	701a      	strb	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000a5b5 	.word	0x2000a5b5
 8003858:	2000a5b6 	.word	0x2000a5b6

0800385c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <NMI_Handler+0x4>

08003862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <HardFault_Handler+0x4>

08003868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <MemManage_Handler+0x4>

0800386e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <BusFault_Handler+0x4>

08003874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <UsageFault_Handler+0x4>

0800387a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <SysTick_Handler+0x30>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <SysTick_Handler+0x30>)
 80038b4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <SysTick_Handler+0x30>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d904      	bls.n	80038ca <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <SysTick_Handler+0x30>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 80038c6:	f7ff ffa5 	bl	8003814 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ca:	f000 f977 	bl	8003bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	2000a5b4 	.word	0x2000a5b4

080038d8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <CAN1_TX_IRQHandler+0x10>)
 80038de:	f000 fde4 	bl	80044aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000218 	.word	0x20000218

080038ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80038f0:	4802      	ldr	r0, [pc, #8]	; (80038fc <CAN1_RX0_IRQHandler+0x10>)
 80038f2:	f000 fdda 	bl	80044aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000218 	.word	0x20000218

08003900 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003904:	4802      	ldr	r0, [pc, #8]	; (8003910 <TIM6_IRQHandler+0x10>)
 8003906:	f002 ffe3 	bl	80068d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200002b8 	.word	0x200002b8

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_kill>:

int _kill(int pid, int sig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800392e:	f007 fbe5 	bl	800b0fc <__errno>
 8003932:	4603      	mov	r3, r0
 8003934:	2216      	movs	r2, #22
 8003936:	601a      	str	r2, [r3, #0]
	return -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_exit>:

void _exit (int status)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800394c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ffe7 	bl	8003924 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003956:	e7fe      	b.n	8003956 <_exit+0x12>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800396a:	f3af 8000 	nop.w
 800396e:	4601      	mov	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
	}

return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
	}
	return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return -1;
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039f2:	605a      	str	r2, [r3, #4]
	return 0;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <_isatty>:

int _isatty(int file)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
	return 1;
 8003a0a:	2301      	movs	r3, #1
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	return 0;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f007 fb4a 	bl	800b0fc <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20040000 	.word	0x20040000
 8003a94:	00000400 	.word	0x00000400
 8003a98:	2000a5b8 	.word	0x2000a5b8
 8003a9c:	2000a610 	.word	0x2000a610

08003aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <SystemInit+0x20>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	4a05      	ldr	r2, [pc, #20]	; (8003ac0 <SystemInit+0x20>)
 8003aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ac8:	480d      	ldr	r0, [pc, #52]	; (8003b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aca:	490e      	ldr	r1, [pc, #56]	; (8003b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad0:	e002      	b.n	8003ad8 <LoopCopyDataInit>

08003ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad6:	3304      	adds	r3, #4

08003ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003adc:	d3f9      	bcc.n	8003ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ae0:	4c0b      	ldr	r4, [pc, #44]	; (8003b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae4:	e001      	b.n	8003aea <LoopFillZerobss>

08003ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae8:	3204      	adds	r2, #4

08003aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aec:	d3fb      	bcc.n	8003ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aee:	f7ff ffd7 	bl	8003aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003af2:	f007 fb09 	bl	800b108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af6:	f7ff fa5b 	bl	8002fb0 <main>
  bx  lr    
 8003afa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003afc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b04:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003b08:	08010180 	.word	0x08010180
  ldr r2, =_sbss
 8003b0c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003b10:	2000a60c 	.word	0x2000a60c

08003b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b14:	e7fe      	b.n	8003b14 <ADC_IRQHandler>
	...

08003b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <HAL_Init+0x40>)
 8003b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <HAL_Init+0x40>)
 8003b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_Init+0x40>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b40:	2003      	movs	r0, #3
 8003b42:	f000 ffb1 	bl	8004aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b46:	200f      	movs	r0, #15
 8003b48:	f000 f808 	bl	8003b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b4c:	f7ff fd00 	bl	8003550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00

08003b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_InitTick+0x54>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_InitTick+0x58>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 ffc9 	bl	8004b12 <HAL_SYSTICK_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00e      	b.n	8003ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d80a      	bhi.n	8003ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b90:	2200      	movs	r2, #0
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b98:	f000 ff91 	bl	8004abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b9c:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <HAL_InitTick+0x5c>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	20000008 	.word	0x20000008

08003bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x20>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_IncTick+0x24>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_IncTick+0x24>)
 8003bce:	6013      	str	r3, [r2, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2000000c 	.word	0x2000000c
 8003be0:	2000a5bc 	.word	0x2000a5bc

08003be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return uwTick;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_GetTick+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000a5bc 	.word	0x2000a5bc

08003bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c04:	f7ff ffee 	bl	8003be4 <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c14:	d005      	beq.n	8003c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_Delay+0x44>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c22:	bf00      	nop
 8003c24:	f7ff ffde 	bl	8003be4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d8f7      	bhi.n	8003c24 <HAL_Delay+0x28>
  {
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0ed      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff fc9c 	bl	80035a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c78:	f7ff ffb4 	bl	8003be4 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c7e:	e012      	b.n	8003ca6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c80:	f7ff ffb0 	bl	8003be4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b0a      	cmp	r3, #10
 8003c8c:	d90b      	bls.n	8003ca6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2205      	movs	r2, #5
 8003c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0c5      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0e5      	beq.n	8003c80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0202 	bic.w	r2, r2, #2
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc4:	f7ff ff8e 	bl	8003be4 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cca:	e012      	b.n	8003cf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ccc:	f7ff ff8a 	bl	8003be4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b0a      	cmp	r3, #10
 8003cd8:	d90b      	bls.n	8003cf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2205      	movs	r2, #5
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e09f      	b.n	8003e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7e1b      	ldrb	r3, [r3, #24]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e007      	b.n	8003d2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7e5b      	ldrb	r3, [r3, #25]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e007      	b.n	8003d54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7e9b      	ldrb	r3, [r3, #26]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0220 	bic.w	r2, r2, #32
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7edb      	ldrb	r3, [r3, #27]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0210 	bic.w	r2, r2, #16
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0210 	orr.w	r2, r2, #16
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7f1b      	ldrb	r3, [r3, #28]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d108      	bne.n	8003dc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0208 	orr.w	r2, r2, #8
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e007      	b.n	8003dd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0208 	bic.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7f5b      	ldrb	r3, [r3, #29]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d108      	bne.n	8003dec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0204 	orr.w	r2, r2, #4
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e007      	b.n	8003dfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0204 	bic.w	r2, r2, #4
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	ea42 0103 	orr.w	r1, r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e52:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <HAL_CAN_ConfigFilter+0x26>
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f040 80be 	bne.w	8003fde <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_CAN_ConfigFilter+0x1bc>)
 8003e64:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e6c:	f043 0201 	orr.w	r2, r3, #1
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	431a      	orrs	r2, r3
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	401a      	ands	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d123      	bne.n	8003f0c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ee6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3248      	adds	r2, #72	; 0x48
 8003eec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f00:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	3348      	adds	r3, #72	; 0x48
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d122      	bne.n	8003f5a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	3248      	adds	r2, #72	; 0x48
 8003f3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	3348      	adds	r3, #72	; 0x48
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	440b      	add	r3, r1
 8003f58:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f74:	e007      	b.n	8003f86 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	43db      	mvns	r3, r3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003fa0:	e007      	b.n	8003fb2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fd0:	f023 0201 	bic.w	r2, r3, #1
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e006      	b.n	8003fec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40006400 	.word	0x40006400

08003ffc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d12e      	bne.n	800406e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004028:	f7ff fddc 	bl	8003be4 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800402e:	e012      	b.n	8004056 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004030:	f7ff fdd8 	bl	8003be4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b0a      	cmp	r3, #10
 800403c:	d90b      	bls.n	8004056 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2205      	movs	r2, #5
 800404e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e012      	b.n	800407c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e006      	b.n	800407c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004098:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d003      	beq.n	80040b0 <HAL_CAN_AddTxMessage+0x2c>
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 80b8 	bne.w	8004220 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80a0 	beq.w	8004210 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	0e1b      	lsrs	r3, r3, #24
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e09e      	b.n	800422e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040f0:	2201      	movs	r2, #1
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	409a      	lsls	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	6809      	ldr	r1, [r1, #0]
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3318      	adds	r3, #24
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	440b      	add	r3, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e00f      	b.n	800413e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004128:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004132:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3318      	adds	r3, #24
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	440b      	add	r3, r1
 800413c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	3318      	adds	r3, #24
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	440b      	add	r3, r1
 800414e:	3304      	adds	r3, #4
 8004150:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	7d1b      	ldrb	r3, [r3, #20]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d111      	bne.n	800417e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3318      	adds	r3, #24
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3318      	adds	r3, #24
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	440b      	add	r3, r1
 800417a:	3304      	adds	r3, #4
 800417c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3307      	adds	r3, #7
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	061a      	lsls	r2, r3, #24
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3306      	adds	r3, #6
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3305      	adds	r3, #5
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	4313      	orrs	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	3204      	adds	r2, #4
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	4610      	mov	r0, r2
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	ea43 0200 	orr.w	r2, r3, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	440b      	add	r3, r1
 80041b0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3303      	adds	r3, #3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	061a      	lsls	r2, r3, #24
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3302      	adds	r3, #2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3301      	adds	r3, #1
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	4313      	orrs	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	4610      	mov	r0, r2
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	ea43 0200 	orr.w	r2, r3, r0
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80041ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3318      	adds	r3, #24
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3318      	adds	r3, #24
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	440b      	add	r3, r1
 800420a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e00e      	b.n	800422e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e006      	b.n	800422e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
  }
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800423a:	b480      	push	{r7}
 800423c:	b087      	sub	sp, #28
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d003      	beq.n	800425e <HAL_CAN_GetRxMessage+0x24>
 8004256:	7dfb      	ldrb	r3, [r7, #23]
 8004258:	2b02      	cmp	r3, #2
 800425a:	f040 80f3 	bne.w	8004444 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10e      	bne.n	8004282 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d116      	bne.n	80042a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0e7      	b.n	8004452 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0d8      	b.n	8004452 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	331b      	adds	r3, #27
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0204 	and.w	r2, r3, #4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	331b      	adds	r3, #27
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0d5b      	lsrs	r3, r3, #21
 80042ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	331b      	adds	r3, #27
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	331b      	adds	r3, #27
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0202 	and.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	331b      	adds	r3, #27
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	331b      	adds	r3, #27
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	3304      	adds	r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	331b      	adds	r3, #27
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4413      	add	r3, r2
 8004358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0a1a      	lsrs	r2, r3, #8
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	0c1a      	lsrs	r2, r3, #16
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	3302      	adds	r3, #2
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	0e1a      	lsrs	r2, r3, #24
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3303      	adds	r3, #3
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	3304      	adds	r3, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	0a1a      	lsrs	r2, r3, #8
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	3305      	adds	r3, #5
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	0c1a      	lsrs	r2, r3, #16
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	3306      	adds	r3, #6
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0e1a      	lsrs	r2, r3, #24
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	3307      	adds	r3, #7
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d108      	bne.n	8004430 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0220 	orr.w	r2, r2, #32
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	e007      	b.n	8004440 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	e006      	b.n	8004452 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800446e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d002      	beq.n	800447c <HAL_CAN_ActivateNotification+0x1e>
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d109      	bne.n	8004490 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6959      	ldr	r1, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e006      	b.n	800449e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b08a      	sub	sp, #40	; 0x28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d07c      	beq.n	80045ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d023      	beq.n	8004542 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f983 	bl	8004818 <HAL_CAN_TxMailbox0CompleteCallback>
 8004512:	e016      	b.n	8004542 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e00c      	b.n	8004542 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	e002      	b.n	8004542 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f989 	bl	8004854 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d024      	beq.n	8004596 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f963 	bl	800482c <HAL_CAN_TxMailbox1CompleteCallback>
 8004566:	e016      	b.n	8004596 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e00c      	b.n	8004596 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e002      	b.n	8004596 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f969 	bl	8004868 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d024      	beq.n	80045ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f943 	bl	8004840 <HAL_CAN_TxMailbox2CompleteCallback>
 80045ba:	e016      	b.n	80045ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e00c      	b.n	80045ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e002      	b.n	80045ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f949 	bl	800487c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00c      	beq.n	800460e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00b      	beq.n	8004630 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2208      	movs	r2, #8
 8004628:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f930 	bl	8004890 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fe ff5f 	bl	800350c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2210      	movs	r2, #16
 8004670:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2208      	movs	r2, #8
 800468c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f912 	bl	80048b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8f9 	bl	80048a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00b      	beq.n	80046d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8fc 	bl	80048cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8f5 	bl	80048e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d07b      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d072      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d043      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800476e:	2b00      	cmp	r3, #0
 8004770:	d03e      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d02b      	beq.n	80047d4 <HAL_CAN_IRQHandler+0x32a>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d82e      	bhi.n	80047de <HAL_CAN_IRQHandler+0x334>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d022      	beq.n	80047ca <HAL_CAN_IRQHandler+0x320>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d82a      	bhi.n	80047de <HAL_CAN_IRQHandler+0x334>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d019      	beq.n	80047c0 <HAL_CAN_IRQHandler+0x316>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d826      	bhi.n	80047de <HAL_CAN_IRQHandler+0x334>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d010      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x30c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d822      	bhi.n	80047de <HAL_CAN_IRQHandler+0x334>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d002      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x2f8>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d005      	beq.n	80047ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80047a0:	e01d      	b.n	80047de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047aa:	e019      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f043 0310 	orr.w	r3, r3, #16
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047b4:	e014      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047be:	e00f      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047c8:	e00a      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047d2:	e005      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80047dc:	e000      	b.n	80047e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80047de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2204      	movs	r2, #4
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d008      	beq.n	8004810 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f872 	bl	80048f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004810:	bf00      	nop
 8004812:	3728      	adds	r7, #40	; 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004924:	4013      	ands	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800493a:	4a04      	ldr	r2, [pc, #16]	; (800494c <__NVIC_SetPriorityGrouping+0x44>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	60d3      	str	r3, [r2, #12]
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004954:	4b04      	ldr	r3, [pc, #16]	; (8004968 <__NVIC_GetPriorityGrouping+0x18>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 0307 	and.w	r3, r3, #7
}
 800495e:	4618      	mov	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	e000ed00 	.word	0xe000ed00

0800496c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	db0b      	blt.n	8004996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	4907      	ldr	r1, [pc, #28]	; (80049a4 <__NVIC_EnableIRQ+0x38>)
 8004986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2001      	movs	r0, #1
 800498e:	fa00 f202 	lsl.w	r2, r0, r2
 8004992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	db0a      	blt.n	80049d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	490c      	ldr	r1, [pc, #48]	; (80049f4 <__NVIC_SetPriority+0x4c>)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	440b      	add	r3, r1
 80049cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049d0:	e00a      	b.n	80049e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4908      	ldr	r1, [pc, #32]	; (80049f8 <__NVIC_SetPriority+0x50>)
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	3b04      	subs	r3, #4
 80049e0:	0112      	lsls	r2, r2, #4
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	440b      	add	r3, r1
 80049e6:	761a      	strb	r2, [r3, #24]
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000e100 	.word	0xe000e100
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f1c3 0307 	rsb	r3, r3, #7
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	bf28      	it	cs
 8004a1a:	2304      	movcs	r3, #4
 8004a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d902      	bls.n	8004a2c <NVIC_EncodePriority+0x30>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3b03      	subs	r3, #3
 8004a2a:	e000      	b.n	8004a2e <NVIC_EncodePriority+0x32>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	401a      	ands	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	43d9      	mvns	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a54:	4313      	orrs	r3, r2
         );
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a74:	d301      	bcc.n	8004a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00f      	b.n	8004a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <SysTick_Config+0x40>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a82:	210f      	movs	r1, #15
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a88:	f7ff ff8e 	bl	80049a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SysTick_Config+0x40>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <SysTick_Config+0x40>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000e010 	.word	0xe000e010

08004aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff29 	bl	8004908 <__NVIC_SetPriorityGrouping>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad0:	f7ff ff3e 	bl	8004950 <__NVIC_GetPriorityGrouping>
 8004ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff8e 	bl	80049fc <NVIC_EncodePriority>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff5d 	bl	80049a8 <__NVIC_SetPriority>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff31 	bl	800496c <__NVIC_EnableIRQ>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ffa2 	bl	8004a64 <SysTick_Config>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	e153      	b.n	8004df0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b48:	2201      	movs	r2, #1
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f040 8142 	bne.w	8004dea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d005      	beq.n	8004b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d130      	bne.n	8004be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 0201 	and.w	r2, r3, #1
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d017      	beq.n	8004c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 0303 	and.w	r3, r3, #3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d123      	bne.n	8004c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	08da      	lsrs	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3208      	adds	r2, #8
 8004c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	220f      	movs	r2, #15
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	08da      	lsrs	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3208      	adds	r2, #8
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0203 	and.w	r2, r3, #3
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 809c 	beq.w	8004dea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b54      	ldr	r3, [pc, #336]	; (8004e08 <HAL_GPIO_Init+0x2dc>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	4a53      	ldr	r2, [pc, #332]	; (8004e08 <HAL_GPIO_Init+0x2dc>)
 8004cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc2:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <HAL_GPIO_Init+0x2dc>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cce:	4a4f      	ldr	r2, [pc, #316]	; (8004e0c <HAL_GPIO_Init+0x2e0>)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a46      	ldr	r2, [pc, #280]	; (8004e10 <HAL_GPIO_Init+0x2e4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_GPIO_Init+0x1f6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a45      	ldr	r2, [pc, #276]	; (8004e14 <HAL_GPIO_Init+0x2e8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00d      	beq.n	8004d1e <HAL_GPIO_Init+0x1f2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a44      	ldr	r2, [pc, #272]	; (8004e18 <HAL_GPIO_Init+0x2ec>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <HAL_GPIO_Init+0x1ee>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a43      	ldr	r2, [pc, #268]	; (8004e1c <HAL_GPIO_Init+0x2f0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d101      	bne.n	8004d16 <HAL_GPIO_Init+0x1ea>
 8004d12:	2303      	movs	r3, #3
 8004d14:	e006      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d16:	2307      	movs	r3, #7
 8004d18:	e004      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e002      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_GPIO_Init+0x1f8>
 8004d22:	2300      	movs	r3, #0
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	f002 0203 	and.w	r2, r2, #3
 8004d2a:	0092      	lsls	r2, r2, #2
 8004d2c:	4093      	lsls	r3, r2
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d34:	4935      	ldr	r1, [pc, #212]	; (8004e0c <HAL_GPIO_Init+0x2e0>)
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	089b      	lsrs	r3, r3, #2
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d66:	4a2e      	ldr	r2, [pc, #184]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dba:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004de4:	4a0e      	ldr	r2, [pc, #56]	; (8004e20 <HAL_GPIO_Init+0x2f4>)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3301      	adds	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	f67f aea8 	bls.w	8004b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3724      	adds	r7, #36	; 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40013800 	.word	0x40013800
 8004e10:	40020000 	.word	0x40020000
 8004e14:	40020400 	.word	0x40020400
 8004e18:	40020800 	.word	0x40020800
 8004e1c:	40020c00 	.word	0x40020c00
 8004e20:	40013c00 	.word	0x40013c00

08004e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
 8004e40:	e001      	b.n	8004e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	807b      	strh	r3, [r7, #2]
 8004e60:	4613      	mov	r3, r2
 8004e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e64:	787b      	ldrb	r3, [r7, #1]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e70:	e003      	b.n	8004e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	041a      	lsls	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	619a      	str	r2, [r3, #24]
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0cc      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b68      	ldr	r3, [pc, #416]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d90c      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b65      	ldr	r3, [pc, #404]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b63      	ldr	r3, [pc, #396]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0b8      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d020      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004edc:	4b59      	ldr	r3, [pc, #356]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4a58      	ldr	r2, [pc, #352]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef4:	4b53      	ldr	r3, [pc, #332]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a52      	ldr	r2, [pc, #328]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f00:	4b50      	ldr	r3, [pc, #320]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	494d      	ldr	r1, [pc, #308]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d044      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b47      	ldr	r3, [pc, #284]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d119      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e07f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d003      	beq.n	8004f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f46:	4b3f      	ldr	r3, [pc, #252]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e06f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e067      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b37      	ldr	r3, [pc, #220]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4934      	ldr	r1, [pc, #208]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f78:	f7fe fe34 	bl	8003be4 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fe fe30 	bl	8003be4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e04f      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d20c      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b22      	ldr	r3, [pc, #136]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b20      	ldr	r3, [pc, #128]	; (8005040 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e032      	b.n	8005036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4916      	ldr	r1, [pc, #88]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	490e      	ldr	r1, [pc, #56]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800500e:	f000 f821 	bl	8005054 <HAL_RCC_GetSysClockFreq>
 8005012:	4602      	mov	r2, r0
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	490a      	ldr	r1, [pc, #40]	; (8005048 <HAL_RCC_ClockConfig+0x1c0>)
 8005020:	5ccb      	ldrb	r3, [r1, r3]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_ClockConfig+0x1c8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fd94 	bl	8003b5c <HAL_InitTick>

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023c00 	.word	0x40023c00
 8005044:	40023800 	.word	0x40023800
 8005048:	0800f81c 	.word	0x0800f81c
 800504c:	20000004 	.word	0x20000004
 8005050:	20000008 	.word	0x20000008

08005054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005058:	b094      	sub	sp, #80	; 0x50
 800505a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	2300      	movs	r3, #0
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	2300      	movs	r3, #0
 8005066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800506c:	4b79      	ldr	r3, [pc, #484]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d00d      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x40>
 8005078:	2b08      	cmp	r3, #8
 800507a:	f200 80e1 	bhi.w	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x34>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d003      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x3a>
 8005086:	e0db      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b73      	ldr	r3, [pc, #460]	; (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800508c:	e0db      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508e:	4b72      	ldr	r3, [pc, #456]	; (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005092:	e0d8      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005094:	4b6f      	ldr	r3, [pc, #444]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509e:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d063      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b6a      	ldr	r3, [pc, #424]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
 80050be:	2300      	movs	r3, #0
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f04f 0000 	mov.w	r0, #0
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d8:	0150      	lsls	r0, r2, #5
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4621      	mov	r1, r4
 80050e0:	1a51      	subs	r1, r2, r1
 80050e2:	6139      	str	r1, [r7, #16]
 80050e4:	4629      	mov	r1, r5
 80050e6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f8:	4659      	mov	r1, fp
 80050fa:	018b      	lsls	r3, r1, #6
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005102:	4651      	mov	r1, sl
 8005104:	018a      	lsls	r2, r1, #6
 8005106:	4651      	mov	r1, sl
 8005108:	ebb2 0801 	subs.w	r8, r2, r1
 800510c:	4659      	mov	r1, fp
 800510e:	eb63 0901 	sbc.w	r9, r3, r1
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800511e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005126:	4690      	mov	r8, r2
 8005128:	4699      	mov	r9, r3
 800512a:	4623      	mov	r3, r4
 800512c:	eb18 0303 	adds.w	r3, r8, r3
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	462b      	mov	r3, r5
 8005134:	eb49 0303 	adc.w	r3, r9, r3
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005146:	4629      	mov	r1, r5
 8005148:	028b      	lsls	r3, r1, #10
 800514a:	4621      	mov	r1, r4
 800514c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005150:	4621      	mov	r1, r4
 8005152:	028a      	lsls	r2, r1, #10
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515a:	2200      	movs	r2, #0
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
 800515e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005164:	f7fb fdb0 	bl	8000cc8 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005170:	e058      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	2200      	movs	r2, #0
 800517a:	4618      	mov	r0, r3
 800517c:	4611      	mov	r1, r2
 800517e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	2300      	movs	r3, #0
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	f04f 0000 	mov.w	r0, #0
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	0159      	lsls	r1, r3, #5
 800519a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519e:	0150      	lsls	r0, r2, #5
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4641      	mov	r1, r8
 80051a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051c4:	ebb2 040a 	subs.w	r4, r2, sl
 80051c8:	eb63 050b 	sbc.w	r5, r3, fp
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	464b      	mov	r3, r9
 80051e8:	eb45 0303 	adc.w	r3, r5, r3
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051fa:	4629      	mov	r1, r5
 80051fc:	028b      	lsls	r3, r1, #10
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005204:	4621      	mov	r1, r4
 8005206:	028a      	lsls	r2, r1, #10
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	61fa      	str	r2, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	f7fb fd56 	bl	8000cc8 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800523e:	e002      	b.n	8005246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetSysClockFreq+0x204>)
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005248:	4618      	mov	r0, r3
 800524a:	3750      	adds	r7, #80	; 0x50
 800524c:	46bd      	mov	sp, r7
 800524e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	00f42400 	.word	0x00f42400

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b03      	ldr	r3, [pc, #12]	; (8005270 <HAL_RCC_GetHCLKFreq+0x14>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000004 	.word	0x20000004

08005274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005278:	f7ff fff0 	bl	800525c <HAL_RCC_GetHCLKFreq>
 800527c:	4602      	mov	r2, r0
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	4903      	ldr	r1, [pc, #12]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528a:	5ccb      	ldrb	r3, [r1, r3]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	0800f82c 	.word	0x0800f82c

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a0:	f7ff ffdc 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0b5b      	lsrs	r3, r3, #13
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	0800f82c 	.word	0x0800f82c

080052c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80052e4:	4b87      	ldr	r3, [pc, #540]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4984      	ldr	r1, [pc, #528]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005312:	4b7c      	ldr	r3, [pc, #496]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005318:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	4978      	ldr	r1, [pc, #480]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8005330:	2301      	movs	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8083 	beq.w	8005448 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	4b6f      	ldr	r3, [pc, #444]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	4a6e      	ldr	r2, [pc, #440]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	6413      	str	r3, [r2, #64]	; 0x40
 8005352:	4b6c      	ldr	r3, [pc, #432]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535a:	60bb      	str	r3, [r7, #8]
 800535c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800535e:	4b6a      	ldr	r3, [pc, #424]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a69      	ldr	r2, [pc, #420]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005368:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800536a:	f7fe fc3b 	bl	8003be4 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005372:	f7fe fc37 	bl	8003be4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e162      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005384:	4b60      	ldr	r3, [pc, #384]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005390:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005398:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d02f      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d028      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ae:	4b55      	ldr	r3, [pc, #340]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053b8:	4b54      	ldr	r3, [pc, #336]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053be:	4b53      	ldr	r3, [pc, #332]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053c4:	4a4f      	ldr	r2, [pc, #316]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053ca:	4b4e      	ldr	r3, [pc, #312]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d114      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fe fc05 	bl	8003be4 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fe fc01 	bl	8003be4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e12a      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ee      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540c:	d10d      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	4938      	ldr	r1, [pc, #224]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
 8005428:	e005      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4a35      	ldr	r2, [pc, #212]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005430:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005434:	6093      	str	r3, [r2, #8]
 8005436:	4b33      	ldr	r3, [pc, #204]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005438:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005442:	4930      	ldr	r1, [pc, #192]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005444:	4313      	orrs	r3, r2
 8005446:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800545c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800546c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005470:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	4922      	ldr	r1, [pc, #136]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d011      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800548c:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800548e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005492:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	491a      	ldr	r1, [pc, #104]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054aa:	d101      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d004      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	f040 8091 	bne.w	8005604 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054e8:	f7fe fb7c 	bl	8003be4 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054ee:	e013      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054f0:	f7fe fb78 	bl	8003be4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d90c      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e0a3      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	40007000 	.word	0x40007000
 800550c:	42470e40 	.word	0x42470e40
 8005510:	424711e0 	.word	0x424711e0
 8005514:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005518:	4b4e      	ldr	r3, [pc, #312]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005524:	4a4c      	ldr	r2, [pc, #304]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d023      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d019      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005568:	d00e      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d115      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005586:	d110      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	019b      	lsls	r3, r3, #6
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	061b      	lsls	r3, r3, #24
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	071b      	lsls	r3, r3, #28
 80055a2:	492c      	ldr	r1, [pc, #176]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	019b      	lsls	r3, r3, #6
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	071b      	lsls	r3, r3, #28
 80055d0:	4920      	ldr	r1, [pc, #128]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055d8:	4b20      	ldr	r3, [pc, #128]	; (800565c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055de:	f7fe fb01 	bl	8003be4 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055e4:	e008      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055e6:	f7fe fafd 	bl	8003be4 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e028      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f8:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005616:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	490d      	ldr	r1, [pc, #52]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005638:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	4904      	ldr	r1, [pc, #16]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	424710d8 	.word	0x424710d8
 800565c:	42470068 	.word	0x42470068

08005660 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e273      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d075      	beq.n	800576a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800567e:	4b88      	ldr	r3, [pc, #544]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b04      	cmp	r3, #4
 8005688:	d00c      	beq.n	80056a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568a:	4b85      	ldr	r3, [pc, #532]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005692:	2b08      	cmp	r3, #8
 8005694:	d112      	bne.n	80056bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005696:	4b82      	ldr	r3, [pc, #520]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a2:	d10b      	bne.n	80056bc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05b      	beq.n	8005768 <HAL_RCC_OscConfig+0x108>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d157      	bne.n	8005768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e24e      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d106      	bne.n	80056d4 <HAL_RCC_OscConfig+0x74>
 80056c6:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01d      	b.n	8005710 <HAL_RCC_OscConfig+0xb0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCC_OscConfig+0x98>
 80056de:	4b70      	ldr	r3, [pc, #448]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6c      	ldr	r2, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e00b      	b.n	8005710 <HAL_RCC_OscConfig+0xb0>
 80056f8:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80056fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b66      	ldr	r3, [pc, #408]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a65      	ldr	r2, [pc, #404]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800570a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800570e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fe fa64 	bl	8003be4 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005720:	f7fe fa60 	bl	8003be4 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	; 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e213      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005732:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0xc0>
 800573e:	e014      	b.n	800576a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fe fa50 	bl	8003be4 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005748:	f7fe fa4c 	bl	8003be4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e1ff      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575a:	4b51      	ldr	r3, [pc, #324]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0xe8>
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d063      	beq.n	800583e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d116      	bne.n	80057c8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCC_OscConfig+0x152>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d001      	beq.n	80057b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1d3      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	4937      	ldr	r1, [pc, #220]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	e03a      	b.n	800583e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d020      	beq.n	8005812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_RCC_OscConfig+0x244>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fe fa05 	bl	8003be4 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057de:	f7fe fa01 	bl	8003be4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e1b4      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fc:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4925      	ldr	r1, [pc, #148]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]
 8005810:	e015      	b.n	800583e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005812:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <HAL_RCC_OscConfig+0x244>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fe f9e4 	bl	8003be4 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005820:	f7fe f9e0 	bl	8003be4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e193      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d036      	beq.n	80058b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d016      	beq.n	8005880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_RCC_OscConfig+0x248>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005858:	f7fe f9c4 	bl	8003be4 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005860:	f7fe f9c0 	bl	8003be4 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e173      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_OscConfig+0x240>)
 8005874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x200>
 800587e:	e01b      	b.n	80058b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCC_OscConfig+0x248>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fe f9ad 	bl	8003be4 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	e00e      	b.n	80058ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588e:	f7fe f9a9 	bl	8003be4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d907      	bls.n	80058ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e15c      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
 80058a0:	40023800 	.word	0x40023800
 80058a4:	42470000 	.word	0x42470000
 80058a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	4b8a      	ldr	r3, [pc, #552]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ea      	bne.n	800588e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8097 	beq.w	80059f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4b83      	ldr	r3, [pc, #524]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	4b7f      	ldr	r3, [pc, #508]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a7e      	ldr	r2, [pc, #504]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b7c      	ldr	r3, [pc, #496]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b79      	ldr	r3, [pc, #484]	; (8005adc <HAL_RCC_OscConfig+0x47c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d118      	bne.n	8005934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b76      	ldr	r3, [pc, #472]	; (8005adc <HAL_RCC_OscConfig+0x47c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a75      	ldr	r2, [pc, #468]	; (8005adc <HAL_RCC_OscConfig+0x47c>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7fe f969 	bl	8003be4 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7fe f965 	bl	8003be4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e118      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005928:	4b6c      	ldr	r3, [pc, #432]	; (8005adc <HAL_RCC_OscConfig+0x47c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d106      	bne.n	800594a <HAL_RCC_OscConfig+0x2ea>
 800593c:	4b66      	ldr	r3, [pc, #408]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a65      	ldr	r2, [pc, #404]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005942:	f043 0301 	orr.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	e01c      	b.n	8005984 <HAL_RCC_OscConfig+0x324>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b05      	cmp	r3, #5
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x30c>
 8005952:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005956:	4a60      	ldr	r2, [pc, #384]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
 800595e:	4b5e      	ldr	r3, [pc, #376]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a5d      	ldr	r2, [pc, #372]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005964:	f043 0301 	orr.w	r3, r3, #1
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	e00b      	b.n	8005984 <HAL_RCC_OscConfig+0x324>
 800596c:	4b5a      	ldr	r3, [pc, #360]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	4a59      	ldr	r2, [pc, #356]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	6713      	str	r3, [r2, #112]	; 0x70
 8005978:	4b57      	ldr	r3, [pc, #348]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a56      	ldr	r2, [pc, #344]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 800597e:	f023 0304 	bic.w	r3, r3, #4
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fe f92a 	bl	8003be4 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fe f926 	bl	8003be4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0d7      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059aa:	4b4b      	ldr	r3, [pc, #300]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ee      	beq.n	8005994 <HAL_RCC_OscConfig+0x334>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fe f914 	bl	8003be4 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fe f910 	bl	8003be4 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0c1      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d6:	4b40      	ldr	r3, [pc, #256]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1ee      	bne.n	80059c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d105      	bne.n	80059f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	4a3a      	ldr	r2, [pc, #232]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80ad 	beq.w	8005b58 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059fe:	4b36      	ldr	r3, [pc, #216]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d060      	beq.n	8005acc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d145      	bne.n	8005a9e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	4b33      	ldr	r3, [pc, #204]	; (8005ae0 <HAL_RCC_OscConfig+0x480>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a18:	f7fe f8e4 	bl	8003be4 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a20:	f7fe f8e0 	bl	8003be4 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e093      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	4b29      	ldr	r3, [pc, #164]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1f0      	bne.n	8005a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	3b01      	subs	r3, #1
 8005a58:	041b      	lsls	r3, r3, #16
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	061b      	lsls	r3, r3, #24
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	071b      	lsls	r3, r3, #28
 8005a6a:	491b      	ldr	r1, [pc, #108]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a70:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <HAL_RCC_OscConfig+0x480>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fe f8b5 	bl	8003be4 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7e:	f7fe f8b1 	bl	8003be4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e064      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCC_OscConfig+0x41e>
 8005a9c:	e05c      	b.n	8005b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <HAL_RCC_OscConfig+0x480>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fe f89e 	bl	8003be4 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fe f89a 	bl	8003be4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e04d      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <HAL_RCC_OscConfig+0x478>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x44c>
 8005aca:	e045      	b.n	8005b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e040      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40007000 	.word	0x40007000
 8005ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d030      	beq.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d129      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d122      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b14:	4013      	ands	r3, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d119      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d10f      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d107      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40023800 	.word	0x40023800

08005b68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e066      	b.n	8005c4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7f5b      	ldrb	r3, [r3, #29]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd fd5e 	bl	8003650 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	22ca      	movs	r2, #202	; 0xca
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2253      	movs	r2, #83	; 0x53
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f927 	bl	8005dfe <RTC_EnterInitMode>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d12c      	bne.n	8005c14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bcc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6899      	ldr	r1, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68d2      	ldr	r2, [r2, #12]
 8005bf4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6919      	ldr	r1, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	041a      	lsls	r2, r3, #16
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f92e 	bl	8005e6c <RTC_ExitInitMode>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d113      	bne.n	8005c42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	0d9b      	lsrs	r3, r3, #22
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11a      	bne.n	8005d06 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f8ee 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f8e5 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	789b      	ldrb	r3, [r3, #2]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f8dc 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	0b5b      	lsrs	r3, r3, #13
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11a      	bne.n	8005da4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f89f 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f896 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	789b      	ldrb	r3, [r3, #2]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f88d 	bl	8005eb6 <RTC_Bcd2ToByte>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dc8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005dca:	f7fd ff0b 	bl	8003be4 <HAL_GetTick>
 8005dce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dd0:	e009      	b.n	8005de6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dd2:	f7fd ff07 	bl	8003be4 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005de0:	d901      	bls.n	8005de6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e007      	b.n	8005df6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0ee      	beq.n	8005dd2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d122      	bne.n	8005e62 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e2a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e2c:	f7fd feda 	bl	8003be4 <HAL_GetTick>
 8005e30:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e32:	e00c      	b.n	8005e4e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e34:	f7fd fed6 	bl	8003be4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e42:	d904      	bls.n	8005e4e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2204      	movs	r2, #4
 8005e48:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d102      	bne.n	8005e62 <RTC_EnterInitMode+0x64>
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d1e8      	bne.n	8005e34 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff ff89 	bl	8005dae <HAL_RTC_WaitForSynchro>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	0092      	lsls	r2, r2, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	4413      	add	r3, r2
 8005ee0:	b2db      	uxtb	r3, r3
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e07b      	b.n	8005ff8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d108      	bne.n	8005f1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f10:	d009      	beq.n	8005f26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	61da      	str	r2, [r3, #28]
 8005f18:	e005      	b.n	8005f26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fd fbaf 	bl	80036a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	ea42 0103 	orr.w	r1, r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	f003 0104 	and.w	r1, r3, #4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	f003 0210 	and.w	r2, r3, #16
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69da      	ldr	r2, [r3, #28]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Transmit+0x22>
 800601e:	2302      	movs	r3, #2
 8006020:	e126      	b.n	8006270 <HAL_SPI_Transmit+0x270>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800602a:	f7fd fddb 	bl	8003be4 <HAL_GetTick>
 800602e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d002      	beq.n	8006046 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006044:	e10b      	b.n	800625e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SPI_Transmit+0x52>
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006056:	e102      	b.n	800625e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2203      	movs	r2, #3
 800605c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609e:	d10f      	bne.n	80060c0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d007      	beq.n	80060de <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e6:	d14b      	bne.n	8006180 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SPI_Transmit+0xf6>
 80060f0:	8afb      	ldrh	r3, [r7, #22]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d13e      	bne.n	8006174 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	881a      	ldrh	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	1c9a      	adds	r2, r3, #2
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800611a:	e02b      	b.n	8006174 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b02      	cmp	r3, #2
 8006128:	d112      	bne.n	8006150 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	881a      	ldrh	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	1c9a      	adds	r2, r3, #2
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	86da      	strh	r2, [r3, #54]	; 0x36
 800614e:	e011      	b.n	8006174 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006150:	f7fd fd48 	bl	8003be4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	429a      	cmp	r2, r3
 800615e:	d803      	bhi.n	8006168 <HAL_SPI_Transmit+0x168>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006166:	d102      	bne.n	800616e <HAL_SPI_Transmit+0x16e>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006172:	e074      	b.n	800625e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ce      	bne.n	800611c <HAL_SPI_Transmit+0x11c>
 800617e:	e04c      	b.n	800621a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_SPI_Transmit+0x18e>
 8006188:	8afb      	ldrh	r3, [r7, #22]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d140      	bne.n	8006210 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	330c      	adds	r3, #12
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061b4:	e02c      	b.n	8006210 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d113      	bne.n	80061ec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80061ea:	e011      	b.n	8006210 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ec:	f7fd fcfa 	bl	8003be4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d803      	bhi.n	8006204 <HAL_SPI_Transmit+0x204>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006202:	d102      	bne.n	800620a <HAL_SPI_Transmit+0x20a>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800620e:	e026      	b.n	800625e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1cd      	bne.n	80061b6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fa54 	bl	80066cc <SPI_EndRxTxTransaction>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e000      	b.n	800625e <HAL_SPI_Transmit+0x25e>
  }

error:
 800625c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800626e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006286:	2301      	movs	r3, #1
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_SPI_TransmitReceive+0x26>
 800629a:	2302      	movs	r3, #2
 800629c:	e18a      	b.n	80065b4 <HAL_SPI_TransmitReceive+0x33c>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a6:	f7fd fc9d 	bl	8003be4 <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062bc:	887b      	ldrh	r3, [r7, #2]
 80062be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d00f      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x70>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ce:	d107      	bne.n	80062e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <HAL_SPI_TransmitReceive+0x68>
 80062d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d003      	beq.n	80062e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062e0:	2302      	movs	r3, #2
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062e6:	e15b      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x82>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x82>
 80062f4:	887b      	ldrh	r3, [r7, #2]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006300:	e14e      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b04      	cmp	r3, #4
 800630c:	d003      	beq.n	8006316 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2205      	movs	r2, #5
 8006312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	887a      	ldrh	r2, [r7, #2]
 8006326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	887a      	ldrh	r2, [r7, #2]
 800632c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	887a      	ldrh	r2, [r7, #2]
 800633e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d007      	beq.n	800636a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006372:	d178      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_TransmitReceive+0x10a>
 800637c:	8b7b      	ldrh	r3, [r7, #26]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d166      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	881a      	ldrh	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	1c9a      	adds	r2, r3, #2
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a6:	e053      	b.n	8006450 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d11b      	bne.n	80063ee <HAL_SPI_TransmitReceive+0x176>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d016      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x176>
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d113      	bne.n	80063ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	1c9a      	adds	r2, r3, #2
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d119      	bne.n	8006430 <HAL_SPI_TransmitReceive+0x1b8>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d014      	beq.n	8006430 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	b292      	uxth	r2, r2
 8006412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	1c9a      	adds	r2, r3, #2
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800642c:	2301      	movs	r3, #1
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006430:	f7fd fbd8 	bl	8003be4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800643c:	429a      	cmp	r2, r3
 800643e:	d807      	bhi.n	8006450 <HAL_SPI_TransmitReceive+0x1d8>
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006446:	d003      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800644e:	e0a7      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1a6      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x130>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1a1      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x130>
 8006464:	e07c      	b.n	8006560 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_TransmitReceive+0x1fc>
 800646e:	8b7b      	ldrh	r3, [r7, #26]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d16b      	bne.n	800654c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800649a:	e057      	b.n	800654c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d11c      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x26c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d017      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x26c>
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d114      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	7812      	ldrb	r2, [r2, #0]
 80064c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d119      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x2ae>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d014      	beq.n	8006526 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006522:	2301      	movs	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006526:	f7fd fb5d 	bl	8003be4 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006532:	429a      	cmp	r2, r3
 8006534:	d803      	bhi.n	800653e <HAL_SPI_TransmitReceive+0x2c6>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800653c:	d102      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x2cc>
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800654a:	e029      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1a2      	bne.n	800649c <HAL_SPI_TransmitReceive+0x224>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d19d      	bne.n	800649c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f8b1 	bl	80066cc <SPI_EndRxTxTransaction>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800657c:	e010      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	e000      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800659e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3730      	adds	r7, #48	; 0x30
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065cc:	f7fd fb0a 	bl	8003be4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	4413      	add	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065dc:	f7fd fb02 	bl	8003be4 <HAL_GetTick>
 80065e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065e2:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	015b      	lsls	r3, r3, #5
 80065e8:	0d1b      	lsrs	r3, r3, #20
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f2:	e054      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fa:	d050      	beq.n	800669e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065fc:	f7fd faf2 	bl	8003be4 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	429a      	cmp	r2, r3
 800660a:	d902      	bls.n	8006612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d13d      	bne.n	800668e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d111      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006634:	d004      	beq.n	8006640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663e:	d107      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006658:	d10f      	bne.n	800667a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e017      	b.n	80066be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3b01      	subs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d19b      	bne.n	80065f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000004 	.word	0x20000004

080066cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <SPI_EndRxTxTransaction+0x7c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1b      	ldr	r2, [pc, #108]	; (800674c <SPI_EndRxTxTransaction+0x80>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0d5b      	lsrs	r3, r3, #21
 80066e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d112      	bne.n	800671e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	2180      	movs	r1, #128	; 0x80
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7ff ff5a 	bl	80065bc <SPI_WaitFlagStateUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d016      	beq.n	800673c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e00f      	b.n	800673e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3b01      	subs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b80      	cmp	r3, #128	; 0x80
 8006736:	d0f2      	beq.n	800671e <SPI_EndRxTxTransaction+0x52>
 8006738:	e000      	b.n	800673c <SPI_EndRxTxTransaction+0x70>
        break;
 800673a:	bf00      	nop
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000004 	.word	0x20000004
 800674c:	165e9f81 	.word	0x165e9f81

08006750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e041      	b.n	80067e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fc ffdc 	bl	8003734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 f9ce 	bl	8006b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e04e      	b.n	80068a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d022      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d01d      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d018      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d013      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d00e      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d009      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a19      	ldr	r2, [pc, #100]	; (80068c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_TIM_Base_Start_IT+0xdc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d111      	bne.n	8006894 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b06      	cmp	r3, #6
 8006880:	d010      	beq.n	80068a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006892:	e007      	b.n	80068a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40001800 	.word	0x40001800

080068d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d122      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11b      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8ee 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f8e0 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8f1 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0204 	mvn.w	r2, #4
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8c4 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f8b6 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8c7 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0208 	mvn.w	r2, #8
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f89a 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f88c 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f89d 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f870 	bl	8006af4 <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f862 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f873 	bl	8006b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0201 	mvn.w	r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc fd4e 	bl	80034f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f97e 	bl	8006d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b40      	cmp	r3, #64	; 0x40
 8006a8c:	d10e      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b40      	cmp	r3, #64	; 0x40
 8006a9a:	d107      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f838 	bl	8006b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d10e      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0320 	and.w	r3, r3, #32
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d107      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0220 	mvn.w	r2, #32
 8006ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f948 	bl	8006d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a40      	ldr	r2, [pc, #256]	; (8006c44 <TIM_Base_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d00f      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a3d      	ldr	r2, [pc, #244]	; (8006c48 <TIM_Base_SetConfig+0x118>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a3c      	ldr	r2, [pc, #240]	; (8006c4c <TIM_Base_SetConfig+0x11c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3b      	ldr	r2, [pc, #236]	; (8006c50 <TIM_Base_SetConfig+0x120>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3a      	ldr	r2, [pc, #232]	; (8006c54 <TIM_Base_SetConfig+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d108      	bne.n	8006b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a2f      	ldr	r2, [pc, #188]	; (8006c44 <TIM_Base_SetConfig+0x114>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d02b      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b90:	d027      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <TIM_Base_SetConfig+0x118>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d023      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	; (8006c4c <TIM_Base_SetConfig+0x11c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01f      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2a      	ldr	r2, [pc, #168]	; (8006c50 <TIM_Base_SetConfig+0x120>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01b      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <TIM_Base_SetConfig+0x124>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d017      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a28      	ldr	r2, [pc, #160]	; (8006c58 <TIM_Base_SetConfig+0x128>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a27      	ldr	r2, [pc, #156]	; (8006c5c <TIM_Base_SetConfig+0x12c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00f      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <TIM_Base_SetConfig+0x130>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00b      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a25      	ldr	r2, [pc, #148]	; (8006c64 <TIM_Base_SetConfig+0x134>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d007      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a24      	ldr	r2, [pc, #144]	; (8006c68 <TIM_Base_SetConfig+0x138>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a23      	ldr	r2, [pc, #140]	; (8006c6c <TIM_Base_SetConfig+0x13c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d108      	bne.n	8006bf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <TIM_Base_SetConfig+0x114>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0xf8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <TIM_Base_SetConfig+0x124>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d103      	bne.n	8006c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	615a      	str	r2, [r3, #20]
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40000400 	.word	0x40000400
 8006c4c:	40000800 	.word	0x40000800
 8006c50:	40000c00 	.word	0x40000c00
 8006c54:	40010400 	.word	0x40010400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800
 8006c64:	40001800 	.word	0x40001800
 8006c68:	40001c00 	.word	0x40001c00
 8006c6c:	40002000 	.word	0x40002000

08006c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e05a      	b.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d01d      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a15      	ldr	r2, [pc, #84]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10c      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40010400 	.word	0x40010400
 8006d60:	40014000 	.word	0x40014000
 8006d64:	40001800 	.word	0x40001800

08006d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e03f      	b.n	8006e22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fc fce4 	bl	8003784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2224      	movs	r2, #36	; 0x24
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f829 	bl	8006e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e30:	b0c0      	sub	sp, #256	; 0x100
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e48:	68d9      	ldr	r1, [r3, #12]
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	ea40 0301 	orr.w	r3, r0, r1
 8006e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e84:	f021 010c 	bic.w	r1, r1, #12
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e92:	430b      	orrs	r3, r1
 8006e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea6:	6999      	ldr	r1, [r3, #24]
 8006ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	ea40 0301 	orr.w	r3, r0, r1
 8006eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b8f      	ldr	r3, [pc, #572]	; (80070f8 <UART_SetConfig+0x2cc>)
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d005      	beq.n	8006ecc <UART_SetConfig+0xa0>
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b8d      	ldr	r3, [pc, #564]	; (80070fc <UART_SetConfig+0x2d0>)
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d104      	bne.n	8006ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fe f9e6 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8006ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ed4:	e003      	b.n	8006ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ed6:	f7fe f9cd 	bl	8005274 <HAL_RCC_GetPCLK1Freq>
 8006eda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee8:	f040 810c 	bne.w	8007104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006efe:	4622      	mov	r2, r4
 8006f00:	462b      	mov	r3, r5
 8006f02:	1891      	adds	r1, r2, r2
 8006f04:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f06:	415b      	adcs	r3, r3
 8006f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f0e:	4621      	mov	r1, r4
 8006f10:	eb12 0801 	adds.w	r8, r2, r1
 8006f14:	4629      	mov	r1, r5
 8006f16:	eb43 0901 	adc.w	r9, r3, r1
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f2e:	4690      	mov	r8, r2
 8006f30:	4699      	mov	r9, r3
 8006f32:	4623      	mov	r3, r4
 8006f34:	eb18 0303 	adds.w	r3, r8, r3
 8006f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	eb49 0303 	adc.w	r3, r9, r3
 8006f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	18db      	adds	r3, r3, r3
 8006f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f60:	4613      	mov	r3, r2
 8006f62:	eb42 0303 	adc.w	r3, r2, r3
 8006f66:	657b      	str	r3, [r7, #84]	; 0x54
 8006f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f70:	f7f9 feaa 	bl	8000cc8 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4b61      	ldr	r3, [pc, #388]	; (8007100 <UART_SetConfig+0x2d4>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	011c      	lsls	r4, r3, #4
 8006f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	1891      	adds	r1, r2, r2
 8006f9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f9c:	415b      	adcs	r3, r3
 8006f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fa4:	4641      	mov	r1, r8
 8006fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8006faa:	4649      	mov	r1, r9
 8006fac:	eb43 0b01 	adc.w	fp, r3, r1
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	f04f 0300 	mov.w	r3, #0
 8006fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc4:	4692      	mov	sl, r2
 8006fc6:	469b      	mov	fp, r3
 8006fc8:	4643      	mov	r3, r8
 8006fca:	eb1a 0303 	adds.w	r3, sl, r3
 8006fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	18db      	adds	r3, r3, r3
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	eb42 0303 	adc.w	r3, r2, r3
 8006ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8006ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007006:	f7f9 fe5f 	bl	8000cc8 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4611      	mov	r1, r2
 8007010:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <UART_SetConfig+0x2d4>)
 8007012:	fba3 2301 	umull	r2, r3, r3, r1
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2264      	movs	r2, #100	; 0x64
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	1acb      	subs	r3, r1, r3
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <UART_SetConfig+0x2d4>)
 8007028:	fba3 2302 	umull	r2, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007034:	441c      	add	r4, r3
 8007036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800703a:	2200      	movs	r2, #0
 800703c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007040:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007048:	4642      	mov	r2, r8
 800704a:	464b      	mov	r3, r9
 800704c:	1891      	adds	r1, r2, r2
 800704e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007050:	415b      	adcs	r3, r3
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007058:	4641      	mov	r1, r8
 800705a:	1851      	adds	r1, r2, r1
 800705c:	6339      	str	r1, [r7, #48]	; 0x30
 800705e:	4649      	mov	r1, r9
 8007060:	414b      	adcs	r3, r1
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007070:	4659      	mov	r1, fp
 8007072:	00cb      	lsls	r3, r1, #3
 8007074:	4651      	mov	r1, sl
 8007076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707a:	4651      	mov	r1, sl
 800707c:	00ca      	lsls	r2, r1, #3
 800707e:	4610      	mov	r0, r2
 8007080:	4619      	mov	r1, r3
 8007082:	4603      	mov	r3, r0
 8007084:	4642      	mov	r2, r8
 8007086:	189b      	adds	r3, r3, r2
 8007088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800708c:	464b      	mov	r3, r9
 800708e:	460a      	mov	r2, r1
 8007090:	eb42 0303 	adc.w	r3, r2, r3
 8007094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070ac:	460b      	mov	r3, r1
 80070ae:	18db      	adds	r3, r3, r3
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070b2:	4613      	mov	r3, r2
 80070b4:	eb42 0303 	adc.w	r3, r2, r3
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070c2:	f7f9 fe01 	bl	8000cc8 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <UART_SetConfig+0x2d4>)
 80070cc:	fba3 1302 	umull	r1, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	2164      	movs	r1, #100	; 0x64
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	3332      	adds	r3, #50	; 0x32
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <UART_SetConfig+0x2d4>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	f003 0207 	and.w	r2, r3, #7
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4422      	add	r2, r4
 80070f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070f4:	e105      	b.n	8007302 <UART_SetConfig+0x4d6>
 80070f6:	bf00      	nop
 80070f8:	40011000 	.word	0x40011000
 80070fc:	40011400 	.word	0x40011400
 8007100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007108:	2200      	movs	r2, #0
 800710a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800710e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	1891      	adds	r1, r2, r2
 800711c:	6239      	str	r1, [r7, #32]
 800711e:	415b      	adcs	r3, r3
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
 8007122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007126:	4641      	mov	r1, r8
 8007128:	1854      	adds	r4, r2, r1
 800712a:	4649      	mov	r1, r9
 800712c:	eb43 0501 	adc.w	r5, r3, r1
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	00eb      	lsls	r3, r5, #3
 800713a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800713e:	00e2      	lsls	r2, r4, #3
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	4643      	mov	r3, r8
 8007146:	18e3      	adds	r3, r4, r3
 8007148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800714c:	464b      	mov	r3, r9
 800714e:	eb45 0303 	adc.w	r3, r5, r3
 8007152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007172:	4629      	mov	r1, r5
 8007174:	008b      	lsls	r3, r1, #2
 8007176:	4621      	mov	r1, r4
 8007178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800717c:	4621      	mov	r1, r4
 800717e:	008a      	lsls	r2, r1, #2
 8007180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007184:	f7f9 fda0 	bl	8000cc8 <__aeabi_uldivmod>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4b60      	ldr	r3, [pc, #384]	; (8007310 <UART_SetConfig+0x4e4>)
 800718e:	fba3 2302 	umull	r2, r3, r3, r2
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	011c      	lsls	r4, r3, #4
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719a:	2200      	movs	r2, #0
 800719c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	1891      	adds	r1, r2, r2
 80071ae:	61b9      	str	r1, [r7, #24]
 80071b0:	415b      	adcs	r3, r3
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071b8:	4641      	mov	r1, r8
 80071ba:	1851      	adds	r1, r2, r1
 80071bc:	6139      	str	r1, [r7, #16]
 80071be:	4649      	mov	r1, r9
 80071c0:	414b      	adcs	r3, r1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071d0:	4659      	mov	r1, fp
 80071d2:	00cb      	lsls	r3, r1, #3
 80071d4:	4651      	mov	r1, sl
 80071d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071da:	4651      	mov	r1, sl
 80071dc:	00ca      	lsls	r2, r1, #3
 80071de:	4610      	mov	r0, r2
 80071e0:	4619      	mov	r1, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	4642      	mov	r2, r8
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071ec:	464b      	mov	r3, r9
 80071ee:	460a      	mov	r2, r1
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	67bb      	str	r3, [r7, #120]	; 0x78
 8007202:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007210:	4649      	mov	r1, r9
 8007212:	008b      	lsls	r3, r1, #2
 8007214:	4641      	mov	r1, r8
 8007216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800721a:	4641      	mov	r1, r8
 800721c:	008a      	lsls	r2, r1, #2
 800721e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007222:	f7f9 fd51 	bl	8000cc8 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4b39      	ldr	r3, [pc, #228]	; (8007310 <UART_SetConfig+0x4e4>)
 800722c:	fba3 1302 	umull	r1, r3, r3, r2
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	2164      	movs	r1, #100	; 0x64
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	3332      	adds	r3, #50	; 0x32
 800723e:	4a34      	ldr	r2, [pc, #208]	; (8007310 <UART_SetConfig+0x4e4>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800724a:	441c      	add	r4, r3
 800724c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007250:	2200      	movs	r2, #0
 8007252:	673b      	str	r3, [r7, #112]	; 0x70
 8007254:	677a      	str	r2, [r7, #116]	; 0x74
 8007256:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800725a:	4642      	mov	r2, r8
 800725c:	464b      	mov	r3, r9
 800725e:	1891      	adds	r1, r2, r2
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	415b      	adcs	r3, r3
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800726a:	4641      	mov	r1, r8
 800726c:	1851      	adds	r1, r2, r1
 800726e:	6039      	str	r1, [r7, #0]
 8007270:	4649      	mov	r1, r9
 8007272:	414b      	adcs	r3, r1
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007282:	4659      	mov	r1, fp
 8007284:	00cb      	lsls	r3, r1, #3
 8007286:	4651      	mov	r1, sl
 8007288:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728c:	4651      	mov	r1, sl
 800728e:	00ca      	lsls	r2, r1, #3
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	4603      	mov	r3, r0
 8007296:	4642      	mov	r2, r8
 8007298:	189b      	adds	r3, r3, r2
 800729a:	66bb      	str	r3, [r7, #104]	; 0x68
 800729c:	464b      	mov	r3, r9
 800729e:	460a      	mov	r2, r1
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	663b      	str	r3, [r7, #96]	; 0x60
 80072b0:	667a      	str	r2, [r7, #100]	; 0x64
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072be:	4649      	mov	r1, r9
 80072c0:	008b      	lsls	r3, r1, #2
 80072c2:	4641      	mov	r1, r8
 80072c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072c8:	4641      	mov	r1, r8
 80072ca:	008a      	lsls	r2, r1, #2
 80072cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072d0:	f7f9 fcfa 	bl	8000cc8 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <UART_SetConfig+0x4e4>)
 80072da:	fba3 1302 	umull	r1, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	2164      	movs	r1, #100	; 0x64
 80072e2:	fb01 f303 	mul.w	r3, r1, r3
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	3332      	adds	r3, #50	; 0x32
 80072ec:	4a08      	ldr	r2, [pc, #32]	; (8007310 <UART_SetConfig+0x4e4>)
 80072ee:	fba2 2303 	umull	r2, r3, r2, r3
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	f003 020f 	and.w	r2, r3, #15
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4422      	add	r2, r4
 8007300:	609a      	str	r2, [r3, #8]
}
 8007302:	bf00      	nop
 8007304:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	51eb851f 	.word	0x51eb851f

08007314 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007318:	4904      	ldr	r1, [pc, #16]	; (800732c <MX_FATFS_Init+0x18>)
 800731a:	4805      	ldr	r0, [pc, #20]	; (8007330 <MX_FATFS_Init+0x1c>)
 800731c:	f003 fdfa 	bl	800af14 <FATFS_LinkDriver>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	4b03      	ldr	r3, [pc, #12]	; (8007334 <MX_FATFS_Init+0x20>)
 8007326:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007328:	bf00      	nop
 800732a:	bd80      	pop	{r7, pc}
 800732c:	2000a5c4 	.word	0x2000a5c4
 8007330:	20000010 	.word	0x20000010
 8007334:	2000a5c0 	.word	0x2000a5c0

08007338 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800733c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800733e:	4618      	mov	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	4618      	mov	r0, r3
 8007356:	f7fb fb0f 	bl	8002978 <SD_disk_initialize>
 800735a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4618      	mov	r0, r3
 8007372:	f7fb fbed 	bl	8002b50 <SD_disk_status>
 8007376:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8007390:	7bf8      	ldrb	r0, [r7, #15]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	f7fb fbf0 	bl	8002b7c <SD_disk_read>
 800739c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 80073b6:	7bf8      	ldrb	r0, [r7, #15]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	f7fb fc47 	bl	8002c50 <SD_disk_write>
 80073c2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	603a      	str	r2, [r7, #0]
 80073d6:	71fb      	strb	r3, [r7, #7]
 80073d8:	460b      	mov	r3, r1
 80073da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 80073dc:	79b9      	ldrb	r1, [r7, #6]
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fb fcb8 	bl	8002d58 <SD_disk_ioctl>
 80073e8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	4a08      	ldr	r2, [pc, #32]	; (8007424 <disk_status+0x30>)
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	79fa      	ldrb	r2, [r7, #7]
 800740c:	4905      	ldr	r1, [pc, #20]	; (8007424 <disk_status+0x30>)
 800740e:	440a      	add	r2, r1
 8007410:	7a12      	ldrb	r2, [r2, #8]
 8007412:	4610      	mov	r0, r2
 8007414:	4798      	blx	r3
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
  return stat;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	2000a5f0 	.word	0x2000a5f0

08007428 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	4a0d      	ldr	r2, [pc, #52]	; (8007470 <disk_initialize+0x48>)
 800743a:	5cd3      	ldrb	r3, [r2, r3]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d111      	bne.n	8007464 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	4a0b      	ldr	r2, [pc, #44]	; (8007470 <disk_initialize+0x48>)
 8007444:	2101      	movs	r1, #1
 8007446:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	4a09      	ldr	r2, [pc, #36]	; (8007470 <disk_initialize+0x48>)
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	79fa      	ldrb	r2, [r7, #7]
 8007456:	4906      	ldr	r1, [pc, #24]	; (8007470 <disk_initialize+0x48>)
 8007458:	440a      	add	r2, r1
 800745a:	7a12      	ldrb	r2, [r2, #8]
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	2000a5f0 	.word	0x2000a5f0

08007474 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <disk_read+0x3c>)
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	689c      	ldr	r4, [r3, #8]
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <disk_read+0x3c>)
 8007494:	4413      	add	r3, r2
 8007496:	7a18      	ldrb	r0, [r3, #8]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	47a0      	blx	r4
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd90      	pop	{r4, r7, pc}
 80074ae:	bf00      	nop
 80074b0:	2000a5f0 	.word	0x2000a5f0

080074b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <disk_write+0x3c>)
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68dc      	ldr	r4, [r3, #12]
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	4a07      	ldr	r2, [pc, #28]	; (80074f0 <disk_write+0x3c>)
 80074d4:	4413      	add	r3, r2
 80074d6:	7a18      	ldrb	r0, [r3, #8]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68b9      	ldr	r1, [r7, #8]
 80074de:	47a0      	blx	r4
 80074e0:	4603      	mov	r3, r0
 80074e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd90      	pop	{r4, r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2000a5f0 	.word	0x2000a5f0

080074f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	603a      	str	r2, [r7, #0]
 80074fe:	71fb      	strb	r3, [r7, #7]
 8007500:	460b      	mov	r3, r1
 8007502:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	4a09      	ldr	r2, [pc, #36]	; (800752c <disk_ioctl+0x38>)
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	79fa      	ldrb	r2, [r7, #7]
 8007512:	4906      	ldr	r1, [pc, #24]	; (800752c <disk_ioctl+0x38>)
 8007514:	440a      	add	r2, r1
 8007516:	7a10      	ldrb	r0, [r2, #8]
 8007518:	79b9      	ldrb	r1, [r7, #6]
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	73fb      	strb	r3, [r7, #15]
  return res;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	2000a5f0 	.word	0x2000a5f0

08007530 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3301      	adds	r3, #1
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007540:	89fb      	ldrh	r3, [r7, #14]
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b21a      	sxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b21b      	sxth	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b21b      	sxth	r3, r3
 8007550:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007552:	89fb      	ldrh	r3, [r7, #14]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3303      	adds	r3, #3
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	3202      	adds	r2, #2
 8007578:	7812      	ldrb	r2, [r2, #0]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	3201      	adds	r2, #1
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
	return rv;
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	887a      	ldrh	r2, [r7, #2]
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	0a1b      	lsrs	r3, r3, #8
 80075f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	b2d2      	uxtb	r2, r2
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	0a1b      	lsrs	r3, r3, #8
 800761a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	1c53      	adds	r3, r2, #1
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	1c59      	adds	r1, r3, #1
 8007658:	6179      	str	r1, [r7, #20]
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3b01      	subs	r3, #1
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f1      	bne.n	800764e <mem_cpy+0x1a>
	}
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	617a      	str	r2, [r7, #20]
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	b2d2      	uxtb	r2, r2
 8007690:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3b01      	subs	r3, #1
 8007696:	607b      	str	r3, [r7, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f3      	bne.n	8007686 <mem_set+0x10>
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80076ac:	b480      	push	{r7}
 80076ae:	b089      	sub	sp, #36	; 0x24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	61fa      	str	r2, [r7, #28]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	4619      	mov	r1, r3
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	61ba      	str	r2, [r7, #24]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	1acb      	subs	r3, r1, r3
 80076d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3b01      	subs	r3, #1
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <mem_cmp+0x40>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d0eb      	beq.n	80076c4 <mem_cmp+0x18>

	return r;
 80076ec:	697b      	ldr	r3, [r7, #20]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3724      	adds	r7, #36	; 0x24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007704:	e002      	b.n	800770c <chk_chr+0x12>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3301      	adds	r3, #1
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <chk_chr+0x26>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	461a      	mov	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	4293      	cmp	r3, r2
 800771e:	d1f2      	bne.n	8007706 <chk_chr+0xc>
	return *str;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	60fb      	str	r3, [r7, #12]
 8007742:	e029      	b.n	8007798 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007744:	4a27      	ldr	r2, [pc, #156]	; (80077e4 <chk_lock+0xb4>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4413      	add	r3, r2
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d01d      	beq.n	800778e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007752:	4a24      	ldr	r2, [pc, #144]	; (80077e4 <chk_lock+0xb4>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	4413      	add	r3, r2
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d116      	bne.n	8007792 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <chk_lock+0xb4>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	4413      	add	r3, r2
 800776c:	3304      	adds	r3, #4
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007774:	429a      	cmp	r2, r3
 8007776:	d10c      	bne.n	8007792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007778:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <chk_lock+0xb4>)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	4413      	add	r3, r2
 8007780:	3308      	adds	r3, #8
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007788:	429a      	cmp	r2, r3
 800778a:	d102      	bne.n	8007792 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800778c:	e007      	b.n	800779e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d9d2      	bls.n	8007744 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d109      	bne.n	80077b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <chk_lock+0x80>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d101      	bne.n	80077b4 <chk_lock+0x84>
 80077b0:	2300      	movs	r3, #0
 80077b2:	e010      	b.n	80077d6 <chk_lock+0xa6>
 80077b4:	2312      	movs	r3, #18
 80077b6:	e00e      	b.n	80077d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <chk_lock+0xa0>
 80077be:	4a09      	ldr	r2, [pc, #36]	; (80077e4 <chk_lock+0xb4>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	4413      	add	r3, r2
 80077c6:	330c      	adds	r3, #12
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ce:	d101      	bne.n	80077d4 <chk_lock+0xa4>
 80077d0:	2310      	movs	r3, #16
 80077d2:	e000      	b.n	80077d6 <chk_lock+0xa6>
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	2000a5d0 	.word	0x2000a5d0

080077e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077ee:	2300      	movs	r3, #0
 80077f0:	607b      	str	r3, [r7, #4]
 80077f2:	e002      	b.n	80077fa <enq_lock+0x12>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3301      	adds	r3, #1
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d806      	bhi.n	800780e <enq_lock+0x26>
 8007800:	4a09      	ldr	r2, [pc, #36]	; (8007828 <enq_lock+0x40>)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	4413      	add	r3, r2
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f2      	bne.n	80077f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b02      	cmp	r3, #2
 8007812:	bf14      	ite	ne
 8007814:	2301      	movne	r3, #1
 8007816:	2300      	moveq	r3, #0
 8007818:	b2db      	uxtb	r3, r3
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	2000a5d0 	.word	0x2000a5d0

0800782c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e01f      	b.n	800787c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800783c:	4a41      	ldr	r2, [pc, #260]	; (8007944 <inc_lock+0x118>)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	4413      	add	r3, r2
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d113      	bne.n	8007876 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800784e:	4a3d      	ldr	r2, [pc, #244]	; (8007944 <inc_lock+0x118>)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	4413      	add	r3, r2
 8007856:	3304      	adds	r3, #4
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800785e:	429a      	cmp	r2, r3
 8007860:	d109      	bne.n	8007876 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007862:	4a38      	ldr	r2, [pc, #224]	; (8007944 <inc_lock+0x118>)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4413      	add	r3, r2
 800786a:	3308      	adds	r3, #8
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007872:	429a      	cmp	r2, r3
 8007874:	d006      	beq.n	8007884 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d9dc      	bls.n	800783c <inc_lock+0x10>
 8007882:	e000      	b.n	8007886 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007884:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d132      	bne.n	80078f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e002      	b.n	8007898 <inc_lock+0x6c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d806      	bhi.n	80078ac <inc_lock+0x80>
 800789e:	4a29      	ldr	r2, [pc, #164]	; (8007944 <inc_lock+0x118>)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	4413      	add	r3, r2
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f2      	bne.n	8007892 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d101      	bne.n	80078b6 <inc_lock+0x8a>
 80078b2:	2300      	movs	r3, #0
 80078b4:	e040      	b.n	8007938 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	4922      	ldr	r1, [pc, #136]	; (8007944 <inc_lock+0x118>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	440b      	add	r3, r1
 80078c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	491e      	ldr	r1, [pc, #120]	; (8007944 <inc_lock+0x118>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	440b      	add	r3, r1
 80078d0:	3304      	adds	r3, #4
 80078d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	491a      	ldr	r1, [pc, #104]	; (8007944 <inc_lock+0x118>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	440b      	add	r3, r1
 80078e0:	3308      	adds	r3, #8
 80078e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80078e4:	4a17      	ldr	r2, [pc, #92]	; (8007944 <inc_lock+0x118>)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	4413      	add	r3, r2
 80078ec:	330c      	adds	r3, #12
 80078ee:	2200      	movs	r2, #0
 80078f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <inc_lock+0xe0>
 80078f8:	4a12      	ldr	r2, [pc, #72]	; (8007944 <inc_lock+0x118>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	4413      	add	r3, r2
 8007900:	330c      	adds	r3, #12
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <inc_lock+0xe0>
 8007908:	2300      	movs	r3, #0
 800790a:	e015      	b.n	8007938 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d108      	bne.n	8007924 <inc_lock+0xf8>
 8007912:	4a0c      	ldr	r2, [pc, #48]	; (8007944 <inc_lock+0x118>)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	4413      	add	r3, r2
 800791a:	330c      	adds	r3, #12
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	e001      	b.n	8007928 <inc_lock+0xfc>
 8007924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007928:	4906      	ldr	r1, [pc, #24]	; (8007944 <inc_lock+0x118>)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	440b      	add	r3, r1
 8007930:	330c      	adds	r3, #12
 8007932:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	2000a5d0 	.word	0x2000a5d0

08007948 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3b01      	subs	r3, #1
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d825      	bhi.n	80079a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800795c:	4a17      	ldr	r2, [pc, #92]	; (80079bc <dec_lock+0x74>)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4413      	add	r3, r2
 8007964:	330c      	adds	r3, #12
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800796a:	89fb      	ldrh	r3, [r7, #14]
 800796c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007970:	d101      	bne.n	8007976 <dec_lock+0x2e>
 8007972:	2300      	movs	r3, #0
 8007974:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007976:	89fb      	ldrh	r3, [r7, #14]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <dec_lock+0x3a>
 800797c:	89fb      	ldrh	r3, [r7, #14]
 800797e:	3b01      	subs	r3, #1
 8007980:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007982:	4a0e      	ldr	r2, [pc, #56]	; (80079bc <dec_lock+0x74>)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	4413      	add	r3, r2
 800798a:	330c      	adds	r3, #12
 800798c:	89fa      	ldrh	r2, [r7, #14]
 800798e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007990:	89fb      	ldrh	r3, [r7, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <dec_lock+0x5a>
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <dec_lock+0x74>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	737b      	strb	r3, [r7, #13]
 80079a6:	e001      	b.n	80079ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80079a8:	2302      	movs	r3, #2
 80079aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80079ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000a5d0 	.word	0x2000a5d0

080079c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e010      	b.n	80079f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80079ce:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <clear_lock+0x44>)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	4413      	add	r3, r2
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d105      	bne.n	80079ea <clear_lock+0x2a>
 80079de:	4a09      	ldr	r2, [pc, #36]	; (8007a04 <clear_lock+0x44>)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	4413      	add	r3, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d9eb      	bls.n	80079ce <clear_lock+0xe>
	}
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	2000a5d0 	.word	0x2000a5d0

08007a08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	78db      	ldrb	r3, [r3, #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d034      	beq.n	8007a86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7858      	ldrb	r0, [r3, #1]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	f7ff fd40 	bl	80074b4 <disk_write>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
 8007a3e:	e022      	b.n	8007a86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	1ad2      	subs	r2, r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d217      	bcs.n	8007a86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	613b      	str	r3, [r7, #16]
 8007a5c:	e010      	b.n	8007a80 <sync_window+0x78>
					wsect += fs->fsize;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7858      	ldrb	r0, [r3, #1]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a72:	2301      	movs	r3, #1
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	f7ff fd1d 	bl	80074b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	613b      	str	r3, [r7, #16]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d8eb      	bhi.n	8007a5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d01b      	beq.n	8007ae0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff ffad 	bl	8007a08 <sync_window>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d113      	bne.n	8007ae0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7858      	ldrb	r0, [r3, #1]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	f7ff fcd5 	bl	8007474 <disk_read>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff ff87 	bl	8007a08 <sync_window>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d159      	bne.n	8007bb8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d149      	bne.n	8007ba0 <sync_fs+0xb4>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	791b      	ldrb	r3, [r3, #4]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d145      	bne.n	8007ba0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	899b      	ldrh	r3, [r3, #12]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2100      	movs	r1, #0
 8007b22:	f7ff fda8 	bl	8007676 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3338      	adds	r3, #56	; 0x38
 8007b2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fd37 	bl	80075a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3338      	adds	r3, #56	; 0x38
 8007b3c:	4921      	ldr	r1, [pc, #132]	; (8007bc4 <sync_fs+0xd8>)
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fd4c 	bl	80075dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3338      	adds	r3, #56	; 0x38
 8007b48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007b4c:	491e      	ldr	r1, [pc, #120]	; (8007bc8 <sync_fs+0xdc>)
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fd44 	bl	80075dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3338      	adds	r3, #56	; 0x38
 8007b58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7ff fd3a 	bl	80075dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3338      	adds	r3, #56	; 0x38
 8007b6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f7ff fd30 	bl	80075dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7858      	ldrb	r0, [r3, #1]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b94:	2301      	movs	r3, #1
 8007b96:	f7ff fc8d 	bl	80074b4 <disk_write>
			fs->fsi_flag = 0;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fca3 	bl	80074f4 <disk_ioctl>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <sync_fs+0xcc>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	41615252 	.word	0x41615252
 8007bc8:	61417272 	.word	0x61417272

08007bcc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	3b02      	subs	r3, #2
 8007bda:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	3b02      	subs	r3, #2
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d301      	bcc.n	8007bec <clust2sect+0x20>
 8007be8:	2300      	movs	r3, #0
 8007bea:	e008      	b.n	8007bfe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	895b      	ldrh	r3, [r3, #10]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	fb03 f202 	mul.w	r2, r3, r2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	4413      	add	r3, r2
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b086      	sub	sp, #24
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d904      	bls.n	8007c2a <get_fat+0x20>
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d302      	bcc.n	8007c30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	e0bb      	b.n	8007da8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	f000 8083 	beq.w	8007d46 <get_fat+0x13c>
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	f300 80a7 	bgt.w	8007d94 <get_fat+0x18a>
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d002      	beq.n	8007c50 <get_fat+0x46>
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d056      	beq.n	8007cfc <get_fat+0xf2>
 8007c4e:	e0a1      	b.n	8007d94 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	899b      	ldrh	r3, [r3, #12]
 8007c66:	4619      	mov	r1, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c6e:	4413      	add	r3, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	6938      	ldr	r0, [r7, #16]
 8007c74:	f7ff ff0c 	bl	8007a90 <move_window>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 808d 	bne.w	8007d9a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	60fa      	str	r2, [r7, #12]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	8992      	ldrh	r2, [r2, #12]
 8007c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c8e:	fb01 f202 	mul.w	r2, r1, r2
 8007c92:	1a9b      	subs	r3, r3, r2
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	4413      	add	r3, r2
 8007c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	899b      	ldrh	r3, [r3, #12]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cae:	4413      	add	r3, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6938      	ldr	r0, [r7, #16]
 8007cb4:	f7ff feec 	bl	8007a90 <move_window>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d16f      	bne.n	8007d9e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	899b      	ldrh	r3, [r3, #12]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cca:	fb01 f202 	mul.w	r2, r1, r2
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <get_fat+0xe8>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	091b      	lsrs	r3, r3, #4
 8007cf0:	e002      	b.n	8007cf8 <get_fat+0xee>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf8:	617b      	str	r3, [r7, #20]
			break;
 8007cfa:	e055      	b.n	8007da8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	899b      	ldrh	r3, [r3, #12]
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d10:	4413      	add	r3, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	6938      	ldr	r0, [r7, #16]
 8007d16:	f7ff febb 	bl	8007a90 <move_window>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d140      	bne.n	8007da2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	8992      	ldrh	r2, [r2, #12]
 8007d2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d32:	fb00 f202 	mul.w	r2, r0, r2
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	440b      	add	r3, r1
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fbf8 	bl	8007530 <ld_word>
 8007d40:	4603      	mov	r3, r0
 8007d42:	617b      	str	r3, [r7, #20]
			break;
 8007d44:	e030      	b.n	8007da8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	899b      	ldrh	r3, [r3, #12]
 8007d4e:	089b      	lsrs	r3, r3, #2
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4619      	mov	r1, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6938      	ldr	r0, [r7, #16]
 8007d60:	f7ff fe96 	bl	8007a90 <move_window>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11d      	bne.n	8007da6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	8992      	ldrh	r2, [r2, #12]
 8007d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d7c:	fb00 f202 	mul.w	r2, r0, r2
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	440b      	add	r3, r1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fbeb 	bl	8007560 <ld_dword>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d90:	617b      	str	r3, [r7, #20]
			break;
 8007d92:	e009      	b.n	8007da8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e006      	b.n	8007da8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d9a:	bf00      	nop
 8007d9c:	e004      	b.n	8007da8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007da6:	bf00      	nop
		}
	}

	return val;
 8007da8:	697b      	ldr	r3, [r7, #20]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007db2:	b590      	push	{r4, r7, lr}
 8007db4:	b089      	sub	sp, #36	; 0x24
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f240 8102 	bls.w	8007fce <put_fat+0x21c>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	f080 80fc 	bcs.w	8007fce <put_fat+0x21c>
		switch (fs->fs_type) {
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	f000 80b6 	beq.w	8007f4c <put_fat+0x19a>
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	f300 80fd 	bgt.w	8007fe0 <put_fat+0x22e>
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d003      	beq.n	8007df2 <put_fat+0x40>
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	f000 8083 	beq.w	8007ef6 <put_fat+0x144>
 8007df0:	e0f6      	b.n	8007fe0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	61bb      	str	r3, [r7, #24]
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	085b      	lsrs	r3, r3, #1
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	899b      	ldrh	r3, [r3, #12]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e10:	4413      	add	r3, r2
 8007e12:	4619      	mov	r1, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7ff fe3b 	bl	8007a90 <move_window>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e1e:	7ffb      	ldrb	r3, [r7, #31]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f040 80d6 	bne.w	8007fd2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	61ba      	str	r2, [r7, #24]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	8992      	ldrh	r2, [r2, #12]
 8007e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e3a:	fb00 f202 	mul.w	r2, r0, r2
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	440b      	add	r3, r1
 8007e42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00d      	beq.n	8007e6a <put_fat+0xb8>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	b25b      	sxtb	r3, r3
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	b25a      	sxtb	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	e001      	b.n	8007e6e <put_fat+0xbc>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	899b      	ldrh	r3, [r3, #12]
 8007e80:	4619      	mov	r1, r3
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e88:	4413      	add	r3, r2
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff fdff 	bl	8007a90 <move_window>
 8007e92:	4603      	mov	r3, r0
 8007e94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e96:	7ffb      	ldrb	r3, [r7, #31]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 809c 	bne.w	8007fd6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	899b      	ldrh	r3, [r3, #12]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb0:	fb00 f202 	mul.w	r2, r0, r2
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <put_fat+0x11a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	091b      	lsrs	r3, r3, #4
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	e00e      	b.n	8007eea <put_fat+0x138>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b25b      	sxtb	r3, r3
 8007ed2:	f023 030f 	bic.w	r3, r3, #15
 8007ed6:	b25a      	sxtb	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	70da      	strb	r2, [r3, #3]
			break;
 8007ef4:	e074      	b.n	8007fe0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	899b      	ldrh	r3, [r3, #12]
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff fdbe 	bl	8007a90 <move_window>
 8007f14:	4603      	mov	r3, r0
 8007f16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f18:	7ffb      	ldrb	r3, [r7, #31]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d15d      	bne.n	8007fda <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	8992      	ldrh	r2, [r2, #12]
 8007f2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f30:	fb00 f202 	mul.w	r2, r0, r2
 8007f34:	1a9b      	subs	r3, r3, r2
 8007f36:	440b      	add	r3, r1
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fb31 	bl	80075a6 <st_word>
			fs->wflag = 1;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2201      	movs	r2, #1
 8007f48:	70da      	strb	r2, [r3, #3]
			break;
 8007f4a:	e049      	b.n	8007fe0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	899b      	ldrh	r3, [r3, #12]
 8007f54:	089b      	lsrs	r3, r3, #2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	4619      	mov	r1, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f60:	4413      	add	r3, r2
 8007f62:	4619      	mov	r1, r3
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f7ff fd93 	bl	8007a90 <move_window>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d134      	bne.n	8007fde <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	8992      	ldrh	r2, [r2, #12]
 8007f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f8c:	fb00 f202 	mul.w	r2, r0, r2
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	440b      	add	r3, r1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7ff fae3 	bl	8007560 <ld_dword>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007fa0:	4323      	orrs	r3, r4
 8007fa2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	8992      	ldrh	r2, [r2, #12]
 8007fb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fb6:	fb00 f202 	mul.w	r2, r0, r2
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fb0b 	bl	80075dc <st_dword>
			fs->wflag = 1;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	70da      	strb	r2, [r3, #3]
			break;
 8007fcc:	e008      	b.n	8007fe0 <put_fat+0x22e>
		}
	}
 8007fce:	bf00      	nop
 8007fd0:	e006      	b.n	8007fe0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007fd2:	bf00      	nop
 8007fd4:	e004      	b.n	8007fe0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007fd6:	bf00      	nop
 8007fd8:	e002      	b.n	8007fe0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007fda:	bf00      	nop
 8007fdc:	e000      	b.n	8007fe0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007fde:	bf00      	nop
	return res;
 8007fe0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd90      	pop	{r4, r7, pc}

08007fea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b088      	sub	sp, #32
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d904      	bls.n	8008010 <remove_chain+0x26>
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	d301      	bcc.n	8008014 <remove_chain+0x2a>
 8008010:	2302      	movs	r3, #2
 8008012:	e04b      	b.n	80080ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00c      	beq.n	8008034 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800801a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	69b8      	ldr	r0, [r7, #24]
 8008022:	f7ff fec6 	bl	8007db2 <put_fat>
 8008026:	4603      	mov	r3, r0
 8008028:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800802a:	7ffb      	ldrb	r3, [r7, #31]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <remove_chain+0x4a>
 8008030:	7ffb      	ldrb	r3, [r7, #31]
 8008032:	e03b      	b.n	80080ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff fde7 	bl	8007c0a <get_fat>
 800803c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d031      	beq.n	80080a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <remove_chain+0x64>
 800804a:	2302      	movs	r3, #2
 800804c:	e02e      	b.n	80080ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008054:	d101      	bne.n	800805a <remove_chain+0x70>
 8008056:	2301      	movs	r3, #1
 8008058:	e028      	b.n	80080ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800805a:	2200      	movs	r2, #0
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	69b8      	ldr	r0, [r7, #24]
 8008060:	f7ff fea7 	bl	8007db2 <put_fat>
 8008064:	4603      	mov	r3, r0
 8008066:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008068:	7ffb      	ldrb	r3, [r7, #31]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <remove_chain+0x88>
 800806e:	7ffb      	ldrb	r3, [r7, #31]
 8008070:	e01c      	b.n	80080ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	3b02      	subs	r3, #2
 800807c:	429a      	cmp	r2, r3
 800807e:	d20b      	bcs.n	8008098 <remove_chain+0xae>
			fs->free_clst++;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d3c6      	bcc.n	8008034 <remove_chain+0x4a>
 80080a6:	e000      	b.n	80080aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80080a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10d      	bne.n	80080e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <create_chain+0x2c>
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d31b      	bcc.n	8008118 <create_chain+0x64>
 80080e0:	2301      	movs	r3, #1
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	e018      	b.n	8008118 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fd8e 	bl	8007c0a <get_fat>
 80080ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d801      	bhi.n	80080fa <create_chain+0x46>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e070      	b.n	80081dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008100:	d101      	bne.n	8008106 <create_chain+0x52>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	e06a      	b.n	80081dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	d201      	bcs.n	8008114 <create_chain+0x60>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	e063      	b.n	80081dc <create_chain+0x128>
		scl = clst;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	3301      	adds	r3, #1
 8008120:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	429a      	cmp	r2, r3
 800812a:	d307      	bcc.n	800813c <create_chain+0x88>
				ncl = 2;
 800812c:	2302      	movs	r3, #2
 800812e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	429a      	cmp	r2, r3
 8008136:	d901      	bls.n	800813c <create_chain+0x88>
 8008138:	2300      	movs	r3, #0
 800813a:	e04f      	b.n	80081dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800813c:	69f9      	ldr	r1, [r7, #28]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fd63 	bl	8007c0a <get_fat>
 8008144:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d003      	beq.n	800815a <create_chain+0xa6>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008158:	d101      	bne.n	800815e <create_chain+0xaa>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	e03e      	b.n	80081dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	429a      	cmp	r2, r3
 8008164:	d1da      	bne.n	800811c <create_chain+0x68>
 8008166:	2300      	movs	r3, #0
 8008168:	e038      	b.n	80081dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800816a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800816c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008170:	69f9      	ldr	r1, [r7, #28]
 8008172:	6938      	ldr	r0, [r7, #16]
 8008174:	f7ff fe1d 	bl	8007db2 <put_fat>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <create_chain+0xe2>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6938      	ldr	r0, [r7, #16]
 800818e:	f7ff fe10 	bl	8007db2 <put_fat>
 8008192:	4603      	mov	r3, r0
 8008194:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d116      	bne.n	80081ca <create_chain+0x116>
		fs->last_clst = ncl;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	3b02      	subs	r3, #2
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d804      	bhi.n	80081ba <create_chain+0x106>
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	1e5a      	subs	r2, r3, #1
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	711a      	strb	r2, [r3, #4]
 80081c8:	e007      	b.n	80081da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d102      	bne.n	80081d6 <create_chain+0x122>
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081d4:	e000      	b.n	80081d8 <create_chain+0x124>
 80081d6:	2301      	movs	r3, #1
 80081d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80081da:	69fb      	ldr	r3, [r7, #28]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	3304      	adds	r3, #4
 80081fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	899b      	ldrh	r3, [r3, #12]
 8008200:	461a      	mov	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	fbb3 f3f2 	udiv	r3, r3, r2
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	8952      	ldrh	r2, [r2, #10]
 800820c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008210:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	613a      	str	r2, [r7, #16]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <clmt_clust+0x42>
 8008222:	2300      	movs	r3, #0
 8008224:	e010      	b.n	8008248 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	429a      	cmp	r2, r3
 800822c:	d307      	bcc.n	800823e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3304      	adds	r3, #4
 800823a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800823c:	e7e9      	b.n	8008212 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800823e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	4413      	add	r3, r2
}
 8008248:	4618      	mov	r0, r3
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800826a:	d204      	bcs.n	8008276 <dir_sdi+0x22>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008276:	2302      	movs	r3, #2
 8008278:	e071      	b.n	800835e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <dir_sdi+0x46>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d902      	bls.n	800829a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10c      	bne.n	80082ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	8912      	ldrh	r2, [r2, #8]
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d301      	bcc.n	80082b0 <dir_sdi+0x5c>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e056      	b.n	800835e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	61da      	str	r2, [r3, #28]
 80082b8:	e02d      	b.n	8008316 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	895b      	ldrh	r3, [r3, #10]
 80082be:	461a      	mov	r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	899b      	ldrh	r3, [r3, #12]
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
 80082c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082ca:	e019      	b.n	8008300 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6979      	ldr	r1, [r7, #20]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fc9a 	bl	8007c0a <get_fat>
 80082d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082de:	d101      	bne.n	80082e4 <dir_sdi+0x90>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e03c      	b.n	800835e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d904      	bls.n	80082f4 <dir_sdi+0xa0>
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d301      	bcc.n	80082f8 <dir_sdi+0xa4>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e032      	b.n	800835e <dir_sdi+0x10a>
			ofs -= csz;
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	429a      	cmp	r2, r3
 8008306:	d2e1      	bcs.n	80082cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f7ff fc5e 	bl	8007bcc <clust2sect>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <dir_sdi+0xd4>
 8008324:	2302      	movs	r3, #2
 8008326:	e01a      	b.n	800835e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	899b      	ldrh	r3, [r3, #12]
 8008330:	4619      	mov	r1, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	fbb3 f3f1 	udiv	r3, r3, r1
 8008338:	441a      	add	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	899b      	ldrh	r3, [r3, #12]
 8008348:	461a      	mov	r2, r3
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008350:	fb00 f202 	mul.w	r2, r0, r2
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	18ca      	adds	r2, r1, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	3320      	adds	r3, #32
 800837c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <dir_next+0x28>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800838c:	d301      	bcc.n	8008392 <dir_next+0x2c>
 800838e:	2304      	movs	r3, #4
 8008390:	e0bb      	b.n	800850a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	899b      	ldrh	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	fbb3 f1f2 	udiv	r1, r3, r2
 800839e:	fb01 f202 	mul.w	r2, r1, r2
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 809d 	bne.w	80084e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	8912      	ldrh	r2, [r2, #8]
 80083c4:	4293      	cmp	r3, r2
 80083c6:	f0c0 808d 	bcc.w	80084e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	61da      	str	r2, [r3, #28]
 80083d0:	2304      	movs	r3, #4
 80083d2:	e09a      	b.n	800850a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	899b      	ldrh	r3, [r3, #12]
 80083d8:	461a      	mov	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	8952      	ldrh	r2, [r2, #10]
 80083e4:	3a01      	subs	r2, #1
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d17b      	bne.n	80084e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f7ff fc08 	bl	8007c0a <get_fat>
 80083fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d801      	bhi.n	8008406 <dir_next+0xa0>
 8008402:	2302      	movs	r3, #2
 8008404:	e081      	b.n	800850a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840c:	d101      	bne.n	8008412 <dir_next+0xac>
 800840e:	2301      	movs	r3, #1
 8008410:	e07b      	b.n	800850a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	429a      	cmp	r2, r3
 800841a:	d359      	bcc.n	80084d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	61da      	str	r2, [r3, #28]
 8008428:	2304      	movs	r3, #4
 800842a:	e06e      	b.n	800850a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7ff fe3d 	bl	80080b4 <create_chain>
 800843a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <dir_next+0xe0>
 8008442:	2307      	movs	r3, #7
 8008444:	e061      	b.n	800850a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <dir_next+0xea>
 800844c:	2302      	movs	r3, #2
 800844e:	e05c      	b.n	800850a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008456:	d101      	bne.n	800845c <dir_next+0xf6>
 8008458:	2301      	movs	r3, #1
 800845a:	e056      	b.n	800850a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fad3 	bl	8007a08 <sync_window>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <dir_next+0x106>
 8008468:	2301      	movs	r3, #1
 800846a:	e04e      	b.n	800850a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	899b      	ldrh	r3, [r3, #12]
 8008476:	461a      	mov	r2, r3
 8008478:	2100      	movs	r1, #0
 800847a:	f7ff f8fc 	bl	8007676 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800847e:	2300      	movs	r3, #0
 8008480:	613b      	str	r3, [r7, #16]
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fba1 	bl	8007bcc <clust2sect>
 800848a:	4602      	mov	r2, r0
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	635a      	str	r2, [r3, #52]	; 0x34
 8008490:	e012      	b.n	80084b8 <dir_next+0x152>
						fs->wflag = 1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff fab5 	bl	8007a08 <sync_window>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <dir_next+0x142>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e030      	b.n	800850a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	613b      	str	r3, [r7, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	635a      	str	r2, [r3, #52]	; 0x34
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	895b      	ldrh	r3, [r3, #10]
 80084bc:	461a      	mov	r2, r3
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d3e6      	bcc.n	8008492 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	1ad2      	subs	r2, r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80084d6:	6979      	ldr	r1, [r7, #20]
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff fb77 	bl	8007bcc <clust2sect>
 80084de:	4602      	mov	r2, r0
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	899b      	ldrh	r3, [r3, #12]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80084fc:	fb00 f202 	mul.w	r2, r0, r2
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	18ca      	adds	r2, r1, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b086      	sub	sp, #24
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008522:	2100      	movs	r1, #0
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fe95 	bl	8008254 <dir_sdi>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d12b      	bne.n	800858c <dir_alloc+0x7a>
		n = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4619      	mov	r1, r3
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff faa6 	bl	8007a90 <move_window>
 8008544:	4603      	mov	r3, r0
 8008546:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d11d      	bne.n	800858a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2be5      	cmp	r3, #229	; 0xe5
 8008556:	d004      	beq.n	8008562 <dir_alloc+0x50>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a1b      	ldr	r3, [r3, #32]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d107      	bne.n	8008572 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	3301      	adds	r3, #1
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d102      	bne.n	8008576 <dir_alloc+0x64>
 8008570:	e00c      	b.n	800858c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008572:	2300      	movs	r3, #0
 8008574:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008576:	2101      	movs	r1, #1
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fef4 	bl	8008366 <dir_next>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0d7      	beq.n	8008538 <dir_alloc+0x26>
 8008588:	e000      	b.n	800858c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800858a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800858c:	7dfb      	ldrb	r3, [r7, #23]
 800858e:	2b04      	cmp	r3, #4
 8008590:	d101      	bne.n	8008596 <dir_alloc+0x84>
 8008592:	2307      	movs	r3, #7
 8008594:	75fb      	strb	r3, [r7, #23]
	return res;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	331a      	adds	r3, #26
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe ffbe 	bl	8007530 <ld_word>
 80085b4:	4603      	mov	r3, r0
 80085b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d109      	bne.n	80085d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe ffb3 	bl	8007530 <ld_word>
 80085ca:	4603      	mov	r3, r0
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	331a      	adds	r3, #26
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	b292      	uxth	r2, r2
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe ffd6 	bl	80075a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b03      	cmp	r3, #3
 8008600:	d109      	bne.n	8008616 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f103 0214 	add.w	r2, r3, #20
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	b29b      	uxth	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fe ffc8 	bl	80075a6 <st_word>
	}
}
 8008616:	bf00      	nop
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008620:	b590      	push	{r4, r7, lr}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	331a      	adds	r3, #26
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe ff7e 	bl	8007530 <ld_word>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <cmp_lfn+0x1e>
 800863a:	2300      	movs	r3, #0
 800863c:	e059      	b.n	80086f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008654:	2301      	movs	r3, #1
 8008656:	81fb      	strh	r3, [r7, #14]
 8008658:	2300      	movs	r3, #0
 800865a:	613b      	str	r3, [r7, #16]
 800865c:	e033      	b.n	80086c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800865e:	4a27      	ldr	r2, [pc, #156]	; (80086fc <cmp_lfn+0xdc>)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4413      	add	r3, r2
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	4413      	add	r3, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe ff5f 	bl	8007530 <ld_word>
 8008672:	4603      	mov	r3, r0
 8008674:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008676:	89fb      	ldrh	r3, [r7, #14]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01a      	beq.n	80086b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	2bfe      	cmp	r3, #254	; 0xfe
 8008680:	d812      	bhi.n	80086a8 <cmp_lfn+0x88>
 8008682:	89bb      	ldrh	r3, [r7, #12]
 8008684:	4618      	mov	r0, r3
 8008686:	f002 fc91 	bl	800afac <ff_wtoupper>
 800868a:	4603      	mov	r3, r0
 800868c:	461c      	mov	r4, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	617a      	str	r2, [r7, #20]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f002 fc85 	bl	800afac <ff_wtoupper>
 80086a2:	4603      	mov	r3, r0
 80086a4:	429c      	cmp	r4, r3
 80086a6:	d001      	beq.n	80086ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80086a8:	2300      	movs	r3, #0
 80086aa:	e022      	b.n	80086f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80086ac:	89bb      	ldrh	r3, [r7, #12]
 80086ae:	81fb      	strh	r3, [r7, #14]
 80086b0:	e006      	b.n	80086c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80086b2:	89bb      	ldrh	r3, [r7, #12]
 80086b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d001      	beq.n	80086c0 <cmp_lfn+0xa0>
 80086bc:	2300      	movs	r3, #0
 80086be:	e018      	b.n	80086f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b0c      	cmp	r3, #12
 80086ca:	d9c8      	bls.n	800865e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <cmp_lfn+0xd0>
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <cmp_lfn+0xd0>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <cmp_lfn+0xd0>
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80086f0:	2301      	movs	r3, #1
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}
 80086fa:	bf00      	nop
 80086fc:	0800f8b4 	.word	0x0800f8b4

08008700 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	331a      	adds	r3, #26
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe ff0e 	bl	8007530 <ld_word>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <pick_lfn+0x1e>
 800871a:	2300      	movs	r3, #0
 800871c:	e04d      	b.n	80087ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008726:	1e5a      	subs	r2, r3, #1
 8008728:	4613      	mov	r3, r2
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008734:	2301      	movs	r3, #1
 8008736:	81fb      	strh	r3, [r7, #14]
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	e028      	b.n	8008790 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800873e:	4a21      	ldr	r2, [pc, #132]	; (80087c4 <pick_lfn+0xc4>)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	4413      	add	r3, r2
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	4413      	add	r3, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f7fe feef 	bl	8007530 <ld_word>
 8008752:	4603      	mov	r3, r0
 8008754:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008756:	89fb      	ldrh	r3, [r7, #14]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00f      	beq.n	800877c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2bfe      	cmp	r3, #254	; 0xfe
 8008760:	d901      	bls.n	8008766 <pick_lfn+0x66>
 8008762:	2300      	movs	r3, #0
 8008764:	e029      	b.n	80087ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008766:	89bb      	ldrh	r3, [r7, #12]
 8008768:	81fb      	strh	r3, [r7, #14]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	617a      	str	r2, [r7, #20]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4413      	add	r3, r2
 8008776:	89fa      	ldrh	r2, [r7, #14]
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e006      	b.n	800878a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800877c:	89bb      	ldrh	r3, [r7, #12]
 800877e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008782:	4293      	cmp	r3, r2
 8008784:	d001      	beq.n	800878a <pick_lfn+0x8a>
 8008786:	2300      	movs	r3, #0
 8008788:	e017      	b.n	80087ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	3301      	adds	r3, #1
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b0c      	cmp	r3, #12
 8008794:	d9d3      	bls.n	800873e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2bfe      	cmp	r3, #254	; 0xfe
 80087a6:	d901      	bls.n	80087ac <pick_lfn+0xac>
 80087a8:	2300      	movs	r3, #0
 80087aa:	e006      	b.n	80087ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	2200      	movs	r2, #0
 80087b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80087b8:	2301      	movs	r3, #1
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	0800f8b4 	.word	0x0800f8b4

080087c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4611      	mov	r1, r2
 80087d4:	461a      	mov	r2, r3
 80087d6:	460b      	mov	r3, r1
 80087d8:	71fb      	strb	r3, [r7, #7]
 80087da:	4613      	mov	r3, r2
 80087dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	330d      	adds	r3, #13
 80087e2:	79ba      	ldrb	r2, [r7, #6]
 80087e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	330b      	adds	r3, #11
 80087ea:	220f      	movs	r2, #15
 80087ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	330c      	adds	r3, #12
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	331a      	adds	r3, #26
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fed2 	bl	80075a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	1e5a      	subs	r2, r3, #1
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	82fb      	strh	r3, [r7, #22]
 8008816:	2300      	movs	r3, #0
 8008818:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800881a:	8afb      	ldrh	r3, [r7, #22]
 800881c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <put_lfn+0x6c>
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	61fa      	str	r2, [r7, #28]
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008834:	4a17      	ldr	r2, [pc, #92]	; (8008894 <put_lfn+0xcc>)
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	4413      	add	r3, r2
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	8afa      	ldrh	r2, [r7, #22]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fead 	bl	80075a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800884c:	8afb      	ldrh	r3, [r7, #22]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d102      	bne.n	8008858 <put_lfn+0x90>
 8008852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008856:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	3301      	adds	r3, #1
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b0c      	cmp	r3, #12
 8008862:	d9da      	bls.n	800881a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008864:	8afb      	ldrh	r3, [r7, #22]
 8008866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886a:	4293      	cmp	r3, r2
 800886c:	d006      	beq.n	800887c <put_lfn+0xb4>
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d103      	bne.n	8008884 <put_lfn+0xbc>
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008882:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	79fa      	ldrb	r2, [r7, #7]
 8008888:	701a      	strb	r2, [r3, #0]
}
 800888a:	bf00      	nop
 800888c:	3720      	adds	r7, #32
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	0800f8b4 	.word	0x0800f8b4

08008898 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	; 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80088a6:	220b      	movs	r2, #11
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7fe fec2 	bl	8007634 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d92b      	bls.n	800890e <gen_numname+0x76>
		sr = seq;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80088ba:	e022      	b.n	8008902 <gen_numname+0x6a>
			wc = *lfn++;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	1c9a      	adds	r2, r3, #2
 80088c0:	607a      	str	r2, [r7, #4]
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80088c6:	2300      	movs	r3, #0
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ca:	e017      	b.n	80088fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	005a      	lsls	r2, r3, #1
 80088d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	4413      	add	r3, r2
 80088d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80088da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80088dc:	085b      	lsrs	r3, r3, #1
 80088de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <gen_numname+0x5e>
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80088f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80088f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	3301      	adds	r3, #1
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d9e4      	bls.n	80088cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1d8      	bne.n	80088bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800890e:	2307      	movs	r3, #7
 8008910:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3330      	adds	r3, #48	; 0x30
 800891e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008926:	2b39      	cmp	r3, #57	; 0x39
 8008928:	d904      	bls.n	8008934 <gen_numname+0x9c>
 800892a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800892e:	3307      	adds	r3, #7
 8008930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	1e5a      	subs	r2, r3, #1
 8008938:	62ba      	str	r2, [r7, #40]	; 0x28
 800893a:	3330      	adds	r3, #48	; 0x30
 800893c:	443b      	add	r3, r7
 800893e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008942:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1df      	bne.n	8008912 <gen_numname+0x7a>
	ns[i] = '~';
 8008952:	f107 0214 	add.w	r2, r7, #20
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	4413      	add	r3, r2
 800895a:	227e      	movs	r2, #126	; 0x7e
 800895c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800895e:	2300      	movs	r3, #0
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
 8008962:	e002      	b.n	800896a <gen_numname+0xd2>
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	3301      	adds	r3, #1
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
 800896a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	429a      	cmp	r2, r3
 8008970:	d205      	bcs.n	800897e <gen_numname+0xe6>
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	4413      	add	r3, r2
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b20      	cmp	r3, #32
 800897c:	d1f2      	bne.n	8008964 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	2b07      	cmp	r3, #7
 8008982:	d807      	bhi.n	8008994 <gen_numname+0xfc>
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	62ba      	str	r2, [r7, #40]	; 0x28
 800898a:	3330      	adds	r3, #48	; 0x30
 800898c:	443b      	add	r3, r7
 800898e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008992:	e000      	b.n	8008996 <gen_numname+0xfe>
 8008994:	2120      	movs	r1, #32
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	627a      	str	r2, [r7, #36]	; 0x24
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	460a      	mov	r2, r1
 80089a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	2b07      	cmp	r3, #7
 80089a8:	d9e9      	bls.n	800897e <gen_numname+0xe6>
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	3730      	adds	r7, #48	; 0x30
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80089c0:	230b      	movs	r3, #11
 80089c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	0852      	lsrs	r2, r2, #1
 80089ca:	01db      	lsls	r3, r3, #7
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	1c59      	adds	r1, r3, #1
 80089d4:	6079      	str	r1, [r7, #4]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	4413      	add	r3, r2
 80089da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3b01      	subs	r3, #1
 80089e0:	60bb      	str	r3, [r7, #8]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1ed      	bne.n	80089c4 <sum_sfn+0x10>
	return sum;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008a00:	2304      	movs	r3, #4
 8008a02:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8008a0a:	23ff      	movs	r3, #255	; 0xff
 8008a0c:	757b      	strb	r3, [r7, #21]
 8008a0e:	23ff      	movs	r3, #255	; 0xff
 8008a10:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008a12:	e081      	b.n	8008b18 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6938      	ldr	r0, [r7, #16]
 8008a1c:	f7ff f838 	bl	8007a90 <move_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d17c      	bne.n	8008b24 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008a32:	7dbb      	ldrb	r3, [r7, #22]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008a38:	2304      	movs	r3, #4
 8008a3a:	75fb      	strb	r3, [r7, #23]
 8008a3c:	e077      	b.n	8008b2e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	330b      	adds	r3, #11
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4a:	73fb      	strb	r3, [r7, #15]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7bfa      	ldrb	r2, [r7, #15]
 8008a50:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008a52:	7dbb      	ldrb	r3, [r7, #22]
 8008a54:	2be5      	cmp	r3, #229	; 0xe5
 8008a56:	d00e      	beq.n	8008a76 <dir_read+0x80>
 8008a58:	7dbb      	ldrb	r3, [r7, #22]
 8008a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a5c:	d00b      	beq.n	8008a76 <dir_read+0x80>
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
 8008a60:	f023 0320 	bic.w	r3, r3, #32
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d002      	beq.n	8008a7c <dir_read+0x86>
				ord = 0xFF;
 8008a76:	23ff      	movs	r3, #255	; 0xff
 8008a78:	757b      	strb	r3, [r7, #21]
 8008a7a:	e044      	b.n	8008b06 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d12f      	bne.n	8008ae2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008a82:	7dbb      	ldrb	r3, [r7, #22]
 8008a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00d      	beq.n	8008aa8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	7b5b      	ldrb	r3, [r3, #13]
 8008a92:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008a94:	7dbb      	ldrb	r3, [r7, #22]
 8008a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9a:	75bb      	strb	r3, [r7, #22]
 8008a9c:	7dbb      	ldrb	r3, [r7, #22]
 8008a9e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008aa8:	7dba      	ldrb	r2, [r7, #22]
 8008aaa:	7d7b      	ldrb	r3, [r7, #21]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d115      	bne.n	8008adc <dir_read+0xe6>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	330d      	adds	r3, #13
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	7d3a      	ldrb	r2, [r7, #20]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d10e      	bne.n	8008adc <dir_read+0xe6>
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7ff fe19 	bl	8008700 <pick_lfn>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <dir_read+0xe6>
 8008ad4:	7d7b      	ldrb	r3, [r7, #21]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	e000      	b.n	8008ade <dir_read+0xe8>
 8008adc:	23ff      	movs	r3, #255	; 0xff
 8008ade:	757b      	strb	r3, [r7, #21]
 8008ae0:	e011      	b.n	8008b06 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8008ae2:	7d7b      	ldrb	r3, [r7, #21]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <dir_read+0x106>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7ff ff61 	bl	80089b4 <sum_sfn>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	7d3b      	ldrb	r3, [r7, #20]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d015      	beq.n	8008b28 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008b04:	e010      	b.n	8008b28 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008b06:	2100      	movs	r1, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff fc2c 	bl	8008366 <dir_next>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <dir_read+0x136>
	while (dp->sect) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f47f af79 	bne.w	8008a14 <dir_read+0x1e>
 8008b22:	e004      	b.n	8008b2e <dir_read+0x138>
		if (res != FR_OK) break;
 8008b24:	bf00      	nop
 8008b26:	e002      	b.n	8008b2e <dir_read+0x138>
					break;
 8008b28:	bf00      	nop
 8008b2a:	e000      	b.n	8008b2e <dir_read+0x138>
		if (res != FR_OK) break;
 8008b2c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <dir_read+0x144>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	61da      	str	r2, [r3, #28]
	return res;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fb7d 	bl	8008254 <dir_sdi>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <dir_find+0x24>
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	e0a9      	b.n	8008cbc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b68:	23ff      	movs	r3, #255	; 0xff
 8008b6a:	753b      	strb	r3, [r7, #20]
 8008b6c:	7d3b      	ldrb	r3, [r7, #20]
 8008b6e:	757b      	strb	r3, [r7, #21]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b76:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6938      	ldr	r0, [r7, #16]
 8008b80:	f7fe ff86 	bl	8007a90 <move_window>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b88:	7dfb      	ldrb	r3, [r7, #23]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f040 8090 	bne.w	8008cb0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b98:	7dbb      	ldrb	r3, [r7, #22]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <dir_find+0x60>
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	75fb      	strb	r3, [r7, #23]
 8008ba2:	e08a      	b.n	8008cba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	330b      	adds	r3, #11
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	2be5      	cmp	r3, #229	; 0xe5
 8008bbc:	d007      	beq.n	8008bce <dir_find+0x8a>
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d009      	beq.n	8008bdc <dir_find+0x98>
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b0f      	cmp	r3, #15
 8008bcc:	d006      	beq.n	8008bdc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	757b      	strb	r3, [r7, #21]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8008bda:	e05e      	b.n	8008c9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b0f      	cmp	r3, #15
 8008be0:	d136      	bne.n	8008c50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d154      	bne.n	8008c9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008bf0:	7dbb      	ldrb	r3, [r7, #22]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00d      	beq.n	8008c16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	7b5b      	ldrb	r3, [r3, #13]
 8008c00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008c02:	7dbb      	ldrb	r3, [r7, #22]
 8008c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c08:	75bb      	strb	r3, [r7, #22]
 8008c0a:	7dbb      	ldrb	r3, [r7, #22]
 8008c0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695a      	ldr	r2, [r3, #20]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008c16:	7dba      	ldrb	r2, [r7, #22]
 8008c18:	7d7b      	ldrb	r3, [r7, #21]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d115      	bne.n	8008c4a <dir_find+0x106>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	330d      	adds	r3, #13
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	7d3a      	ldrb	r2, [r7, #20]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d10e      	bne.n	8008c4a <dir_find+0x106>
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7ff fcf2 	bl	8008620 <cmp_lfn>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <dir_find+0x106>
 8008c42:	7d7b      	ldrb	r3, [r7, #21]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	e000      	b.n	8008c4c <dir_find+0x108>
 8008c4a:	23ff      	movs	r3, #255	; 0xff
 8008c4c:	757b      	strb	r3, [r7, #21]
 8008c4e:	e024      	b.n	8008c9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008c50:	7d7b      	ldrb	r3, [r7, #21]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <dir_find+0x126>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff feaa 	bl	80089b4 <sum_sfn>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	7d3b      	ldrb	r3, [r7, #20]
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d024      	beq.n	8008cb4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <dir_find+0x14a>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a18      	ldr	r0, [r3, #32]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3324      	adds	r3, #36	; 0x24
 8008c80:	220b      	movs	r2, #11
 8008c82:	4619      	mov	r1, r3
 8008c84:	f7fe fd12 	bl	80076ac <mem_cmp>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d014      	beq.n	8008cb8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c8e:	23ff      	movs	r3, #255	; 0xff
 8008c90:	757b      	strb	r3, [r7, #21]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c98:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fb62 	bl	8008366 <dir_next>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f43f af65 	beq.w	8008b78 <dir_find+0x34>
 8008cae:	e004      	b.n	8008cba <dir_find+0x176>
		if (res != FR_OK) break;
 8008cb0:	bf00      	nop
 8008cb2:	e002      	b.n	8008cba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008cb4:	bf00      	nop
 8008cb6:	e000      	b.n	8008cba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008cb8:	bf00      	nop

	return res;
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08c      	sub	sp, #48	; 0x30
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008cd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <dir_register+0x20>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	e0e0      	b.n	8008ea6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ce8:	e002      	b.n	8008cf0 <dir_register+0x2c>
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	3301      	adds	r3, #1
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	691a      	ldr	r2, [r3, #16]
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1f4      	bne.n	8008cea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	220c      	movs	r2, #12
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fc91 	bl	8007634 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d032      	beq.n	8008d82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2240      	movs	r2, #64	; 0x40
 8008d20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008d24:	2301      	movs	r3, #1
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d28:	e016      	b.n	8008d58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	691a      	ldr	r2, [r3, #16]
 8008d34:	f107 010c 	add.w	r1, r7, #12
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	f7ff fdad 	bl	8008898 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff ff00 	bl	8008b44 <dir_find>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	3301      	adds	r3, #1
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	2b63      	cmp	r3, #99	; 0x63
 8008d5c:	d9e5      	bls.n	8008d2a <dir_register+0x66>
 8008d5e:	e000      	b.n	8008d62 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008d60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	2b64      	cmp	r3, #100	; 0x64
 8008d66:	d101      	bne.n	8008d6c <dir_register+0xa8>
 8008d68:	2307      	movs	r3, #7
 8008d6a:	e09c      	b.n	8008ea6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d002      	beq.n	8008d7a <dir_register+0xb6>
 8008d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d78:	e095      	b.n	8008ea6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008d7a:	7dfa      	ldrb	r2, [r7, #23]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d007      	beq.n	8008d9c <dir_register+0xd8>
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	330c      	adds	r3, #12
 8008d90:	4a47      	ldr	r2, [pc, #284]	; (8008eb0 <dir_register+0x1ec>)
 8008d92:	fba2 2303 	umull	r2, r3, r2, r3
 8008d96:	089b      	lsrs	r3, r3, #2
 8008d98:	3301      	adds	r3, #1
 8008d9a:	e000      	b.n	8008d9e <dir_register+0xda>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008da0:	6a39      	ldr	r1, [r7, #32]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fbb5 	bl	8008512 <dir_alloc>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d148      	bne.n	8008e48 <dir_register+0x184>
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	3b01      	subs	r3, #1
 8008dba:	623b      	str	r3, [r7, #32]
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d042      	beq.n	8008e48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	015b      	lsls	r3, r3, #5
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fa40 	bl	8008254 <dir_sdi>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d132      	bne.n	8008e48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3324      	adds	r3, #36	; 0x24
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fde4 	bl	80089b4 <sum_sfn>
 8008dec:	4603      	mov	r3, r0
 8008dee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	4619      	mov	r1, r3
 8008df6:	69f8      	ldr	r0, [r7, #28]
 8008df8:	f7fe fe4a 	bl	8007a90 <move_window>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d11d      	bne.n	8008e46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	6918      	ldr	r0, [r3, #16]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a19      	ldr	r1, [r3, #32]
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	7efb      	ldrb	r3, [r7, #27]
 8008e18:	f7ff fcd6 	bl	80087c8 <put_lfn>
				fs->wflag = 1;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fa9e 	bl	8008366 <dir_next>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d107      	bne.n	8008e48 <dir_register+0x184>
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	623b      	str	r3, [r7, #32]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1d5      	bne.n	8008df0 <dir_register+0x12c>
 8008e44:	e000      	b.n	8008e48 <dir_register+0x184>
				if (res != FR_OK) break;
 8008e46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d128      	bne.n	8008ea2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	4619      	mov	r1, r3
 8008e56:	69f8      	ldr	r0, [r7, #28]
 8008e58:	f7fe fe1a 	bl	8007a90 <move_window>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d11b      	bne.n	8008ea2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	2100      	movs	r1, #0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fbff 	bl	8007676 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a18      	ldr	r0, [r3, #32]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3324      	adds	r3, #36	; 0x24
 8008e80:	220b      	movs	r2, #11
 8008e82:	4619      	mov	r1, r3
 8008e84:	f7fe fbd6 	bl	8007634 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	330c      	adds	r3, #12
 8008e94:	f002 0218 	and.w	r2, r2, #24
 8008e98:	b2d2      	uxtb	r2, r2
 8008e9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3730      	adds	r7, #48	; 0x30
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	4ec4ec4f 	.word	0x4ec4ec4f

08008eb4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed0:	d007      	beq.n	8008ee2 <dir_remove+0x2e>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff f9bb 	bl	8008254 <dir_sdi>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	e000      	b.n	8008ee4 <dir_remove+0x30>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d128      	bne.n	8008f3e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6938      	ldr	r0, [r7, #16]
 8008ef4:	f7fe fdcc 	bl	8007a90 <move_window>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d115      	bne.n	8008f2e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	22e5      	movs	r2, #229	; 0xe5
 8008f08:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d90b      	bls.n	8008f32 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fa22 	bl	8008366 <dir_next>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0df      	beq.n	8008eec <dir_remove+0x38>
 8008f2c:	e002      	b.n	8008f34 <dir_remove+0x80>
			if (res != FR_OK) break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008f32:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d101      	bne.n	8008f3e <dir_remove+0x8a>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80c9 	beq.w	80090fa <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f70:	d032      	beq.n	8008fd8 <get_fileinfo+0x90>
			i = j = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008f7a:	e01b      	b.n	8008fb4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008f7c:	89fb      	ldrh	r3, [r7, #14]
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 ffd7 	bl	800af34 <ff_convert>
 8008f86:	4603      	mov	r3, r0
 8008f88:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008f8a:	89fb      	ldrh	r3, [r7, #14]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <get_fileinfo+0x4e>
 8008f90:	2300      	movs	r3, #0
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e01a      	b.n	8008fcc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2bfe      	cmp	r3, #254	; 0xfe
 8008f9a:	d902      	bls.n	8008fa2 <get_fileinfo+0x5a>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61fb      	str	r3, [r7, #28]
 8008fa0:	e014      	b.n	8008fcc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	61fa      	str	r2, [r7, #28]
 8008fa8:	89fa      	ldrh	r2, [r7, #14]
 8008faa:	b2d1      	uxtb	r1, r2
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	4413      	add	r3, r2
 8008fb0:	460a      	mov	r2, r1
 8008fb2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	1c59      	adds	r1, r3, #1
 8008fbc:	61b9      	str	r1, [r7, #24]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	81fb      	strh	r3, [r7, #14]
 8008fc6:	89fb      	ldrh	r3, [r7, #14]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1d7      	bne.n	8008f7c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3316      	adds	r3, #22
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61bb      	str	r3, [r7, #24]
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3316      	adds	r3, #22
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008fec:	e04c      	b.n	8009088 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	1c59      	adds	r1, r3, #1
 8008ff6:	61f9      	str	r1, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	2b20      	cmp	r3, #32
 8009002:	d100      	bne.n	8009006 <get_fileinfo+0xbe>
 8009004:	e040      	b.n	8009088 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b05      	cmp	r3, #5
 800900a:	d101      	bne.n	8009010 <get_fileinfo+0xc8>
 800900c:	23e5      	movs	r3, #229	; 0xe5
 800900e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	2b09      	cmp	r3, #9
 8009014:	d10f      	bne.n	8009036 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009016:	89bb      	ldrh	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d105      	bne.n	8009028 <get_fileinfo+0xe0>
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	4413      	add	r3, r2
 8009022:	3316      	adds	r3, #22
 8009024:	222e      	movs	r2, #46	; 0x2e
 8009026:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	61ba      	str	r2, [r7, #24]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4413      	add	r3, r2
 8009032:	222e      	movs	r2, #46	; 0x2e
 8009034:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	4413      	add	r3, r2
 800903c:	3309      	adds	r3, #9
 800903e:	7dfa      	ldrb	r2, [r7, #23]
 8009040:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009042:	89bb      	ldrh	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d11c      	bne.n	8009082 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	2b40      	cmp	r3, #64	; 0x40
 800904c:	d913      	bls.n	8009076 <get_fileinfo+0x12e>
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	2b5a      	cmp	r3, #90	; 0x5a
 8009052:	d810      	bhi.n	8009076 <get_fileinfo+0x12e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	330c      	adds	r3, #12
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	2b08      	cmp	r3, #8
 8009062:	d901      	bls.n	8009068 <get_fileinfo+0x120>
 8009064:	2310      	movs	r3, #16
 8009066:	e000      	b.n	800906a <get_fileinfo+0x122>
 8009068:	2308      	movs	r3, #8
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	3320      	adds	r3, #32
 8009074:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	4413      	add	r3, r2
 800907c:	3316      	adds	r3, #22
 800907e:	7dfa      	ldrb	r2, [r7, #23]
 8009080:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	3301      	adds	r3, #1
 8009086:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	2b0a      	cmp	r3, #10
 800908c:	d9af      	bls.n	8008fee <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800908e:	89bb      	ldrh	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10d      	bne.n	80090b0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	4413      	add	r3, r2
 800909a:	3316      	adds	r3, #22
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	330c      	adds	r3, #12
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <get_fileinfo+0x168>
 80090ac:	2300      	movs	r3, #0
 80090ae:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	4413      	add	r3, r2
 80090b6:	3309      	adds	r3, #9
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	7ada      	ldrb	r2, [r3, #11]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	331c      	adds	r3, #28
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fa47 	bl	8007560 <ld_dword>
 80090d2:	4602      	mov	r2, r0
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	3316      	adds	r3, #22
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fa3e 	bl	8007560 <ld_dword>
 80090e4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	80da      	strh	r2, [r3, #6]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	0c1b      	lsrs	r3, r3, #16
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	809a      	strh	r2, [r3, #4]
 80090f8:	e000      	b.n	80090fc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80090fa:	bf00      	nop
}
 80090fc:	3720      	adds	r7, #32
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	2300      	movs	r3, #0
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	61ba      	str	r2, [r7, #24]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4413      	add	r3, r2
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009134:	2b1f      	cmp	r3, #31
 8009136:	d940      	bls.n	80091ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800913a:	2b2f      	cmp	r3, #47	; 0x2f
 800913c:	d006      	beq.n	800914c <create_name+0x48>
 800913e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009140:	2b5c      	cmp	r3, #92	; 0x5c
 8009142:	d110      	bne.n	8009166 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009144:	e002      	b.n	800914c <create_name+0x48>
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	3301      	adds	r3, #1
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	4413      	add	r3, r2
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b2f      	cmp	r3, #47	; 0x2f
 8009156:	d0f6      	beq.n	8009146 <create_name+0x42>
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	4413      	add	r3, r2
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b5c      	cmp	r3, #92	; 0x5c
 8009162:	d0f0      	beq.n	8009146 <create_name+0x42>
			break;
 8009164:	e02a      	b.n	80091bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2bfe      	cmp	r3, #254	; 0xfe
 800916a:	d901      	bls.n	8009170 <create_name+0x6c>
 800916c:	2306      	movs	r3, #6
 800916e:	e17d      	b.n	800946c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009172:	b2db      	uxtb	r3, r3
 8009174:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009176:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009178:	2101      	movs	r1, #1
 800917a:	4618      	mov	r0, r3
 800917c:	f001 feda 	bl	800af34 <ff_convert>
 8009180:	4603      	mov	r3, r0
 8009182:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <create_name+0x8a>
 800918a:	2306      	movs	r3, #6
 800918c:	e16e      	b.n	800946c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800918e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009190:	2b7f      	cmp	r3, #127	; 0x7f
 8009192:	d809      	bhi.n	80091a8 <create_name+0xa4>
 8009194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009196:	4619      	mov	r1, r3
 8009198:	488d      	ldr	r0, [pc, #564]	; (80093d0 <create_name+0x2cc>)
 800919a:	f7fe faae 	bl	80076fa <chk_chr>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <create_name+0xa4>
 80091a4:	2306      	movs	r3, #6
 80091a6:	e161      	b.n	800946c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	617a      	str	r2, [r7, #20]
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4413      	add	r3, r2
 80091b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80091b8:	e7b4      	b.n	8009124 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80091ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	441a      	add	r2, r3
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80091c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091c8:	2b1f      	cmp	r3, #31
 80091ca:	d801      	bhi.n	80091d0 <create_name+0xcc>
 80091cc:	2304      	movs	r3, #4
 80091ce:	e000      	b.n	80091d2 <create_name+0xce>
 80091d0:	2300      	movs	r3, #0
 80091d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80091d6:	e011      	b.n	80091fc <create_name+0xf8>
		w = lfn[di - 1];
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091de:	3b01      	subs	r3, #1
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80091ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d002      	beq.n	80091f6 <create_name+0xf2>
 80091f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091f2:	2b2e      	cmp	r3, #46	; 0x2e
 80091f4:	d106      	bne.n	8009204 <create_name+0x100>
		di--;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1ea      	bne.n	80091d8 <create_name+0xd4>
 8009202:	e000      	b.n	8009206 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009204:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	2200      	movs	r2, #0
 8009210:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d101      	bne.n	800921c <create_name+0x118>
 8009218:	2306      	movs	r3, #6
 800921a:	e127      	b.n	800946c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3324      	adds	r3, #36	; 0x24
 8009220:	220b      	movs	r2, #11
 8009222:	2120      	movs	r1, #32
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe fa26 	bl	8007676 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800922a:	2300      	movs	r3, #0
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	e002      	b.n	8009236 <create_name+0x132>
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	3301      	adds	r3, #1
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	2b20      	cmp	r3, #32
 8009242:	d0f5      	beq.n	8009230 <create_name+0x12c>
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	2b2e      	cmp	r3, #46	; 0x2e
 8009250:	d0ee      	beq.n	8009230 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <create_name+0x168>
 8009258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800925c:	f043 0303 	orr.w	r3, r3, #3
 8009260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009264:	e002      	b.n	800926c <create_name+0x168>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	3b01      	subs	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <create_name+0x182>
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009278:	3b01      	subs	r3, #1
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	2b2e      	cmp	r3, #46	; 0x2e
 8009284:	d1ef      	bne.n	8009266 <create_name+0x162>

	i = b = 0; ni = 8;
 8009286:	2300      	movs	r3, #0
 8009288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800928c:	2300      	movs	r3, #0
 800928e:	623b      	str	r3, [r7, #32]
 8009290:	2308      	movs	r3, #8
 8009292:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	61ba      	str	r2, [r7, #24]
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	881b      	ldrh	r3, [r3, #0]
 80092a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80092a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8090 	beq.w	80093cc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80092ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d006      	beq.n	80092c0 <create_name+0x1bc>
 80092b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092b4:	2b2e      	cmp	r3, #46	; 0x2e
 80092b6:	d10a      	bne.n	80092ce <create_name+0x1ca>
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d006      	beq.n	80092ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80092c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c4:	f043 0303 	orr.w	r3, r3, #3
 80092c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092cc:	e07d      	b.n	80093ca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80092ce:	6a3a      	ldr	r2, [r7, #32]
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d203      	bcs.n	80092de <create_name+0x1da>
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d123      	bne.n	8009326 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b0b      	cmp	r3, #11
 80092e2:	d106      	bne.n	80092f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80092e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092e8:	f043 0303 	orr.w	r3, r3, #3
 80092ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092f0:	e075      	b.n	80093de <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d005      	beq.n	8009306 <create_name+0x202>
 80092fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092fe:	f043 0303 	orr.w	r3, r3, #3
 8009302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	429a      	cmp	r2, r3
 800930c:	d866      	bhi.n	80093dc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	2308      	movs	r3, #8
 8009314:	623b      	str	r3, [r7, #32]
 8009316:	230b      	movs	r3, #11
 8009318:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800931a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009324:	e051      	b.n	80093ca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009328:	2b7f      	cmp	r3, #127	; 0x7f
 800932a:	d914      	bls.n	8009356 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800932c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f001 fdff 	bl	800af34 <ff_convert>
 8009336:	4603      	mov	r3, r0
 8009338:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800933a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <create_name+0x246>
 8009340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009342:	3b80      	subs	r3, #128	; 0x80
 8009344:	4a23      	ldr	r2, [pc, #140]	; (80093d4 <create_name+0x2d0>)
 8009346:	5cd3      	ldrb	r3, [r2, r3]
 8009348:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800934a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800934e:	f043 0302 	orr.w	r3, r3, #2
 8009352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	d007      	beq.n	800936c <create_name+0x268>
 800935c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800935e:	4619      	mov	r1, r3
 8009360:	481d      	ldr	r0, [pc, #116]	; (80093d8 <create_name+0x2d4>)
 8009362:	f7fe f9ca 	bl	80076fa <chk_chr>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d008      	beq.n	800937e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800936c:	235f      	movs	r3, #95	; 0x5f
 800936e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009374:	f043 0303 	orr.w	r3, r3, #3
 8009378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800937c:	e01b      	b.n	80093b6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800937e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	d909      	bls.n	8009398 <create_name+0x294>
 8009384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009386:	2b5a      	cmp	r3, #90	; 0x5a
 8009388:	d806      	bhi.n	8009398 <create_name+0x294>
					b |= 2;
 800938a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800938e:	f043 0302 	orr.w	r3, r3, #2
 8009392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009396:	e00e      	b.n	80093b6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800939a:	2b60      	cmp	r3, #96	; 0x60
 800939c:	d90b      	bls.n	80093b6 <create_name+0x2b2>
 800939e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093a0:	2b7a      	cmp	r3, #122	; 0x7a
 80093a2:	d808      	bhi.n	80093b6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80093a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093a8:	f043 0301 	orr.w	r3, r3, #1
 80093ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80093b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093b2:	3b20      	subs	r3, #32
 80093b4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	623a      	str	r2, [r7, #32]
 80093bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093be:	b2d1      	uxtb	r1, r2
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	460a      	mov	r2, r1
 80093c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80093ca:	e763      	b.n	8009294 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80093cc:	bf00      	nop
 80093ce:	e006      	b.n	80093de <create_name+0x2da>
 80093d0:	0800f7d4 	.word	0x0800f7d4
 80093d4:	0800f834 	.word	0x0800f834
 80093d8:	0800f7e0 	.word	0x0800f7e0
			if (si > di) break;			/* No extension */
 80093dc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093e4:	2be5      	cmp	r3, #229	; 0xe5
 80093e6:	d103      	bne.n	80093f0 <create_name+0x2ec>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2205      	movs	r2, #5
 80093ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	d104      	bne.n	8009400 <create_name+0x2fc>
 80093f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009404:	f003 030c 	and.w	r3, r3, #12
 8009408:	2b0c      	cmp	r3, #12
 800940a:	d005      	beq.n	8009418 <create_name+0x314>
 800940c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009410:	f003 0303 	and.w	r3, r3, #3
 8009414:	2b03      	cmp	r3, #3
 8009416:	d105      	bne.n	8009424 <create_name+0x320>
 8009418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d117      	bne.n	8009460 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009434:	f003 0303 	and.w	r3, r3, #3
 8009438:	2b01      	cmp	r3, #1
 800943a:	d105      	bne.n	8009448 <create_name+0x344>
 800943c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009440:	f043 0310 	orr.w	r3, r3, #16
 8009444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800944c:	f003 030c 	and.w	r3, r3, #12
 8009450:	2b04      	cmp	r3, #4
 8009452:	d105      	bne.n	8009460 <create_name+0x35c>
 8009454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009466:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800946a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800946c:	4618      	mov	r0, r3
 800946e:	3728      	adds	r7, #40	; 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009488:	e002      	b.n	8009490 <follow_path+0x1c>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	603b      	str	r3, [r7, #0]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b2f      	cmp	r3, #47	; 0x2f
 8009496:	d0f8      	beq.n	800948a <follow_path+0x16>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	2b5c      	cmp	r3, #92	; 0x5c
 800949e:	d0f4      	beq.n	800948a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2200      	movs	r2, #0
 80094a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b1f      	cmp	r3, #31
 80094ac:	d80a      	bhi.n	80094c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2280      	movs	r2, #128	; 0x80
 80094b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094b6:	2100      	movs	r1, #0
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7fe fecb 	bl	8008254 <dir_sdi>
 80094be:	4603      	mov	r3, r0
 80094c0:	75fb      	strb	r3, [r7, #23]
 80094c2:	e048      	b.n	8009556 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094c4:	463b      	mov	r3, r7
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff fe1b 	bl	8009104 <create_name>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d139      	bne.n	800954c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fb33 	bl	8008b44 <dir_find>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d12c      	bne.n	8009550 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d127      	bne.n	8009550 <follow_path+0xdc>
 8009500:	2305      	movs	r3, #5
 8009502:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009504:	e024      	b.n	8009550 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009506:	7afb      	ldrb	r3, [r7, #11]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d121      	bne.n	8009554 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	799b      	ldrb	r3, [r3, #6]
 8009514:	f003 0310 	and.w	r3, r3, #16
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800951c:	2305      	movs	r3, #5
 800951e:	75fb      	strb	r3, [r7, #23]
 8009520:	e019      	b.n	8009556 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	8992      	ldrh	r2, [r2, #12]
 8009530:	fbb3 f0f2 	udiv	r0, r3, r2
 8009534:	fb00 f202 	mul.w	r2, r0, r2
 8009538:	1a9b      	subs	r3, r3, r2
 800953a:	440b      	add	r3, r1
 800953c:	4619      	mov	r1, r3
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff f82e 	bl	80085a0 <ld_clust>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800954a:	e7bb      	b.n	80094c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800954c:	bf00      	nop
 800954e:	e002      	b.n	8009556 <follow_path+0xe2>
				break;
 8009550:	bf00      	nop
 8009552:	e000      	b.n	8009556 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009554:	bf00      	nop
			}
		}
	}

	return res;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009560:	b480      	push	{r7}
 8009562:	b087      	sub	sp, #28
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800956c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d031      	beq.n	80095da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e002      	b.n	8009584 <get_ldnumber+0x24>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	3301      	adds	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b1f      	cmp	r3, #31
 800958a:	d903      	bls.n	8009594 <get_ldnumber+0x34>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b3a      	cmp	r3, #58	; 0x3a
 8009592:	d1f4      	bne.n	800957e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b3a      	cmp	r3, #58	; 0x3a
 800959a:	d11c      	bne.n	80095d6 <get_ldnumber+0x76>
			tp = *path;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	60fa      	str	r2, [r7, #12]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	3b30      	subs	r3, #48	; 0x30
 80095ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b09      	cmp	r3, #9
 80095b2:	d80e      	bhi.n	80095d2 <get_ldnumber+0x72>
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d10a      	bne.n	80095d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d107      	bne.n	80095d2 <get_ldnumber+0x72>
					vol = (int)i;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	3301      	adds	r3, #1
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	e002      	b.n	80095dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095d6:	2300      	movs	r3, #0
 80095d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095da:	693b      	ldr	r3, [r7, #16]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	70da      	strb	r2, [r3, #3]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7fe fa44 	bl	8007a90 <move_window>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <check_fs+0x2a>
 800960e:	2304      	movs	r3, #4
 8009610:	e038      	b.n	8009684 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3338      	adds	r3, #56	; 0x38
 8009616:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800961a:	4618      	mov	r0, r3
 800961c:	f7fd ff88 	bl	8007530 <ld_word>
 8009620:	4603      	mov	r3, r0
 8009622:	461a      	mov	r2, r3
 8009624:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009628:	429a      	cmp	r2, r3
 800962a:	d001      	beq.n	8009630 <check_fs+0x48>
 800962c:	2303      	movs	r3, #3
 800962e:	e029      	b.n	8009684 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009636:	2be9      	cmp	r3, #233	; 0xe9
 8009638:	d009      	beq.n	800964e <check_fs+0x66>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009640:	2beb      	cmp	r3, #235	; 0xeb
 8009642:	d11e      	bne.n	8009682 <check_fs+0x9a>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800964a:	2b90      	cmp	r3, #144	; 0x90
 800964c:	d119      	bne.n	8009682 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3338      	adds	r3, #56	; 0x38
 8009652:	3336      	adds	r3, #54	; 0x36
 8009654:	4618      	mov	r0, r3
 8009656:	f7fd ff83 	bl	8007560 <ld_dword>
 800965a:	4603      	mov	r3, r0
 800965c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009660:	4a0a      	ldr	r2, [pc, #40]	; (800968c <check_fs+0xa4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d101      	bne.n	800966a <check_fs+0x82>
 8009666:	2300      	movs	r3, #0
 8009668:	e00c      	b.n	8009684 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3338      	adds	r3, #56	; 0x38
 800966e:	3352      	adds	r3, #82	; 0x52
 8009670:	4618      	mov	r0, r3
 8009672:	f7fd ff75 	bl	8007560 <ld_dword>
 8009676:	4603      	mov	r3, r0
 8009678:	4a05      	ldr	r2, [pc, #20]	; (8009690 <check_fs+0xa8>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d101      	bne.n	8009682 <check_fs+0x9a>
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009682:	2302      	movs	r3, #2
}
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	00544146 	.word	0x00544146
 8009690:	33544146 	.word	0x33544146

08009694 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b096      	sub	sp, #88	; 0x58
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff ff59 	bl	8009560 <get_ldnumber>
 80096ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da01      	bge.n	80096ba <find_volume+0x26>
 80096b6:	230b      	movs	r3, #11
 80096b8:	e262      	b.n	8009b80 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096ba:	4a9f      	ldr	r2, [pc, #636]	; (8009938 <find_volume+0x2a4>)
 80096bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <find_volume+0x3a>
 80096ca:	230c      	movs	r3, #12
 80096cc:	e258      	b.n	8009b80 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01a      	beq.n	800971a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fe83 	bl	80073f4 <disk_status>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10c      	bne.n	800971a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <find_volume+0x82>
 8009706:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009712:	230a      	movs	r3, #10
 8009714:	e234      	b.n	8009b80 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8009716:	2300      	movs	r3, #0
 8009718:	e232      	b.n	8009b80 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009722:	b2da      	uxtb	r2, r3
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fe7b 	bl	8007428 <disk_initialize>
 8009732:	4603      	mov	r3, r0
 8009734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009744:	2303      	movs	r3, #3
 8009746:	e21b      	b.n	8009b80 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <find_volume+0xca>
 800974e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009752:	f003 0304 	and.w	r3, r3, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800975a:	230a      	movs	r3, #10
 800975c:	e210      	b.n	8009b80 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	7858      	ldrb	r0, [r3, #1]
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	330c      	adds	r3, #12
 8009766:	461a      	mov	r2, r3
 8009768:	2102      	movs	r1, #2
 800976a:	f7fd fec3 	bl	80074f4 <disk_ioctl>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <find_volume+0xe4>
 8009774:	2301      	movs	r3, #1
 8009776:	e203      	b.n	8009b80 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977a:	899b      	ldrh	r3, [r3, #12]
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009780:	d80d      	bhi.n	800979e <find_volume+0x10a>
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	899b      	ldrh	r3, [r3, #12]
 8009786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978a:	d308      	bcc.n	800979e <find_volume+0x10a>
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	461a      	mov	r2, r3
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	899b      	ldrh	r3, [r3, #12]
 8009796:	3b01      	subs	r3, #1
 8009798:	4013      	ands	r3, r2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <find_volume+0x10e>
 800979e:	2301      	movs	r3, #1
 80097a0:	e1ee      	b.n	8009b80 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80097a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097aa:	f7ff ff1d 	bl	80095e8 <check_fs>
 80097ae:	4603      	mov	r3, r0
 80097b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d149      	bne.n	8009850 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097bc:	2300      	movs	r3, #0
 80097be:	643b      	str	r3, [r7, #64]	; 0x40
 80097c0:	e01e      	b.n	8009800 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80097c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80097d0:	4413      	add	r3, r2
 80097d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	3304      	adds	r3, #4
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d006      	beq.n	80097ec <find_volume+0x158>
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	3308      	adds	r3, #8
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd febc 	bl	8007560 <ld_dword>
 80097e8:	4602      	mov	r2, r0
 80097ea:	e000      	b.n	80097ee <find_volume+0x15a>
 80097ec:	2200      	movs	r2, #0
 80097ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	3358      	adds	r3, #88	; 0x58
 80097f4:	443b      	add	r3, r7
 80097f6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fc:	3301      	adds	r3, #1
 80097fe:	643b      	str	r3, [r7, #64]	; 0x40
 8009800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009802:	2b03      	cmp	r3, #3
 8009804:	d9dd      	bls.n	80097c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009806:	2300      	movs	r3, #0
 8009808:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800980a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <find_volume+0x182>
 8009810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009812:	3b01      	subs	r3, #1
 8009814:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	3358      	adds	r3, #88	; 0x58
 800981c:	443b      	add	r3, r7
 800981e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009822:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <find_volume+0x1a2>
 800982a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800982c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800982e:	f7ff fedb 	bl	80095e8 <check_fs>
 8009832:	4603      	mov	r3, r0
 8009834:	e000      	b.n	8009838 <find_volume+0x1a4>
 8009836:	2303      	movs	r3, #3
 8009838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800983c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009840:	2b01      	cmp	r3, #1
 8009842:	d905      	bls.n	8009850 <find_volume+0x1bc>
 8009844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009846:	3301      	adds	r3, #1
 8009848:	643b      	str	r3, [r7, #64]	; 0x40
 800984a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984c:	2b03      	cmp	r3, #3
 800984e:	d9e2      	bls.n	8009816 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009854:	2b04      	cmp	r3, #4
 8009856:	d101      	bne.n	800985c <find_volume+0x1c8>
 8009858:	2301      	movs	r3, #1
 800985a:	e191      	b.n	8009b80 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800985c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009860:	2b01      	cmp	r3, #1
 8009862:	d901      	bls.n	8009868 <find_volume+0x1d4>
 8009864:	230d      	movs	r3, #13
 8009866:	e18b      	b.n	8009b80 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986a:	3338      	adds	r3, #56	; 0x38
 800986c:	330b      	adds	r3, #11
 800986e:	4618      	mov	r0, r3
 8009870:	f7fd fe5e 	bl	8007530 <ld_word>
 8009874:	4603      	mov	r3, r0
 8009876:	461a      	mov	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	899b      	ldrh	r3, [r3, #12]
 800987c:	429a      	cmp	r2, r3
 800987e:	d001      	beq.n	8009884 <find_volume+0x1f0>
 8009880:	230d      	movs	r3, #13
 8009882:	e17d      	b.n	8009b80 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	3338      	adds	r3, #56	; 0x38
 8009888:	3316      	adds	r3, #22
 800988a:	4618      	mov	r0, r3
 800988c:	f7fd fe50 	bl	8007530 <ld_word>
 8009890:	4603      	mov	r3, r0
 8009892:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <find_volume+0x214>
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	3338      	adds	r3, #56	; 0x38
 800989e:	3324      	adds	r3, #36	; 0x24
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd fe5d 	bl	8007560 <ld_dword>
 80098a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	789b      	ldrb	r3, [r3, #2]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d005      	beq.n	80098cc <find_volume+0x238>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	789b      	ldrb	r3, [r3, #2]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d001      	beq.n	80098cc <find_volume+0x238>
 80098c8:	230d      	movs	r3, #13
 80098ca:	e159      	b.n	8009b80 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	789b      	ldrb	r3, [r3, #2]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d4:	fb02 f303 	mul.w	r3, r2, r3
 80098d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	895b      	ldrh	r3, [r3, #10]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <find_volume+0x26c>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	895b      	ldrh	r3, [r3, #10]
 80098f2:	461a      	mov	r2, r3
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	895b      	ldrh	r3, [r3, #10]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <find_volume+0x270>
 8009900:	230d      	movs	r3, #13
 8009902:	e13d      	b.n	8009b80 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	3338      	adds	r3, #56	; 0x38
 8009908:	3311      	adds	r3, #17
 800990a:	4618      	mov	r0, r3
 800990c:	f7fd fe10 	bl	8007530 <ld_word>
 8009910:	4603      	mov	r3, r0
 8009912:	461a      	mov	r2, r3
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	891b      	ldrh	r3, [r3, #8]
 800991c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800991e:	8992      	ldrh	r2, [r2, #12]
 8009920:	0952      	lsrs	r2, r2, #5
 8009922:	b292      	uxth	r2, r2
 8009924:	fbb3 f1f2 	udiv	r1, r3, r2
 8009928:	fb01 f202 	mul.w	r2, r1, r2
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	b29b      	uxth	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <find_volume+0x2a8>
 8009934:	230d      	movs	r3, #13
 8009936:	e123      	b.n	8009b80 <find_volume+0x4ec>
 8009938:	2000a5c8 	.word	0x2000a5c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	3338      	adds	r3, #56	; 0x38
 8009940:	3313      	adds	r3, #19
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd fdf4 	bl	8007530 <ld_word>
 8009948:	4603      	mov	r3, r0
 800994a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800994c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <find_volume+0x2cc>
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	3338      	adds	r3, #56	; 0x38
 8009956:	3320      	adds	r3, #32
 8009958:	4618      	mov	r0, r3
 800995a:	f7fd fe01 	bl	8007560 <ld_dword>
 800995e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	3338      	adds	r3, #56	; 0x38
 8009964:	330e      	adds	r3, #14
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd fde2 	bl	8007530 <ld_word>
 800996c:	4603      	mov	r3, r0
 800996e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <find_volume+0x2e6>
 8009976:	230d      	movs	r3, #13
 8009978:	e102      	b.n	8009b80 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800997a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800997c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997e:	4413      	add	r3, r2
 8009980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009982:	8911      	ldrh	r1, [r2, #8]
 8009984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009986:	8992      	ldrh	r2, [r2, #12]
 8009988:	0952      	lsrs	r2, r2, #5
 800998a:	b292      	uxth	r2, r2
 800998c:	fbb1 f2f2 	udiv	r2, r1, r2
 8009990:	b292      	uxth	r2, r2
 8009992:	4413      	add	r3, r2
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	429a      	cmp	r2, r3
 800999c:	d201      	bcs.n	80099a2 <find_volume+0x30e>
 800999e:	230d      	movs	r3, #13
 80099a0:	e0ee      	b.n	8009b80 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099aa:	8952      	ldrh	r2, [r2, #10]
 80099ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <find_volume+0x328>
 80099b8:	230d      	movs	r3, #13
 80099ba:	e0e1      	b.n	8009b80 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80099bc:	2303      	movs	r3, #3
 80099be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d802      	bhi.n	80099d2 <find_volume+0x33e>
 80099cc:	2302      	movs	r3, #2
 80099ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099d8:	4293      	cmp	r3, r2
 80099da:	d802      	bhi.n	80099e2 <find_volume+0x34e>
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	1c9a      	adds	r2, r3, #2
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80099f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f4:	441a      	add	r2, r3
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80099fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	441a      	add	r2, r3
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a08:	2b03      	cmp	r3, #3
 8009a0a:	d11e      	bne.n	8009a4a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	3338      	adds	r3, #56	; 0x38
 8009a10:	332a      	adds	r3, #42	; 0x2a
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fd fd8c 	bl	8007530 <ld_word>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <find_volume+0x38e>
 8009a1e:	230d      	movs	r3, #13
 8009a20:	e0ae      	b.n	8009b80 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	891b      	ldrh	r3, [r3, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <find_volume+0x39a>
 8009a2a:	230d      	movs	r3, #13
 8009a2c:	e0a8      	b.n	8009b80 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	3338      	adds	r3, #56	; 0x38
 8009a32:	332c      	adds	r3, #44	; 0x2c
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fd fd93 	bl	8007560 <ld_dword>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	647b      	str	r3, [r7, #68]	; 0x44
 8009a48:	e01f      	b.n	8009a8a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	891b      	ldrh	r3, [r3, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <find_volume+0x3c2>
 8009a52:	230d      	movs	r3, #13
 8009a54:	e094      	b.n	8009b80 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a5c:	441a      	add	r2, r3
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d103      	bne.n	8009a72 <find_volume+0x3de>
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	e00a      	b.n	8009a88 <find_volume+0x3f4>
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	69da      	ldr	r2, [r3, #28]
 8009a76:	4613      	mov	r3, r2
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4413      	add	r3, r2
 8009a7c:	085a      	lsrs	r2, r3, #1
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	69db      	ldr	r3, [r3, #28]
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a88:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	6a1a      	ldr	r2, [r3, #32]
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	899b      	ldrh	r3, [r3, #12]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a96:	440b      	add	r3, r1
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a9c:	8989      	ldrh	r1, [r1, #12]
 8009a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d201      	bcs.n	8009aaa <find_volume+0x416>
 8009aa6:	230d      	movs	r3, #13
 8009aa8:	e06a      	b.n	8009b80 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab0:	619a      	str	r2, [r3, #24]
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	2280      	movs	r2, #128	; 0x80
 8009abe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d149      	bne.n	8009b5c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	3338      	adds	r3, #56	; 0x38
 8009acc:	3330      	adds	r3, #48	; 0x30
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd fd2e 	bl	8007530 <ld_word>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d140      	bne.n	8009b5c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009adc:	3301      	adds	r3, #1
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ae2:	f7fd ffd5 	bl	8007a90 <move_window>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d137      	bne.n	8009b5c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aee:	2200      	movs	r2, #0
 8009af0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	3338      	adds	r3, #56	; 0x38
 8009af6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fd fd18 	bl	8007530 <ld_word>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d127      	bne.n	8009b5c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	3338      	adds	r3, #56	; 0x38
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fd fd25 	bl	8007560 <ld_dword>
 8009b16:	4603      	mov	r3, r0
 8009b18:	4a1b      	ldr	r2, [pc, #108]	; (8009b88 <find_volume+0x4f4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d11e      	bne.n	8009b5c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b20:	3338      	adds	r3, #56	; 0x38
 8009b22:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd fd1a 	bl	8007560 <ld_dword>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4a17      	ldr	r2, [pc, #92]	; (8009b8c <find_volume+0x4f8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d113      	bne.n	8009b5c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	3338      	adds	r3, #56	; 0x38
 8009b38:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fd fd0f 	bl	8007560 <ld_dword>
 8009b42:	4602      	mov	r2, r0
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	3338      	adds	r3, #56	; 0x38
 8009b4c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fd fd05 	bl	8007560 <ld_dword>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b62:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b64:	4b0a      	ldr	r3, [pc, #40]	; (8009b90 <find_volume+0x4fc>)
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	4b08      	ldr	r3, [pc, #32]	; (8009b90 <find_volume+0x4fc>)
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <find_volume+0x4fc>)
 8009b72:	881a      	ldrh	r2, [r3, #0]
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b7a:	f7fd ff21 	bl	80079c0 <clear_lock>
#endif
	return FR_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3758      	adds	r7, #88	; 0x58
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	41615252 	.word	0x41615252
 8009b8c:	61417272 	.word	0x61417272
 8009b90:	2000a5cc 	.word	0x2000a5cc

08009b94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b9e:	2309      	movs	r3, #9
 8009ba0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01c      	beq.n	8009be2 <validate+0x4e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d018      	beq.n	8009be2 <validate+0x4e>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d013      	beq.n	8009be2 <validate+0x4e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	889a      	ldrh	r2, [r3, #4]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	88db      	ldrh	r3, [r3, #6]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d10c      	bne.n	8009be2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	785b      	ldrb	r3, [r3, #1]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd fc10 	bl	80073f4 <disk_status>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <validate+0x4e>
			res = FR_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <validate+0x5a>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	e000      	b.n	8009bf0 <validate+0x5c>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	6013      	str	r3, [r2, #0]
	return res;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c12:	f107 0310 	add.w	r3, r7, #16
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7ff fca2 	bl	8009560 <get_ldnumber>
 8009c1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da01      	bge.n	8009c28 <f_mount+0x28>
 8009c24:	230b      	movs	r3, #11
 8009c26:	e02b      	b.n	8009c80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c28:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <f_mount+0x88>)
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d005      	beq.n	8009c44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c38:	69b8      	ldr	r0, [r7, #24]
 8009c3a:	f7fd fec1 	bl	80079c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	490d      	ldr	r1, [pc, #52]	; (8009c88 <f_mount+0x88>)
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <f_mount+0x66>
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d001      	beq.n	8009c6a <f_mount+0x6a>
 8009c66:	2300      	movs	r3, #0
 8009c68:	e00a      	b.n	8009c80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c6a:	f107 010c 	add.w	r1, r7, #12
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	2200      	movs	r2, #0
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff fd0d 	bl	8009694 <find_volume>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3720      	adds	r7, #32
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	2000a5c8 	.word	0x2000a5c8

08009c8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b09a      	sub	sp, #104	; 0x68
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <f_open+0x18>
 8009ca0:	2309      	movs	r3, #9
 8009ca2:	e1cb      	b.n	800a03c <f_open+0x3b0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009caa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009cac:	79fa      	ldrb	r2, [r7, #7]
 8009cae:	f107 0110 	add.w	r1, r7, #16
 8009cb2:	f107 0308 	add.w	r3, r7, #8
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fcec 	bl	8009694 <find_volume>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f040 81af 	bne.w	800a02a <f_open+0x39e>
		dj.obj.fs = fs;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009cd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009cd4:	f001 f9f4 	bl	800b0c0 <ff_memalloc>
 8009cd8:	65b8      	str	r0, [r7, #88]	; 0x58
 8009cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <f_open+0x58>
 8009ce0:	2311      	movs	r3, #17
 8009ce2:	e1ab      	b.n	800a03c <f_open+0x3b0>
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ce8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fbbe 	bl	8009474 <follow_path>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009cfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d11a      	bne.n	8009d3c <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d0a:	b25b      	sxtb	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da03      	bge.n	8009d18 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8009d10:	2306      	movs	r3, #6
 8009d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d16:	e011      	b.n	8009d3c <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d18:	79fb      	ldrb	r3, [r7, #7]
 8009d1a:	f023 0301 	bic.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bf14      	ite	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	2300      	moveq	r3, #0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	f107 0314 	add.w	r3, r7, #20
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fd fcfd 	bl	8007730 <chk_lock>
 8009d36:	4603      	mov	r3, r0
 8009d38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	f003 031c 	and.w	r3, r3, #28
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d07f      	beq.n	8009e46 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 8009d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d017      	beq.n	8009d7e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d10e      	bne.n	8009d74 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d56:	f7fd fd47 	bl	80077e8 <enq_lock>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d006      	beq.n	8009d6e <f_open+0xe2>
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe ffad 	bl	8008cc4 <dir_register>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	e000      	b.n	8009d70 <f_open+0xe4>
 8009d6e:	2312      	movs	r3, #18
 8009d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	f043 0308 	orr.w	r3, r3, #8
 8009d7a:	71fb      	strb	r3, [r7, #7]
 8009d7c:	e010      	b.n	8009da0 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d7e:	7ebb      	ldrb	r3, [r7, #26]
 8009d80:	f003 0311 	and.w	r3, r3, #17
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <f_open+0x104>
					res = FR_DENIED;
 8009d88:	2307      	movs	r3, #7
 8009d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d8e:	e007      	b.n	8009da0 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <f_open+0x114>
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009da0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d168      	bne.n	8009e7a <f_open+0x1ee>
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	f003 0308 	and.w	r3, r3, #8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d063      	beq.n	8009e7a <f_open+0x1ee>
				dw = GET_FATTIME();
 8009db2:	f7fd fac1 	bl	8007338 <get_fattime>
 8009db6:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	330e      	adds	r3, #14
 8009dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd fc0c 	bl	80075dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc6:	3316      	adds	r3, #22
 8009dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fd fc06 	bl	80075dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd2:	330b      	adds	r3, #11
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fbde 	bl	80085a0 <ld_clust>
 8009de4:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dea:	2200      	movs	r2, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fbf6 	bl	80085de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df4:	331c      	adds	r3, #28
 8009df6:	2100      	movs	r1, #0
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd fbef 	bl	80075dc <st_dword>
					fs->wflag = 1;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2201      	movs	r2, #1
 8009e02:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d037      	beq.n	8009e7a <f_open+0x1ee>
						dw = fs->winsect;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0e:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8009e10:	f107 0314 	add.w	r3, r7, #20
 8009e14:	2200      	movs	r2, #0
 8009e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe f8e6 	bl	8007fea <remove_chain>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009e24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d126      	bne.n	8009e7a <f_open+0x1ee>
							res = move_window(fs, dw);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fd fe2d 	bl	8007a90 <move_window>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e40:	3a01      	subs	r2, #1
 8009e42:	615a      	str	r2, [r3, #20]
 8009e44:	e019      	b.n	8009e7a <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d115      	bne.n	8009e7a <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e4e:	7ebb      	ldrb	r3, [r7, #26]
 8009e50:	f003 0310 	and.w	r3, r3, #16
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <f_open+0x1d4>
					res = FR_NO_FILE;
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009e5e:	e00c      	b.n	8009e7a <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e60:	79fb      	ldrb	r3, [r7, #7]
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d007      	beq.n	8009e7a <f_open+0x1ee>
 8009e6a:	7ebb      	ldrb	r3, [r7, #26]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <f_open+0x1ee>
						res = FR_DENIED;
 8009e74:	2307      	movs	r3, #7
 8009e76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d128      	bne.n	8009ed4 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	f003 0308 	and.w	r3, r3, #8
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <f_open+0x208>
				mode |= FA_MODIFIED;
 8009e8c:	79fb      	ldrb	r3, [r7, #7]
 8009e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e92:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ea2:	79fb      	ldrb	r3, [r7, #7]
 8009ea4:	f023 0301 	bic.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bf14      	ite	ne
 8009eac:	2301      	movne	r3, #1
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd fcb6 	bl	800782c <inc_lock>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d102      	bne.n	8009ed4 <f_open+0x248>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f040 80a3 	bne.w	800a024 <f_open+0x398>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fe fb5b 	bl	80085a0 <ld_clust>
 8009eea:	4602      	mov	r2, r0
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	331c      	adds	r3, #28
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fd fb33 	bl	8007560 <ld_dword>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	88da      	ldrh	r2, [r3, #6]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	79fa      	ldrb	r2, [r7, #7]
 8009f18:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3330      	adds	r3, #48	; 0x30
 8009f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd fb9d 	bl	8007676 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d06e      	beq.n	800a024 <f_open+0x398>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d06a      	beq.n	800a024 <f_open+0x398>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	895b      	ldrh	r3, [r3, #10]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	fb02 f303 	mul.w	r3, r2, r3
 8009f64:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f72:	e016      	b.n	8009fa2 <f_open+0x316>
					clst = get_fat(&fp->obj, clst);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fd fe46 	bl	8007c0a <get_fat>
 8009f7e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d802      	bhi.n	8009f8c <f_open+0x300>
 8009f86:	2302      	movs	r3, #2
 8009f88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f92:	d102      	bne.n	8009f9a <f_open+0x30e>
 8009f94:	2301      	movs	r3, #1
 8009f96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d103      	bne.n	8009fb2 <f_open+0x326>
 8009faa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d8e0      	bhi.n	8009f74 <f_open+0x2e8>
				}
				fp->clust = clst;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fb6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d131      	bne.n	800a024 <f_open+0x398>
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	899b      	ldrh	r3, [r3, #12]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fcc:	fb01 f202 	mul.w	r2, r1, r2
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d026      	beq.n	800a024 <f_open+0x398>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fdf6 	bl	8007bcc <clust2sect>
 8009fe0:	64b8      	str	r0, [r7, #72]	; 0x48
 8009fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <f_open+0x364>
						res = FR_INT_ERR;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009fee:	e019      	b.n	800a024 <f_open+0x398>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	899b      	ldrh	r3, [r3, #12]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ff8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ffe:	441a      	add	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	7858      	ldrb	r0, [r3, #1]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	2301      	movs	r3, #1
 800a014:	f7fd fa2e 	bl	8007474 <disk_read>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <f_open+0x398>
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a024:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a026:	f001 f857 	bl	800b0d8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a02a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <f_open+0x3ac>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3768      	adds	r7, #104	; 0x68
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08e      	sub	sp, #56	; 0x38
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f107 0214 	add.w	r2, r7, #20
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fd95 	bl	8009b94 <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <f_read+0x44>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	7d5b      	ldrb	r3, [r3, #21]
 800a07c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <f_read+0x4a>
 800a088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a08c:	e135      	b.n	800a2fa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <f_read+0x5a>
 800a09a:	2307      	movs	r3, #7
 800a09c:	e12d      	b.n	800a2fa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	f240 811e 	bls.w	800a2f0 <f_read+0x2ac>
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0b8:	e11a      	b.n	800a2f0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	8992      	ldrh	r2, [r2, #12]
 800a0c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c6:	fb01 f202 	mul.w	r2, r1, r2
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 80d5 	bne.w	800a27c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	8992      	ldrh	r2, [r2, #12]
 800a0da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	8952      	ldrh	r2, [r2, #10]
 800a0e2:	3a01      	subs	r2, #1
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d12f      	bne.n	800a14e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d103      	bne.n	800a0fe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a0fc:	e013      	b.n	800a126 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7fe f869 	bl	80081e4 <clmt_clust>
 800a112:	6338      	str	r0, [r7, #48]	; 0x30
 800a114:	e007      	b.n	800a126 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fd fd73 	bl	8007c0a <get_fat>
 800a124:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d804      	bhi.n	800a136 <f_read+0xf2>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2202      	movs	r2, #2
 800a130:	755a      	strb	r2, [r3, #21]
 800a132:	2302      	movs	r3, #2
 800a134:	e0e1      	b.n	800a2fa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a13c:	d104      	bne.n	800a148 <f_read+0x104>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	755a      	strb	r2, [r3, #21]
 800a144:	2301      	movs	r3, #1
 800a146:	e0d8      	b.n	800a2fa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a14c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	69db      	ldr	r3, [r3, #28]
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fd fd38 	bl	8007bcc <clust2sect>
 800a15c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <f_read+0x12a>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2202      	movs	r2, #2
 800a168:	755a      	strb	r2, [r3, #21]
 800a16a:	2302      	movs	r3, #2
 800a16c:	e0c5      	b.n	800a2fa <f_read+0x2b6>
			sect += csect;
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	4413      	add	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	899b      	ldrh	r3, [r3, #12]
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d041      	beq.n	800a20e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	4413      	add	r3, r2
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	8952      	ldrh	r2, [r2, #10]
 800a194:	4293      	cmp	r3, r2
 800a196:	d905      	bls.n	800a1a4 <f_read+0x160>
					cc = fs->csize - csect;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	895b      	ldrh	r3, [r3, #10]
 800a19c:	461a      	mov	r2, r3
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	7858      	ldrb	r0, [r3, #1]
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ae:	f7fd f961 	bl	8007474 <disk_read>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <f_read+0x17e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	755a      	strb	r2, [r3, #21]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e09b      	b.n	800a2fa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	7d1b      	ldrb	r3, [r3, #20]
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	da18      	bge.n	800a1fe <f_read+0x1ba>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1a      	ldr	r2, [r3, #32]
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d911      	bls.n	800a1fe <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1a      	ldr	r2, [r3, #32]
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	8992      	ldrh	r2, [r2, #12]
 800a1e6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ec:	18d0      	adds	r0, r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	899b      	ldrh	r3, [r3, #12]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	f7fd fa1b 	bl	8007634 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	899b      	ldrh	r3, [r3, #12]
 800a202:	461a      	mov	r2, r3
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a20c:	e05c      	b.n	800a2c8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	429a      	cmp	r2, r3
 800a216:	d02e      	beq.n	800a276 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	7d1b      	ldrb	r3, [r3, #20]
 800a21c:	b25b      	sxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da18      	bge.n	800a254 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	7858      	ldrb	r0, [r3, #1]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6a1a      	ldr	r2, [r3, #32]
 800a230:	2301      	movs	r3, #1
 800a232:	f7fd f93f 	bl	80074b4 <disk_write>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <f_read+0x202>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	755a      	strb	r2, [r3, #21]
 800a242:	2301      	movs	r3, #1
 800a244:	e059      	b.n	800a2fa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7d1b      	ldrb	r3, [r3, #20]
 800a24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	7858      	ldrb	r0, [r3, #1]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a25e:	2301      	movs	r3, #1
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	f7fd f907 	bl	8007474 <disk_read>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <f_read+0x232>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2201      	movs	r2, #1
 800a270:	755a      	strb	r2, [r3, #21]
 800a272:	2301      	movs	r3, #1
 800a274:	e041      	b.n	800a2fa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	899b      	ldrh	r3, [r3, #12]
 800a280:	4618      	mov	r0, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	8992      	ldrh	r2, [r2, #12]
 800a28a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a28e:	fb01 f202 	mul.w	r2, r1, r2
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	1ac3      	subs	r3, r0, r3
 800a296:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d901      	bls.n	800a2a4 <f_read+0x260>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	8992      	ldrh	r2, [r2, #12]
 800a2b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2b6:	fb00 f202 	mul.w	r2, r0, r2
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	440b      	add	r3, r1
 800a2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2c4:	f7fd f9b6 	bl	8007634 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	4413      	add	r3, r2
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699a      	ldr	r2, [r3, #24]
 800a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	619a      	str	r2, [r3, #24]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	441a      	add	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	1ad3      	subs	r3, r2, r3
 800a2ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f47f aee1 	bne.w	800a0ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3738      	adds	r7, #56	; 0x38
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b08c      	sub	sp, #48	; 0x30
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f107 0210 	add.w	r2, r7, #16
 800a320:	4611      	mov	r1, r2
 800a322:	4618      	mov	r0, r3
 800a324:	f7ff fc36 	bl	8009b94 <validate>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a332:	2b00      	cmp	r3, #0
 800a334:	d107      	bne.n	800a346 <f_write+0x44>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	7d5b      	ldrb	r3, [r3, #21]
 800a33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a33e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <f_write+0x4a>
 800a346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a34a:	e16a      	b.n	800a622 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	7d1b      	ldrb	r3, [r3, #20]
 800a350:	f003 0302 	and.w	r3, r3, #2
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <f_write+0x5a>
 800a358:	2307      	movs	r3, #7
 800a35a:	e162      	b.n	800a622 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	699a      	ldr	r2, [r3, #24]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	441a      	add	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	429a      	cmp	r2, r3
 800a36a:	f080 814c 	bcs.w	800a606 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	43db      	mvns	r3, r3
 800a374:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a376:	e146      	b.n	800a606 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	8992      	ldrh	r2, [r2, #12]
 800a380:	fbb3 f1f2 	udiv	r1, r3, r2
 800a384:	fb01 f202 	mul.w	r2, r1, r2
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f040 80f1 	bne.w	800a572 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	8992      	ldrh	r2, [r2, #12]
 800a398:	fbb3 f3f2 	udiv	r3, r3, r2
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	8952      	ldrh	r2, [r2, #10]
 800a3a0:	3a01      	subs	r2, #1
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d143      	bne.n	800a434 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10c      	bne.n	800a3ce <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d11a      	bne.n	800a3f6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd fe75 	bl	80080b4 <create_chain>
 800a3ca:	62b8      	str	r0, [r7, #40]	; 0x28
 800a3cc:	e013      	b.n	800a3f6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fd ff01 	bl	80081e4 <clmt_clust>
 800a3e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800a3e4:	e007      	b.n	800a3f6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7fd fe60 	bl	80080b4 <create_chain>
 800a3f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8109 	beq.w	800a610 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	2b01      	cmp	r3, #1
 800a402:	d104      	bne.n	800a40e <f_write+0x10c>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2202      	movs	r2, #2
 800a408:	755a      	strb	r2, [r3, #21]
 800a40a:	2302      	movs	r3, #2
 800a40c:	e109      	b.n	800a622 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a414:	d104      	bne.n	800a420 <f_write+0x11e>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	755a      	strb	r2, [r3, #21]
 800a41c:	2301      	movs	r3, #1
 800a41e:	e100      	b.n	800a622 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a424:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <f_write+0x132>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a432:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	da18      	bge.n	800a470 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	7858      	ldrb	r0, [r3, #1]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a1a      	ldr	r2, [r3, #32]
 800a44c:	2301      	movs	r3, #1
 800a44e:	f7fd f831 	bl	80074b4 <disk_write>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d004      	beq.n	800a462 <f_write+0x160>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	755a      	strb	r2, [r3, #21]
 800a45e:	2301      	movs	r3, #1
 800a460:	e0df      	b.n	800a622 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	7d1b      	ldrb	r3, [r3, #20]
 800a466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	4619      	mov	r1, r3
 800a478:	4610      	mov	r0, r2
 800a47a:	f7fd fba7 	bl	8007bcc <clust2sect>
 800a47e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d104      	bne.n	800a490 <f_write+0x18e>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2202      	movs	r2, #2
 800a48a:	755a      	strb	r2, [r3, #21]
 800a48c:	2302      	movs	r3, #2
 800a48e:	e0c8      	b.n	800a622 <f_write+0x320>
			sect += csect;
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	4413      	add	r3, r2
 800a496:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	899b      	ldrh	r3, [r3, #12]
 800a49c:	461a      	mov	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d043      	beq.n	800a534 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	8952      	ldrh	r2, [r2, #10]
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d905      	bls.n	800a4c6 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	895b      	ldrh	r3, [r3, #10]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	7858      	ldrb	r0, [r3, #1]
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	69f9      	ldr	r1, [r7, #28]
 800a4d0:	f7fc fff0 	bl	80074b4 <disk_write>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <f_write+0x1e2>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	755a      	strb	r2, [r3, #21]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e09e      	b.n	800a622 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a1a      	ldr	r2, [r3, #32]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	6a3a      	ldr	r2, [r7, #32]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d918      	bls.n	800a524 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a1a      	ldr	r2, [r3, #32]
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	8992      	ldrh	r2, [r2, #12]
 800a504:	fb02 f303 	mul.w	r3, r2, r3
 800a508:	69fa      	ldr	r2, [r7, #28]
 800a50a:	18d1      	adds	r1, r2, r3
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	899b      	ldrh	r3, [r3, #12]
 800a510:	461a      	mov	r2, r3
 800a512:	f7fd f88f 	bl	8007634 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	7d1b      	ldrb	r3, [r3, #20]
 800a51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	899b      	ldrh	r3, [r3, #12]
 800a528:	461a      	mov	r2, r3
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a532:	e04b      	b.n	800a5cc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d016      	beq.n	800a56c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a546:	429a      	cmp	r2, r3
 800a548:	d210      	bcs.n	800a56c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	7858      	ldrb	r0, [r3, #1]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a554:	2301      	movs	r3, #1
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	f7fc ff8c 	bl	8007474 <disk_read>
 800a55c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	755a      	strb	r2, [r3, #21]
 800a568:	2301      	movs	r3, #1
 800a56a:	e05a      	b.n	800a622 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	899b      	ldrh	r3, [r3, #12]
 800a576:	4618      	mov	r0, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	8992      	ldrh	r2, [r2, #12]
 800a580:	fbb3 f1f2 	udiv	r1, r3, r2
 800a584:	fb01 f202 	mul.w	r2, r1, r2
 800a588:	1a9b      	subs	r3, r3, r2
 800a58a:	1ac3      	subs	r3, r0, r3
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d901      	bls.n	800a59a <f_write+0x298>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	8992      	ldrh	r2, [r2, #12]
 800a5a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5ac:	fb00 f202 	mul.w	r2, r0, r2
 800a5b0:	1a9b      	subs	r3, r3, r2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b6:	69f9      	ldr	r1, [r7, #28]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fd f83b 	bl	8007634 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	7d1b      	ldrb	r3, [r3, #20]
 800a5c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	4413      	add	r3, r2
 800a5d2:	61fb      	str	r3, [r7, #28]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	441a      	add	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	619a      	str	r2, [r3, #24]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	bf38      	it	cc
 800a5ec:	461a      	movcc	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	60da      	str	r2, [r3, #12]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	441a      	add	r2, r3
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f47f aeb5 	bne.w	800a378 <f_write+0x76>
 800a60e:	e000      	b.n	800a612 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a610:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	7d1b      	ldrb	r3, [r3, #20]
 800a616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3730      	adds	r7, #48	; 0x30
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f107 0208 	add.w	r2, r7, #8
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7ff faaa 	bl	8009b94 <validate>
 800a640:	4603      	mov	r3, r0
 800a642:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d168      	bne.n	800a71c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	7d1b      	ldrb	r3, [r3, #20]
 800a64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a652:	2b00      	cmp	r3, #0
 800a654:	d062      	beq.n	800a71c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	7d1b      	ldrb	r3, [r3, #20]
 800a65a:	b25b      	sxtb	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da15      	bge.n	800a68c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	7858      	ldrb	r0, [r3, #1]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1a      	ldr	r2, [r3, #32]
 800a66e:	2301      	movs	r3, #1
 800a670:	f7fc ff20 	bl	80074b4 <disk_write>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <f_sync+0x54>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e04f      	b.n	800a71e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	7d1b      	ldrb	r3, [r3, #20]
 800a682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a686:	b2da      	uxtb	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a68c:	f7fc fe54 	bl	8007338 <get_fattime>
 800a690:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f7fd f9f8 	bl	8007a90 <move_window>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d138      	bne.n	800a71c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	330b      	adds	r3, #11
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	330b      	adds	r3, #11
 800a6ba:	f042 0220 	orr.w	r2, r2, #32
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68f9      	ldr	r1, [r7, #12]
 800a6ce:	f7fd ff86 	bl	80085de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f103 021c 	add.w	r2, r3, #28
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f7fc ff7c 	bl	80075dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3316      	adds	r3, #22
 800a6e8:	6939      	ldr	r1, [r7, #16]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fc ff76 	bl	80075dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3312      	adds	r3, #18
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fc ff55 	bl	80075a6 <st_word>
					fs->wflag = 1;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2201      	movs	r2, #1
 800a700:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	4618      	mov	r0, r3
 800a706:	f7fd f9f1 	bl	8007aec <sync_fs>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7d1b      	ldrb	r3, [r3, #20]
 800a712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a716:	b2da      	uxtb	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff ff7b 	bl	800a62a <f_sync>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d118      	bne.n	800a770 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f107 0208 	add.w	r2, r7, #8
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fa24 	bl	8009b94 <validate>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10c      	bne.n	800a770 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fd f8f4 	bl	8007948 <dec_lock>
 800a760:	4603      	mov	r3, r0
 800a762:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <f_opendir+0x14>
 800a78a:	2309      	movs	r3, #9
 800a78c:	e074      	b.n	800a878 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a792:	f107 0108 	add.w	r1, r7, #8
 800a796:	463b      	mov	r3, r7
 800a798:	2200      	movs	r2, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe ff7a 	bl	8009694 <find_volume>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d15f      	bne.n	800a86a <f_opendir+0xf0>
		obj->fs = fs;
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a7b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a7b4:	f000 fc84 	bl	800b0c0 <ff_memalloc>
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <f_opendir+0x4a>
 800a7c0:	2311      	movs	r3, #17
 800a7c2:	e059      	b.n	800a878 <f_opendir+0xfe>
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7fe fe50 	bl	8009474 <follow_path>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d13d      	bne.n	800a85a <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	db12      	blt.n	800a810 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	799b      	ldrb	r3, [r3, #6]
 800a7ee:	f003 0310 	and.w	r3, r3, #16
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fd fece 	bl	80085a0 <ld_clust>
 800a804:	4602      	mov	r2, r0
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	609a      	str	r2, [r3, #8]
 800a80a:	e001      	b.n	800a810 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a80c:	2305      	movs	r3, #5
 800a80e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d121      	bne.n	800a85a <f_opendir+0xe0>
				obj->id = fs->id;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	88da      	ldrh	r2, [r3, #6]
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a81e:	2100      	movs	r1, #0
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7fd fd17 	bl	8008254 <dir_sdi>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d114      	bne.n	800a85a <f_opendir+0xe0>
					if (obj->sclust) {
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00d      	beq.n	800a854 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a838:	2100      	movs	r1, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7fc fff6 	bl	800782c <inc_lock>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d105      	bne.n	800a85a <f_opendir+0xe0>
 800a84e:	2312      	movs	r3, #18
 800a850:	75fb      	strb	r3, [r7, #23]
 800a852:	e002      	b.n	800a85a <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2200      	movs	r2, #0
 800a858:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fc3c 	bl	800b0d8 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	2b04      	cmp	r3, #4
 800a864:	d101      	bne.n	800a86a <f_opendir+0xf0>
 800a866:	2305      	movs	r3, #5
 800a868:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <f_opendir+0xfc>
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a876:	7dfb      	ldrb	r3, [r7, #23]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f107 020c 	add.w	r2, r7, #12
 800a890:	4611      	mov	r1, r2
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff f97e 	bl	8009b94 <validate>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d136      	bne.n	800a910 <f_readdir+0x90>
		if (!fno) {
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d106      	bne.n	800a8b6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fd fcd2 	bl	8008254 <dir_sdi>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	75fb      	strb	r3, [r7, #23]
 800a8b4:	e02c      	b.n	800a910 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 800a8b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a8ba:	f000 fc01 	bl	800b0c0 <ff_memalloc>
 800a8be:	6138      	str	r0, [r7, #16]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <f_readdir+0x4a>
 800a8c6:	2311      	movs	r3, #17
 800a8c8:	e023      	b.n	800a912 <f_readdir+0x92>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	611a      	str	r2, [r3, #16]
			res = dir_read(dp, 0);			/* Read an item */
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7fe f88f 	bl	80089f6 <dir_read>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d101      	bne.n	800a8e6 <f_readdir+0x66>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10e      	bne.n	800a90a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fe fb2a 	bl	8008f48 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fd fd35 	bl	8008366 <dir_next>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	2b04      	cmp	r3, #4
 800a904:	d101      	bne.n	800a90a <f_readdir+0x8a>
 800a906:	2300      	movs	r3, #0
 800a908:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800a90a:	6938      	ldr	r0, [r7, #16]
 800a90c:	f000 fbe4 	bl	800b0d8 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b0a0      	sub	sp, #128	; 0x80
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a926:	f107 0108 	add.w	r1, r7, #8
 800a92a:	1d3b      	adds	r3, r7, #4
 800a92c:	2202      	movs	r2, #2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe feb0 	bl	8009694 <find_volume>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800a93e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a942:	2b00      	cmp	r3, #0
 800a944:	f040 809e 	bne.w	800aa84 <f_unlink+0x16a>
		INIT_NAMBUF(fs);
 800a948:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a94c:	f000 fbb8 	bl	800b0c0 <ff_memalloc>
 800a950:	6778      	str	r0, [r7, #116]	; 0x74
 800a952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <f_unlink+0x42>
 800a958:	2311      	movs	r3, #17
 800a95a:	e095      	b.n	800aa88 <f_unlink+0x16e>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a960:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fd82 	bl	8009474 <follow_path>
 800a970:	4603      	mov	r3, r0
 800a972:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a976:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d108      	bne.n	800a990 <f_unlink+0x76>
 800a97e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a982:	2102      	movs	r1, #2
 800a984:	4618      	mov	r0, r3
 800a986:	f7fc fed3 	bl	8007730 <chk_lock>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a990:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a994:	2b00      	cmp	r3, #0
 800a996:	d172      	bne.n	800aa7e <f_unlink+0x164>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a998:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da03      	bge.n	800a9aa <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a9a2:	2306      	movs	r3, #6
 800a9a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a9a8:	e008      	b.n	800a9bc <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a9aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a9b6:	2307      	movs	r3, #7
 800a9b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800a9bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d134      	bne.n	800aa2e <f_unlink+0x114>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fde8 	bl	80085a0 <ld_clust>
 800a9d0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a9d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d027      	beq.n	800aa2e <f_unlink+0x114>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 800a9e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9e4:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a9e6:	f107 030c 	add.w	r3, r7, #12
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fd fc31 	bl	8008254 <dir_sdi>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800a9f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d116      	bne.n	800aa2e <f_unlink+0x114>
							res = dir_read(&sdj, 0);			/* Read an item */
 800aa00:	f107 030c 	add.w	r3, r7, #12
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fd fff5 	bl	80089f6 <dir_read>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800aa12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <f_unlink+0x106>
 800aa1a:	2307      	movs	r3, #7
 800aa1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800aa20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d102      	bne.n	800aa2e <f_unlink+0x114>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800aa2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d123      	bne.n	800aa7e <f_unlink+0x164>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800aa36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fa3a 	bl	8008eb4 <dir_remove>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800aa46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10c      	bne.n	800aa68 <f_unlink+0x14e>
 800aa4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <f_unlink+0x14e>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800aa54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa58:	2200      	movs	r2, #0
 800aa5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fd fac4 	bl	8007fea <remove_chain>
 800aa62:	4603      	mov	r3, r0
 800aa64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800aa68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <f_unlink+0x164>
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fd f83a 	bl	8007aec <sync_fs>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
 800aa7e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aa80:	f000 fb2a 	bl	800b0d8 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800aa84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3780      	adds	r7, #128	; 0x80
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b098      	sub	sp, #96	; 0x60
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	1d3b      	adds	r3, r7, #4
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe fdf7 	bl	8009694 <find_volume>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800aab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 8102 	bne.w	800acbe <f_mkdir+0x22e>
		INIT_NAMBUF(fs);
 800aaba:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aabe:	f000 faff 	bl	800b0c0 <ff_memalloc>
 800aac2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <f_mkdir+0x3e>
 800aaca:	2311      	movs	r3, #17
 800aacc:	e0f9      	b.n	800acc2 <f_mkdir+0x232>
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aad2:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	f107 030c 	add.w	r3, r7, #12
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fcc9 	bl	8009474 <follow_path>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800aae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <f_mkdir+0x66>
 800aaf0:	2308      	movs	r3, #8
 800aaf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800aaf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	f040 80dc 	bne.w	800acb8 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ab00:	f107 030c 	add.w	r3, r7, #12
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fd fad4 	bl	80080b4 <create_chain>
 800ab0c:	64b8      	str	r0, [r7, #72]	; 0x48
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	895b      	ldrh	r3, [r3, #10]
 800ab12:	461a      	mov	r2, r3
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	899b      	ldrh	r3, [r3, #12]
 800ab18:	fb02 f303 	mul.w	r3, r2, r3
 800ab1c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ab24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <f_mkdir+0xa0>
 800ab2a:	2307      	movs	r3, #7
 800ab2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800ab30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d102      	bne.n	800ab3c <f_mkdir+0xac>
 800ab36:	2302      	movs	r3, #2
 800ab38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ab3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab42:	d102      	bne.n	800ab4a <f_mkdir+0xba>
 800ab44:	2301      	movs	r3, #1
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <f_mkdir+0xd0>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fc ff57 	bl	8007a08 <sync_window>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800ab60:	f7fc fbea 	bl	8007338 <get_fattime>
 800ab64:	6478      	str	r0, [r7, #68]	; 0x44
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ab66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d16c      	bne.n	800ac48 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fd f82a 	bl	8007bcc <clust2sect>
 800ab78:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3338      	adds	r3, #56	; 0x38
 800ab7e:	643b      	str	r3, [r7, #64]	; 0x40
				mem_set(dir, 0, SS(fs));
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	899b      	ldrh	r3, [r3, #12]
 800ab84:	461a      	mov	r2, r3
 800ab86:	2100      	movs	r1, #0
 800ab88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ab8a:	f7fc fd74 	bl	8007676 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ab8e:	220b      	movs	r2, #11
 800ab90:	2120      	movs	r1, #32
 800ab92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ab94:	f7fc fd6f 	bl	8007676 <mem_set>
					dir[DIR_Name] = '.';
 800ab98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab9a:	222e      	movs	r2, #46	; 0x2e
 800ab9c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ab9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba0:	330b      	adds	r3, #11
 800aba2:	2210      	movs	r2, #16
 800aba4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800aba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba8:	3316      	adds	r3, #22
 800abaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abac:	4618      	mov	r0, r3
 800abae:	f7fc fd15 	bl	80075dc <st_dword>
					st_clust(fs, dir, dcl);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fd fd10 	bl	80085de <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800abbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc0:	3320      	adds	r3, #32
 800abc2:	2220      	movs	r2, #32
 800abc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fd34 	bl	8007634 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800abcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abce:	3321      	adds	r3, #33	; 0x21
 800abd0:	222e      	movs	r2, #46	; 0x2e
 800abd2:	701a      	strb	r2, [r3, #0]
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d106      	bne.n	800abee <f_mkdir+0x15e>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d101      	bne.n	800abee <f_mkdir+0x15e>
 800abea:	2300      	movs	r3, #0
 800abec:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf2:	3320      	adds	r3, #32
 800abf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abf6:	4619      	mov	r1, r3
 800abf8:	f7fd fcf1 	bl	80085de <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	895b      	ldrh	r3, [r3, #10]
 800ac00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac02:	e01c      	b.n	800ac3e <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800ac04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	657a      	str	r2, [r7, #84]	; 0x54
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2201      	movs	r2, #1
 800ac12:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fc fef6 	bl	8007a08 <sync_window>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800ac22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10d      	bne.n	800ac46 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	899b      	ldrh	r3, [r3, #12]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	2100      	movs	r1, #0
 800ac32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ac34:	f7fc fd1f 	bl	8007676 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ac38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1df      	bne.n	800ac04 <f_mkdir+0x174>
 800ac44:	e000      	b.n	800ac48 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800ac46:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ac48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe f835 	bl	8008cc4 <dir_register>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800ac60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d120      	bne.n	800acaa <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	643b      	str	r3, [r7, #64]	; 0x40
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6e:	3316      	adds	r3, #22
 800ac70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fc fcb2 	bl	80075dc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fd fcad 	bl	80085de <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ac84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac86:	330b      	adds	r3, #11
 800ac88:	2210      	movs	r2, #16
 800ac8a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ac92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10e      	bne.n	800acb8 <f_mkdir+0x228>
					res = sync_fs(fs);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fc ff25 	bl	8007aec <sync_fs>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aca8:	e006      	b.n	800acb8 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800acaa:	f107 030c 	add.w	r3, r7, #12
 800acae:	2200      	movs	r2, #0
 800acb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fd f999 	bl	8007fea <remove_chain>
			}
		}
		FREE_NAMBUF();
 800acb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800acba:	f000 fa0d 	bl	800b0d8 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800acbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3760      	adds	r7, #96	; 0x60
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b088      	sub	sp, #32
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800acde:	e01b      	b.n	800ad18 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ace0:	f107 0310 	add.w	r3, r7, #16
 800ace4:	f107 0114 	add.w	r1, r7, #20
 800ace8:	2201      	movs	r2, #1
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff f9aa 	bl	800a044 <f_read>
		if (rc != 1) break;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d116      	bne.n	800ad24 <f_gets+0x5a>
		c = s[0];
 800acf6:	7d3b      	ldrb	r3, [r7, #20]
 800acf8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b0d      	cmp	r3, #13
 800acfe:	d100      	bne.n	800ad02 <f_gets+0x38>
 800ad00:	e00a      	b.n	800ad18 <f_gets+0x4e>
		*p++ = c;
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	61ba      	str	r2, [r7, #24]
 800ad08:	7dfa      	ldrb	r2, [r7, #23]
 800ad0a:	701a      	strb	r2, [r3, #0]
		n++;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	2b0a      	cmp	r3, #10
 800ad16:	d007      	beq.n	800ad28 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	dbde      	blt.n	800ace0 <f_gets+0x16>
 800ad22:	e002      	b.n	800ad2a <f_gets+0x60>
		if (rc != 1) break;
 800ad24:	bf00      	nop
 800ad26:	e000      	b.n	800ad2a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ad28:	bf00      	nop
	}
	*p = 0;
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <f_gets+0x70>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	e000      	b.n	800ad3c <f_gets+0x72>
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	2b0a      	cmp	r3, #10
 800ad54:	d103      	bne.n	800ad5e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ad56:	210d      	movs	r1, #13
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff fff3 	bl	800ad44 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	db25      	blt.n	800adb6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	60fa      	str	r2, [r7, #12]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b3c      	cmp	r3, #60	; 0x3c
 800ad7c:	dd12      	ble.n	800ada4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f103 010c 	add.w	r1, r3, #12
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	f107 0308 	add.w	r3, r7, #8
 800ad8e:	f7ff fab8 	bl	800a302 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d101      	bne.n	800ad9e <putc_bfd+0x5a>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e001      	b.n	800ada2 <putc_bfd+0x5e>
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ada2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	609a      	str	r2, [r3, #8]
 800adb4:	e000      	b.n	800adb8 <putc_bfd+0x74>
	if (i < 0) return;
 800adb6:	bf00      	nop
}
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	db16      	blt.n	800adfc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f103 010c 	add.w	r1, r3, #12
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	461a      	mov	r2, r3
 800adde:	f107 030c 	add.w	r3, r7, #12
 800ade2:	f7ff fa8e 	bl	800a302 <f_write>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d107      	bne.n	800adfc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d102      	bne.n	800adfc <putc_flush+0x3e>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	e001      	b.n	800ae00 <putc_flush+0x42>
	return EOF;
 800adfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	609a      	str	r2, [r3, #8]
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b096      	sub	sp, #88	; 0x58
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ae3c:	f107 030c 	add.w	r3, r7, #12
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff ffe0 	bl	800ae08 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ae48:	e009      	b.n	800ae5e <f_puts+0x2c>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	781a      	ldrb	r2, [r3, #0]
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4611      	mov	r1, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ff73 	bl	800ad44 <putc_bfd>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1f1      	bne.n	800ae4a <f_puts+0x18>
	return putc_flush(&pb);
 800ae66:	f107 030c 	add.w	r3, r7, #12
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff ffa7 	bl	800adbe <putc_flush>
 800ae70:	4603      	mov	r3, r0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3758      	adds	r7, #88	; 0x58
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b087      	sub	sp, #28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	4613      	mov	r3, r2
 800ae88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae92:	4b1f      	ldr	r3, [pc, #124]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800ae94:	7a5b      	ldrb	r3, [r3, #9]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d131      	bne.n	800af00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae9c:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800ae9e:	7a5b      	ldrb	r3, [r3, #9]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	461a      	mov	r2, r3
 800aea4:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aea6:	2100      	movs	r1, #0
 800aea8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aeaa:	4b19      	ldr	r3, [pc, #100]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aeac:	7a5b      	ldrb	r3, [r3, #9]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	4a17      	ldr	r2, [pc, #92]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aeba:	4b15      	ldr	r3, [pc, #84]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aebc:	7a5b      	ldrb	r3, [r3, #9]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aec4:	4413      	add	r3, r2
 800aec6:	79fa      	ldrb	r2, [r7, #7]
 800aec8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aeca:	4b11      	ldr	r3, [pc, #68]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aecc:	7a5b      	ldrb	r3, [r3, #9]
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	b2d1      	uxtb	r1, r2
 800aed4:	4a0e      	ldr	r2, [pc, #56]	; (800af10 <FATFS_LinkDriverEx+0x94>)
 800aed6:	7251      	strb	r1, [r2, #9]
 800aed8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aeda:	7dbb      	ldrb	r3, [r7, #22]
 800aedc:	3330      	adds	r3, #48	; 0x30
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	3301      	adds	r3, #1
 800aee8:	223a      	movs	r2, #58	; 0x3a
 800aeea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	3302      	adds	r3, #2
 800aef0:	222f      	movs	r2, #47	; 0x2f
 800aef2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	3303      	adds	r3, #3
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af00:	7dfb      	ldrb	r3, [r7, #23]
}
 800af02:	4618      	mov	r0, r3
 800af04:	371c      	adds	r7, #28
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	2000a5f0 	.word	0x2000a5f0

0800af14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800af1e:	2200      	movs	r2, #0
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ffaa 	bl	800ae7c <FATFS_LinkDriverEx>
 800af28:	4603      	mov	r3, r0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
	...

0800af34 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800af40:	88fb      	ldrh	r3, [r7, #6]
 800af42:	2b7f      	cmp	r3, #127	; 0x7f
 800af44:	d802      	bhi.n	800af4c <ff_convert+0x18>
		c = chr;
 800af46:	88fb      	ldrh	r3, [r7, #6]
 800af48:	81fb      	strh	r3, [r7, #14]
 800af4a:	e025      	b.n	800af98 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	2bff      	cmp	r3, #255	; 0xff
 800af56:	d805      	bhi.n	800af64 <ff_convert+0x30>
 800af58:	88fb      	ldrh	r3, [r7, #6]
 800af5a:	3b80      	subs	r3, #128	; 0x80
 800af5c:	4a12      	ldr	r2, [pc, #72]	; (800afa8 <ff_convert+0x74>)
 800af5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af62:	e000      	b.n	800af66 <ff_convert+0x32>
 800af64:	2300      	movs	r3, #0
 800af66:	81fb      	strh	r3, [r7, #14]
 800af68:	e016      	b.n	800af98 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800af6a:	2300      	movs	r3, #0
 800af6c:	81fb      	strh	r3, [r7, #14]
 800af6e:	e009      	b.n	800af84 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800af70:	89fb      	ldrh	r3, [r7, #14]
 800af72:	4a0d      	ldr	r2, [pc, #52]	; (800afa8 <ff_convert+0x74>)
 800af74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af78:	88fa      	ldrh	r2, [r7, #6]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d006      	beq.n	800af8c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800af7e:	89fb      	ldrh	r3, [r7, #14]
 800af80:	3301      	adds	r3, #1
 800af82:	81fb      	strh	r3, [r7, #14]
 800af84:	89fb      	ldrh	r3, [r7, #14]
 800af86:	2b7f      	cmp	r3, #127	; 0x7f
 800af88:	d9f2      	bls.n	800af70 <ff_convert+0x3c>
 800af8a:	e000      	b.n	800af8e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800af8c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800af8e:	89fb      	ldrh	r3, [r7, #14]
 800af90:	3380      	adds	r3, #128	; 0x80
 800af92:	b29b      	uxth	r3, r3
 800af94:	b2db      	uxtb	r3, r3
 800af96:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800af98:	89fb      	ldrh	r3, [r7, #14]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	0800f8c4 	.word	0x0800f8c4

0800afac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800afac:	b480      	push	{r7}
 800afae:	b087      	sub	sp, #28
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	4603      	mov	r3, r0
 800afb4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800afb6:	88fb      	ldrh	r3, [r7, #6]
 800afb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afbc:	d201      	bcs.n	800afc2 <ff_wtoupper+0x16>
 800afbe:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <ff_wtoupper+0x10c>)
 800afc0:	e000      	b.n	800afc4 <ff_wtoupper+0x18>
 800afc2:	4b3e      	ldr	r3, [pc, #248]	; (800b0bc <ff_wtoupper+0x110>)
 800afc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	1c9a      	adds	r2, r3, #2
 800afca:	617a      	str	r2, [r7, #20]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800afd0:	8a7b      	ldrh	r3, [r7, #18]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d068      	beq.n	800b0a8 <ff_wtoupper+0xfc>
 800afd6:	88fa      	ldrh	r2, [r7, #6]
 800afd8:	8a7b      	ldrh	r3, [r7, #18]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d364      	bcc.n	800b0a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	1c9a      	adds	r2, r3, #2
 800afe2:	617a      	str	r2, [r7, #20]
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	823b      	strh	r3, [r7, #16]
 800afe8:	8a3b      	ldrh	r3, [r7, #16]
 800afea:	0a1b      	lsrs	r3, r3, #8
 800afec:	81fb      	strh	r3, [r7, #14]
 800afee:	8a3b      	ldrh	r3, [r7, #16]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800aff4:	88fa      	ldrh	r2, [r7, #6]
 800aff6:	8a79      	ldrh	r1, [r7, #18]
 800aff8:	8a3b      	ldrh	r3, [r7, #16]
 800affa:	440b      	add	r3, r1
 800affc:	429a      	cmp	r2, r3
 800affe:	da49      	bge.n	800b094 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b000:	89fb      	ldrh	r3, [r7, #14]
 800b002:	2b08      	cmp	r3, #8
 800b004:	d84f      	bhi.n	800b0a6 <ff_wtoupper+0xfa>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <ff_wtoupper+0x60>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b031 	.word	0x0800b031
 800b010:	0800b043 	.word	0x0800b043
 800b014:	0800b059 	.word	0x0800b059
 800b018:	0800b061 	.word	0x0800b061
 800b01c:	0800b069 	.word	0x0800b069
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800b079 	.word	0x0800b079
 800b028:	0800b081 	.word	0x0800b081
 800b02c:	0800b089 	.word	0x0800b089
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	8a7b      	ldrh	r3, [r7, #18]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	005b      	lsls	r3, r3, #1
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	4413      	add	r3, r2
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	80fb      	strh	r3, [r7, #6]
 800b040:	e027      	b.n	800b092 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b042:	88fa      	ldrh	r2, [r7, #6]
 800b044:	8a7b      	ldrh	r3, [r7, #18]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	b29b      	uxth	r3, r3
 800b050:	88fa      	ldrh	r2, [r7, #6]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	80fb      	strh	r3, [r7, #6]
 800b056:	e01c      	b.n	800b092 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b058:	88fb      	ldrh	r3, [r7, #6]
 800b05a:	3b10      	subs	r3, #16
 800b05c:	80fb      	strh	r3, [r7, #6]
 800b05e:	e018      	b.n	800b092 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b060:	88fb      	ldrh	r3, [r7, #6]
 800b062:	3b20      	subs	r3, #32
 800b064:	80fb      	strh	r3, [r7, #6]
 800b066:	e014      	b.n	800b092 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	3b30      	subs	r3, #48	; 0x30
 800b06c:	80fb      	strh	r3, [r7, #6]
 800b06e:	e010      	b.n	800b092 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b070:	88fb      	ldrh	r3, [r7, #6]
 800b072:	3b1a      	subs	r3, #26
 800b074:	80fb      	strh	r3, [r7, #6]
 800b076:	e00c      	b.n	800b092 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	3308      	adds	r3, #8
 800b07c:	80fb      	strh	r3, [r7, #6]
 800b07e:	e008      	b.n	800b092 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b080:	88fb      	ldrh	r3, [r7, #6]
 800b082:	3b50      	subs	r3, #80	; 0x50
 800b084:	80fb      	strh	r3, [r7, #6]
 800b086:	e004      	b.n	800b092 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b088:	88fb      	ldrh	r3, [r7, #6]
 800b08a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b08e:	80fb      	strh	r3, [r7, #6]
 800b090:	bf00      	nop
			}
			break;
 800b092:	e008      	b.n	800b0a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d195      	bne.n	800afc6 <ff_wtoupper+0x1a>
 800b09a:	8a3b      	ldrh	r3, [r7, #16]
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b0a4:	e78f      	b.n	800afc6 <ff_wtoupper+0x1a>
			break;
 800b0a6:	bf00      	nop
	}

	return chr;
 800b0a8:	88fb      	ldrh	r3, [r7, #6]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	371c      	adds	r7, #28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	0800f9c4 	.word	0x0800f9c4
 800b0bc:	0800fbb8 	.word	0x0800fbb8

0800b0c0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f841 	bl	800b150 <malloc>
 800b0ce:	4603      	mov	r3, r0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f83d 	bl	800b160 <free>
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <atof>:
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	f001 bc2c 	b.w	800c94c <strtod>

0800b0f4 <atoi>:
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	f001 bd12 	b.w	800cb20 <strtol>

0800b0fc <__errno>:
 800b0fc:	4b01      	ldr	r3, [pc, #4]	; (800b104 <__errno+0x8>)
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20000024 	.word	0x20000024

0800b108 <__libc_init_array>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	4d0d      	ldr	r5, [pc, #52]	; (800b140 <__libc_init_array+0x38>)
 800b10c:	4c0d      	ldr	r4, [pc, #52]	; (800b144 <__libc_init_array+0x3c>)
 800b10e:	1b64      	subs	r4, r4, r5
 800b110:	10a4      	asrs	r4, r4, #2
 800b112:	2600      	movs	r6, #0
 800b114:	42a6      	cmp	r6, r4
 800b116:	d109      	bne.n	800b12c <__libc_init_array+0x24>
 800b118:	4d0b      	ldr	r5, [pc, #44]	; (800b148 <__libc_init_array+0x40>)
 800b11a:	4c0c      	ldr	r4, [pc, #48]	; (800b14c <__libc_init_array+0x44>)
 800b11c:	f004 fb28 	bl	800f770 <_init>
 800b120:	1b64      	subs	r4, r4, r5
 800b122:	10a4      	asrs	r4, r4, #2
 800b124:	2600      	movs	r6, #0
 800b126:	42a6      	cmp	r6, r4
 800b128:	d105      	bne.n	800b136 <__libc_init_array+0x2e>
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b130:	4798      	blx	r3
 800b132:	3601      	adds	r6, #1
 800b134:	e7ee      	b.n	800b114 <__libc_init_array+0xc>
 800b136:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13a:	4798      	blx	r3
 800b13c:	3601      	adds	r6, #1
 800b13e:	e7f2      	b.n	800b126 <__libc_init_array+0x1e>
 800b140:	08010178 	.word	0x08010178
 800b144:	08010178 	.word	0x08010178
 800b148:	08010178 	.word	0x08010178
 800b14c:	0801017c 	.word	0x0801017c

0800b150 <malloc>:
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <malloc+0xc>)
 800b152:	4601      	mov	r1, r0
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	f000 b88d 	b.w	800b274 <_malloc_r>
 800b15a:	bf00      	nop
 800b15c:	20000024 	.word	0x20000024

0800b160 <free>:
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <free+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f000 b819 	b.w	800b19c <_free_r>
 800b16a:	bf00      	nop
 800b16c:	20000024 	.word	0x20000024

0800b170 <memcpy>:
 800b170:	440a      	add	r2, r1
 800b172:	4291      	cmp	r1, r2
 800b174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b178:	d100      	bne.n	800b17c <memcpy+0xc>
 800b17a:	4770      	bx	lr
 800b17c:	b510      	push	{r4, lr}
 800b17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b186:	4291      	cmp	r1, r2
 800b188:	d1f9      	bne.n	800b17e <memcpy+0xe>
 800b18a:	bd10      	pop	{r4, pc}

0800b18c <memset>:
 800b18c:	4402      	add	r2, r0
 800b18e:	4603      	mov	r3, r0
 800b190:	4293      	cmp	r3, r2
 800b192:	d100      	bne.n	800b196 <memset+0xa>
 800b194:	4770      	bx	lr
 800b196:	f803 1b01 	strb.w	r1, [r3], #1
 800b19a:	e7f9      	b.n	800b190 <memset+0x4>

0800b19c <_free_r>:
 800b19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b19e:	2900      	cmp	r1, #0
 800b1a0:	d044      	beq.n	800b22c <_free_r+0x90>
 800b1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a6:	9001      	str	r0, [sp, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ae:	bfb8      	it	lt
 800b1b0:	18e4      	addlt	r4, r4, r3
 800b1b2:	f002 feef 	bl	800df94 <__malloc_lock>
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <_free_r+0x94>)
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	6813      	ldr	r3, [r2, #0]
 800b1bc:	b933      	cbnz	r3, 800b1cc <_free_r+0x30>
 800b1be:	6063      	str	r3, [r4, #4]
 800b1c0:	6014      	str	r4, [r2, #0]
 800b1c2:	b003      	add	sp, #12
 800b1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1c8:	f002 beea 	b.w	800dfa0 <__malloc_unlock>
 800b1cc:	42a3      	cmp	r3, r4
 800b1ce:	d908      	bls.n	800b1e2 <_free_r+0x46>
 800b1d0:	6825      	ldr	r5, [r4, #0]
 800b1d2:	1961      	adds	r1, r4, r5
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	bf01      	itttt	eq
 800b1d8:	6819      	ldreq	r1, [r3, #0]
 800b1da:	685b      	ldreq	r3, [r3, #4]
 800b1dc:	1949      	addeq	r1, r1, r5
 800b1de:	6021      	streq	r1, [r4, #0]
 800b1e0:	e7ed      	b.n	800b1be <_free_r+0x22>
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	b10b      	cbz	r3, 800b1ec <_free_r+0x50>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d9fa      	bls.n	800b1e2 <_free_r+0x46>
 800b1ec:	6811      	ldr	r1, [r2, #0]
 800b1ee:	1855      	adds	r5, r2, r1
 800b1f0:	42a5      	cmp	r5, r4
 800b1f2:	d10b      	bne.n	800b20c <_free_r+0x70>
 800b1f4:	6824      	ldr	r4, [r4, #0]
 800b1f6:	4421      	add	r1, r4
 800b1f8:	1854      	adds	r4, r2, r1
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	6011      	str	r1, [r2, #0]
 800b1fe:	d1e0      	bne.n	800b1c2 <_free_r+0x26>
 800b200:	681c      	ldr	r4, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	6053      	str	r3, [r2, #4]
 800b206:	4421      	add	r1, r4
 800b208:	6011      	str	r1, [r2, #0]
 800b20a:	e7da      	b.n	800b1c2 <_free_r+0x26>
 800b20c:	d902      	bls.n	800b214 <_free_r+0x78>
 800b20e:	230c      	movs	r3, #12
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	e7d6      	b.n	800b1c2 <_free_r+0x26>
 800b214:	6825      	ldr	r5, [r4, #0]
 800b216:	1961      	adds	r1, r4, r5
 800b218:	428b      	cmp	r3, r1
 800b21a:	bf04      	itt	eq
 800b21c:	6819      	ldreq	r1, [r3, #0]
 800b21e:	685b      	ldreq	r3, [r3, #4]
 800b220:	6063      	str	r3, [r4, #4]
 800b222:	bf04      	itt	eq
 800b224:	1949      	addeq	r1, r1, r5
 800b226:	6021      	streq	r1, [r4, #0]
 800b228:	6054      	str	r4, [r2, #4]
 800b22a:	e7ca      	b.n	800b1c2 <_free_r+0x26>
 800b22c:	b003      	add	sp, #12
 800b22e:	bd30      	pop	{r4, r5, pc}
 800b230:	2000a5fc 	.word	0x2000a5fc

0800b234 <sbrk_aligned>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4e0e      	ldr	r6, [pc, #56]	; (800b270 <sbrk_aligned+0x3c>)
 800b238:	460c      	mov	r4, r1
 800b23a:	6831      	ldr	r1, [r6, #0]
 800b23c:	4605      	mov	r5, r0
 800b23e:	b911      	cbnz	r1, 800b246 <sbrk_aligned+0x12>
 800b240:	f000 fcf6 	bl	800bc30 <_sbrk_r>
 800b244:	6030      	str	r0, [r6, #0]
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 fcf1 	bl	800bc30 <_sbrk_r>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d00a      	beq.n	800b268 <sbrk_aligned+0x34>
 800b252:	1cc4      	adds	r4, r0, #3
 800b254:	f024 0403 	bic.w	r4, r4, #3
 800b258:	42a0      	cmp	r0, r4
 800b25a:	d007      	beq.n	800b26c <sbrk_aligned+0x38>
 800b25c:	1a21      	subs	r1, r4, r0
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 fce6 	bl	800bc30 <_sbrk_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d101      	bne.n	800b26c <sbrk_aligned+0x38>
 800b268:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b26c:	4620      	mov	r0, r4
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	2000a600 	.word	0x2000a600

0800b274 <_malloc_r>:
 800b274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b278:	1ccd      	adds	r5, r1, #3
 800b27a:	f025 0503 	bic.w	r5, r5, #3
 800b27e:	3508      	adds	r5, #8
 800b280:	2d0c      	cmp	r5, #12
 800b282:	bf38      	it	cc
 800b284:	250c      	movcc	r5, #12
 800b286:	2d00      	cmp	r5, #0
 800b288:	4607      	mov	r7, r0
 800b28a:	db01      	blt.n	800b290 <_malloc_r+0x1c>
 800b28c:	42a9      	cmp	r1, r5
 800b28e:	d905      	bls.n	800b29c <_malloc_r+0x28>
 800b290:	230c      	movs	r3, #12
 800b292:	603b      	str	r3, [r7, #0]
 800b294:	2600      	movs	r6, #0
 800b296:	4630      	mov	r0, r6
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	4e2e      	ldr	r6, [pc, #184]	; (800b358 <_malloc_r+0xe4>)
 800b29e:	f002 fe79 	bl	800df94 <__malloc_lock>
 800b2a2:	6833      	ldr	r3, [r6, #0]
 800b2a4:	461c      	mov	r4, r3
 800b2a6:	bb34      	cbnz	r4, 800b2f6 <_malloc_r+0x82>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	f7ff ffc2 	bl	800b234 <sbrk_aligned>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	d14d      	bne.n	800b352 <_malloc_r+0xde>
 800b2b6:	6834      	ldr	r4, [r6, #0]
 800b2b8:	4626      	mov	r6, r4
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	d140      	bne.n	800b340 <_malloc_r+0xcc>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	eb04 0803 	add.w	r8, r4, r3
 800b2c8:	f000 fcb2 	bl	800bc30 <_sbrk_r>
 800b2cc:	4580      	cmp	r8, r0
 800b2ce:	d13a      	bne.n	800b346 <_malloc_r+0xd2>
 800b2d0:	6821      	ldr	r1, [r4, #0]
 800b2d2:	3503      	adds	r5, #3
 800b2d4:	1a6d      	subs	r5, r5, r1
 800b2d6:	f025 0503 	bic.w	r5, r5, #3
 800b2da:	3508      	adds	r5, #8
 800b2dc:	2d0c      	cmp	r5, #12
 800b2de:	bf38      	it	cc
 800b2e0:	250c      	movcc	r5, #12
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	f7ff ffa5 	bl	800b234 <sbrk_aligned>
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d02b      	beq.n	800b346 <_malloc_r+0xd2>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	442b      	add	r3, r5
 800b2f2:	6023      	str	r3, [r4, #0]
 800b2f4:	e00e      	b.n	800b314 <_malloc_r+0xa0>
 800b2f6:	6822      	ldr	r2, [r4, #0]
 800b2f8:	1b52      	subs	r2, r2, r5
 800b2fa:	d41e      	bmi.n	800b33a <_malloc_r+0xc6>
 800b2fc:	2a0b      	cmp	r2, #11
 800b2fe:	d916      	bls.n	800b32e <_malloc_r+0xba>
 800b300:	1961      	adds	r1, r4, r5
 800b302:	42a3      	cmp	r3, r4
 800b304:	6025      	str	r5, [r4, #0]
 800b306:	bf18      	it	ne
 800b308:	6059      	strne	r1, [r3, #4]
 800b30a:	6863      	ldr	r3, [r4, #4]
 800b30c:	bf08      	it	eq
 800b30e:	6031      	streq	r1, [r6, #0]
 800b310:	5162      	str	r2, [r4, r5]
 800b312:	604b      	str	r3, [r1, #4]
 800b314:	4638      	mov	r0, r7
 800b316:	f104 060b 	add.w	r6, r4, #11
 800b31a:	f002 fe41 	bl	800dfa0 <__malloc_unlock>
 800b31e:	f026 0607 	bic.w	r6, r6, #7
 800b322:	1d23      	adds	r3, r4, #4
 800b324:	1af2      	subs	r2, r6, r3
 800b326:	d0b6      	beq.n	800b296 <_malloc_r+0x22>
 800b328:	1b9b      	subs	r3, r3, r6
 800b32a:	50a3      	str	r3, [r4, r2]
 800b32c:	e7b3      	b.n	800b296 <_malloc_r+0x22>
 800b32e:	6862      	ldr	r2, [r4, #4]
 800b330:	42a3      	cmp	r3, r4
 800b332:	bf0c      	ite	eq
 800b334:	6032      	streq	r2, [r6, #0]
 800b336:	605a      	strne	r2, [r3, #4]
 800b338:	e7ec      	b.n	800b314 <_malloc_r+0xa0>
 800b33a:	4623      	mov	r3, r4
 800b33c:	6864      	ldr	r4, [r4, #4]
 800b33e:	e7b2      	b.n	800b2a6 <_malloc_r+0x32>
 800b340:	4634      	mov	r4, r6
 800b342:	6876      	ldr	r6, [r6, #4]
 800b344:	e7b9      	b.n	800b2ba <_malloc_r+0x46>
 800b346:	230c      	movs	r3, #12
 800b348:	603b      	str	r3, [r7, #0]
 800b34a:	4638      	mov	r0, r7
 800b34c:	f002 fe28 	bl	800dfa0 <__malloc_unlock>
 800b350:	e7a1      	b.n	800b296 <_malloc_r+0x22>
 800b352:	6025      	str	r5, [r4, #0]
 800b354:	e7de      	b.n	800b314 <_malloc_r+0xa0>
 800b356:	bf00      	nop
 800b358:	2000a5fc 	.word	0x2000a5fc

0800b35c <__cvt>:
 800b35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	ec55 4b10 	vmov	r4, r5, d0
 800b364:	2d00      	cmp	r5, #0
 800b366:	460e      	mov	r6, r1
 800b368:	4619      	mov	r1, r3
 800b36a:	462b      	mov	r3, r5
 800b36c:	bfbb      	ittet	lt
 800b36e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b372:	461d      	movlt	r5, r3
 800b374:	2300      	movge	r3, #0
 800b376:	232d      	movlt	r3, #45	; 0x2d
 800b378:	700b      	strb	r3, [r1, #0]
 800b37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b37c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b380:	4691      	mov	r9, r2
 800b382:	f023 0820 	bic.w	r8, r3, #32
 800b386:	bfbc      	itt	lt
 800b388:	4622      	movlt	r2, r4
 800b38a:	4614      	movlt	r4, r2
 800b38c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b390:	d005      	beq.n	800b39e <__cvt+0x42>
 800b392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b396:	d100      	bne.n	800b39a <__cvt+0x3e>
 800b398:	3601      	adds	r6, #1
 800b39a:	2102      	movs	r1, #2
 800b39c:	e000      	b.n	800b3a0 <__cvt+0x44>
 800b39e:	2103      	movs	r1, #3
 800b3a0:	ab03      	add	r3, sp, #12
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	ab02      	add	r3, sp, #8
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	ec45 4b10 	vmov	d0, r4, r5
 800b3ac:	4653      	mov	r3, sl
 800b3ae:	4632      	mov	r2, r6
 800b3b0:	f001 fc6a 	bl	800cc88 <_dtoa_r>
 800b3b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	d102      	bne.n	800b3c2 <__cvt+0x66>
 800b3bc:	f019 0f01 	tst.w	r9, #1
 800b3c0:	d022      	beq.n	800b408 <__cvt+0xac>
 800b3c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b3c6:	eb07 0906 	add.w	r9, r7, r6
 800b3ca:	d110      	bne.n	800b3ee <__cvt+0x92>
 800b3cc:	783b      	ldrb	r3, [r7, #0]
 800b3ce:	2b30      	cmp	r3, #48	; 0x30
 800b3d0:	d10a      	bne.n	800b3e8 <__cvt+0x8c>
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f5 fb95 	bl	8000b08 <__aeabi_dcmpeq>
 800b3de:	b918      	cbnz	r0, 800b3e8 <__cvt+0x8c>
 800b3e0:	f1c6 0601 	rsb	r6, r6, #1
 800b3e4:	f8ca 6000 	str.w	r6, [sl]
 800b3e8:	f8da 3000 	ldr.w	r3, [sl]
 800b3ec:	4499      	add	r9, r3
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	f7f5 fb87 	bl	8000b08 <__aeabi_dcmpeq>
 800b3fa:	b108      	cbz	r0, 800b400 <__cvt+0xa4>
 800b3fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b400:	2230      	movs	r2, #48	; 0x30
 800b402:	9b03      	ldr	r3, [sp, #12]
 800b404:	454b      	cmp	r3, r9
 800b406:	d307      	bcc.n	800b418 <__cvt+0xbc>
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b40c:	1bdb      	subs	r3, r3, r7
 800b40e:	4638      	mov	r0, r7
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	b004      	add	sp, #16
 800b414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b418:	1c59      	adds	r1, r3, #1
 800b41a:	9103      	str	r1, [sp, #12]
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e7f0      	b.n	800b402 <__cvt+0xa6>

0800b420 <__exponent>:
 800b420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b422:	4603      	mov	r3, r0
 800b424:	2900      	cmp	r1, #0
 800b426:	bfb8      	it	lt
 800b428:	4249      	neglt	r1, r1
 800b42a:	f803 2b02 	strb.w	r2, [r3], #2
 800b42e:	bfb4      	ite	lt
 800b430:	222d      	movlt	r2, #45	; 0x2d
 800b432:	222b      	movge	r2, #43	; 0x2b
 800b434:	2909      	cmp	r1, #9
 800b436:	7042      	strb	r2, [r0, #1]
 800b438:	dd2a      	ble.n	800b490 <__exponent+0x70>
 800b43a:	f10d 0407 	add.w	r4, sp, #7
 800b43e:	46a4      	mov	ip, r4
 800b440:	270a      	movs	r7, #10
 800b442:	46a6      	mov	lr, r4
 800b444:	460a      	mov	r2, r1
 800b446:	fb91 f6f7 	sdiv	r6, r1, r7
 800b44a:	fb07 1516 	mls	r5, r7, r6, r1
 800b44e:	3530      	adds	r5, #48	; 0x30
 800b450:	2a63      	cmp	r2, #99	; 0x63
 800b452:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b456:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b45a:	4631      	mov	r1, r6
 800b45c:	dcf1      	bgt.n	800b442 <__exponent+0x22>
 800b45e:	3130      	adds	r1, #48	; 0x30
 800b460:	f1ae 0502 	sub.w	r5, lr, #2
 800b464:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b468:	1c44      	adds	r4, r0, #1
 800b46a:	4629      	mov	r1, r5
 800b46c:	4561      	cmp	r1, ip
 800b46e:	d30a      	bcc.n	800b486 <__exponent+0x66>
 800b470:	f10d 0209 	add.w	r2, sp, #9
 800b474:	eba2 020e 	sub.w	r2, r2, lr
 800b478:	4565      	cmp	r5, ip
 800b47a:	bf88      	it	hi
 800b47c:	2200      	movhi	r2, #0
 800b47e:	4413      	add	r3, r2
 800b480:	1a18      	subs	r0, r3, r0
 800b482:	b003      	add	sp, #12
 800b484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b486:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b48a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b48e:	e7ed      	b.n	800b46c <__exponent+0x4c>
 800b490:	2330      	movs	r3, #48	; 0x30
 800b492:	3130      	adds	r1, #48	; 0x30
 800b494:	7083      	strb	r3, [r0, #2]
 800b496:	70c1      	strb	r1, [r0, #3]
 800b498:	1d03      	adds	r3, r0, #4
 800b49a:	e7f1      	b.n	800b480 <__exponent+0x60>

0800b49c <_printf_float>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	ed2d 8b02 	vpush	{d8}
 800b4a4:	b08d      	sub	sp, #52	; 0x34
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4ac:	4616      	mov	r6, r2
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	4605      	mov	r5, r0
 800b4b2:	f002 fd59 	bl	800df68 <_localeconv_r>
 800b4b6:	f8d0 a000 	ldr.w	sl, [r0]
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	f7f4 fea8 	bl	8000210 <strlen>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	9305      	str	r3, [sp, #20]
 800b4c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4d0:	3307      	adds	r3, #7
 800b4d2:	f023 0307 	bic.w	r3, r3, #7
 800b4d6:	f103 0208 	add.w	r2, r3, #8
 800b4da:	f8c8 2000 	str.w	r2, [r8]
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b4ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4f4:	ee08 0a10 	vmov	s16, r0
 800b4f8:	4b9f      	ldr	r3, [pc, #636]	; (800b778 <_printf_float+0x2dc>)
 800b4fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b502:	f7f5 fb33 	bl	8000b6c <__aeabi_dcmpun>
 800b506:	bb88      	cbnz	r0, 800b56c <_printf_float+0xd0>
 800b508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b50c:	4b9a      	ldr	r3, [pc, #616]	; (800b778 <_printf_float+0x2dc>)
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b512:	f7f5 fb0d 	bl	8000b30 <__aeabi_dcmple>
 800b516:	bb48      	cbnz	r0, 800b56c <_printf_float+0xd0>
 800b518:	2200      	movs	r2, #0
 800b51a:	2300      	movs	r3, #0
 800b51c:	4640      	mov	r0, r8
 800b51e:	4649      	mov	r1, r9
 800b520:	f7f5 fafc 	bl	8000b1c <__aeabi_dcmplt>
 800b524:	b110      	cbz	r0, 800b52c <_printf_float+0x90>
 800b526:	232d      	movs	r3, #45	; 0x2d
 800b528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52c:	4b93      	ldr	r3, [pc, #588]	; (800b77c <_printf_float+0x2e0>)
 800b52e:	4894      	ldr	r0, [pc, #592]	; (800b780 <_printf_float+0x2e4>)
 800b530:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b534:	bf94      	ite	ls
 800b536:	4698      	movls	r8, r3
 800b538:	4680      	movhi	r8, r0
 800b53a:	2303      	movs	r3, #3
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	9b05      	ldr	r3, [sp, #20]
 800b540:	f023 0204 	bic.w	r2, r3, #4
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	f04f 0900 	mov.w	r9, #0
 800b54a:	9700      	str	r7, [sp, #0]
 800b54c:	4633      	mov	r3, r6
 800b54e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b550:	4621      	mov	r1, r4
 800b552:	4628      	mov	r0, r5
 800b554:	f000 f9d8 	bl	800b908 <_printf_common>
 800b558:	3001      	adds	r0, #1
 800b55a:	f040 8090 	bne.w	800b67e <_printf_float+0x1e2>
 800b55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b562:	b00d      	add	sp, #52	; 0x34
 800b564:	ecbd 8b02 	vpop	{d8}
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f5 fafa 	bl	8000b6c <__aeabi_dcmpun>
 800b578:	b140      	cbz	r0, 800b58c <_printf_float+0xf0>
 800b57a:	464b      	mov	r3, r9
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	bfbc      	itt	lt
 800b580:	232d      	movlt	r3, #45	; 0x2d
 800b582:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b586:	487f      	ldr	r0, [pc, #508]	; (800b784 <_printf_float+0x2e8>)
 800b588:	4b7f      	ldr	r3, [pc, #508]	; (800b788 <_printf_float+0x2ec>)
 800b58a:	e7d1      	b.n	800b530 <_printf_float+0x94>
 800b58c:	6863      	ldr	r3, [r4, #4]
 800b58e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b592:	9206      	str	r2, [sp, #24]
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	d13f      	bne.n	800b618 <_printf_float+0x17c>
 800b598:	2306      	movs	r3, #6
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	9b05      	ldr	r3, [sp, #20]
 800b59e:	6861      	ldr	r1, [r4, #4]
 800b5a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9303      	str	r3, [sp, #12]
 800b5a8:	ab0a      	add	r3, sp, #40	; 0x28
 800b5aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b5ae:	ab09      	add	r3, sp, #36	; 0x24
 800b5b0:	ec49 8b10 	vmov	d0, r8, r9
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	6022      	str	r2, [r4, #0]
 800b5b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f7ff fecd 	bl	800b35c <__cvt>
 800b5c2:	9b06      	ldr	r3, [sp, #24]
 800b5c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5c6:	2b47      	cmp	r3, #71	; 0x47
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	d108      	bne.n	800b5de <_printf_float+0x142>
 800b5cc:	1cc8      	adds	r0, r1, #3
 800b5ce:	db02      	blt.n	800b5d6 <_printf_float+0x13a>
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	dd41      	ble.n	800b65a <_printf_float+0x1be>
 800b5d6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b5da:	fa5f fb8b 	uxtb.w	fp, fp
 800b5de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5e2:	d820      	bhi.n	800b626 <_printf_float+0x18a>
 800b5e4:	3901      	subs	r1, #1
 800b5e6:	465a      	mov	r2, fp
 800b5e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5ec:	9109      	str	r1, [sp, #36]	; 0x24
 800b5ee:	f7ff ff17 	bl	800b420 <__exponent>
 800b5f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5f4:	1813      	adds	r3, r2, r0
 800b5f6:	2a01      	cmp	r2, #1
 800b5f8:	4681      	mov	r9, r0
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	dc02      	bgt.n	800b604 <_printf_float+0x168>
 800b5fe:	6822      	ldr	r2, [r4, #0]
 800b600:	07d2      	lsls	r2, r2, #31
 800b602:	d501      	bpl.n	800b608 <_printf_float+0x16c>
 800b604:	3301      	adds	r3, #1
 800b606:	6123      	str	r3, [r4, #16]
 800b608:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d09c      	beq.n	800b54a <_printf_float+0xae>
 800b610:	232d      	movs	r3, #45	; 0x2d
 800b612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b616:	e798      	b.n	800b54a <_printf_float+0xae>
 800b618:	9a06      	ldr	r2, [sp, #24]
 800b61a:	2a47      	cmp	r2, #71	; 0x47
 800b61c:	d1be      	bne.n	800b59c <_printf_float+0x100>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1bc      	bne.n	800b59c <_printf_float+0x100>
 800b622:	2301      	movs	r3, #1
 800b624:	e7b9      	b.n	800b59a <_printf_float+0xfe>
 800b626:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b62a:	d118      	bne.n	800b65e <_printf_float+0x1c2>
 800b62c:	2900      	cmp	r1, #0
 800b62e:	6863      	ldr	r3, [r4, #4]
 800b630:	dd0b      	ble.n	800b64a <_printf_float+0x1ae>
 800b632:	6121      	str	r1, [r4, #16]
 800b634:	b913      	cbnz	r3, 800b63c <_printf_float+0x1a0>
 800b636:	6822      	ldr	r2, [r4, #0]
 800b638:	07d0      	lsls	r0, r2, #31
 800b63a:	d502      	bpl.n	800b642 <_printf_float+0x1a6>
 800b63c:	3301      	adds	r3, #1
 800b63e:	440b      	add	r3, r1
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	65a1      	str	r1, [r4, #88]	; 0x58
 800b644:	f04f 0900 	mov.w	r9, #0
 800b648:	e7de      	b.n	800b608 <_printf_float+0x16c>
 800b64a:	b913      	cbnz	r3, 800b652 <_printf_float+0x1b6>
 800b64c:	6822      	ldr	r2, [r4, #0]
 800b64e:	07d2      	lsls	r2, r2, #31
 800b650:	d501      	bpl.n	800b656 <_printf_float+0x1ba>
 800b652:	3302      	adds	r3, #2
 800b654:	e7f4      	b.n	800b640 <_printf_float+0x1a4>
 800b656:	2301      	movs	r3, #1
 800b658:	e7f2      	b.n	800b640 <_printf_float+0x1a4>
 800b65a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b660:	4299      	cmp	r1, r3
 800b662:	db05      	blt.n	800b670 <_printf_float+0x1d4>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	6121      	str	r1, [r4, #16]
 800b668:	07d8      	lsls	r0, r3, #31
 800b66a:	d5ea      	bpl.n	800b642 <_printf_float+0x1a6>
 800b66c:	1c4b      	adds	r3, r1, #1
 800b66e:	e7e7      	b.n	800b640 <_printf_float+0x1a4>
 800b670:	2900      	cmp	r1, #0
 800b672:	bfd4      	ite	le
 800b674:	f1c1 0202 	rsble	r2, r1, #2
 800b678:	2201      	movgt	r2, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	e7e0      	b.n	800b640 <_printf_float+0x1a4>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	055a      	lsls	r2, r3, #21
 800b682:	d407      	bmi.n	800b694 <_printf_float+0x1f8>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	4642      	mov	r2, r8
 800b688:	4631      	mov	r1, r6
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	d12c      	bne.n	800b6ec <_printf_float+0x250>
 800b692:	e764      	b.n	800b55e <_printf_float+0xc2>
 800b694:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b698:	f240 80e0 	bls.w	800b85c <_printf_float+0x3c0>
 800b69c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f7f5 fa30 	bl	8000b08 <__aeabi_dcmpeq>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d034      	beq.n	800b716 <_printf_float+0x27a>
 800b6ac:	4a37      	ldr	r2, [pc, #220]	; (800b78c <_printf_float+0x2f0>)
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f af51 	beq.w	800b55e <_printf_float+0xc2>
 800b6bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	db02      	blt.n	800b6ca <_printf_float+0x22e>
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	07d8      	lsls	r0, r3, #31
 800b6c8:	d510      	bpl.n	800b6ec <_printf_float+0x250>
 800b6ca:	ee18 3a10 	vmov	r3, s16
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	47b8      	blx	r7
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	f43f af41 	beq.w	800b55e <_printf_float+0xc2>
 800b6dc:	f04f 0800 	mov.w	r8, #0
 800b6e0:	f104 091a 	add.w	r9, r4, #26
 800b6e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	4543      	cmp	r3, r8
 800b6ea:	dc09      	bgt.n	800b700 <_printf_float+0x264>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	079b      	lsls	r3, r3, #30
 800b6f0:	f100 8105 	bmi.w	800b8fe <_printf_float+0x462>
 800b6f4:	68e0      	ldr	r0, [r4, #12]
 800b6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f8:	4298      	cmp	r0, r3
 800b6fa:	bfb8      	it	lt
 800b6fc:	4618      	movlt	r0, r3
 800b6fe:	e730      	b.n	800b562 <_printf_float+0xc6>
 800b700:	2301      	movs	r3, #1
 800b702:	464a      	mov	r2, r9
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f af27 	beq.w	800b55e <_printf_float+0xc2>
 800b710:	f108 0801 	add.w	r8, r8, #1
 800b714:	e7e6      	b.n	800b6e4 <_printf_float+0x248>
 800b716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dc39      	bgt.n	800b790 <_printf_float+0x2f4>
 800b71c:	4a1b      	ldr	r2, [pc, #108]	; (800b78c <_printf_float+0x2f0>)
 800b71e:	2301      	movs	r3, #1
 800b720:	4631      	mov	r1, r6
 800b722:	4628      	mov	r0, r5
 800b724:	47b8      	blx	r7
 800b726:	3001      	adds	r0, #1
 800b728:	f43f af19 	beq.w	800b55e <_printf_float+0xc2>
 800b72c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b730:	4313      	orrs	r3, r2
 800b732:	d102      	bne.n	800b73a <_printf_float+0x29e>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	07d9      	lsls	r1, r3, #31
 800b738:	d5d8      	bpl.n	800b6ec <_printf_float+0x250>
 800b73a:	ee18 3a10 	vmov	r3, s16
 800b73e:	4652      	mov	r2, sl
 800b740:	4631      	mov	r1, r6
 800b742:	4628      	mov	r0, r5
 800b744:	47b8      	blx	r7
 800b746:	3001      	adds	r0, #1
 800b748:	f43f af09 	beq.w	800b55e <_printf_float+0xc2>
 800b74c:	f04f 0900 	mov.w	r9, #0
 800b750:	f104 0a1a 	add.w	sl, r4, #26
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	425b      	negs	r3, r3
 800b758:	454b      	cmp	r3, r9
 800b75a:	dc01      	bgt.n	800b760 <_printf_float+0x2c4>
 800b75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75e:	e792      	b.n	800b686 <_printf_float+0x1ea>
 800b760:	2301      	movs	r3, #1
 800b762:	4652      	mov	r2, sl
 800b764:	4631      	mov	r1, r6
 800b766:	4628      	mov	r0, r5
 800b768:	47b8      	blx	r7
 800b76a:	3001      	adds	r0, #1
 800b76c:	f43f aef7 	beq.w	800b55e <_printf_float+0xc2>
 800b770:	f109 0901 	add.w	r9, r9, #1
 800b774:	e7ee      	b.n	800b754 <_printf_float+0x2b8>
 800b776:	bf00      	nop
 800b778:	7fefffff 	.word	0x7fefffff
 800b77c:	0800fc78 	.word	0x0800fc78
 800b780:	0800fc7c 	.word	0x0800fc7c
 800b784:	0800fc84 	.word	0x0800fc84
 800b788:	0800fc80 	.word	0x0800fc80
 800b78c:	0800fc88 	.word	0x0800fc88
 800b790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b794:	429a      	cmp	r2, r3
 800b796:	bfa8      	it	ge
 800b798:	461a      	movge	r2, r3
 800b79a:	2a00      	cmp	r2, #0
 800b79c:	4691      	mov	r9, r2
 800b79e:	dc37      	bgt.n	800b810 <_printf_float+0x374>
 800b7a0:	f04f 0b00 	mov.w	fp, #0
 800b7a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7a8:	f104 021a 	add.w	r2, r4, #26
 800b7ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7ae:	9305      	str	r3, [sp, #20]
 800b7b0:	eba3 0309 	sub.w	r3, r3, r9
 800b7b4:	455b      	cmp	r3, fp
 800b7b6:	dc33      	bgt.n	800b820 <_printf_float+0x384>
 800b7b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	db3b      	blt.n	800b838 <_printf_float+0x39c>
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	07da      	lsls	r2, r3, #31
 800b7c4:	d438      	bmi.n	800b838 <_printf_float+0x39c>
 800b7c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c8:	9a05      	ldr	r2, [sp, #20]
 800b7ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7cc:	1a9a      	subs	r2, r3, r2
 800b7ce:	eba3 0901 	sub.w	r9, r3, r1
 800b7d2:	4591      	cmp	r9, r2
 800b7d4:	bfa8      	it	ge
 800b7d6:	4691      	movge	r9, r2
 800b7d8:	f1b9 0f00 	cmp.w	r9, #0
 800b7dc:	dc35      	bgt.n	800b84a <_printf_float+0x3ae>
 800b7de:	f04f 0800 	mov.w	r8, #0
 800b7e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7e6:	f104 0a1a 	add.w	sl, r4, #26
 800b7ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	eba3 0309 	sub.w	r3, r3, r9
 800b7f4:	4543      	cmp	r3, r8
 800b7f6:	f77f af79 	ble.w	800b6ec <_printf_float+0x250>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	4652      	mov	r2, sl
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	47b8      	blx	r7
 800b804:	3001      	adds	r0, #1
 800b806:	f43f aeaa 	beq.w	800b55e <_printf_float+0xc2>
 800b80a:	f108 0801 	add.w	r8, r8, #1
 800b80e:	e7ec      	b.n	800b7ea <_printf_float+0x34e>
 800b810:	4613      	mov	r3, r2
 800b812:	4631      	mov	r1, r6
 800b814:	4642      	mov	r2, r8
 800b816:	4628      	mov	r0, r5
 800b818:	47b8      	blx	r7
 800b81a:	3001      	adds	r0, #1
 800b81c:	d1c0      	bne.n	800b7a0 <_printf_float+0x304>
 800b81e:	e69e      	b.n	800b55e <_printf_float+0xc2>
 800b820:	2301      	movs	r3, #1
 800b822:	4631      	mov	r1, r6
 800b824:	4628      	mov	r0, r5
 800b826:	9205      	str	r2, [sp, #20]
 800b828:	47b8      	blx	r7
 800b82a:	3001      	adds	r0, #1
 800b82c:	f43f ae97 	beq.w	800b55e <_printf_float+0xc2>
 800b830:	9a05      	ldr	r2, [sp, #20]
 800b832:	f10b 0b01 	add.w	fp, fp, #1
 800b836:	e7b9      	b.n	800b7ac <_printf_float+0x310>
 800b838:	ee18 3a10 	vmov	r3, s16
 800b83c:	4652      	mov	r2, sl
 800b83e:	4631      	mov	r1, r6
 800b840:	4628      	mov	r0, r5
 800b842:	47b8      	blx	r7
 800b844:	3001      	adds	r0, #1
 800b846:	d1be      	bne.n	800b7c6 <_printf_float+0x32a>
 800b848:	e689      	b.n	800b55e <_printf_float+0xc2>
 800b84a:	9a05      	ldr	r2, [sp, #20]
 800b84c:	464b      	mov	r3, r9
 800b84e:	4442      	add	r2, r8
 800b850:	4631      	mov	r1, r6
 800b852:	4628      	mov	r0, r5
 800b854:	47b8      	blx	r7
 800b856:	3001      	adds	r0, #1
 800b858:	d1c1      	bne.n	800b7de <_printf_float+0x342>
 800b85a:	e680      	b.n	800b55e <_printf_float+0xc2>
 800b85c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b85e:	2a01      	cmp	r2, #1
 800b860:	dc01      	bgt.n	800b866 <_printf_float+0x3ca>
 800b862:	07db      	lsls	r3, r3, #31
 800b864:	d538      	bpl.n	800b8d8 <_printf_float+0x43c>
 800b866:	2301      	movs	r3, #1
 800b868:	4642      	mov	r2, r8
 800b86a:	4631      	mov	r1, r6
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b8      	blx	r7
 800b870:	3001      	adds	r0, #1
 800b872:	f43f ae74 	beq.w	800b55e <_printf_float+0xc2>
 800b876:	ee18 3a10 	vmov	r3, s16
 800b87a:	4652      	mov	r2, sl
 800b87c:	4631      	mov	r1, r6
 800b87e:	4628      	mov	r0, r5
 800b880:	47b8      	blx	r7
 800b882:	3001      	adds	r0, #1
 800b884:	f43f ae6b 	beq.w	800b55e <_printf_float+0xc2>
 800b888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b88c:	2200      	movs	r2, #0
 800b88e:	2300      	movs	r3, #0
 800b890:	f7f5 f93a 	bl	8000b08 <__aeabi_dcmpeq>
 800b894:	b9d8      	cbnz	r0, 800b8ce <_printf_float+0x432>
 800b896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b898:	f108 0201 	add.w	r2, r8, #1
 800b89c:	3b01      	subs	r3, #1
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	d10e      	bne.n	800b8c6 <_printf_float+0x42a>
 800b8a8:	e659      	b.n	800b55e <_printf_float+0xc2>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	4652      	mov	r2, sl
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	47b8      	blx	r7
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	f43f ae52 	beq.w	800b55e <_printf_float+0xc2>
 800b8ba:	f108 0801 	add.w	r8, r8, #1
 800b8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	4543      	cmp	r3, r8
 800b8c4:	dcf1      	bgt.n	800b8aa <_printf_float+0x40e>
 800b8c6:	464b      	mov	r3, r9
 800b8c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8cc:	e6dc      	b.n	800b688 <_printf_float+0x1ec>
 800b8ce:	f04f 0800 	mov.w	r8, #0
 800b8d2:	f104 0a1a 	add.w	sl, r4, #26
 800b8d6:	e7f2      	b.n	800b8be <_printf_float+0x422>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4642      	mov	r2, r8
 800b8dc:	e7df      	b.n	800b89e <_printf_float+0x402>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	464a      	mov	r2, r9
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b8      	blx	r7
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	f43f ae38 	beq.w	800b55e <_printf_float+0xc2>
 800b8ee:	f108 0801 	add.w	r8, r8, #1
 800b8f2:	68e3      	ldr	r3, [r4, #12]
 800b8f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8f6:	1a5b      	subs	r3, r3, r1
 800b8f8:	4543      	cmp	r3, r8
 800b8fa:	dcf0      	bgt.n	800b8de <_printf_float+0x442>
 800b8fc:	e6fa      	b.n	800b6f4 <_printf_float+0x258>
 800b8fe:	f04f 0800 	mov.w	r8, #0
 800b902:	f104 0919 	add.w	r9, r4, #25
 800b906:	e7f4      	b.n	800b8f2 <_printf_float+0x456>

0800b908 <_printf_common>:
 800b908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90c:	4616      	mov	r6, r2
 800b90e:	4699      	mov	r9, r3
 800b910:	688a      	ldr	r2, [r1, #8]
 800b912:	690b      	ldr	r3, [r1, #16]
 800b914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b918:	4293      	cmp	r3, r2
 800b91a:	bfb8      	it	lt
 800b91c:	4613      	movlt	r3, r2
 800b91e:	6033      	str	r3, [r6, #0]
 800b920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b924:	4607      	mov	r7, r0
 800b926:	460c      	mov	r4, r1
 800b928:	b10a      	cbz	r2, 800b92e <_printf_common+0x26>
 800b92a:	3301      	adds	r3, #1
 800b92c:	6033      	str	r3, [r6, #0]
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	0699      	lsls	r1, r3, #26
 800b932:	bf42      	ittt	mi
 800b934:	6833      	ldrmi	r3, [r6, #0]
 800b936:	3302      	addmi	r3, #2
 800b938:	6033      	strmi	r3, [r6, #0]
 800b93a:	6825      	ldr	r5, [r4, #0]
 800b93c:	f015 0506 	ands.w	r5, r5, #6
 800b940:	d106      	bne.n	800b950 <_printf_common+0x48>
 800b942:	f104 0a19 	add.w	sl, r4, #25
 800b946:	68e3      	ldr	r3, [r4, #12]
 800b948:	6832      	ldr	r2, [r6, #0]
 800b94a:	1a9b      	subs	r3, r3, r2
 800b94c:	42ab      	cmp	r3, r5
 800b94e:	dc26      	bgt.n	800b99e <_printf_common+0x96>
 800b950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b954:	1e13      	subs	r3, r2, #0
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	bf18      	it	ne
 800b95a:	2301      	movne	r3, #1
 800b95c:	0692      	lsls	r2, r2, #26
 800b95e:	d42b      	bmi.n	800b9b8 <_printf_common+0xb0>
 800b960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b964:	4649      	mov	r1, r9
 800b966:	4638      	mov	r0, r7
 800b968:	47c0      	blx	r8
 800b96a:	3001      	adds	r0, #1
 800b96c:	d01e      	beq.n	800b9ac <_printf_common+0xa4>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	68e5      	ldr	r5, [r4, #12]
 800b972:	6832      	ldr	r2, [r6, #0]
 800b974:	f003 0306 	and.w	r3, r3, #6
 800b978:	2b04      	cmp	r3, #4
 800b97a:	bf08      	it	eq
 800b97c:	1aad      	subeq	r5, r5, r2
 800b97e:	68a3      	ldr	r3, [r4, #8]
 800b980:	6922      	ldr	r2, [r4, #16]
 800b982:	bf0c      	ite	eq
 800b984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b988:	2500      	movne	r5, #0
 800b98a:	4293      	cmp	r3, r2
 800b98c:	bfc4      	itt	gt
 800b98e:	1a9b      	subgt	r3, r3, r2
 800b990:	18ed      	addgt	r5, r5, r3
 800b992:	2600      	movs	r6, #0
 800b994:	341a      	adds	r4, #26
 800b996:	42b5      	cmp	r5, r6
 800b998:	d11a      	bne.n	800b9d0 <_printf_common+0xc8>
 800b99a:	2000      	movs	r0, #0
 800b99c:	e008      	b.n	800b9b0 <_printf_common+0xa8>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	4652      	mov	r2, sl
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	47c0      	blx	r8
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	d103      	bne.n	800b9b4 <_printf_common+0xac>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	e7c6      	b.n	800b946 <_printf_common+0x3e>
 800b9b8:	18e1      	adds	r1, r4, r3
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	2030      	movs	r0, #48	; 0x30
 800b9be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9c2:	4422      	add	r2, r4
 800b9c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9cc:	3302      	adds	r3, #2
 800b9ce:	e7c7      	b.n	800b960 <_printf_common+0x58>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	47c0      	blx	r8
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d0e6      	beq.n	800b9ac <_printf_common+0xa4>
 800b9de:	3601      	adds	r6, #1
 800b9e0:	e7d9      	b.n	800b996 <_printf_common+0x8e>
	...

0800b9e4 <_printf_i>:
 800b9e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	7e0f      	ldrb	r7, [r1, #24]
 800b9ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9ec:	2f78      	cmp	r7, #120	; 0x78
 800b9ee:	4691      	mov	r9, r2
 800b9f0:	4680      	mov	r8, r0
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	469a      	mov	sl, r3
 800b9f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9fa:	d807      	bhi.n	800ba0c <_printf_i+0x28>
 800b9fc:	2f62      	cmp	r7, #98	; 0x62
 800b9fe:	d80a      	bhi.n	800ba16 <_printf_i+0x32>
 800ba00:	2f00      	cmp	r7, #0
 800ba02:	f000 80d8 	beq.w	800bbb6 <_printf_i+0x1d2>
 800ba06:	2f58      	cmp	r7, #88	; 0x58
 800ba08:	f000 80a3 	beq.w	800bb52 <_printf_i+0x16e>
 800ba0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba14:	e03a      	b.n	800ba8c <_printf_i+0xa8>
 800ba16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba1a:	2b15      	cmp	r3, #21
 800ba1c:	d8f6      	bhi.n	800ba0c <_printf_i+0x28>
 800ba1e:	a101      	add	r1, pc, #4	; (adr r1, 800ba24 <_printf_i+0x40>)
 800ba20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba24:	0800ba7d 	.word	0x0800ba7d
 800ba28:	0800ba91 	.word	0x0800ba91
 800ba2c:	0800ba0d 	.word	0x0800ba0d
 800ba30:	0800ba0d 	.word	0x0800ba0d
 800ba34:	0800ba0d 	.word	0x0800ba0d
 800ba38:	0800ba0d 	.word	0x0800ba0d
 800ba3c:	0800ba91 	.word	0x0800ba91
 800ba40:	0800ba0d 	.word	0x0800ba0d
 800ba44:	0800ba0d 	.word	0x0800ba0d
 800ba48:	0800ba0d 	.word	0x0800ba0d
 800ba4c:	0800ba0d 	.word	0x0800ba0d
 800ba50:	0800bb9d 	.word	0x0800bb9d
 800ba54:	0800bac1 	.word	0x0800bac1
 800ba58:	0800bb7f 	.word	0x0800bb7f
 800ba5c:	0800ba0d 	.word	0x0800ba0d
 800ba60:	0800ba0d 	.word	0x0800ba0d
 800ba64:	0800bbbf 	.word	0x0800bbbf
 800ba68:	0800ba0d 	.word	0x0800ba0d
 800ba6c:	0800bac1 	.word	0x0800bac1
 800ba70:	0800ba0d 	.word	0x0800ba0d
 800ba74:	0800ba0d 	.word	0x0800ba0d
 800ba78:	0800bb87 	.word	0x0800bb87
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	1d1a      	adds	r2, r3, #4
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	602a      	str	r2, [r5, #0]
 800ba84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e0a3      	b.n	800bbd8 <_printf_i+0x1f4>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	6829      	ldr	r1, [r5, #0]
 800ba94:	0606      	lsls	r6, r0, #24
 800ba96:	f101 0304 	add.w	r3, r1, #4
 800ba9a:	d50a      	bpl.n	800bab2 <_printf_i+0xce>
 800ba9c:	680e      	ldr	r6, [r1, #0]
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	da03      	bge.n	800baac <_printf_i+0xc8>
 800baa4:	232d      	movs	r3, #45	; 0x2d
 800baa6:	4276      	negs	r6, r6
 800baa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baac:	485e      	ldr	r0, [pc, #376]	; (800bc28 <_printf_i+0x244>)
 800baae:	230a      	movs	r3, #10
 800bab0:	e019      	b.n	800bae6 <_printf_i+0x102>
 800bab2:	680e      	ldr	r6, [r1, #0]
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800baba:	bf18      	it	ne
 800babc:	b236      	sxthne	r6, r6
 800babe:	e7ef      	b.n	800baa0 <_printf_i+0xbc>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	1d19      	adds	r1, r3, #4
 800bac6:	6029      	str	r1, [r5, #0]
 800bac8:	0601      	lsls	r1, r0, #24
 800baca:	d501      	bpl.n	800bad0 <_printf_i+0xec>
 800bacc:	681e      	ldr	r6, [r3, #0]
 800bace:	e002      	b.n	800bad6 <_printf_i+0xf2>
 800bad0:	0646      	lsls	r6, r0, #25
 800bad2:	d5fb      	bpl.n	800bacc <_printf_i+0xe8>
 800bad4:	881e      	ldrh	r6, [r3, #0]
 800bad6:	4854      	ldr	r0, [pc, #336]	; (800bc28 <_printf_i+0x244>)
 800bad8:	2f6f      	cmp	r7, #111	; 0x6f
 800bada:	bf0c      	ite	eq
 800badc:	2308      	moveq	r3, #8
 800bade:	230a      	movne	r3, #10
 800bae0:	2100      	movs	r1, #0
 800bae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bae6:	6865      	ldr	r5, [r4, #4]
 800bae8:	60a5      	str	r5, [r4, #8]
 800baea:	2d00      	cmp	r5, #0
 800baec:	bfa2      	ittt	ge
 800baee:	6821      	ldrge	r1, [r4, #0]
 800baf0:	f021 0104 	bicge.w	r1, r1, #4
 800baf4:	6021      	strge	r1, [r4, #0]
 800baf6:	b90e      	cbnz	r6, 800bafc <_printf_i+0x118>
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	d04d      	beq.n	800bb98 <_printf_i+0x1b4>
 800bafc:	4615      	mov	r5, r2
 800bafe:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb02:	fb03 6711 	mls	r7, r3, r1, r6
 800bb06:	5dc7      	ldrb	r7, [r0, r7]
 800bb08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bb0c:	4637      	mov	r7, r6
 800bb0e:	42bb      	cmp	r3, r7
 800bb10:	460e      	mov	r6, r1
 800bb12:	d9f4      	bls.n	800bafe <_printf_i+0x11a>
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d10b      	bne.n	800bb30 <_printf_i+0x14c>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	07de      	lsls	r6, r3, #31
 800bb1c:	d508      	bpl.n	800bb30 <_printf_i+0x14c>
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	4299      	cmp	r1, r3
 800bb24:	bfde      	ittt	le
 800bb26:	2330      	movle	r3, #48	; 0x30
 800bb28:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb30:	1b52      	subs	r2, r2, r5
 800bb32:	6122      	str	r2, [r4, #16]
 800bb34:	f8cd a000 	str.w	sl, [sp]
 800bb38:	464b      	mov	r3, r9
 800bb3a:	aa03      	add	r2, sp, #12
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7ff fee2 	bl	800b908 <_printf_common>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d14c      	bne.n	800bbe2 <_printf_i+0x1fe>
 800bb48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb4c:	b004      	add	sp, #16
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	4835      	ldr	r0, [pc, #212]	; (800bc28 <_printf_i+0x244>)
 800bb54:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb58:	6829      	ldr	r1, [r5, #0]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb60:	6029      	str	r1, [r5, #0]
 800bb62:	061d      	lsls	r5, r3, #24
 800bb64:	d514      	bpl.n	800bb90 <_printf_i+0x1ac>
 800bb66:	07df      	lsls	r7, r3, #31
 800bb68:	bf44      	itt	mi
 800bb6a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb6e:	6023      	strmi	r3, [r4, #0]
 800bb70:	b91e      	cbnz	r6, 800bb7a <_printf_i+0x196>
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f023 0320 	bic.w	r3, r3, #32
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	2310      	movs	r3, #16
 800bb7c:	e7b0      	b.n	800bae0 <_printf_i+0xfc>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	f043 0320 	orr.w	r3, r3, #32
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	2378      	movs	r3, #120	; 0x78
 800bb88:	4828      	ldr	r0, [pc, #160]	; (800bc2c <_printf_i+0x248>)
 800bb8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb8e:	e7e3      	b.n	800bb58 <_printf_i+0x174>
 800bb90:	0659      	lsls	r1, r3, #25
 800bb92:	bf48      	it	mi
 800bb94:	b2b6      	uxthmi	r6, r6
 800bb96:	e7e6      	b.n	800bb66 <_printf_i+0x182>
 800bb98:	4615      	mov	r5, r2
 800bb9a:	e7bb      	b.n	800bb14 <_printf_i+0x130>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	6826      	ldr	r6, [r4, #0]
 800bba0:	6961      	ldr	r1, [r4, #20]
 800bba2:	1d18      	adds	r0, r3, #4
 800bba4:	6028      	str	r0, [r5, #0]
 800bba6:	0635      	lsls	r5, r6, #24
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	d501      	bpl.n	800bbb0 <_printf_i+0x1cc>
 800bbac:	6019      	str	r1, [r3, #0]
 800bbae:	e002      	b.n	800bbb6 <_printf_i+0x1d2>
 800bbb0:	0670      	lsls	r0, r6, #25
 800bbb2:	d5fb      	bpl.n	800bbac <_printf_i+0x1c8>
 800bbb4:	8019      	strh	r1, [r3, #0]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	4615      	mov	r5, r2
 800bbbc:	e7ba      	b.n	800bb34 <_printf_i+0x150>
 800bbbe:	682b      	ldr	r3, [r5, #0]
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	602a      	str	r2, [r5, #0]
 800bbc4:	681d      	ldr	r5, [r3, #0]
 800bbc6:	6862      	ldr	r2, [r4, #4]
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f7f4 fb28 	bl	8000220 <memchr>
 800bbd0:	b108      	cbz	r0, 800bbd6 <_printf_i+0x1f2>
 800bbd2:	1b40      	subs	r0, r0, r5
 800bbd4:	6060      	str	r0, [r4, #4]
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbe0:	e7a8      	b.n	800bb34 <_printf_i+0x150>
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	462a      	mov	r2, r5
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	4640      	mov	r0, r8
 800bbea:	47d0      	blx	sl
 800bbec:	3001      	adds	r0, #1
 800bbee:	d0ab      	beq.n	800bb48 <_printf_i+0x164>
 800bbf0:	6823      	ldr	r3, [r4, #0]
 800bbf2:	079b      	lsls	r3, r3, #30
 800bbf4:	d413      	bmi.n	800bc1e <_printf_i+0x23a>
 800bbf6:	68e0      	ldr	r0, [r4, #12]
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	4298      	cmp	r0, r3
 800bbfc:	bfb8      	it	lt
 800bbfe:	4618      	movlt	r0, r3
 800bc00:	e7a4      	b.n	800bb4c <_printf_i+0x168>
 800bc02:	2301      	movs	r3, #1
 800bc04:	4632      	mov	r2, r6
 800bc06:	4649      	mov	r1, r9
 800bc08:	4640      	mov	r0, r8
 800bc0a:	47d0      	blx	sl
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d09b      	beq.n	800bb48 <_printf_i+0x164>
 800bc10:	3501      	adds	r5, #1
 800bc12:	68e3      	ldr	r3, [r4, #12]
 800bc14:	9903      	ldr	r1, [sp, #12]
 800bc16:	1a5b      	subs	r3, r3, r1
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	dcf2      	bgt.n	800bc02 <_printf_i+0x21e>
 800bc1c:	e7eb      	b.n	800bbf6 <_printf_i+0x212>
 800bc1e:	2500      	movs	r5, #0
 800bc20:	f104 0619 	add.w	r6, r4, #25
 800bc24:	e7f5      	b.n	800bc12 <_printf_i+0x22e>
 800bc26:	bf00      	nop
 800bc28:	0800fc8a 	.word	0x0800fc8a
 800bc2c:	0800fc9b 	.word	0x0800fc9b

0800bc30 <_sbrk_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d06      	ldr	r5, [pc, #24]	; (800bc4c <_sbrk_r+0x1c>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	602b      	str	r3, [r5, #0]
 800bc3c:	f7f7 fefa 	bl	8003a34 <_sbrk>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_sbrk_r+0x1a>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_sbrk_r+0x1a>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	2000a604 	.word	0x2000a604

0800bc50 <siprintf>:
 800bc50:	b40e      	push	{r1, r2, r3}
 800bc52:	b500      	push	{lr}
 800bc54:	b09c      	sub	sp, #112	; 0x70
 800bc56:	ab1d      	add	r3, sp, #116	; 0x74
 800bc58:	9002      	str	r0, [sp, #8]
 800bc5a:	9006      	str	r0, [sp, #24]
 800bc5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc60:	4809      	ldr	r0, [pc, #36]	; (800bc88 <siprintf+0x38>)
 800bc62:	9107      	str	r1, [sp, #28]
 800bc64:	9104      	str	r1, [sp, #16]
 800bc66:	4909      	ldr	r1, [pc, #36]	; (800bc8c <siprintf+0x3c>)
 800bc68:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6c:	9105      	str	r1, [sp, #20]
 800bc6e:	6800      	ldr	r0, [r0, #0]
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	a902      	add	r1, sp, #8
 800bc74:	f002 fecc 	bl	800ea10 <_svfiprintf_r>
 800bc78:	9b02      	ldr	r3, [sp, #8]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	b01c      	add	sp, #112	; 0x70
 800bc80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc84:	b003      	add	sp, #12
 800bc86:	4770      	bx	lr
 800bc88:	20000024 	.word	0x20000024
 800bc8c:	ffff0208 	.word	0xffff0208

0800bc90 <strcat>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4602      	mov	r2, r0
 800bc94:	7814      	ldrb	r4, [r2, #0]
 800bc96:	4613      	mov	r3, r2
 800bc98:	3201      	adds	r2, #1
 800bc9a:	2c00      	cmp	r4, #0
 800bc9c:	d1fa      	bne.n	800bc94 <strcat+0x4>
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bca8:	2a00      	cmp	r2, #0
 800bcaa:	d1f9      	bne.n	800bca0 <strcat+0x10>
 800bcac:	bd10      	pop	{r4, pc}

0800bcae <strchr>:
 800bcae:	b2c9      	uxtb	r1, r1
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb6:	b11a      	cbz	r2, 800bcc0 <strchr+0x12>
 800bcb8:	428a      	cmp	r2, r1
 800bcba:	d1f9      	bne.n	800bcb0 <strchr+0x2>
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	4770      	bx	lr
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	bf18      	it	ne
 800bcc4:	2300      	movne	r3, #0
 800bcc6:	e7f9      	b.n	800bcbc <strchr+0xe>

0800bcc8 <strcpy>:
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcce:	f803 2b01 	strb.w	r2, [r3], #1
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	d1f9      	bne.n	800bcca <strcpy+0x2>
 800bcd6:	4770      	bx	lr

0800bcd8 <strstr>:
 800bcd8:	780a      	ldrb	r2, [r1, #0]
 800bcda:	b570      	push	{r4, r5, r6, lr}
 800bcdc:	b96a      	cbnz	r2, 800bcfa <strstr+0x22>
 800bcde:	bd70      	pop	{r4, r5, r6, pc}
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d109      	bne.n	800bcf8 <strstr+0x20>
 800bce4:	460c      	mov	r4, r1
 800bce6:	4605      	mov	r5, r0
 800bce8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0f6      	beq.n	800bcde <strstr+0x6>
 800bcf0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bcf4:	429e      	cmp	r6, r3
 800bcf6:	d0f7      	beq.n	800bce8 <strstr+0x10>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	7803      	ldrb	r3, [r0, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1ef      	bne.n	800bce0 <strstr+0x8>
 800bd00:	4618      	mov	r0, r3
 800bd02:	e7ec      	b.n	800bcde <strstr+0x6>

0800bd04 <sulp>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	4604      	mov	r4, r0
 800bd08:	460d      	mov	r5, r1
 800bd0a:	ec45 4b10 	vmov	d0, r4, r5
 800bd0e:	4616      	mov	r6, r2
 800bd10:	f002 fcbe 	bl	800e690 <__ulp>
 800bd14:	ec51 0b10 	vmov	r0, r1, d0
 800bd18:	b17e      	cbz	r6, 800bd3a <sulp+0x36>
 800bd1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dd09      	ble.n	800bd3a <sulp+0x36>
 800bd26:	051b      	lsls	r3, r3, #20
 800bd28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd2c:	2400      	movs	r4, #0
 800bd2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd32:	4622      	mov	r2, r4
 800bd34:	462b      	mov	r3, r5
 800bd36:	f7f4 fc7f 	bl	8000638 <__aeabi_dmul>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	0000      	movs	r0, r0
	...

0800bd40 <_strtod_l>:
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	ed2d 8b02 	vpush	{d8}
 800bd48:	b09d      	sub	sp, #116	; 0x74
 800bd4a:	461f      	mov	r7, r3
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9318      	str	r3, [sp, #96]	; 0x60
 800bd50:	4ba2      	ldr	r3, [pc, #648]	; (800bfdc <_strtod_l+0x29c>)
 800bd52:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4604      	mov	r4, r0
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	4688      	mov	r8, r1
 800bd5e:	f7f4 fa57 	bl	8000210 <strlen>
 800bd62:	f04f 0a00 	mov.w	sl, #0
 800bd66:	4605      	mov	r5, r0
 800bd68:	f04f 0b00 	mov.w	fp, #0
 800bd6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd72:	781a      	ldrb	r2, [r3, #0]
 800bd74:	2a2b      	cmp	r2, #43	; 0x2b
 800bd76:	d04e      	beq.n	800be16 <_strtod_l+0xd6>
 800bd78:	d83b      	bhi.n	800bdf2 <_strtod_l+0xb2>
 800bd7a:	2a0d      	cmp	r2, #13
 800bd7c:	d834      	bhi.n	800bde8 <_strtod_l+0xa8>
 800bd7e:	2a08      	cmp	r2, #8
 800bd80:	d834      	bhi.n	800bdec <_strtod_l+0xac>
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	d03e      	beq.n	800be04 <_strtod_l+0xc4>
 800bd86:	2300      	movs	r3, #0
 800bd88:	930a      	str	r3, [sp, #40]	; 0x28
 800bd8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bd8c:	7833      	ldrb	r3, [r6, #0]
 800bd8e:	2b30      	cmp	r3, #48	; 0x30
 800bd90:	f040 80b0 	bne.w	800bef4 <_strtod_l+0x1b4>
 800bd94:	7873      	ldrb	r3, [r6, #1]
 800bd96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd9a:	2b58      	cmp	r3, #88	; 0x58
 800bd9c:	d168      	bne.n	800be70 <_strtod_l+0x130>
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	ab18      	add	r3, sp, #96	; 0x60
 800bda4:	9702      	str	r7, [sp, #8]
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	4a8d      	ldr	r2, [pc, #564]	; (800bfe0 <_strtod_l+0x2a0>)
 800bdaa:	ab19      	add	r3, sp, #100	; 0x64
 800bdac:	a917      	add	r1, sp, #92	; 0x5c
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f001 fdd2 	bl	800d958 <__gethex>
 800bdb4:	f010 0707 	ands.w	r7, r0, #7
 800bdb8:	4605      	mov	r5, r0
 800bdba:	d005      	beq.n	800bdc8 <_strtod_l+0x88>
 800bdbc:	2f06      	cmp	r7, #6
 800bdbe:	d12c      	bne.n	800be1a <_strtod_l+0xda>
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bdc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f040 8590 	bne.w	800c8f0 <_strtod_l+0xbb0>
 800bdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdd2:	b1eb      	cbz	r3, 800be10 <_strtod_l+0xd0>
 800bdd4:	4652      	mov	r2, sl
 800bdd6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bdda:	ec43 2b10 	vmov	d0, r2, r3
 800bdde:	b01d      	add	sp, #116	; 0x74
 800bde0:	ecbd 8b02 	vpop	{d8}
 800bde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde8:	2a20      	cmp	r2, #32
 800bdea:	d1cc      	bne.n	800bd86 <_strtod_l+0x46>
 800bdec:	3301      	adds	r3, #1
 800bdee:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdf0:	e7be      	b.n	800bd70 <_strtod_l+0x30>
 800bdf2:	2a2d      	cmp	r2, #45	; 0x2d
 800bdf4:	d1c7      	bne.n	800bd86 <_strtod_l+0x46>
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bdfe:	785b      	ldrb	r3, [r3, #1]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1c2      	bne.n	800bd8a <_strtod_l+0x4a>
 800be04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f040 856e 	bne.w	800c8ec <_strtod_l+0xbac>
 800be10:	4652      	mov	r2, sl
 800be12:	465b      	mov	r3, fp
 800be14:	e7e1      	b.n	800bdda <_strtod_l+0x9a>
 800be16:	2200      	movs	r2, #0
 800be18:	e7ee      	b.n	800bdf8 <_strtod_l+0xb8>
 800be1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be1c:	b13a      	cbz	r2, 800be2e <_strtod_l+0xee>
 800be1e:	2135      	movs	r1, #53	; 0x35
 800be20:	a81a      	add	r0, sp, #104	; 0x68
 800be22:	f002 fd40 	bl	800e8a6 <__copybits>
 800be26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800be28:	4620      	mov	r0, r4
 800be2a:	f002 f8ff 	bl	800e02c <_Bfree>
 800be2e:	3f01      	subs	r7, #1
 800be30:	2f04      	cmp	r7, #4
 800be32:	d806      	bhi.n	800be42 <_strtod_l+0x102>
 800be34:	e8df f007 	tbb	[pc, r7]
 800be38:	1714030a 	.word	0x1714030a
 800be3c:	0a          	.byte	0x0a
 800be3d:	00          	.byte	0x00
 800be3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800be42:	0728      	lsls	r0, r5, #28
 800be44:	d5c0      	bpl.n	800bdc8 <_strtod_l+0x88>
 800be46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be4a:	e7bd      	b.n	800bdc8 <_strtod_l+0x88>
 800be4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800be50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be5e:	e7f0      	b.n	800be42 <_strtod_l+0x102>
 800be60:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bfe4 <_strtod_l+0x2a4>
 800be64:	e7ed      	b.n	800be42 <_strtod_l+0x102>
 800be66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be6a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be6e:	e7e8      	b.n	800be42 <_strtod_l+0x102>
 800be70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	9217      	str	r2, [sp, #92]	; 0x5c
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	2b30      	cmp	r3, #48	; 0x30
 800be7a:	d0f9      	beq.n	800be70 <_strtod_l+0x130>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0a3      	beq.n	800bdc8 <_strtod_l+0x88>
 800be80:	2301      	movs	r3, #1
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be8a:	9308      	str	r3, [sp, #32]
 800be8c:	f8cd 901c 	str.w	r9, [sp, #28]
 800be90:	464f      	mov	r7, r9
 800be92:	220a      	movs	r2, #10
 800be94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800be96:	7806      	ldrb	r6, [r0, #0]
 800be98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be9c:	b2d9      	uxtb	r1, r3
 800be9e:	2909      	cmp	r1, #9
 800bea0:	d92a      	bls.n	800bef8 <_strtod_l+0x1b8>
 800bea2:	9905      	ldr	r1, [sp, #20]
 800bea4:	462a      	mov	r2, r5
 800bea6:	f003 f817 	bl	800eed8 <strncmp>
 800beaa:	b398      	cbz	r0, 800bf14 <_strtod_l+0x1d4>
 800beac:	2000      	movs	r0, #0
 800beae:	4632      	mov	r2, r6
 800beb0:	463d      	mov	r5, r7
 800beb2:	9005      	str	r0, [sp, #20]
 800beb4:	4603      	mov	r3, r0
 800beb6:	2a65      	cmp	r2, #101	; 0x65
 800beb8:	d001      	beq.n	800bebe <_strtod_l+0x17e>
 800beba:	2a45      	cmp	r2, #69	; 0x45
 800bebc:	d118      	bne.n	800bef0 <_strtod_l+0x1b0>
 800bebe:	b91d      	cbnz	r5, 800bec8 <_strtod_l+0x188>
 800bec0:	9a04      	ldr	r2, [sp, #16]
 800bec2:	4302      	orrs	r2, r0
 800bec4:	d09e      	beq.n	800be04 <_strtod_l+0xc4>
 800bec6:	2500      	movs	r5, #0
 800bec8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800becc:	f108 0201 	add.w	r2, r8, #1
 800bed0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bed2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bed6:	2a2b      	cmp	r2, #43	; 0x2b
 800bed8:	d075      	beq.n	800bfc6 <_strtod_l+0x286>
 800beda:	2a2d      	cmp	r2, #45	; 0x2d
 800bedc:	d07b      	beq.n	800bfd6 <_strtod_l+0x296>
 800bede:	f04f 0c00 	mov.w	ip, #0
 800bee2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bee6:	2909      	cmp	r1, #9
 800bee8:	f240 8082 	bls.w	800bff0 <_strtod_l+0x2b0>
 800beec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bef0:	2600      	movs	r6, #0
 800bef2:	e09d      	b.n	800c030 <_strtod_l+0x2f0>
 800bef4:	2300      	movs	r3, #0
 800bef6:	e7c4      	b.n	800be82 <_strtod_l+0x142>
 800bef8:	2f08      	cmp	r7, #8
 800befa:	bfd8      	it	le
 800befc:	9907      	ldrle	r1, [sp, #28]
 800befe:	f100 0001 	add.w	r0, r0, #1
 800bf02:	bfda      	itte	le
 800bf04:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf08:	9307      	strle	r3, [sp, #28]
 800bf0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bf0e:	3701      	adds	r7, #1
 800bf10:	9017      	str	r0, [sp, #92]	; 0x5c
 800bf12:	e7bf      	b.n	800be94 <_strtod_l+0x154>
 800bf14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf16:	195a      	adds	r2, r3, r5
 800bf18:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf1a:	5d5a      	ldrb	r2, [r3, r5]
 800bf1c:	2f00      	cmp	r7, #0
 800bf1e:	d037      	beq.n	800bf90 <_strtod_l+0x250>
 800bf20:	9005      	str	r0, [sp, #20]
 800bf22:	463d      	mov	r5, r7
 800bf24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bf28:	2b09      	cmp	r3, #9
 800bf2a:	d912      	bls.n	800bf52 <_strtod_l+0x212>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e7c2      	b.n	800beb6 <_strtod_l+0x176>
 800bf30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf36:	785a      	ldrb	r2, [r3, #1]
 800bf38:	3001      	adds	r0, #1
 800bf3a:	2a30      	cmp	r2, #48	; 0x30
 800bf3c:	d0f8      	beq.n	800bf30 <_strtod_l+0x1f0>
 800bf3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf42:	2b08      	cmp	r3, #8
 800bf44:	f200 84d9 	bhi.w	800c8fa <_strtod_l+0xbba>
 800bf48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf4a:	9005      	str	r0, [sp, #20]
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	9308      	str	r3, [sp, #32]
 800bf50:	4605      	mov	r5, r0
 800bf52:	3a30      	subs	r2, #48	; 0x30
 800bf54:	f100 0301 	add.w	r3, r0, #1
 800bf58:	d014      	beq.n	800bf84 <_strtod_l+0x244>
 800bf5a:	9905      	ldr	r1, [sp, #20]
 800bf5c:	4419      	add	r1, r3
 800bf5e:	9105      	str	r1, [sp, #20]
 800bf60:	462b      	mov	r3, r5
 800bf62:	eb00 0e05 	add.w	lr, r0, r5
 800bf66:	210a      	movs	r1, #10
 800bf68:	4573      	cmp	r3, lr
 800bf6a:	d113      	bne.n	800bf94 <_strtod_l+0x254>
 800bf6c:	182b      	adds	r3, r5, r0
 800bf6e:	2b08      	cmp	r3, #8
 800bf70:	f105 0501 	add.w	r5, r5, #1
 800bf74:	4405      	add	r5, r0
 800bf76:	dc1c      	bgt.n	800bfb2 <_strtod_l+0x272>
 800bf78:	9907      	ldr	r1, [sp, #28]
 800bf7a:	230a      	movs	r3, #10
 800bf7c:	fb03 2301 	mla	r3, r3, r1, r2
 800bf80:	9307      	str	r3, [sp, #28]
 800bf82:	2300      	movs	r3, #0
 800bf84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf86:	1c51      	adds	r1, r2, #1
 800bf88:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf8a:	7852      	ldrb	r2, [r2, #1]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	e7c9      	b.n	800bf24 <_strtod_l+0x1e4>
 800bf90:	4638      	mov	r0, r7
 800bf92:	e7d2      	b.n	800bf3a <_strtod_l+0x1fa>
 800bf94:	2b08      	cmp	r3, #8
 800bf96:	dc04      	bgt.n	800bfa2 <_strtod_l+0x262>
 800bf98:	9e07      	ldr	r6, [sp, #28]
 800bf9a:	434e      	muls	r6, r1
 800bf9c:	9607      	str	r6, [sp, #28]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	e7e2      	b.n	800bf68 <_strtod_l+0x228>
 800bfa2:	f103 0c01 	add.w	ip, r3, #1
 800bfa6:	f1bc 0f10 	cmp.w	ip, #16
 800bfaa:	bfd8      	it	le
 800bfac:	fb01 f909 	mulle.w	r9, r1, r9
 800bfb0:	e7f5      	b.n	800bf9e <_strtod_l+0x25e>
 800bfb2:	2d10      	cmp	r5, #16
 800bfb4:	bfdc      	itt	le
 800bfb6:	230a      	movle	r3, #10
 800bfb8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bfbc:	e7e1      	b.n	800bf82 <_strtod_l+0x242>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	9305      	str	r3, [sp, #20]
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e77c      	b.n	800bec0 <_strtod_l+0x180>
 800bfc6:	f04f 0c00 	mov.w	ip, #0
 800bfca:	f108 0202 	add.w	r2, r8, #2
 800bfce:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bfd4:	e785      	b.n	800bee2 <_strtod_l+0x1a2>
 800bfd6:	f04f 0c01 	mov.w	ip, #1
 800bfda:	e7f6      	b.n	800bfca <_strtod_l+0x28a>
 800bfdc:	0800ff90 	.word	0x0800ff90
 800bfe0:	0800fcac 	.word	0x0800fcac
 800bfe4:	7ff00000 	.word	0x7ff00000
 800bfe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfea:	1c51      	adds	r1, r2, #1
 800bfec:	9117      	str	r1, [sp, #92]	; 0x5c
 800bfee:	7852      	ldrb	r2, [r2, #1]
 800bff0:	2a30      	cmp	r2, #48	; 0x30
 800bff2:	d0f9      	beq.n	800bfe8 <_strtod_l+0x2a8>
 800bff4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bff8:	2908      	cmp	r1, #8
 800bffa:	f63f af79 	bhi.w	800bef0 <_strtod_l+0x1b0>
 800bffe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c004:	9206      	str	r2, [sp, #24]
 800c006:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c008:	1c51      	adds	r1, r2, #1
 800c00a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c00c:	7852      	ldrb	r2, [r2, #1]
 800c00e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c012:	2e09      	cmp	r6, #9
 800c014:	d937      	bls.n	800c086 <_strtod_l+0x346>
 800c016:	9e06      	ldr	r6, [sp, #24]
 800c018:	1b89      	subs	r1, r1, r6
 800c01a:	2908      	cmp	r1, #8
 800c01c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c020:	dc02      	bgt.n	800c028 <_strtod_l+0x2e8>
 800c022:	4576      	cmp	r6, lr
 800c024:	bfa8      	it	ge
 800c026:	4676      	movge	r6, lr
 800c028:	f1bc 0f00 	cmp.w	ip, #0
 800c02c:	d000      	beq.n	800c030 <_strtod_l+0x2f0>
 800c02e:	4276      	negs	r6, r6
 800c030:	2d00      	cmp	r5, #0
 800c032:	d14d      	bne.n	800c0d0 <_strtod_l+0x390>
 800c034:	9904      	ldr	r1, [sp, #16]
 800c036:	4301      	orrs	r1, r0
 800c038:	f47f aec6 	bne.w	800bdc8 <_strtod_l+0x88>
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f47f aee1 	bne.w	800be04 <_strtod_l+0xc4>
 800c042:	2a69      	cmp	r2, #105	; 0x69
 800c044:	d027      	beq.n	800c096 <_strtod_l+0x356>
 800c046:	dc24      	bgt.n	800c092 <_strtod_l+0x352>
 800c048:	2a49      	cmp	r2, #73	; 0x49
 800c04a:	d024      	beq.n	800c096 <_strtod_l+0x356>
 800c04c:	2a4e      	cmp	r2, #78	; 0x4e
 800c04e:	f47f aed9 	bne.w	800be04 <_strtod_l+0xc4>
 800c052:	499f      	ldr	r1, [pc, #636]	; (800c2d0 <_strtod_l+0x590>)
 800c054:	a817      	add	r0, sp, #92	; 0x5c
 800c056:	f001 fed7 	bl	800de08 <__match>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f aed2 	beq.w	800be04 <_strtod_l+0xc4>
 800c060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b28      	cmp	r3, #40	; 0x28
 800c066:	d12d      	bne.n	800c0c4 <_strtod_l+0x384>
 800c068:	499a      	ldr	r1, [pc, #616]	; (800c2d4 <_strtod_l+0x594>)
 800c06a:	aa1a      	add	r2, sp, #104	; 0x68
 800c06c:	a817      	add	r0, sp, #92	; 0x5c
 800c06e:	f001 fedf 	bl	800de30 <__hexnan>
 800c072:	2805      	cmp	r0, #5
 800c074:	d126      	bne.n	800c0c4 <_strtod_l+0x384>
 800c076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c078:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c07c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c080:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c084:	e6a0      	b.n	800bdc8 <_strtod_l+0x88>
 800c086:	210a      	movs	r1, #10
 800c088:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c08c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c090:	e7b9      	b.n	800c006 <_strtod_l+0x2c6>
 800c092:	2a6e      	cmp	r2, #110	; 0x6e
 800c094:	e7db      	b.n	800c04e <_strtod_l+0x30e>
 800c096:	4990      	ldr	r1, [pc, #576]	; (800c2d8 <_strtod_l+0x598>)
 800c098:	a817      	add	r0, sp, #92	; 0x5c
 800c09a:	f001 feb5 	bl	800de08 <__match>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f43f aeb0 	beq.w	800be04 <_strtod_l+0xc4>
 800c0a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0a6:	498d      	ldr	r1, [pc, #564]	; (800c2dc <_strtod_l+0x59c>)
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	a817      	add	r0, sp, #92	; 0x5c
 800c0ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0ae:	f001 feab 	bl	800de08 <__match>
 800c0b2:	b910      	cbnz	r0, 800c0ba <_strtod_l+0x37a>
 800c0b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c0ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c2ec <_strtod_l+0x5ac>
 800c0be:	f04f 0a00 	mov.w	sl, #0
 800c0c2:	e681      	b.n	800bdc8 <_strtod_l+0x88>
 800c0c4:	4886      	ldr	r0, [pc, #536]	; (800c2e0 <_strtod_l+0x5a0>)
 800c0c6:	f002 feff 	bl	800eec8 <nan>
 800c0ca:	ec5b ab10 	vmov	sl, fp, d0
 800c0ce:	e67b      	b.n	800bdc8 <_strtod_l+0x88>
 800c0d0:	9b05      	ldr	r3, [sp, #20]
 800c0d2:	9807      	ldr	r0, [sp, #28]
 800c0d4:	1af3      	subs	r3, r6, r3
 800c0d6:	2f00      	cmp	r7, #0
 800c0d8:	bf08      	it	eq
 800c0da:	462f      	moveq	r7, r5
 800c0dc:	2d10      	cmp	r5, #16
 800c0de:	9306      	str	r3, [sp, #24]
 800c0e0:	46a8      	mov	r8, r5
 800c0e2:	bfa8      	it	ge
 800c0e4:	f04f 0810 	movge.w	r8, #16
 800c0e8:	f7f4 fa2c 	bl	8000544 <__aeabi_ui2d>
 800c0ec:	2d09      	cmp	r5, #9
 800c0ee:	4682      	mov	sl, r0
 800c0f0:	468b      	mov	fp, r1
 800c0f2:	dd13      	ble.n	800c11c <_strtod_l+0x3dc>
 800c0f4:	4b7b      	ldr	r3, [pc, #492]	; (800c2e4 <_strtod_l+0x5a4>)
 800c0f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c0fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0fe:	f7f4 fa9b 	bl	8000638 <__aeabi_dmul>
 800c102:	4682      	mov	sl, r0
 800c104:	4648      	mov	r0, r9
 800c106:	468b      	mov	fp, r1
 800c108:	f7f4 fa1c 	bl	8000544 <__aeabi_ui2d>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4650      	mov	r0, sl
 800c112:	4659      	mov	r1, fp
 800c114:	f7f4 f8da 	bl	80002cc <__adddf3>
 800c118:	4682      	mov	sl, r0
 800c11a:	468b      	mov	fp, r1
 800c11c:	2d0f      	cmp	r5, #15
 800c11e:	dc38      	bgt.n	800c192 <_strtod_l+0x452>
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f43f ae50 	beq.w	800bdc8 <_strtod_l+0x88>
 800c128:	dd24      	ble.n	800c174 <_strtod_l+0x434>
 800c12a:	2b16      	cmp	r3, #22
 800c12c:	dc0b      	bgt.n	800c146 <_strtod_l+0x406>
 800c12e:	496d      	ldr	r1, [pc, #436]	; (800c2e4 <_strtod_l+0x5a4>)
 800c130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c134:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c138:	4652      	mov	r2, sl
 800c13a:	465b      	mov	r3, fp
 800c13c:	f7f4 fa7c 	bl	8000638 <__aeabi_dmul>
 800c140:	4682      	mov	sl, r0
 800c142:	468b      	mov	fp, r1
 800c144:	e640      	b.n	800bdc8 <_strtod_l+0x88>
 800c146:	9a06      	ldr	r2, [sp, #24]
 800c148:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c14c:	4293      	cmp	r3, r2
 800c14e:	db20      	blt.n	800c192 <_strtod_l+0x452>
 800c150:	4c64      	ldr	r4, [pc, #400]	; (800c2e4 <_strtod_l+0x5a4>)
 800c152:	f1c5 050f 	rsb	r5, r5, #15
 800c156:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c15a:	4652      	mov	r2, sl
 800c15c:	465b      	mov	r3, fp
 800c15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c162:	f7f4 fa69 	bl	8000638 <__aeabi_dmul>
 800c166:	9b06      	ldr	r3, [sp, #24]
 800c168:	1b5d      	subs	r5, r3, r5
 800c16a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c16e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c172:	e7e3      	b.n	800c13c <_strtod_l+0x3fc>
 800c174:	9b06      	ldr	r3, [sp, #24]
 800c176:	3316      	adds	r3, #22
 800c178:	db0b      	blt.n	800c192 <_strtod_l+0x452>
 800c17a:	9b05      	ldr	r3, [sp, #20]
 800c17c:	1b9e      	subs	r6, r3, r6
 800c17e:	4b59      	ldr	r3, [pc, #356]	; (800c2e4 <_strtod_l+0x5a4>)
 800c180:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c184:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c188:	4650      	mov	r0, sl
 800c18a:	4659      	mov	r1, fp
 800c18c:	f7f4 fb7e 	bl	800088c <__aeabi_ddiv>
 800c190:	e7d6      	b.n	800c140 <_strtod_l+0x400>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	eba5 0808 	sub.w	r8, r5, r8
 800c198:	4498      	add	r8, r3
 800c19a:	f1b8 0f00 	cmp.w	r8, #0
 800c19e:	dd74      	ble.n	800c28a <_strtod_l+0x54a>
 800c1a0:	f018 030f 	ands.w	r3, r8, #15
 800c1a4:	d00a      	beq.n	800c1bc <_strtod_l+0x47c>
 800c1a6:	494f      	ldr	r1, [pc, #316]	; (800c2e4 <_strtod_l+0x5a4>)
 800c1a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1ac:	4652      	mov	r2, sl
 800c1ae:	465b      	mov	r3, fp
 800c1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b4:	f7f4 fa40 	bl	8000638 <__aeabi_dmul>
 800c1b8:	4682      	mov	sl, r0
 800c1ba:	468b      	mov	fp, r1
 800c1bc:	f038 080f 	bics.w	r8, r8, #15
 800c1c0:	d04f      	beq.n	800c262 <_strtod_l+0x522>
 800c1c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1c6:	dd22      	ble.n	800c20e <_strtod_l+0x4ce>
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	462e      	mov	r6, r5
 800c1cc:	9507      	str	r5, [sp, #28]
 800c1ce:	9505      	str	r5, [sp, #20]
 800c1d0:	2322      	movs	r3, #34	; 0x22
 800c1d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c2ec <_strtod_l+0x5ac>
 800c1d6:	6023      	str	r3, [r4, #0]
 800c1d8:	f04f 0a00 	mov.w	sl, #0
 800c1dc:	9b07      	ldr	r3, [sp, #28]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f43f adf2 	beq.w	800bdc8 <_strtod_l+0x88>
 800c1e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f001 ff20 	bl	800e02c <_Bfree>
 800c1ec:	9905      	ldr	r1, [sp, #20]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f001 ff1c 	bl	800e02c <_Bfree>
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f001 ff18 	bl	800e02c <_Bfree>
 800c1fc:	9907      	ldr	r1, [sp, #28]
 800c1fe:	4620      	mov	r0, r4
 800c200:	f001 ff14 	bl	800e02c <_Bfree>
 800c204:	4629      	mov	r1, r5
 800c206:	4620      	mov	r0, r4
 800c208:	f001 ff10 	bl	800e02c <_Bfree>
 800c20c:	e5dc      	b.n	800bdc8 <_strtod_l+0x88>
 800c20e:	4b36      	ldr	r3, [pc, #216]	; (800c2e8 <_strtod_l+0x5a8>)
 800c210:	9304      	str	r3, [sp, #16]
 800c212:	2300      	movs	r3, #0
 800c214:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c218:	4650      	mov	r0, sl
 800c21a:	4659      	mov	r1, fp
 800c21c:	4699      	mov	r9, r3
 800c21e:	f1b8 0f01 	cmp.w	r8, #1
 800c222:	dc21      	bgt.n	800c268 <_strtod_l+0x528>
 800c224:	b10b      	cbz	r3, 800c22a <_strtod_l+0x4ea>
 800c226:	4682      	mov	sl, r0
 800c228:	468b      	mov	fp, r1
 800c22a:	4b2f      	ldr	r3, [pc, #188]	; (800c2e8 <_strtod_l+0x5a8>)
 800c22c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c230:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c234:	4652      	mov	r2, sl
 800c236:	465b      	mov	r3, fp
 800c238:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c23c:	f7f4 f9fc 	bl	8000638 <__aeabi_dmul>
 800c240:	4b2a      	ldr	r3, [pc, #168]	; (800c2ec <_strtod_l+0x5ac>)
 800c242:	460a      	mov	r2, r1
 800c244:	400b      	ands	r3, r1
 800c246:	492a      	ldr	r1, [pc, #168]	; (800c2f0 <_strtod_l+0x5b0>)
 800c248:	428b      	cmp	r3, r1
 800c24a:	4682      	mov	sl, r0
 800c24c:	d8bc      	bhi.n	800c1c8 <_strtod_l+0x488>
 800c24e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c252:	428b      	cmp	r3, r1
 800c254:	bf86      	itte	hi
 800c256:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c2f4 <_strtod_l+0x5b4>
 800c25a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c25e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c262:	2300      	movs	r3, #0
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	e084      	b.n	800c372 <_strtod_l+0x632>
 800c268:	f018 0f01 	tst.w	r8, #1
 800c26c:	d005      	beq.n	800c27a <_strtod_l+0x53a>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f4 f9e0 	bl	8000638 <__aeabi_dmul>
 800c278:	2301      	movs	r3, #1
 800c27a:	9a04      	ldr	r2, [sp, #16]
 800c27c:	3208      	adds	r2, #8
 800c27e:	f109 0901 	add.w	r9, r9, #1
 800c282:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c286:	9204      	str	r2, [sp, #16]
 800c288:	e7c9      	b.n	800c21e <_strtod_l+0x4de>
 800c28a:	d0ea      	beq.n	800c262 <_strtod_l+0x522>
 800c28c:	f1c8 0800 	rsb	r8, r8, #0
 800c290:	f018 020f 	ands.w	r2, r8, #15
 800c294:	d00a      	beq.n	800c2ac <_strtod_l+0x56c>
 800c296:	4b13      	ldr	r3, [pc, #76]	; (800c2e4 <_strtod_l+0x5a4>)
 800c298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c29c:	4650      	mov	r0, sl
 800c29e:	4659      	mov	r1, fp
 800c2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a4:	f7f4 faf2 	bl	800088c <__aeabi_ddiv>
 800c2a8:	4682      	mov	sl, r0
 800c2aa:	468b      	mov	fp, r1
 800c2ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c2b0:	d0d7      	beq.n	800c262 <_strtod_l+0x522>
 800c2b2:	f1b8 0f1f 	cmp.w	r8, #31
 800c2b6:	dd1f      	ble.n	800c2f8 <_strtod_l+0x5b8>
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	462e      	mov	r6, r5
 800c2bc:	9507      	str	r5, [sp, #28]
 800c2be:	9505      	str	r5, [sp, #20]
 800c2c0:	2322      	movs	r3, #34	; 0x22
 800c2c2:	f04f 0a00 	mov.w	sl, #0
 800c2c6:	f04f 0b00 	mov.w	fp, #0
 800c2ca:	6023      	str	r3, [r4, #0]
 800c2cc:	e786      	b.n	800c1dc <_strtod_l+0x49c>
 800c2ce:	bf00      	nop
 800c2d0:	0800fc85 	.word	0x0800fc85
 800c2d4:	0800fcc0 	.word	0x0800fcc0
 800c2d8:	0800fc7d 	.word	0x0800fc7d
 800c2dc:	0800feb4 	.word	0x0800feb4
 800c2e0:	0800fdaf 	.word	0x0800fdaf
 800c2e4:	08010028 	.word	0x08010028
 800c2e8:	08010000 	.word	0x08010000
 800c2ec:	7ff00000 	.word	0x7ff00000
 800c2f0:	7ca00000 	.word	0x7ca00000
 800c2f4:	7fefffff 	.word	0x7fefffff
 800c2f8:	f018 0310 	ands.w	r3, r8, #16
 800c2fc:	bf18      	it	ne
 800c2fe:	236a      	movne	r3, #106	; 0x6a
 800c300:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c6b0 <_strtod_l+0x970>
 800c304:	9304      	str	r3, [sp, #16]
 800c306:	4650      	mov	r0, sl
 800c308:	4659      	mov	r1, fp
 800c30a:	2300      	movs	r3, #0
 800c30c:	f018 0f01 	tst.w	r8, #1
 800c310:	d004      	beq.n	800c31c <_strtod_l+0x5dc>
 800c312:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c316:	f7f4 f98f 	bl	8000638 <__aeabi_dmul>
 800c31a:	2301      	movs	r3, #1
 800c31c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c320:	f109 0908 	add.w	r9, r9, #8
 800c324:	d1f2      	bne.n	800c30c <_strtod_l+0x5cc>
 800c326:	b10b      	cbz	r3, 800c32c <_strtod_l+0x5ec>
 800c328:	4682      	mov	sl, r0
 800c32a:	468b      	mov	fp, r1
 800c32c:	9b04      	ldr	r3, [sp, #16]
 800c32e:	b1c3      	cbz	r3, 800c362 <_strtod_l+0x622>
 800c330:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c334:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c338:	2b00      	cmp	r3, #0
 800c33a:	4659      	mov	r1, fp
 800c33c:	dd11      	ble.n	800c362 <_strtod_l+0x622>
 800c33e:	2b1f      	cmp	r3, #31
 800c340:	f340 8124 	ble.w	800c58c <_strtod_l+0x84c>
 800c344:	2b34      	cmp	r3, #52	; 0x34
 800c346:	bfde      	ittt	le
 800c348:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c34c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c350:	fa03 f202 	lslle.w	r2, r3, r2
 800c354:	f04f 0a00 	mov.w	sl, #0
 800c358:	bfcc      	ite	gt
 800c35a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c35e:	ea02 0b01 	andle.w	fp, r2, r1
 800c362:	2200      	movs	r2, #0
 800c364:	2300      	movs	r3, #0
 800c366:	4650      	mov	r0, sl
 800c368:	4659      	mov	r1, fp
 800c36a:	f7f4 fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d1a2      	bne.n	800c2b8 <_strtod_l+0x578>
 800c372:	9b07      	ldr	r3, [sp, #28]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	9908      	ldr	r1, [sp, #32]
 800c378:	462b      	mov	r3, r5
 800c37a:	463a      	mov	r2, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f001 febd 	bl	800e0fc <__s2b>
 800c382:	9007      	str	r0, [sp, #28]
 800c384:	2800      	cmp	r0, #0
 800c386:	f43f af1f 	beq.w	800c1c8 <_strtod_l+0x488>
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	1b9e      	subs	r6, r3, r6
 800c38e:	9b06      	ldr	r3, [sp, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	bfb4      	ite	lt
 800c394:	4633      	movlt	r3, r6
 800c396:	2300      	movge	r3, #0
 800c398:	930c      	str	r3, [sp, #48]	; 0x30
 800c39a:	9b06      	ldr	r3, [sp, #24]
 800c39c:	2500      	movs	r5, #0
 800c39e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c3a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c3a4:	462e      	mov	r6, r5
 800c3a6:	9b07      	ldr	r3, [sp, #28]
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	6859      	ldr	r1, [r3, #4]
 800c3ac:	f001 fdfe 	bl	800dfac <_Balloc>
 800c3b0:	9005      	str	r0, [sp, #20]
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f43f af0c 	beq.w	800c1d0 <_strtod_l+0x490>
 800c3b8:	9b07      	ldr	r3, [sp, #28]
 800c3ba:	691a      	ldr	r2, [r3, #16]
 800c3bc:	3202      	adds	r2, #2
 800c3be:	f103 010c 	add.w	r1, r3, #12
 800c3c2:	0092      	lsls	r2, r2, #2
 800c3c4:	300c      	adds	r0, #12
 800c3c6:	f7fe fed3 	bl	800b170 <memcpy>
 800c3ca:	ec4b ab10 	vmov	d0, sl, fp
 800c3ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c3d0:	a919      	add	r1, sp, #100	; 0x64
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f002 f9d8 	bl	800e788 <__d2b>
 800c3d8:	ec4b ab18 	vmov	d8, sl, fp
 800c3dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f43f aef6 	beq.w	800c1d0 <_strtod_l+0x490>
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f001 ff22 	bl	800e230 <__i2b>
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	f43f aeee 	beq.w	800c1d0 <_strtod_l+0x490>
 800c3f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3f6:	9904      	ldr	r1, [sp, #16]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	bfab      	itete	ge
 800c3fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c3fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c400:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c402:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c406:	bfac      	ite	ge
 800c408:	eb03 0902 	addge.w	r9, r3, r2
 800c40c:	1ad7      	sublt	r7, r2, r3
 800c40e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c410:	eba3 0801 	sub.w	r8, r3, r1
 800c414:	4490      	add	r8, r2
 800c416:	4ba1      	ldr	r3, [pc, #644]	; (800c69c <_strtod_l+0x95c>)
 800c418:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c41c:	4598      	cmp	r8, r3
 800c41e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c422:	f280 80c7 	bge.w	800c5b4 <_strtod_l+0x874>
 800c426:	eba3 0308 	sub.w	r3, r3, r8
 800c42a:	2b1f      	cmp	r3, #31
 800c42c:	eba2 0203 	sub.w	r2, r2, r3
 800c430:	f04f 0101 	mov.w	r1, #1
 800c434:	f300 80b1 	bgt.w	800c59a <_strtod_l+0x85a>
 800c438:	fa01 f303 	lsl.w	r3, r1, r3
 800c43c:	930d      	str	r3, [sp, #52]	; 0x34
 800c43e:	2300      	movs	r3, #0
 800c440:	9308      	str	r3, [sp, #32]
 800c442:	eb09 0802 	add.w	r8, r9, r2
 800c446:	9b04      	ldr	r3, [sp, #16]
 800c448:	45c1      	cmp	r9, r8
 800c44a:	4417      	add	r7, r2
 800c44c:	441f      	add	r7, r3
 800c44e:	464b      	mov	r3, r9
 800c450:	bfa8      	it	ge
 800c452:	4643      	movge	r3, r8
 800c454:	42bb      	cmp	r3, r7
 800c456:	bfa8      	it	ge
 800c458:	463b      	movge	r3, r7
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	bfc2      	ittt	gt
 800c45e:	eba8 0803 	subgt.w	r8, r8, r3
 800c462:	1aff      	subgt	r7, r7, r3
 800c464:	eba9 0903 	subgt.w	r9, r9, r3
 800c468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dd17      	ble.n	800c49e <_strtod_l+0x75e>
 800c46e:	4631      	mov	r1, r6
 800c470:	461a      	mov	r2, r3
 800c472:	4620      	mov	r0, r4
 800c474:	f001 ff9c 	bl	800e3b0 <__pow5mult>
 800c478:	4606      	mov	r6, r0
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f43f aea8 	beq.w	800c1d0 <_strtod_l+0x490>
 800c480:	4601      	mov	r1, r0
 800c482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c484:	4620      	mov	r0, r4
 800c486:	f001 fee9 	bl	800e25c <__multiply>
 800c48a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f43f ae9f 	beq.w	800c1d0 <_strtod_l+0x490>
 800c492:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c494:	4620      	mov	r0, r4
 800c496:	f001 fdc9 	bl	800e02c <_Bfree>
 800c49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49c:	9318      	str	r3, [sp, #96]	; 0x60
 800c49e:	f1b8 0f00 	cmp.w	r8, #0
 800c4a2:	f300 808c 	bgt.w	800c5be <_strtod_l+0x87e>
 800c4a6:	9b06      	ldr	r3, [sp, #24]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	dd08      	ble.n	800c4be <_strtod_l+0x77e>
 800c4ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c4ae:	9905      	ldr	r1, [sp, #20]
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f001 ff7d 	bl	800e3b0 <__pow5mult>
 800c4b6:	9005      	str	r0, [sp, #20]
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f ae89 	beq.w	800c1d0 <_strtod_l+0x490>
 800c4be:	2f00      	cmp	r7, #0
 800c4c0:	dd08      	ble.n	800c4d4 <_strtod_l+0x794>
 800c4c2:	9905      	ldr	r1, [sp, #20]
 800c4c4:	463a      	mov	r2, r7
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f001 ffcc 	bl	800e464 <__lshift>
 800c4cc:	9005      	str	r0, [sp, #20]
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f ae7e 	beq.w	800c1d0 <_strtod_l+0x490>
 800c4d4:	f1b9 0f00 	cmp.w	r9, #0
 800c4d8:	dd08      	ble.n	800c4ec <_strtod_l+0x7ac>
 800c4da:	4631      	mov	r1, r6
 800c4dc:	464a      	mov	r2, r9
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f001 ffc0 	bl	800e464 <__lshift>
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	f43f ae72 	beq.w	800c1d0 <_strtod_l+0x490>
 800c4ec:	9a05      	ldr	r2, [sp, #20]
 800c4ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f002 f843 	bl	800e57c <__mdiff>
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	f43f ae69 	beq.w	800c1d0 <_strtod_l+0x490>
 800c4fe:	68c3      	ldr	r3, [r0, #12]
 800c500:	930b      	str	r3, [sp, #44]	; 0x2c
 800c502:	2300      	movs	r3, #0
 800c504:	60c3      	str	r3, [r0, #12]
 800c506:	4631      	mov	r1, r6
 800c508:	f002 f81c 	bl	800e544 <__mcmp>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	da60      	bge.n	800c5d2 <_strtod_l+0x892>
 800c510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c512:	ea53 030a 	orrs.w	r3, r3, sl
 800c516:	f040 8082 	bne.w	800c61e <_strtod_l+0x8de>
 800c51a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d17d      	bne.n	800c61e <_strtod_l+0x8de>
 800c522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c526:	0d1b      	lsrs	r3, r3, #20
 800c528:	051b      	lsls	r3, r3, #20
 800c52a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c52e:	d976      	bls.n	800c61e <_strtod_l+0x8de>
 800c530:	696b      	ldr	r3, [r5, #20]
 800c532:	b913      	cbnz	r3, 800c53a <_strtod_l+0x7fa>
 800c534:	692b      	ldr	r3, [r5, #16]
 800c536:	2b01      	cmp	r3, #1
 800c538:	dd71      	ble.n	800c61e <_strtod_l+0x8de>
 800c53a:	4629      	mov	r1, r5
 800c53c:	2201      	movs	r2, #1
 800c53e:	4620      	mov	r0, r4
 800c540:	f001 ff90 	bl	800e464 <__lshift>
 800c544:	4631      	mov	r1, r6
 800c546:	4605      	mov	r5, r0
 800c548:	f001 fffc 	bl	800e544 <__mcmp>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	dd66      	ble.n	800c61e <_strtod_l+0x8de>
 800c550:	9904      	ldr	r1, [sp, #16]
 800c552:	4a53      	ldr	r2, [pc, #332]	; (800c6a0 <_strtod_l+0x960>)
 800c554:	465b      	mov	r3, fp
 800c556:	2900      	cmp	r1, #0
 800c558:	f000 8081 	beq.w	800c65e <_strtod_l+0x91e>
 800c55c:	ea02 010b 	and.w	r1, r2, fp
 800c560:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c564:	dc7b      	bgt.n	800c65e <_strtod_l+0x91e>
 800c566:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c56a:	f77f aea9 	ble.w	800c2c0 <_strtod_l+0x580>
 800c56e:	4b4d      	ldr	r3, [pc, #308]	; (800c6a4 <_strtod_l+0x964>)
 800c570:	4650      	mov	r0, sl
 800c572:	4659      	mov	r1, fp
 800c574:	2200      	movs	r2, #0
 800c576:	f7f4 f85f 	bl	8000638 <__aeabi_dmul>
 800c57a:	460b      	mov	r3, r1
 800c57c:	4303      	orrs	r3, r0
 800c57e:	bf08      	it	eq
 800c580:	2322      	moveq	r3, #34	; 0x22
 800c582:	4682      	mov	sl, r0
 800c584:	468b      	mov	fp, r1
 800c586:	bf08      	it	eq
 800c588:	6023      	streq	r3, [r4, #0]
 800c58a:	e62b      	b.n	800c1e4 <_strtod_l+0x4a4>
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	ea03 0a0a 	and.w	sl, r3, sl
 800c598:	e6e3      	b.n	800c362 <_strtod_l+0x622>
 800c59a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c59e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c5a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c5a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c5aa:	fa01 f308 	lsl.w	r3, r1, r8
 800c5ae:	9308      	str	r3, [sp, #32]
 800c5b0:	910d      	str	r1, [sp, #52]	; 0x34
 800c5b2:	e746      	b.n	800c442 <_strtod_l+0x702>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9308      	str	r3, [sp, #32]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c5bc:	e741      	b.n	800c442 <_strtod_l+0x702>
 800c5be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5c0:	4642      	mov	r2, r8
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f001 ff4e 	bl	800e464 <__lshift>
 800c5c8:	9018      	str	r0, [sp, #96]	; 0x60
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	f47f af6b 	bne.w	800c4a6 <_strtod_l+0x766>
 800c5d0:	e5fe      	b.n	800c1d0 <_strtod_l+0x490>
 800c5d2:	465f      	mov	r7, fp
 800c5d4:	d16e      	bne.n	800c6b4 <_strtod_l+0x974>
 800c5d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5dc:	b342      	cbz	r2, 800c630 <_strtod_l+0x8f0>
 800c5de:	4a32      	ldr	r2, [pc, #200]	; (800c6a8 <_strtod_l+0x968>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d128      	bne.n	800c636 <_strtod_l+0x8f6>
 800c5e4:	9b04      	ldr	r3, [sp, #16]
 800c5e6:	4651      	mov	r1, sl
 800c5e8:	b1eb      	cbz	r3, 800c626 <_strtod_l+0x8e6>
 800c5ea:	4b2d      	ldr	r3, [pc, #180]	; (800c6a0 <_strtod_l+0x960>)
 800c5ec:	403b      	ands	r3, r7
 800c5ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5f6:	d819      	bhi.n	800c62c <_strtod_l+0x8ec>
 800c5f8:	0d1b      	lsrs	r3, r3, #20
 800c5fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c602:	4299      	cmp	r1, r3
 800c604:	d117      	bne.n	800c636 <_strtod_l+0x8f6>
 800c606:	4b29      	ldr	r3, [pc, #164]	; (800c6ac <_strtod_l+0x96c>)
 800c608:	429f      	cmp	r7, r3
 800c60a:	d102      	bne.n	800c612 <_strtod_l+0x8d2>
 800c60c:	3101      	adds	r1, #1
 800c60e:	f43f addf 	beq.w	800c1d0 <_strtod_l+0x490>
 800c612:	4b23      	ldr	r3, [pc, #140]	; (800c6a0 <_strtod_l+0x960>)
 800c614:	403b      	ands	r3, r7
 800c616:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c61a:	f04f 0a00 	mov.w	sl, #0
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1a4      	bne.n	800c56e <_strtod_l+0x82e>
 800c624:	e5de      	b.n	800c1e4 <_strtod_l+0x4a4>
 800c626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c62a:	e7ea      	b.n	800c602 <_strtod_l+0x8c2>
 800c62c:	4613      	mov	r3, r2
 800c62e:	e7e8      	b.n	800c602 <_strtod_l+0x8c2>
 800c630:	ea53 030a 	orrs.w	r3, r3, sl
 800c634:	d08c      	beq.n	800c550 <_strtod_l+0x810>
 800c636:	9b08      	ldr	r3, [sp, #32]
 800c638:	b1db      	cbz	r3, 800c672 <_strtod_l+0x932>
 800c63a:	423b      	tst	r3, r7
 800c63c:	d0ef      	beq.n	800c61e <_strtod_l+0x8de>
 800c63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c640:	9a04      	ldr	r2, [sp, #16]
 800c642:	4650      	mov	r0, sl
 800c644:	4659      	mov	r1, fp
 800c646:	b1c3      	cbz	r3, 800c67a <_strtod_l+0x93a>
 800c648:	f7ff fb5c 	bl	800bd04 <sulp>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	ec51 0b18 	vmov	r0, r1, d8
 800c654:	f7f3 fe3a 	bl	80002cc <__adddf3>
 800c658:	4682      	mov	sl, r0
 800c65a:	468b      	mov	fp, r1
 800c65c:	e7df      	b.n	800c61e <_strtod_l+0x8de>
 800c65e:	4013      	ands	r3, r2
 800c660:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c664:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c668:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c66c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c670:	e7d5      	b.n	800c61e <_strtod_l+0x8de>
 800c672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c674:	ea13 0f0a 	tst.w	r3, sl
 800c678:	e7e0      	b.n	800c63c <_strtod_l+0x8fc>
 800c67a:	f7ff fb43 	bl	800bd04 <sulp>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	ec51 0b18 	vmov	r0, r1, d8
 800c686:	f7f3 fe1f 	bl	80002c8 <__aeabi_dsub>
 800c68a:	2200      	movs	r2, #0
 800c68c:	2300      	movs	r3, #0
 800c68e:	4682      	mov	sl, r0
 800c690:	468b      	mov	fp, r1
 800c692:	f7f4 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 800c696:	2800      	cmp	r0, #0
 800c698:	d0c1      	beq.n	800c61e <_strtod_l+0x8de>
 800c69a:	e611      	b.n	800c2c0 <_strtod_l+0x580>
 800c69c:	fffffc02 	.word	0xfffffc02
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	39500000 	.word	0x39500000
 800c6a8:	000fffff 	.word	0x000fffff
 800c6ac:	7fefffff 	.word	0x7fefffff
 800c6b0:	0800fcd8 	.word	0x0800fcd8
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f002 f8c2 	bl	800e840 <__ratio>
 800c6bc:	ec59 8b10 	vmov	r8, r9, d0
 800c6c0:	ee10 0a10 	vmov	r0, s0
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6ca:	4649      	mov	r1, r9
 800c6cc:	f7f4 fa30 	bl	8000b30 <__aeabi_dcmple>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d07a      	beq.n	800c7ca <_strtod_l+0xa8a>
 800c6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d04a      	beq.n	800c770 <_strtod_l+0xa30>
 800c6da:	4b95      	ldr	r3, [pc, #596]	; (800c930 <_strtod_l+0xbf0>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c930 <_strtod_l+0xbf0>
 800c6e6:	f04f 0800 	mov.w	r8, #0
 800c6ea:	4b92      	ldr	r3, [pc, #584]	; (800c934 <_strtod_l+0xbf4>)
 800c6ec:	403b      	ands	r3, r7
 800c6ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c6f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6f2:	4b91      	ldr	r3, [pc, #580]	; (800c938 <_strtod_l+0xbf8>)
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	f040 80b0 	bne.w	800c85a <_strtod_l+0xb1a>
 800c6fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c702:	ec4b ab10 	vmov	d0, sl, fp
 800c706:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c70a:	f001 ffc1 	bl	800e690 <__ulp>
 800c70e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c712:	ec53 2b10 	vmov	r2, r3, d0
 800c716:	f7f3 ff8f 	bl	8000638 <__aeabi_dmul>
 800c71a:	4652      	mov	r2, sl
 800c71c:	465b      	mov	r3, fp
 800c71e:	f7f3 fdd5 	bl	80002cc <__adddf3>
 800c722:	460b      	mov	r3, r1
 800c724:	4983      	ldr	r1, [pc, #524]	; (800c934 <_strtod_l+0xbf4>)
 800c726:	4a85      	ldr	r2, [pc, #532]	; (800c93c <_strtod_l+0xbfc>)
 800c728:	4019      	ands	r1, r3
 800c72a:	4291      	cmp	r1, r2
 800c72c:	4682      	mov	sl, r0
 800c72e:	d960      	bls.n	800c7f2 <_strtod_l+0xab2>
 800c730:	ee18 3a90 	vmov	r3, s17
 800c734:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c738:	4293      	cmp	r3, r2
 800c73a:	d104      	bne.n	800c746 <_strtod_l+0xa06>
 800c73c:	ee18 3a10 	vmov	r3, s16
 800c740:	3301      	adds	r3, #1
 800c742:	f43f ad45 	beq.w	800c1d0 <_strtod_l+0x490>
 800c746:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c948 <_strtod_l+0xc08>
 800c74a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c74e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c750:	4620      	mov	r0, r4
 800c752:	f001 fc6b 	bl	800e02c <_Bfree>
 800c756:	9905      	ldr	r1, [sp, #20]
 800c758:	4620      	mov	r0, r4
 800c75a:	f001 fc67 	bl	800e02c <_Bfree>
 800c75e:	4631      	mov	r1, r6
 800c760:	4620      	mov	r0, r4
 800c762:	f001 fc63 	bl	800e02c <_Bfree>
 800c766:	4629      	mov	r1, r5
 800c768:	4620      	mov	r0, r4
 800c76a:	f001 fc5f 	bl	800e02c <_Bfree>
 800c76e:	e61a      	b.n	800c3a6 <_strtod_l+0x666>
 800c770:	f1ba 0f00 	cmp.w	sl, #0
 800c774:	d11b      	bne.n	800c7ae <_strtod_l+0xa6e>
 800c776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c77a:	b9f3      	cbnz	r3, 800c7ba <_strtod_l+0xa7a>
 800c77c:	4b6c      	ldr	r3, [pc, #432]	; (800c930 <_strtod_l+0xbf0>)
 800c77e:	2200      	movs	r2, #0
 800c780:	4640      	mov	r0, r8
 800c782:	4649      	mov	r1, r9
 800c784:	f7f4 f9ca 	bl	8000b1c <__aeabi_dcmplt>
 800c788:	b9d0      	cbnz	r0, 800c7c0 <_strtod_l+0xa80>
 800c78a:	4640      	mov	r0, r8
 800c78c:	4649      	mov	r1, r9
 800c78e:	4b6c      	ldr	r3, [pc, #432]	; (800c940 <_strtod_l+0xc00>)
 800c790:	2200      	movs	r2, #0
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	4680      	mov	r8, r0
 800c798:	4689      	mov	r9, r1
 800c79a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c79e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c7a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c7a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c7a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7ac:	e79d      	b.n	800c6ea <_strtod_l+0x9aa>
 800c7ae:	f1ba 0f01 	cmp.w	sl, #1
 800c7b2:	d102      	bne.n	800c7ba <_strtod_l+0xa7a>
 800c7b4:	2f00      	cmp	r7, #0
 800c7b6:	f43f ad83 	beq.w	800c2c0 <_strtod_l+0x580>
 800c7ba:	4b62      	ldr	r3, [pc, #392]	; (800c944 <_strtod_l+0xc04>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	e78e      	b.n	800c6de <_strtod_l+0x99e>
 800c7c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c940 <_strtod_l+0xc00>
 800c7c4:	f04f 0800 	mov.w	r8, #0
 800c7c8:	e7e7      	b.n	800c79a <_strtod_l+0xa5a>
 800c7ca:	4b5d      	ldr	r3, [pc, #372]	; (800c940 <_strtod_l+0xc00>)
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f7f3 ff31 	bl	8000638 <__aeabi_dmul>
 800c7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7d8:	4680      	mov	r8, r0
 800c7da:	4689      	mov	r9, r1
 800c7dc:	b933      	cbnz	r3, 800c7ec <_strtod_l+0xaac>
 800c7de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c7ea:	e7dd      	b.n	800c7a8 <_strtod_l+0xa68>
 800c7ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c7f0:	e7f9      	b.n	800c7e6 <_strtod_l+0xaa6>
 800c7f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1a8      	bne.n	800c74e <_strtod_l+0xa0e>
 800c7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c802:	0d1b      	lsrs	r3, r3, #20
 800c804:	051b      	lsls	r3, r3, #20
 800c806:	429a      	cmp	r2, r3
 800c808:	d1a1      	bne.n	800c74e <_strtod_l+0xa0e>
 800c80a:	4640      	mov	r0, r8
 800c80c:	4649      	mov	r1, r9
 800c80e:	f7f4 fa73 	bl	8000cf8 <__aeabi_d2lz>
 800c812:	f7f3 fee3 	bl	80005dc <__aeabi_l2d>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f3 fd53 	bl	80002c8 <__aeabi_dsub>
 800c822:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c828:	ea43 030a 	orr.w	r3, r3, sl
 800c82c:	4313      	orrs	r3, r2
 800c82e:	4680      	mov	r8, r0
 800c830:	4689      	mov	r9, r1
 800c832:	d055      	beq.n	800c8e0 <_strtod_l+0xba0>
 800c834:	a336      	add	r3, pc, #216	; (adr r3, 800c910 <_strtod_l+0xbd0>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	f7f4 f96f 	bl	8000b1c <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f47f acd0 	bne.w	800c1e4 <_strtod_l+0x4a4>
 800c844:	a334      	add	r3, pc, #208	; (adr r3, 800c918 <_strtod_l+0xbd8>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	4640      	mov	r0, r8
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f4 f983 	bl	8000b58 <__aeabi_dcmpgt>
 800c852:	2800      	cmp	r0, #0
 800c854:	f43f af7b 	beq.w	800c74e <_strtod_l+0xa0e>
 800c858:	e4c4      	b.n	800c1e4 <_strtod_l+0x4a4>
 800c85a:	9b04      	ldr	r3, [sp, #16]
 800c85c:	b333      	cbz	r3, 800c8ac <_strtod_l+0xb6c>
 800c85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c860:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c864:	d822      	bhi.n	800c8ac <_strtod_l+0xb6c>
 800c866:	a32e      	add	r3, pc, #184	; (adr r3, 800c920 <_strtod_l+0xbe0>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	4640      	mov	r0, r8
 800c86e:	4649      	mov	r1, r9
 800c870:	f7f4 f95e 	bl	8000b30 <__aeabi_dcmple>
 800c874:	b1a0      	cbz	r0, 800c8a0 <_strtod_l+0xb60>
 800c876:	4649      	mov	r1, r9
 800c878:	4640      	mov	r0, r8
 800c87a:	f7f4 f9b5 	bl	8000be8 <__aeabi_d2uiz>
 800c87e:	2801      	cmp	r0, #1
 800c880:	bf38      	it	cc
 800c882:	2001      	movcc	r0, #1
 800c884:	f7f3 fe5e 	bl	8000544 <__aeabi_ui2d>
 800c888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c88a:	4680      	mov	r8, r0
 800c88c:	4689      	mov	r9, r1
 800c88e:	bb23      	cbnz	r3, 800c8da <_strtod_l+0xb9a>
 800c890:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c894:	9010      	str	r0, [sp, #64]	; 0x40
 800c896:	9311      	str	r3, [sp, #68]	; 0x44
 800c898:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c89c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c8b4:	eef0 0a68 	vmov.f32	s1, s17
 800c8b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8bc:	f001 fee8 	bl	800e690 <__ulp>
 800c8c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8c4:	ec53 2b10 	vmov	r2, r3, d0
 800c8c8:	f7f3 feb6 	bl	8000638 <__aeabi_dmul>
 800c8cc:	ec53 2b18 	vmov	r2, r3, d8
 800c8d0:	f7f3 fcfc 	bl	80002cc <__adddf3>
 800c8d4:	4682      	mov	sl, r0
 800c8d6:	468b      	mov	fp, r1
 800c8d8:	e78d      	b.n	800c7f6 <_strtod_l+0xab6>
 800c8da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c8de:	e7db      	b.n	800c898 <_strtod_l+0xb58>
 800c8e0:	a311      	add	r3, pc, #68	; (adr r3, 800c928 <_strtod_l+0xbe8>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f7f4 f919 	bl	8000b1c <__aeabi_dcmplt>
 800c8ea:	e7b2      	b.n	800c852 <_strtod_l+0xb12>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c8f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c8f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	f7ff ba6b 	b.w	800bdd0 <_strtod_l+0x90>
 800c8fa:	2a65      	cmp	r2, #101	; 0x65
 800c8fc:	f43f ab5f 	beq.w	800bfbe <_strtod_l+0x27e>
 800c900:	2a45      	cmp	r2, #69	; 0x45
 800c902:	f43f ab5c 	beq.w	800bfbe <_strtod_l+0x27e>
 800c906:	2301      	movs	r3, #1
 800c908:	f7ff bb94 	b.w	800c034 <_strtod_l+0x2f4>
 800c90c:	f3af 8000 	nop.w
 800c910:	94a03595 	.word	0x94a03595
 800c914:	3fdfffff 	.word	0x3fdfffff
 800c918:	35afe535 	.word	0x35afe535
 800c91c:	3fe00000 	.word	0x3fe00000
 800c920:	ffc00000 	.word	0xffc00000
 800c924:	41dfffff 	.word	0x41dfffff
 800c928:	94a03595 	.word	0x94a03595
 800c92c:	3fcfffff 	.word	0x3fcfffff
 800c930:	3ff00000 	.word	0x3ff00000
 800c934:	7ff00000 	.word	0x7ff00000
 800c938:	7fe00000 	.word	0x7fe00000
 800c93c:	7c9fffff 	.word	0x7c9fffff
 800c940:	3fe00000 	.word	0x3fe00000
 800c944:	bff00000 	.word	0xbff00000
 800c948:	7fefffff 	.word	0x7fefffff

0800c94c <strtod>:
 800c94c:	460a      	mov	r2, r1
 800c94e:	4601      	mov	r1, r0
 800c950:	4802      	ldr	r0, [pc, #8]	; (800c95c <strtod+0x10>)
 800c952:	4b03      	ldr	r3, [pc, #12]	; (800c960 <strtod+0x14>)
 800c954:	6800      	ldr	r0, [r0, #0]
 800c956:	f7ff b9f3 	b.w	800bd40 <_strtod_l>
 800c95a:	bf00      	nop
 800c95c:	20000024 	.word	0x20000024
 800c960:	2000008c 	.word	0x2000008c

0800c964 <strtok>:
 800c964:	4b16      	ldr	r3, [pc, #88]	; (800c9c0 <strtok+0x5c>)
 800c966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c968:	681e      	ldr	r6, [r3, #0]
 800c96a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c96c:	4605      	mov	r5, r0
 800c96e:	b9fc      	cbnz	r4, 800c9b0 <strtok+0x4c>
 800c970:	2050      	movs	r0, #80	; 0x50
 800c972:	9101      	str	r1, [sp, #4]
 800c974:	f7fe fbec 	bl	800b150 <malloc>
 800c978:	9901      	ldr	r1, [sp, #4]
 800c97a:	65b0      	str	r0, [r6, #88]	; 0x58
 800c97c:	4602      	mov	r2, r0
 800c97e:	b920      	cbnz	r0, 800c98a <strtok+0x26>
 800c980:	4b10      	ldr	r3, [pc, #64]	; (800c9c4 <strtok+0x60>)
 800c982:	4811      	ldr	r0, [pc, #68]	; (800c9c8 <strtok+0x64>)
 800c984:	2157      	movs	r1, #87	; 0x57
 800c986:	f000 f8d5 	bl	800cb34 <__assert_func>
 800c98a:	e9c0 4400 	strd	r4, r4, [r0]
 800c98e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c992:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c996:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c99a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c99e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c9a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c9a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c9aa:	6184      	str	r4, [r0, #24]
 800c9ac:	7704      	strb	r4, [r0, #28]
 800c9ae:	6244      	str	r4, [r0, #36]	; 0x24
 800c9b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	b002      	add	sp, #8
 800c9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c9bc:	f000 b806 	b.w	800c9cc <__strtok_r>
 800c9c0:	20000024 	.word	0x20000024
 800c9c4:	0800fd00 	.word	0x0800fd00
 800c9c8:	0800fd17 	.word	0x0800fd17

0800c9cc <__strtok_r>:
 800c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ce:	b908      	cbnz	r0, 800c9d4 <__strtok_r+0x8>
 800c9d0:	6810      	ldr	r0, [r2, #0]
 800c9d2:	b188      	cbz	r0, 800c9f8 <__strtok_r+0x2c>
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c9dc:	460f      	mov	r7, r1
 800c9de:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c9e2:	b91e      	cbnz	r6, 800c9ec <__strtok_r+0x20>
 800c9e4:	b965      	cbnz	r5, 800ca00 <__strtok_r+0x34>
 800c9e6:	6015      	str	r5, [r2, #0]
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	e005      	b.n	800c9f8 <__strtok_r+0x2c>
 800c9ec:	42b5      	cmp	r5, r6
 800c9ee:	d1f6      	bne.n	800c9de <__strtok_r+0x12>
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1f0      	bne.n	800c9d6 <__strtok_r+0xa>
 800c9f4:	6014      	str	r4, [r2, #0]
 800c9f6:	7003      	strb	r3, [r0, #0]
 800c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	e00c      	b.n	800ca18 <__strtok_r+0x4c>
 800c9fe:	b915      	cbnz	r5, 800ca06 <__strtok_r+0x3a>
 800ca00:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca04:	460e      	mov	r6, r1
 800ca06:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ca0a:	42ab      	cmp	r3, r5
 800ca0c:	d1f7      	bne.n	800c9fe <__strtok_r+0x32>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0f3      	beq.n	800c9fa <__strtok_r+0x2e>
 800ca12:	2300      	movs	r3, #0
 800ca14:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ca18:	6014      	str	r4, [r2, #0]
 800ca1a:	e7ed      	b.n	800c9f8 <__strtok_r+0x2c>

0800ca1c <_strtol_l.constprop.0>:
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca22:	d001      	beq.n	800ca28 <_strtol_l.constprop.0+0xc>
 800ca24:	2b24      	cmp	r3, #36	; 0x24
 800ca26:	d906      	bls.n	800ca36 <_strtol_l.constprop.0+0x1a>
 800ca28:	f7fe fb68 	bl	800b0fc <__errno>
 800ca2c:	2316      	movs	r3, #22
 800ca2e:	6003      	str	r3, [r0, #0]
 800ca30:	2000      	movs	r0, #0
 800ca32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cb1c <_strtol_l.constprop.0+0x100>
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	462e      	mov	r6, r5
 800ca3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca42:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ca46:	f017 0708 	ands.w	r7, r7, #8
 800ca4a:	d1f7      	bne.n	800ca3c <_strtol_l.constprop.0+0x20>
 800ca4c:	2c2d      	cmp	r4, #45	; 0x2d
 800ca4e:	d132      	bne.n	800cab6 <_strtol_l.constprop.0+0x9a>
 800ca50:	782c      	ldrb	r4, [r5, #0]
 800ca52:	2701      	movs	r7, #1
 800ca54:	1cb5      	adds	r5, r6, #2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d05b      	beq.n	800cb12 <_strtol_l.constprop.0+0xf6>
 800ca5a:	2b10      	cmp	r3, #16
 800ca5c:	d109      	bne.n	800ca72 <_strtol_l.constprop.0+0x56>
 800ca5e:	2c30      	cmp	r4, #48	; 0x30
 800ca60:	d107      	bne.n	800ca72 <_strtol_l.constprop.0+0x56>
 800ca62:	782c      	ldrb	r4, [r5, #0]
 800ca64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca68:	2c58      	cmp	r4, #88	; 0x58
 800ca6a:	d14d      	bne.n	800cb08 <_strtol_l.constprop.0+0xec>
 800ca6c:	786c      	ldrb	r4, [r5, #1]
 800ca6e:	2310      	movs	r3, #16
 800ca70:	3502      	adds	r5, #2
 800ca72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ca7a:	f04f 0c00 	mov.w	ip, #0
 800ca7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca82:	4666      	mov	r6, ip
 800ca84:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ca8c:	f1be 0f09 	cmp.w	lr, #9
 800ca90:	d816      	bhi.n	800cac0 <_strtol_l.constprop.0+0xa4>
 800ca92:	4674      	mov	r4, lr
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	dd24      	ble.n	800cae2 <_strtol_l.constprop.0+0xc6>
 800ca98:	f1bc 0f00 	cmp.w	ip, #0
 800ca9c:	db1e      	blt.n	800cadc <_strtol_l.constprop.0+0xc0>
 800ca9e:	45b1      	cmp	r9, r6
 800caa0:	d31c      	bcc.n	800cadc <_strtol_l.constprop.0+0xc0>
 800caa2:	d101      	bne.n	800caa8 <_strtol_l.constprop.0+0x8c>
 800caa4:	45a2      	cmp	sl, r4
 800caa6:	db19      	blt.n	800cadc <_strtol_l.constprop.0+0xc0>
 800caa8:	fb06 4603 	mla	r6, r6, r3, r4
 800caac:	f04f 0c01 	mov.w	ip, #1
 800cab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cab4:	e7e8      	b.n	800ca88 <_strtol_l.constprop.0+0x6c>
 800cab6:	2c2b      	cmp	r4, #43	; 0x2b
 800cab8:	bf04      	itt	eq
 800caba:	782c      	ldrbeq	r4, [r5, #0]
 800cabc:	1cb5      	addeq	r5, r6, #2
 800cabe:	e7ca      	b.n	800ca56 <_strtol_l.constprop.0+0x3a>
 800cac0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cac4:	f1be 0f19 	cmp.w	lr, #25
 800cac8:	d801      	bhi.n	800cace <_strtol_l.constprop.0+0xb2>
 800caca:	3c37      	subs	r4, #55	; 0x37
 800cacc:	e7e2      	b.n	800ca94 <_strtol_l.constprop.0+0x78>
 800cace:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cad2:	f1be 0f19 	cmp.w	lr, #25
 800cad6:	d804      	bhi.n	800cae2 <_strtol_l.constprop.0+0xc6>
 800cad8:	3c57      	subs	r4, #87	; 0x57
 800cada:	e7db      	b.n	800ca94 <_strtol_l.constprop.0+0x78>
 800cadc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cae0:	e7e6      	b.n	800cab0 <_strtol_l.constprop.0+0x94>
 800cae2:	f1bc 0f00 	cmp.w	ip, #0
 800cae6:	da05      	bge.n	800caf4 <_strtol_l.constprop.0+0xd8>
 800cae8:	2322      	movs	r3, #34	; 0x22
 800caea:	6003      	str	r3, [r0, #0]
 800caec:	4646      	mov	r6, r8
 800caee:	b942      	cbnz	r2, 800cb02 <_strtol_l.constprop.0+0xe6>
 800caf0:	4630      	mov	r0, r6
 800caf2:	e79e      	b.n	800ca32 <_strtol_l.constprop.0+0x16>
 800caf4:	b107      	cbz	r7, 800caf8 <_strtol_l.constprop.0+0xdc>
 800caf6:	4276      	negs	r6, r6
 800caf8:	2a00      	cmp	r2, #0
 800cafa:	d0f9      	beq.n	800caf0 <_strtol_l.constprop.0+0xd4>
 800cafc:	f1bc 0f00 	cmp.w	ip, #0
 800cb00:	d000      	beq.n	800cb04 <_strtol_l.constprop.0+0xe8>
 800cb02:	1e69      	subs	r1, r5, #1
 800cb04:	6011      	str	r1, [r2, #0]
 800cb06:	e7f3      	b.n	800caf0 <_strtol_l.constprop.0+0xd4>
 800cb08:	2430      	movs	r4, #48	; 0x30
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d1b1      	bne.n	800ca72 <_strtol_l.constprop.0+0x56>
 800cb0e:	2308      	movs	r3, #8
 800cb10:	e7af      	b.n	800ca72 <_strtol_l.constprop.0+0x56>
 800cb12:	2c30      	cmp	r4, #48	; 0x30
 800cb14:	d0a5      	beq.n	800ca62 <_strtol_l.constprop.0+0x46>
 800cb16:	230a      	movs	r3, #10
 800cb18:	e7ab      	b.n	800ca72 <_strtol_l.constprop.0+0x56>
 800cb1a:	bf00      	nop
 800cb1c:	0800fdb1 	.word	0x0800fdb1

0800cb20 <strtol>:
 800cb20:	4613      	mov	r3, r2
 800cb22:	460a      	mov	r2, r1
 800cb24:	4601      	mov	r1, r0
 800cb26:	4802      	ldr	r0, [pc, #8]	; (800cb30 <strtol+0x10>)
 800cb28:	6800      	ldr	r0, [r0, #0]
 800cb2a:	f7ff bf77 	b.w	800ca1c <_strtol_l.constprop.0>
 800cb2e:	bf00      	nop
 800cb30:	20000024 	.word	0x20000024

0800cb34 <__assert_func>:
 800cb34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb36:	4614      	mov	r4, r2
 800cb38:	461a      	mov	r2, r3
 800cb3a:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <__assert_func+0x2c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4605      	mov	r5, r0
 800cb40:	68d8      	ldr	r0, [r3, #12]
 800cb42:	b14c      	cbz	r4, 800cb58 <__assert_func+0x24>
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <__assert_func+0x30>)
 800cb46:	9100      	str	r1, [sp, #0]
 800cb48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb4c:	4906      	ldr	r1, [pc, #24]	; (800cb68 <__assert_func+0x34>)
 800cb4e:	462b      	mov	r3, r5
 800cb50:	f000 fe88 	bl	800d864 <fiprintf>
 800cb54:	f002 faa2 	bl	800f09c <abort>
 800cb58:	4b04      	ldr	r3, [pc, #16]	; (800cb6c <__assert_func+0x38>)
 800cb5a:	461c      	mov	r4, r3
 800cb5c:	e7f3      	b.n	800cb46 <__assert_func+0x12>
 800cb5e:	bf00      	nop
 800cb60:	20000024 	.word	0x20000024
 800cb64:	0800fd74 	.word	0x0800fd74
 800cb68:	0800fd81 	.word	0x0800fd81
 800cb6c:	0800fdaf 	.word	0x0800fdaf

0800cb70 <quorem>:
 800cb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	6903      	ldr	r3, [r0, #16]
 800cb76:	690c      	ldr	r4, [r1, #16]
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	f2c0 8081 	blt.w	800cc82 <quorem+0x112>
 800cb80:	3c01      	subs	r4, #1
 800cb82:	f101 0814 	add.w	r8, r1, #20
 800cb86:	f100 0514 	add.w	r5, r0, #20
 800cb8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cba4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cba8:	d331      	bcc.n	800cc0e <quorem+0x9e>
 800cbaa:	f04f 0e00 	mov.w	lr, #0
 800cbae:	4640      	mov	r0, r8
 800cbb0:	46ac      	mov	ip, r5
 800cbb2:	46f2      	mov	sl, lr
 800cbb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbb8:	b293      	uxth	r3, r2
 800cbba:	fb06 e303 	mla	r3, r6, r3, lr
 800cbbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	ebaa 0303 	sub.w	r3, sl, r3
 800cbc8:	f8dc a000 	ldr.w	sl, [ip]
 800cbcc:	0c12      	lsrs	r2, r2, #16
 800cbce:	fa13 f38a 	uxtah	r3, r3, sl
 800cbd2:	fb06 e202 	mla	r2, r6, r2, lr
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	9b00      	ldr	r3, [sp, #0]
 800cbda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cbde:	b292      	uxth	r2, r2
 800cbe0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cbe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbe8:	f8bd 3000 	ldrh.w	r3, [sp]
 800cbec:	4581      	cmp	r9, r0
 800cbee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbf2:	f84c 3b04 	str.w	r3, [ip], #4
 800cbf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbfa:	d2db      	bcs.n	800cbb4 <quorem+0x44>
 800cbfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc00:	b92b      	cbnz	r3, 800cc0e <quorem+0x9e>
 800cc02:	9b01      	ldr	r3, [sp, #4]
 800cc04:	3b04      	subs	r3, #4
 800cc06:	429d      	cmp	r5, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	d32e      	bcc.n	800cc6a <quorem+0xfa>
 800cc0c:	613c      	str	r4, [r7, #16]
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f001 fc98 	bl	800e544 <__mcmp>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	db24      	blt.n	800cc62 <quorem+0xf2>
 800cc18:	3601      	adds	r6, #1
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f04f 0c00 	mov.w	ip, #0
 800cc20:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc24:	f8d0 e000 	ldr.w	lr, [r0]
 800cc28:	b293      	uxth	r3, r2
 800cc2a:	ebac 0303 	sub.w	r3, ip, r3
 800cc2e:	0c12      	lsrs	r2, r2, #16
 800cc30:	fa13 f38e 	uxtah	r3, r3, lr
 800cc34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc42:	45c1      	cmp	r9, r8
 800cc44:	f840 3b04 	str.w	r3, [r0], #4
 800cc48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc4c:	d2e8      	bcs.n	800cc20 <quorem+0xb0>
 800cc4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc56:	b922      	cbnz	r2, 800cc62 <quorem+0xf2>
 800cc58:	3b04      	subs	r3, #4
 800cc5a:	429d      	cmp	r5, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	d30a      	bcc.n	800cc76 <quorem+0x106>
 800cc60:	613c      	str	r4, [r7, #16]
 800cc62:	4630      	mov	r0, r6
 800cc64:	b003      	add	sp, #12
 800cc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6a:	6812      	ldr	r2, [r2, #0]
 800cc6c:	3b04      	subs	r3, #4
 800cc6e:	2a00      	cmp	r2, #0
 800cc70:	d1cc      	bne.n	800cc0c <quorem+0x9c>
 800cc72:	3c01      	subs	r4, #1
 800cc74:	e7c7      	b.n	800cc06 <quorem+0x96>
 800cc76:	6812      	ldr	r2, [r2, #0]
 800cc78:	3b04      	subs	r3, #4
 800cc7a:	2a00      	cmp	r2, #0
 800cc7c:	d1f0      	bne.n	800cc60 <quorem+0xf0>
 800cc7e:	3c01      	subs	r4, #1
 800cc80:	e7eb      	b.n	800cc5a <quorem+0xea>
 800cc82:	2000      	movs	r0, #0
 800cc84:	e7ee      	b.n	800cc64 <quorem+0xf4>
	...

0800cc88 <_dtoa_r>:
 800cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	ed2d 8b04 	vpush	{d8-d9}
 800cc90:	ec57 6b10 	vmov	r6, r7, d0
 800cc94:	b093      	sub	sp, #76	; 0x4c
 800cc96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc9c:	9106      	str	r1, [sp, #24]
 800cc9e:	ee10 aa10 	vmov	sl, s0
 800cca2:	4604      	mov	r4, r0
 800cca4:	9209      	str	r2, [sp, #36]	; 0x24
 800cca6:	930c      	str	r3, [sp, #48]	; 0x30
 800cca8:	46bb      	mov	fp, r7
 800ccaa:	b975      	cbnz	r5, 800ccca <_dtoa_r+0x42>
 800ccac:	2010      	movs	r0, #16
 800ccae:	f7fe fa4f 	bl	800b150 <malloc>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	6260      	str	r0, [r4, #36]	; 0x24
 800ccb6:	b920      	cbnz	r0, 800ccc2 <_dtoa_r+0x3a>
 800ccb8:	4ba7      	ldr	r3, [pc, #668]	; (800cf58 <_dtoa_r+0x2d0>)
 800ccba:	21ea      	movs	r1, #234	; 0xea
 800ccbc:	48a7      	ldr	r0, [pc, #668]	; (800cf5c <_dtoa_r+0x2d4>)
 800ccbe:	f7ff ff39 	bl	800cb34 <__assert_func>
 800ccc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ccc6:	6005      	str	r5, [r0, #0]
 800ccc8:	60c5      	str	r5, [r0, #12]
 800ccca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cccc:	6819      	ldr	r1, [r3, #0]
 800ccce:	b151      	cbz	r1, 800cce6 <_dtoa_r+0x5e>
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	604a      	str	r2, [r1, #4]
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	4093      	lsls	r3, r2
 800ccd8:	608b      	str	r3, [r1, #8]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f001 f9a6 	bl	800e02c <_Bfree>
 800cce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce2:	2200      	movs	r2, #0
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	1e3b      	subs	r3, r7, #0
 800cce8:	bfaa      	itet	ge
 800ccea:	2300      	movge	r3, #0
 800ccec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ccf0:	f8c8 3000 	strge.w	r3, [r8]
 800ccf4:	4b9a      	ldr	r3, [pc, #616]	; (800cf60 <_dtoa_r+0x2d8>)
 800ccf6:	bfbc      	itt	lt
 800ccf8:	2201      	movlt	r2, #1
 800ccfa:	f8c8 2000 	strlt.w	r2, [r8]
 800ccfe:	ea33 030b 	bics.w	r3, r3, fp
 800cd02:	d11b      	bne.n	800cd3c <_dtoa_r+0xb4>
 800cd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd06:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd0a:	6013      	str	r3, [r2, #0]
 800cd0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd10:	4333      	orrs	r3, r6
 800cd12:	f000 8592 	beq.w	800d83a <_dtoa_r+0xbb2>
 800cd16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd18:	b963      	cbnz	r3, 800cd34 <_dtoa_r+0xac>
 800cd1a:	4b92      	ldr	r3, [pc, #584]	; (800cf64 <_dtoa_r+0x2dc>)
 800cd1c:	e022      	b.n	800cd64 <_dtoa_r+0xdc>
 800cd1e:	4b92      	ldr	r3, [pc, #584]	; (800cf68 <_dtoa_r+0x2e0>)
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	3308      	adds	r3, #8
 800cd24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	9801      	ldr	r0, [sp, #4]
 800cd2a:	b013      	add	sp, #76	; 0x4c
 800cd2c:	ecbd 8b04 	vpop	{d8-d9}
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	4b8b      	ldr	r3, [pc, #556]	; (800cf64 <_dtoa_r+0x2dc>)
 800cd36:	9301      	str	r3, [sp, #4]
 800cd38:	3303      	adds	r3, #3
 800cd3a:	e7f3      	b.n	800cd24 <_dtoa_r+0x9c>
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	2300      	movs	r3, #0
 800cd40:	4650      	mov	r0, sl
 800cd42:	4659      	mov	r1, fp
 800cd44:	f7f3 fee0 	bl	8000b08 <__aeabi_dcmpeq>
 800cd48:	ec4b ab19 	vmov	d9, sl, fp
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	b158      	cbz	r0, 800cd68 <_dtoa_r+0xe0>
 800cd50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd52:	2301      	movs	r3, #1
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 856b 	beq.w	800d834 <_dtoa_r+0xbac>
 800cd5e:	4883      	ldr	r0, [pc, #524]	; (800cf6c <_dtoa_r+0x2e4>)
 800cd60:	6018      	str	r0, [r3, #0]
 800cd62:	1e43      	subs	r3, r0, #1
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	e7df      	b.n	800cd28 <_dtoa_r+0xa0>
 800cd68:	ec4b ab10 	vmov	d0, sl, fp
 800cd6c:	aa10      	add	r2, sp, #64	; 0x40
 800cd6e:	a911      	add	r1, sp, #68	; 0x44
 800cd70:	4620      	mov	r0, r4
 800cd72:	f001 fd09 	bl	800e788 <__d2b>
 800cd76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd7a:	ee08 0a10 	vmov	s16, r0
 800cd7e:	2d00      	cmp	r5, #0
 800cd80:	f000 8084 	beq.w	800ce8c <_dtoa_r+0x204>
 800cd84:	ee19 3a90 	vmov	r3, s19
 800cd88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd90:	4656      	mov	r6, sl
 800cd92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd9e:	4b74      	ldr	r3, [pc, #464]	; (800cf70 <_dtoa_r+0x2e8>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	4630      	mov	r0, r6
 800cda4:	4639      	mov	r1, r7
 800cda6:	f7f3 fa8f 	bl	80002c8 <__aeabi_dsub>
 800cdaa:	a365      	add	r3, pc, #404	; (adr r3, 800cf40 <_dtoa_r+0x2b8>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7f3 fc42 	bl	8000638 <__aeabi_dmul>
 800cdb4:	a364      	add	r3, pc, #400	; (adr r3, 800cf48 <_dtoa_r+0x2c0>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f7f3 fa87 	bl	80002cc <__adddf3>
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	460f      	mov	r7, r1
 800cdc4:	f7f3 fbce 	bl	8000564 <__aeabi_i2d>
 800cdc8:	a361      	add	r3, pc, #388	; (adr r3, 800cf50 <_dtoa_r+0x2c8>)
 800cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdce:	f7f3 fc33 	bl	8000638 <__aeabi_dmul>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	4639      	mov	r1, r7
 800cdda:	f7f3 fa77 	bl	80002cc <__adddf3>
 800cdde:	4606      	mov	r6, r0
 800cde0:	460f      	mov	r7, r1
 800cde2:	f7f3 fed9 	bl	8000b98 <__aeabi_d2iz>
 800cde6:	2200      	movs	r2, #0
 800cde8:	9000      	str	r0, [sp, #0]
 800cdea:	2300      	movs	r3, #0
 800cdec:	4630      	mov	r0, r6
 800cdee:	4639      	mov	r1, r7
 800cdf0:	f7f3 fe94 	bl	8000b1c <__aeabi_dcmplt>
 800cdf4:	b150      	cbz	r0, 800ce0c <_dtoa_r+0x184>
 800cdf6:	9800      	ldr	r0, [sp, #0]
 800cdf8:	f7f3 fbb4 	bl	8000564 <__aeabi_i2d>
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	463b      	mov	r3, r7
 800ce00:	f7f3 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 800ce04:	b910      	cbnz	r0, 800ce0c <_dtoa_r+0x184>
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	9b00      	ldr	r3, [sp, #0]
 800ce0e:	2b16      	cmp	r3, #22
 800ce10:	d85a      	bhi.n	800cec8 <_dtoa_r+0x240>
 800ce12:	9a00      	ldr	r2, [sp, #0]
 800ce14:	4b57      	ldr	r3, [pc, #348]	; (800cf74 <_dtoa_r+0x2ec>)
 800ce16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	ec51 0b19 	vmov	r0, r1, d9
 800ce22:	f7f3 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d050      	beq.n	800cecc <_dtoa_r+0x244>
 800ce2a:	9b00      	ldr	r3, [sp, #0]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	2300      	movs	r3, #0
 800ce32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce36:	1b5d      	subs	r5, r3, r5
 800ce38:	1e6b      	subs	r3, r5, #1
 800ce3a:	9305      	str	r3, [sp, #20]
 800ce3c:	bf45      	ittet	mi
 800ce3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce42:	9304      	strmi	r3, [sp, #16]
 800ce44:	2300      	movpl	r3, #0
 800ce46:	2300      	movmi	r3, #0
 800ce48:	bf4c      	ite	mi
 800ce4a:	9305      	strmi	r3, [sp, #20]
 800ce4c:	9304      	strpl	r3, [sp, #16]
 800ce4e:	9b00      	ldr	r3, [sp, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	db3d      	blt.n	800ced0 <_dtoa_r+0x248>
 800ce54:	9b05      	ldr	r3, [sp, #20]
 800ce56:	9a00      	ldr	r2, [sp, #0]
 800ce58:	920a      	str	r2, [sp, #40]	; 0x28
 800ce5a:	4413      	add	r3, r2
 800ce5c:	9305      	str	r3, [sp, #20]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	9307      	str	r3, [sp, #28]
 800ce62:	9b06      	ldr	r3, [sp, #24]
 800ce64:	2b09      	cmp	r3, #9
 800ce66:	f200 8089 	bhi.w	800cf7c <_dtoa_r+0x2f4>
 800ce6a:	2b05      	cmp	r3, #5
 800ce6c:	bfc4      	itt	gt
 800ce6e:	3b04      	subgt	r3, #4
 800ce70:	9306      	strgt	r3, [sp, #24]
 800ce72:	9b06      	ldr	r3, [sp, #24]
 800ce74:	f1a3 0302 	sub.w	r3, r3, #2
 800ce78:	bfcc      	ite	gt
 800ce7a:	2500      	movgt	r5, #0
 800ce7c:	2501      	movle	r5, #1
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	f200 8087 	bhi.w	800cf92 <_dtoa_r+0x30a>
 800ce84:	e8df f003 	tbb	[pc, r3]
 800ce88:	59383a2d 	.word	0x59383a2d
 800ce8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce90:	441d      	add	r5, r3
 800ce92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce96:	2b20      	cmp	r3, #32
 800ce98:	bfc1      	itttt	gt
 800ce9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cea2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cea6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ceaa:	bfda      	itte	le
 800ceac:	f1c3 0320 	rsble	r3, r3, #32
 800ceb0:	fa06 f003 	lslle.w	r0, r6, r3
 800ceb4:	4318      	orrgt	r0, r3
 800ceb6:	f7f3 fb45 	bl	8000544 <__aeabi_ui2d>
 800ceba:	2301      	movs	r3, #1
 800cebc:	4606      	mov	r6, r0
 800cebe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cec2:	3d01      	subs	r5, #1
 800cec4:	930e      	str	r3, [sp, #56]	; 0x38
 800cec6:	e76a      	b.n	800cd9e <_dtoa_r+0x116>
 800cec8:	2301      	movs	r3, #1
 800ceca:	e7b2      	b.n	800ce32 <_dtoa_r+0x1aa>
 800cecc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cece:	e7b1      	b.n	800ce34 <_dtoa_r+0x1ac>
 800ced0:	9b04      	ldr	r3, [sp, #16]
 800ced2:	9a00      	ldr	r2, [sp, #0]
 800ced4:	1a9b      	subs	r3, r3, r2
 800ced6:	9304      	str	r3, [sp, #16]
 800ced8:	4253      	negs	r3, r2
 800ceda:	9307      	str	r3, [sp, #28]
 800cedc:	2300      	movs	r3, #0
 800cede:	930a      	str	r3, [sp, #40]	; 0x28
 800cee0:	e7bf      	b.n	800ce62 <_dtoa_r+0x1da>
 800cee2:	2300      	movs	r3, #0
 800cee4:	9308      	str	r3, [sp, #32]
 800cee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	dc55      	bgt.n	800cf98 <_dtoa_r+0x310>
 800ceec:	2301      	movs	r3, #1
 800ceee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cef2:	461a      	mov	r2, r3
 800cef4:	9209      	str	r2, [sp, #36]	; 0x24
 800cef6:	e00c      	b.n	800cf12 <_dtoa_r+0x28a>
 800cef8:	2301      	movs	r3, #1
 800cefa:	e7f3      	b.n	800cee4 <_dtoa_r+0x25c>
 800cefc:	2300      	movs	r3, #0
 800cefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf00:	9308      	str	r3, [sp, #32]
 800cf02:	9b00      	ldr	r3, [sp, #0]
 800cf04:	4413      	add	r3, r2
 800cf06:	9302      	str	r3, [sp, #8]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	bfb8      	it	lt
 800cf10:	2301      	movlt	r3, #1
 800cf12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf14:	2200      	movs	r2, #0
 800cf16:	6042      	str	r2, [r0, #4]
 800cf18:	2204      	movs	r2, #4
 800cf1a:	f102 0614 	add.w	r6, r2, #20
 800cf1e:	429e      	cmp	r6, r3
 800cf20:	6841      	ldr	r1, [r0, #4]
 800cf22:	d93d      	bls.n	800cfa0 <_dtoa_r+0x318>
 800cf24:	4620      	mov	r0, r4
 800cf26:	f001 f841 	bl	800dfac <_Balloc>
 800cf2a:	9001      	str	r0, [sp, #4]
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d13b      	bne.n	800cfa8 <_dtoa_r+0x320>
 800cf30:	4b11      	ldr	r3, [pc, #68]	; (800cf78 <_dtoa_r+0x2f0>)
 800cf32:	4602      	mov	r2, r0
 800cf34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cf38:	e6c0      	b.n	800ccbc <_dtoa_r+0x34>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e7df      	b.n	800cefe <_dtoa_r+0x276>
 800cf3e:	bf00      	nop
 800cf40:	636f4361 	.word	0x636f4361
 800cf44:	3fd287a7 	.word	0x3fd287a7
 800cf48:	8b60c8b3 	.word	0x8b60c8b3
 800cf4c:	3fc68a28 	.word	0x3fc68a28
 800cf50:	509f79fb 	.word	0x509f79fb
 800cf54:	3fd34413 	.word	0x3fd34413
 800cf58:	0800fd00 	.word	0x0800fd00
 800cf5c:	0800febe 	.word	0x0800febe
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	0800feba 	.word	0x0800feba
 800cf68:	0800feb1 	.word	0x0800feb1
 800cf6c:	0800fc89 	.word	0x0800fc89
 800cf70:	3ff80000 	.word	0x3ff80000
 800cf74:	08010028 	.word	0x08010028
 800cf78:	0800ff19 	.word	0x0800ff19
 800cf7c:	2501      	movs	r5, #1
 800cf7e:	2300      	movs	r3, #0
 800cf80:	9306      	str	r3, [sp, #24]
 800cf82:	9508      	str	r5, [sp, #32]
 800cf84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2312      	movs	r3, #18
 800cf90:	e7b0      	b.n	800cef4 <_dtoa_r+0x26c>
 800cf92:	2301      	movs	r3, #1
 800cf94:	9308      	str	r3, [sp, #32]
 800cf96:	e7f5      	b.n	800cf84 <_dtoa_r+0x2fc>
 800cf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf9e:	e7b8      	b.n	800cf12 <_dtoa_r+0x28a>
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	6041      	str	r1, [r0, #4]
 800cfa4:	0052      	lsls	r2, r2, #1
 800cfa6:	e7b8      	b.n	800cf1a <_dtoa_r+0x292>
 800cfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfaa:	9a01      	ldr	r2, [sp, #4]
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	9b03      	ldr	r3, [sp, #12]
 800cfb0:	2b0e      	cmp	r3, #14
 800cfb2:	f200 809d 	bhi.w	800d0f0 <_dtoa_r+0x468>
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	f000 809a 	beq.w	800d0f0 <_dtoa_r+0x468>
 800cfbc:	9b00      	ldr	r3, [sp, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	dd32      	ble.n	800d028 <_dtoa_r+0x3a0>
 800cfc2:	4ab7      	ldr	r2, [pc, #732]	; (800d2a0 <_dtoa_r+0x618>)
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfd0:	9b00      	ldr	r3, [sp, #0]
 800cfd2:	05d8      	lsls	r0, r3, #23
 800cfd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cfd8:	d516      	bpl.n	800d008 <_dtoa_r+0x380>
 800cfda:	4bb2      	ldr	r3, [pc, #712]	; (800d2a4 <_dtoa_r+0x61c>)
 800cfdc:	ec51 0b19 	vmov	r0, r1, d9
 800cfe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfe4:	f7f3 fc52 	bl	800088c <__aeabi_ddiv>
 800cfe8:	f007 070f 	and.w	r7, r7, #15
 800cfec:	4682      	mov	sl, r0
 800cfee:	468b      	mov	fp, r1
 800cff0:	2503      	movs	r5, #3
 800cff2:	4eac      	ldr	r6, [pc, #688]	; (800d2a4 <_dtoa_r+0x61c>)
 800cff4:	b957      	cbnz	r7, 800d00c <_dtoa_r+0x384>
 800cff6:	4642      	mov	r2, r8
 800cff8:	464b      	mov	r3, r9
 800cffa:	4650      	mov	r0, sl
 800cffc:	4659      	mov	r1, fp
 800cffe:	f7f3 fc45 	bl	800088c <__aeabi_ddiv>
 800d002:	4682      	mov	sl, r0
 800d004:	468b      	mov	fp, r1
 800d006:	e028      	b.n	800d05a <_dtoa_r+0x3d2>
 800d008:	2502      	movs	r5, #2
 800d00a:	e7f2      	b.n	800cff2 <_dtoa_r+0x36a>
 800d00c:	07f9      	lsls	r1, r7, #31
 800d00e:	d508      	bpl.n	800d022 <_dtoa_r+0x39a>
 800d010:	4640      	mov	r0, r8
 800d012:	4649      	mov	r1, r9
 800d014:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d018:	f7f3 fb0e 	bl	8000638 <__aeabi_dmul>
 800d01c:	3501      	adds	r5, #1
 800d01e:	4680      	mov	r8, r0
 800d020:	4689      	mov	r9, r1
 800d022:	107f      	asrs	r7, r7, #1
 800d024:	3608      	adds	r6, #8
 800d026:	e7e5      	b.n	800cff4 <_dtoa_r+0x36c>
 800d028:	f000 809b 	beq.w	800d162 <_dtoa_r+0x4da>
 800d02c:	9b00      	ldr	r3, [sp, #0]
 800d02e:	4f9d      	ldr	r7, [pc, #628]	; (800d2a4 <_dtoa_r+0x61c>)
 800d030:	425e      	negs	r6, r3
 800d032:	4b9b      	ldr	r3, [pc, #620]	; (800d2a0 <_dtoa_r+0x618>)
 800d034:	f006 020f 	and.w	r2, r6, #15
 800d038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	ec51 0b19 	vmov	r0, r1, d9
 800d044:	f7f3 faf8 	bl	8000638 <__aeabi_dmul>
 800d048:	1136      	asrs	r6, r6, #4
 800d04a:	4682      	mov	sl, r0
 800d04c:	468b      	mov	fp, r1
 800d04e:	2300      	movs	r3, #0
 800d050:	2502      	movs	r5, #2
 800d052:	2e00      	cmp	r6, #0
 800d054:	d17a      	bne.n	800d14c <_dtoa_r+0x4c4>
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1d3      	bne.n	800d002 <_dtoa_r+0x37a>
 800d05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 8082 	beq.w	800d166 <_dtoa_r+0x4de>
 800d062:	4b91      	ldr	r3, [pc, #580]	; (800d2a8 <_dtoa_r+0x620>)
 800d064:	2200      	movs	r2, #0
 800d066:	4650      	mov	r0, sl
 800d068:	4659      	mov	r1, fp
 800d06a:	f7f3 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d079      	beq.n	800d166 <_dtoa_r+0x4de>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d076      	beq.n	800d166 <_dtoa_r+0x4de>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	dd36      	ble.n	800d0ec <_dtoa_r+0x464>
 800d07e:	9b00      	ldr	r3, [sp, #0]
 800d080:	4650      	mov	r0, sl
 800d082:	4659      	mov	r1, fp
 800d084:	1e5f      	subs	r7, r3, #1
 800d086:	2200      	movs	r2, #0
 800d088:	4b88      	ldr	r3, [pc, #544]	; (800d2ac <_dtoa_r+0x624>)
 800d08a:	f7f3 fad5 	bl	8000638 <__aeabi_dmul>
 800d08e:	9e02      	ldr	r6, [sp, #8]
 800d090:	4682      	mov	sl, r0
 800d092:	468b      	mov	fp, r1
 800d094:	3501      	adds	r5, #1
 800d096:	4628      	mov	r0, r5
 800d098:	f7f3 fa64 	bl	8000564 <__aeabi_i2d>
 800d09c:	4652      	mov	r2, sl
 800d09e:	465b      	mov	r3, fp
 800d0a0:	f7f3 faca 	bl	8000638 <__aeabi_dmul>
 800d0a4:	4b82      	ldr	r3, [pc, #520]	; (800d2b0 <_dtoa_r+0x628>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f7f3 f910 	bl	80002cc <__adddf3>
 800d0ac:	46d0      	mov	r8, sl
 800d0ae:	46d9      	mov	r9, fp
 800d0b0:	4682      	mov	sl, r0
 800d0b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d0b6:	2e00      	cmp	r6, #0
 800d0b8:	d158      	bne.n	800d16c <_dtoa_r+0x4e4>
 800d0ba:	4b7e      	ldr	r3, [pc, #504]	; (800d2b4 <_dtoa_r+0x62c>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f7f3 f901 	bl	80002c8 <__aeabi_dsub>
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	465b      	mov	r3, fp
 800d0ca:	4680      	mov	r8, r0
 800d0cc:	4689      	mov	r9, r1
 800d0ce:	f7f3 fd43 	bl	8000b58 <__aeabi_dcmpgt>
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	f040 8295 	bne.w	800d602 <_dtoa_r+0x97a>
 800d0d8:	4652      	mov	r2, sl
 800d0da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0de:	4640      	mov	r0, r8
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	f7f3 fd1b 	bl	8000b1c <__aeabi_dcmplt>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	f040 8289 	bne.w	800d5fe <_dtoa_r+0x976>
 800d0ec:	ec5b ab19 	vmov	sl, fp, d9
 800d0f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f2c0 8148 	blt.w	800d388 <_dtoa_r+0x700>
 800d0f8:	9a00      	ldr	r2, [sp, #0]
 800d0fa:	2a0e      	cmp	r2, #14
 800d0fc:	f300 8144 	bgt.w	800d388 <_dtoa_r+0x700>
 800d100:	4b67      	ldr	r3, [pc, #412]	; (800d2a0 <_dtoa_r+0x618>)
 800d102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d106:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f280 80d5 	bge.w	800d2bc <_dtoa_r+0x634>
 800d112:	9b03      	ldr	r3, [sp, #12]
 800d114:	2b00      	cmp	r3, #0
 800d116:	f300 80d1 	bgt.w	800d2bc <_dtoa_r+0x634>
 800d11a:	f040 826f 	bne.w	800d5fc <_dtoa_r+0x974>
 800d11e:	4b65      	ldr	r3, [pc, #404]	; (800d2b4 <_dtoa_r+0x62c>)
 800d120:	2200      	movs	r2, #0
 800d122:	4640      	mov	r0, r8
 800d124:	4649      	mov	r1, r9
 800d126:	f7f3 fa87 	bl	8000638 <__aeabi_dmul>
 800d12a:	4652      	mov	r2, sl
 800d12c:	465b      	mov	r3, fp
 800d12e:	f7f3 fd09 	bl	8000b44 <__aeabi_dcmpge>
 800d132:	9e03      	ldr	r6, [sp, #12]
 800d134:	4637      	mov	r7, r6
 800d136:	2800      	cmp	r0, #0
 800d138:	f040 8245 	bne.w	800d5c6 <_dtoa_r+0x93e>
 800d13c:	9d01      	ldr	r5, [sp, #4]
 800d13e:	2331      	movs	r3, #49	; 0x31
 800d140:	f805 3b01 	strb.w	r3, [r5], #1
 800d144:	9b00      	ldr	r3, [sp, #0]
 800d146:	3301      	adds	r3, #1
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	e240      	b.n	800d5ce <_dtoa_r+0x946>
 800d14c:	07f2      	lsls	r2, r6, #31
 800d14e:	d505      	bpl.n	800d15c <_dtoa_r+0x4d4>
 800d150:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d154:	f7f3 fa70 	bl	8000638 <__aeabi_dmul>
 800d158:	3501      	adds	r5, #1
 800d15a:	2301      	movs	r3, #1
 800d15c:	1076      	asrs	r6, r6, #1
 800d15e:	3708      	adds	r7, #8
 800d160:	e777      	b.n	800d052 <_dtoa_r+0x3ca>
 800d162:	2502      	movs	r5, #2
 800d164:	e779      	b.n	800d05a <_dtoa_r+0x3d2>
 800d166:	9f00      	ldr	r7, [sp, #0]
 800d168:	9e03      	ldr	r6, [sp, #12]
 800d16a:	e794      	b.n	800d096 <_dtoa_r+0x40e>
 800d16c:	9901      	ldr	r1, [sp, #4]
 800d16e:	4b4c      	ldr	r3, [pc, #304]	; (800d2a0 <_dtoa_r+0x618>)
 800d170:	4431      	add	r1, r6
 800d172:	910d      	str	r1, [sp, #52]	; 0x34
 800d174:	9908      	ldr	r1, [sp, #32]
 800d176:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d17a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d17e:	2900      	cmp	r1, #0
 800d180:	d043      	beq.n	800d20a <_dtoa_r+0x582>
 800d182:	494d      	ldr	r1, [pc, #308]	; (800d2b8 <_dtoa_r+0x630>)
 800d184:	2000      	movs	r0, #0
 800d186:	f7f3 fb81 	bl	800088c <__aeabi_ddiv>
 800d18a:	4652      	mov	r2, sl
 800d18c:	465b      	mov	r3, fp
 800d18e:	f7f3 f89b 	bl	80002c8 <__aeabi_dsub>
 800d192:	9d01      	ldr	r5, [sp, #4]
 800d194:	4682      	mov	sl, r0
 800d196:	468b      	mov	fp, r1
 800d198:	4649      	mov	r1, r9
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7f3 fcfc 	bl	8000b98 <__aeabi_d2iz>
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	f7f3 f9df 	bl	8000564 <__aeabi_i2d>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	f7f3 f88b 	bl	80002c8 <__aeabi_dsub>
 800d1b2:	3630      	adds	r6, #48	; 0x30
 800d1b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d1b8:	4652      	mov	r2, sl
 800d1ba:	465b      	mov	r3, fp
 800d1bc:	4680      	mov	r8, r0
 800d1be:	4689      	mov	r9, r1
 800d1c0:	f7f3 fcac 	bl	8000b1c <__aeabi_dcmplt>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d163      	bne.n	800d290 <_dtoa_r+0x608>
 800d1c8:	4642      	mov	r2, r8
 800d1ca:	464b      	mov	r3, r9
 800d1cc:	4936      	ldr	r1, [pc, #216]	; (800d2a8 <_dtoa_r+0x620>)
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f7f3 f87a 	bl	80002c8 <__aeabi_dsub>
 800d1d4:	4652      	mov	r2, sl
 800d1d6:	465b      	mov	r3, fp
 800d1d8:	f7f3 fca0 	bl	8000b1c <__aeabi_dcmplt>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	f040 80b5 	bne.w	800d34c <_dtoa_r+0x6c4>
 800d1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	d081      	beq.n	800d0ec <_dtoa_r+0x464>
 800d1e8:	4b30      	ldr	r3, [pc, #192]	; (800d2ac <_dtoa_r+0x624>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	4659      	mov	r1, fp
 800d1f0:	f7f3 fa22 	bl	8000638 <__aeabi_dmul>
 800d1f4:	4b2d      	ldr	r3, [pc, #180]	; (800d2ac <_dtoa_r+0x624>)
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	468b      	mov	fp, r1
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	2200      	movs	r2, #0
 800d200:	f7f3 fa1a 	bl	8000638 <__aeabi_dmul>
 800d204:	4680      	mov	r8, r0
 800d206:	4689      	mov	r9, r1
 800d208:	e7c6      	b.n	800d198 <_dtoa_r+0x510>
 800d20a:	4650      	mov	r0, sl
 800d20c:	4659      	mov	r1, fp
 800d20e:	f7f3 fa13 	bl	8000638 <__aeabi_dmul>
 800d212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d214:	9d01      	ldr	r5, [sp, #4]
 800d216:	930f      	str	r3, [sp, #60]	; 0x3c
 800d218:	4682      	mov	sl, r0
 800d21a:	468b      	mov	fp, r1
 800d21c:	4649      	mov	r1, r9
 800d21e:	4640      	mov	r0, r8
 800d220:	f7f3 fcba 	bl	8000b98 <__aeabi_d2iz>
 800d224:	4606      	mov	r6, r0
 800d226:	f7f3 f99d 	bl	8000564 <__aeabi_i2d>
 800d22a:	3630      	adds	r6, #48	; 0x30
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4640      	mov	r0, r8
 800d232:	4649      	mov	r1, r9
 800d234:	f7f3 f848 	bl	80002c8 <__aeabi_dsub>
 800d238:	f805 6b01 	strb.w	r6, [r5], #1
 800d23c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d23e:	429d      	cmp	r5, r3
 800d240:	4680      	mov	r8, r0
 800d242:	4689      	mov	r9, r1
 800d244:	f04f 0200 	mov.w	r2, #0
 800d248:	d124      	bne.n	800d294 <_dtoa_r+0x60c>
 800d24a:	4b1b      	ldr	r3, [pc, #108]	; (800d2b8 <_dtoa_r+0x630>)
 800d24c:	4650      	mov	r0, sl
 800d24e:	4659      	mov	r1, fp
 800d250:	f7f3 f83c 	bl	80002cc <__adddf3>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4640      	mov	r0, r8
 800d25a:	4649      	mov	r1, r9
 800d25c:	f7f3 fc7c 	bl	8000b58 <__aeabi_dcmpgt>
 800d260:	2800      	cmp	r0, #0
 800d262:	d173      	bne.n	800d34c <_dtoa_r+0x6c4>
 800d264:	4652      	mov	r2, sl
 800d266:	465b      	mov	r3, fp
 800d268:	4913      	ldr	r1, [pc, #76]	; (800d2b8 <_dtoa_r+0x630>)
 800d26a:	2000      	movs	r0, #0
 800d26c:	f7f3 f82c 	bl	80002c8 <__aeabi_dsub>
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	4640      	mov	r0, r8
 800d276:	4649      	mov	r1, r9
 800d278:	f7f3 fc50 	bl	8000b1c <__aeabi_dcmplt>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	f43f af35 	beq.w	800d0ec <_dtoa_r+0x464>
 800d282:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d284:	1e6b      	subs	r3, r5, #1
 800d286:	930f      	str	r3, [sp, #60]	; 0x3c
 800d288:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d28c:	2b30      	cmp	r3, #48	; 0x30
 800d28e:	d0f8      	beq.n	800d282 <_dtoa_r+0x5fa>
 800d290:	9700      	str	r7, [sp, #0]
 800d292:	e049      	b.n	800d328 <_dtoa_r+0x6a0>
 800d294:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <_dtoa_r+0x624>)
 800d296:	f7f3 f9cf 	bl	8000638 <__aeabi_dmul>
 800d29a:	4680      	mov	r8, r0
 800d29c:	4689      	mov	r9, r1
 800d29e:	e7bd      	b.n	800d21c <_dtoa_r+0x594>
 800d2a0:	08010028 	.word	0x08010028
 800d2a4:	08010000 	.word	0x08010000
 800d2a8:	3ff00000 	.word	0x3ff00000
 800d2ac:	40240000 	.word	0x40240000
 800d2b0:	401c0000 	.word	0x401c0000
 800d2b4:	40140000 	.word	0x40140000
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	9d01      	ldr	r5, [sp, #4]
 800d2be:	4656      	mov	r6, sl
 800d2c0:	465f      	mov	r7, fp
 800d2c2:	4642      	mov	r2, r8
 800d2c4:	464b      	mov	r3, r9
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	f7f3 fadf 	bl	800088c <__aeabi_ddiv>
 800d2ce:	f7f3 fc63 	bl	8000b98 <__aeabi_d2iz>
 800d2d2:	4682      	mov	sl, r0
 800d2d4:	f7f3 f946 	bl	8000564 <__aeabi_i2d>
 800d2d8:	4642      	mov	r2, r8
 800d2da:	464b      	mov	r3, r9
 800d2dc:	f7f3 f9ac 	bl	8000638 <__aeabi_dmul>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d2ec:	f7f2 ffec 	bl	80002c8 <__aeabi_dsub>
 800d2f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d2f4:	9e01      	ldr	r6, [sp, #4]
 800d2f6:	9f03      	ldr	r7, [sp, #12]
 800d2f8:	1bae      	subs	r6, r5, r6
 800d2fa:	42b7      	cmp	r7, r6
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	460b      	mov	r3, r1
 800d300:	d135      	bne.n	800d36e <_dtoa_r+0x6e6>
 800d302:	f7f2 ffe3 	bl	80002cc <__adddf3>
 800d306:	4642      	mov	r2, r8
 800d308:	464b      	mov	r3, r9
 800d30a:	4606      	mov	r6, r0
 800d30c:	460f      	mov	r7, r1
 800d30e:	f7f3 fc23 	bl	8000b58 <__aeabi_dcmpgt>
 800d312:	b9d0      	cbnz	r0, 800d34a <_dtoa_r+0x6c2>
 800d314:	4642      	mov	r2, r8
 800d316:	464b      	mov	r3, r9
 800d318:	4630      	mov	r0, r6
 800d31a:	4639      	mov	r1, r7
 800d31c:	f7f3 fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 800d320:	b110      	cbz	r0, 800d328 <_dtoa_r+0x6a0>
 800d322:	f01a 0f01 	tst.w	sl, #1
 800d326:	d110      	bne.n	800d34a <_dtoa_r+0x6c2>
 800d328:	4620      	mov	r0, r4
 800d32a:	ee18 1a10 	vmov	r1, s16
 800d32e:	f000 fe7d 	bl	800e02c <_Bfree>
 800d332:	2300      	movs	r3, #0
 800d334:	9800      	ldr	r0, [sp, #0]
 800d336:	702b      	strb	r3, [r5, #0]
 800d338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d33a:	3001      	adds	r0, #1
 800d33c:	6018      	str	r0, [r3, #0]
 800d33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d340:	2b00      	cmp	r3, #0
 800d342:	f43f acf1 	beq.w	800cd28 <_dtoa_r+0xa0>
 800d346:	601d      	str	r5, [r3, #0]
 800d348:	e4ee      	b.n	800cd28 <_dtoa_r+0xa0>
 800d34a:	9f00      	ldr	r7, [sp, #0]
 800d34c:	462b      	mov	r3, r5
 800d34e:	461d      	mov	r5, r3
 800d350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d354:	2a39      	cmp	r2, #57	; 0x39
 800d356:	d106      	bne.n	800d366 <_dtoa_r+0x6de>
 800d358:	9a01      	ldr	r2, [sp, #4]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d1f7      	bne.n	800d34e <_dtoa_r+0x6c6>
 800d35e:	9901      	ldr	r1, [sp, #4]
 800d360:	2230      	movs	r2, #48	; 0x30
 800d362:	3701      	adds	r7, #1
 800d364:	700a      	strb	r2, [r1, #0]
 800d366:	781a      	ldrb	r2, [r3, #0]
 800d368:	3201      	adds	r2, #1
 800d36a:	701a      	strb	r2, [r3, #0]
 800d36c:	e790      	b.n	800d290 <_dtoa_r+0x608>
 800d36e:	4ba6      	ldr	r3, [pc, #664]	; (800d608 <_dtoa_r+0x980>)
 800d370:	2200      	movs	r2, #0
 800d372:	f7f3 f961 	bl	8000638 <__aeabi_dmul>
 800d376:	2200      	movs	r2, #0
 800d378:	2300      	movs	r3, #0
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	f7f3 fbc3 	bl	8000b08 <__aeabi_dcmpeq>
 800d382:	2800      	cmp	r0, #0
 800d384:	d09d      	beq.n	800d2c2 <_dtoa_r+0x63a>
 800d386:	e7cf      	b.n	800d328 <_dtoa_r+0x6a0>
 800d388:	9a08      	ldr	r2, [sp, #32]
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	f000 80d7 	beq.w	800d53e <_dtoa_r+0x8b6>
 800d390:	9a06      	ldr	r2, [sp, #24]
 800d392:	2a01      	cmp	r2, #1
 800d394:	f300 80ba 	bgt.w	800d50c <_dtoa_r+0x884>
 800d398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d39a:	2a00      	cmp	r2, #0
 800d39c:	f000 80b2 	beq.w	800d504 <_dtoa_r+0x87c>
 800d3a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3a4:	9e07      	ldr	r6, [sp, #28]
 800d3a6:	9d04      	ldr	r5, [sp, #16]
 800d3a8:	9a04      	ldr	r2, [sp, #16]
 800d3aa:	441a      	add	r2, r3
 800d3ac:	9204      	str	r2, [sp, #16]
 800d3ae:	9a05      	ldr	r2, [sp, #20]
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	441a      	add	r2, r3
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	9205      	str	r2, [sp, #20]
 800d3b8:	f000 ff3a 	bl	800e230 <__i2b>
 800d3bc:	4607      	mov	r7, r0
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	dd0c      	ble.n	800d3dc <_dtoa_r+0x754>
 800d3c2:	9b05      	ldr	r3, [sp, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dd09      	ble.n	800d3dc <_dtoa_r+0x754>
 800d3c8:	42ab      	cmp	r3, r5
 800d3ca:	9a04      	ldr	r2, [sp, #16]
 800d3cc:	bfa8      	it	ge
 800d3ce:	462b      	movge	r3, r5
 800d3d0:	1ad2      	subs	r2, r2, r3
 800d3d2:	9204      	str	r2, [sp, #16]
 800d3d4:	9a05      	ldr	r2, [sp, #20]
 800d3d6:	1aed      	subs	r5, r5, r3
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	9305      	str	r3, [sp, #20]
 800d3dc:	9b07      	ldr	r3, [sp, #28]
 800d3de:	b31b      	cbz	r3, 800d428 <_dtoa_r+0x7a0>
 800d3e0:	9b08      	ldr	r3, [sp, #32]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80af 	beq.w	800d546 <_dtoa_r+0x8be>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	dd13      	ble.n	800d414 <_dtoa_r+0x78c>
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4632      	mov	r2, r6
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 ffdd 	bl	800e3b0 <__pow5mult>
 800d3f6:	ee18 2a10 	vmov	r2, s16
 800d3fa:	4601      	mov	r1, r0
 800d3fc:	4607      	mov	r7, r0
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 ff2c 	bl	800e25c <__multiply>
 800d404:	ee18 1a10 	vmov	r1, s16
 800d408:	4680      	mov	r8, r0
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 fe0e 	bl	800e02c <_Bfree>
 800d410:	ee08 8a10 	vmov	s16, r8
 800d414:	9b07      	ldr	r3, [sp, #28]
 800d416:	1b9a      	subs	r2, r3, r6
 800d418:	d006      	beq.n	800d428 <_dtoa_r+0x7a0>
 800d41a:	ee18 1a10 	vmov	r1, s16
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 ffc6 	bl	800e3b0 <__pow5mult>
 800d424:	ee08 0a10 	vmov	s16, r0
 800d428:	2101      	movs	r1, #1
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 ff00 	bl	800e230 <__i2b>
 800d430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d432:	2b00      	cmp	r3, #0
 800d434:	4606      	mov	r6, r0
 800d436:	f340 8088 	ble.w	800d54a <_dtoa_r+0x8c2>
 800d43a:	461a      	mov	r2, r3
 800d43c:	4601      	mov	r1, r0
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 ffb6 	bl	800e3b0 <__pow5mult>
 800d444:	9b06      	ldr	r3, [sp, #24]
 800d446:	2b01      	cmp	r3, #1
 800d448:	4606      	mov	r6, r0
 800d44a:	f340 8081 	ble.w	800d550 <_dtoa_r+0x8c8>
 800d44e:	f04f 0800 	mov.w	r8, #0
 800d452:	6933      	ldr	r3, [r6, #16]
 800d454:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d458:	6918      	ldr	r0, [r3, #16]
 800d45a:	f000 fe99 	bl	800e190 <__hi0bits>
 800d45e:	f1c0 0020 	rsb	r0, r0, #32
 800d462:	9b05      	ldr	r3, [sp, #20]
 800d464:	4418      	add	r0, r3
 800d466:	f010 001f 	ands.w	r0, r0, #31
 800d46a:	f000 8092 	beq.w	800d592 <_dtoa_r+0x90a>
 800d46e:	f1c0 0320 	rsb	r3, r0, #32
 800d472:	2b04      	cmp	r3, #4
 800d474:	f340 808a 	ble.w	800d58c <_dtoa_r+0x904>
 800d478:	f1c0 001c 	rsb	r0, r0, #28
 800d47c:	9b04      	ldr	r3, [sp, #16]
 800d47e:	4403      	add	r3, r0
 800d480:	9304      	str	r3, [sp, #16]
 800d482:	9b05      	ldr	r3, [sp, #20]
 800d484:	4403      	add	r3, r0
 800d486:	4405      	add	r5, r0
 800d488:	9305      	str	r3, [sp, #20]
 800d48a:	9b04      	ldr	r3, [sp, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd07      	ble.n	800d4a0 <_dtoa_r+0x818>
 800d490:	ee18 1a10 	vmov	r1, s16
 800d494:	461a      	mov	r2, r3
 800d496:	4620      	mov	r0, r4
 800d498:	f000 ffe4 	bl	800e464 <__lshift>
 800d49c:	ee08 0a10 	vmov	s16, r0
 800d4a0:	9b05      	ldr	r3, [sp, #20]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	dd05      	ble.n	800d4b2 <_dtoa_r+0x82a>
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f000 ffda 	bl	800e464 <__lshift>
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d06e      	beq.n	800d596 <_dtoa_r+0x90e>
 800d4b8:	ee18 0a10 	vmov	r0, s16
 800d4bc:	4631      	mov	r1, r6
 800d4be:	f001 f841 	bl	800e544 <__mcmp>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	da67      	bge.n	800d596 <_dtoa_r+0x90e>
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	ee18 1a10 	vmov	r1, s16
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 fdcb 	bl	800e070 <__multadd>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	ee08 0a10 	vmov	s16, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 81b1 	beq.w	800d848 <_dtoa_r+0xbc0>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	220a      	movs	r2, #10
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 fdbf 	bl	800e070 <__multadd>
 800d4f2:	9b02      	ldr	r3, [sp, #8]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	4607      	mov	r7, r0
 800d4f8:	f300 808e 	bgt.w	800d618 <_dtoa_r+0x990>
 800d4fc:	9b06      	ldr	r3, [sp, #24]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	dc51      	bgt.n	800d5a6 <_dtoa_r+0x91e>
 800d502:	e089      	b.n	800d618 <_dtoa_r+0x990>
 800d504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d50a:	e74b      	b.n	800d3a4 <_dtoa_r+0x71c>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	1e5e      	subs	r6, r3, #1
 800d510:	9b07      	ldr	r3, [sp, #28]
 800d512:	42b3      	cmp	r3, r6
 800d514:	bfbf      	itttt	lt
 800d516:	9b07      	ldrlt	r3, [sp, #28]
 800d518:	9607      	strlt	r6, [sp, #28]
 800d51a:	1af2      	sublt	r2, r6, r3
 800d51c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d51e:	bfb6      	itet	lt
 800d520:	189b      	addlt	r3, r3, r2
 800d522:	1b9e      	subge	r6, r3, r6
 800d524:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d526:	9b03      	ldr	r3, [sp, #12]
 800d528:	bfb8      	it	lt
 800d52a:	2600      	movlt	r6, #0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	bfb7      	itett	lt
 800d530:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d534:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d538:	1a9d      	sublt	r5, r3, r2
 800d53a:	2300      	movlt	r3, #0
 800d53c:	e734      	b.n	800d3a8 <_dtoa_r+0x720>
 800d53e:	9e07      	ldr	r6, [sp, #28]
 800d540:	9d04      	ldr	r5, [sp, #16]
 800d542:	9f08      	ldr	r7, [sp, #32]
 800d544:	e73b      	b.n	800d3be <_dtoa_r+0x736>
 800d546:	9a07      	ldr	r2, [sp, #28]
 800d548:	e767      	b.n	800d41a <_dtoa_r+0x792>
 800d54a:	9b06      	ldr	r3, [sp, #24]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	dc18      	bgt.n	800d582 <_dtoa_r+0x8fa>
 800d550:	f1ba 0f00 	cmp.w	sl, #0
 800d554:	d115      	bne.n	800d582 <_dtoa_r+0x8fa>
 800d556:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d55a:	b993      	cbnz	r3, 800d582 <_dtoa_r+0x8fa>
 800d55c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d560:	0d1b      	lsrs	r3, r3, #20
 800d562:	051b      	lsls	r3, r3, #20
 800d564:	b183      	cbz	r3, 800d588 <_dtoa_r+0x900>
 800d566:	9b04      	ldr	r3, [sp, #16]
 800d568:	3301      	adds	r3, #1
 800d56a:	9304      	str	r3, [sp, #16]
 800d56c:	9b05      	ldr	r3, [sp, #20]
 800d56e:	3301      	adds	r3, #1
 800d570:	9305      	str	r3, [sp, #20]
 800d572:	f04f 0801 	mov.w	r8, #1
 800d576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f47f af6a 	bne.w	800d452 <_dtoa_r+0x7ca>
 800d57e:	2001      	movs	r0, #1
 800d580:	e76f      	b.n	800d462 <_dtoa_r+0x7da>
 800d582:	f04f 0800 	mov.w	r8, #0
 800d586:	e7f6      	b.n	800d576 <_dtoa_r+0x8ee>
 800d588:	4698      	mov	r8, r3
 800d58a:	e7f4      	b.n	800d576 <_dtoa_r+0x8ee>
 800d58c:	f43f af7d 	beq.w	800d48a <_dtoa_r+0x802>
 800d590:	4618      	mov	r0, r3
 800d592:	301c      	adds	r0, #28
 800d594:	e772      	b.n	800d47c <_dtoa_r+0x7f4>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	dc37      	bgt.n	800d60c <_dtoa_r+0x984>
 800d59c:	9b06      	ldr	r3, [sp, #24]
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	dd34      	ble.n	800d60c <_dtoa_r+0x984>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	9b02      	ldr	r3, [sp, #8]
 800d5a8:	b96b      	cbnz	r3, 800d5c6 <_dtoa_r+0x93e>
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	2205      	movs	r2, #5
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f000 fd5e 	bl	800e070 <__multadd>
 800d5b4:	4601      	mov	r1, r0
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	ee18 0a10 	vmov	r0, s16
 800d5bc:	f000 ffc2 	bl	800e544 <__mcmp>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	f73f adbb 	bgt.w	800d13c <_dtoa_r+0x4b4>
 800d5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c8:	9d01      	ldr	r5, [sp, #4]
 800d5ca:	43db      	mvns	r3, r3
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	f04f 0800 	mov.w	r8, #0
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 fd29 	bl	800e02c <_Bfree>
 800d5da:	2f00      	cmp	r7, #0
 800d5dc:	f43f aea4 	beq.w	800d328 <_dtoa_r+0x6a0>
 800d5e0:	f1b8 0f00 	cmp.w	r8, #0
 800d5e4:	d005      	beq.n	800d5f2 <_dtoa_r+0x96a>
 800d5e6:	45b8      	cmp	r8, r7
 800d5e8:	d003      	beq.n	800d5f2 <_dtoa_r+0x96a>
 800d5ea:	4641      	mov	r1, r8
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f000 fd1d 	bl	800e02c <_Bfree>
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 fd19 	bl	800e02c <_Bfree>
 800d5fa:	e695      	b.n	800d328 <_dtoa_r+0x6a0>
 800d5fc:	2600      	movs	r6, #0
 800d5fe:	4637      	mov	r7, r6
 800d600:	e7e1      	b.n	800d5c6 <_dtoa_r+0x93e>
 800d602:	9700      	str	r7, [sp, #0]
 800d604:	4637      	mov	r7, r6
 800d606:	e599      	b.n	800d13c <_dtoa_r+0x4b4>
 800d608:	40240000 	.word	0x40240000
 800d60c:	9b08      	ldr	r3, [sp, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 80ca 	beq.w	800d7a8 <_dtoa_r+0xb20>
 800d614:	9b03      	ldr	r3, [sp, #12]
 800d616:	9302      	str	r3, [sp, #8]
 800d618:	2d00      	cmp	r5, #0
 800d61a:	dd05      	ble.n	800d628 <_dtoa_r+0x9a0>
 800d61c:	4639      	mov	r1, r7
 800d61e:	462a      	mov	r2, r5
 800d620:	4620      	mov	r0, r4
 800d622:	f000 ff1f 	bl	800e464 <__lshift>
 800d626:	4607      	mov	r7, r0
 800d628:	f1b8 0f00 	cmp.w	r8, #0
 800d62c:	d05b      	beq.n	800d6e6 <_dtoa_r+0xa5e>
 800d62e:	6879      	ldr	r1, [r7, #4]
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fcbb 	bl	800dfac <_Balloc>
 800d636:	4605      	mov	r5, r0
 800d638:	b928      	cbnz	r0, 800d646 <_dtoa_r+0x9be>
 800d63a:	4b87      	ldr	r3, [pc, #540]	; (800d858 <_dtoa_r+0xbd0>)
 800d63c:	4602      	mov	r2, r0
 800d63e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d642:	f7ff bb3b 	b.w	800ccbc <_dtoa_r+0x34>
 800d646:	693a      	ldr	r2, [r7, #16]
 800d648:	3202      	adds	r2, #2
 800d64a:	0092      	lsls	r2, r2, #2
 800d64c:	f107 010c 	add.w	r1, r7, #12
 800d650:	300c      	adds	r0, #12
 800d652:	f7fd fd8d 	bl	800b170 <memcpy>
 800d656:	2201      	movs	r2, #1
 800d658:	4629      	mov	r1, r5
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 ff02 	bl	800e464 <__lshift>
 800d660:	9b01      	ldr	r3, [sp, #4]
 800d662:	f103 0901 	add.w	r9, r3, #1
 800d666:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	9305      	str	r3, [sp, #20]
 800d66e:	f00a 0301 	and.w	r3, sl, #1
 800d672:	46b8      	mov	r8, r7
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	4607      	mov	r7, r0
 800d678:	4631      	mov	r1, r6
 800d67a:	ee18 0a10 	vmov	r0, s16
 800d67e:	f7ff fa77 	bl	800cb70 <quorem>
 800d682:	4641      	mov	r1, r8
 800d684:	9002      	str	r0, [sp, #8]
 800d686:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d68a:	ee18 0a10 	vmov	r0, s16
 800d68e:	f000 ff59 	bl	800e544 <__mcmp>
 800d692:	463a      	mov	r2, r7
 800d694:	9003      	str	r0, [sp, #12]
 800d696:	4631      	mov	r1, r6
 800d698:	4620      	mov	r0, r4
 800d69a:	f000 ff6f 	bl	800e57c <__mdiff>
 800d69e:	68c2      	ldr	r2, [r0, #12]
 800d6a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d6a4:	4605      	mov	r5, r0
 800d6a6:	bb02      	cbnz	r2, 800d6ea <_dtoa_r+0xa62>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	ee18 0a10 	vmov	r0, s16
 800d6ae:	f000 ff49 	bl	800e544 <__mcmp>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	9207      	str	r2, [sp, #28]
 800d6ba:	f000 fcb7 	bl	800e02c <_Bfree>
 800d6be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d6c2:	ea43 0102 	orr.w	r1, r3, r2
 800d6c6:	9b04      	ldr	r3, [sp, #16]
 800d6c8:	430b      	orrs	r3, r1
 800d6ca:	464d      	mov	r5, r9
 800d6cc:	d10f      	bne.n	800d6ee <_dtoa_r+0xa66>
 800d6ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6d2:	d02a      	beq.n	800d72a <_dtoa_r+0xaa2>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd02      	ble.n	800d6e0 <_dtoa_r+0xa58>
 800d6da:	9b02      	ldr	r3, [sp, #8]
 800d6dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d6e0:	f88b a000 	strb.w	sl, [fp]
 800d6e4:	e775      	b.n	800d5d2 <_dtoa_r+0x94a>
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	e7ba      	b.n	800d660 <_dtoa_r+0x9d8>
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	e7e2      	b.n	800d6b4 <_dtoa_r+0xa2c>
 800d6ee:	9b03      	ldr	r3, [sp, #12]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	db04      	blt.n	800d6fe <_dtoa_r+0xa76>
 800d6f4:	9906      	ldr	r1, [sp, #24]
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	9904      	ldr	r1, [sp, #16]
 800d6fa:	430b      	orrs	r3, r1
 800d6fc:	d122      	bne.n	800d744 <_dtoa_r+0xabc>
 800d6fe:	2a00      	cmp	r2, #0
 800d700:	ddee      	ble.n	800d6e0 <_dtoa_r+0xa58>
 800d702:	ee18 1a10 	vmov	r1, s16
 800d706:	2201      	movs	r2, #1
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 feab 	bl	800e464 <__lshift>
 800d70e:	4631      	mov	r1, r6
 800d710:	ee08 0a10 	vmov	s16, r0
 800d714:	f000 ff16 	bl	800e544 <__mcmp>
 800d718:	2800      	cmp	r0, #0
 800d71a:	dc03      	bgt.n	800d724 <_dtoa_r+0xa9c>
 800d71c:	d1e0      	bne.n	800d6e0 <_dtoa_r+0xa58>
 800d71e:	f01a 0f01 	tst.w	sl, #1
 800d722:	d0dd      	beq.n	800d6e0 <_dtoa_r+0xa58>
 800d724:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d728:	d1d7      	bne.n	800d6da <_dtoa_r+0xa52>
 800d72a:	2339      	movs	r3, #57	; 0x39
 800d72c:	f88b 3000 	strb.w	r3, [fp]
 800d730:	462b      	mov	r3, r5
 800d732:	461d      	mov	r5, r3
 800d734:	3b01      	subs	r3, #1
 800d736:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d73a:	2a39      	cmp	r2, #57	; 0x39
 800d73c:	d071      	beq.n	800d822 <_dtoa_r+0xb9a>
 800d73e:	3201      	adds	r2, #1
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	e746      	b.n	800d5d2 <_dtoa_r+0x94a>
 800d744:	2a00      	cmp	r2, #0
 800d746:	dd07      	ble.n	800d758 <_dtoa_r+0xad0>
 800d748:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d74c:	d0ed      	beq.n	800d72a <_dtoa_r+0xaa2>
 800d74e:	f10a 0301 	add.w	r3, sl, #1
 800d752:	f88b 3000 	strb.w	r3, [fp]
 800d756:	e73c      	b.n	800d5d2 <_dtoa_r+0x94a>
 800d758:	9b05      	ldr	r3, [sp, #20]
 800d75a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d75e:	4599      	cmp	r9, r3
 800d760:	d047      	beq.n	800d7f2 <_dtoa_r+0xb6a>
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	2300      	movs	r3, #0
 800d768:	220a      	movs	r2, #10
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 fc80 	bl	800e070 <__multadd>
 800d770:	45b8      	cmp	r8, r7
 800d772:	ee08 0a10 	vmov	s16, r0
 800d776:	f04f 0300 	mov.w	r3, #0
 800d77a:	f04f 020a 	mov.w	r2, #10
 800d77e:	4641      	mov	r1, r8
 800d780:	4620      	mov	r0, r4
 800d782:	d106      	bne.n	800d792 <_dtoa_r+0xb0a>
 800d784:	f000 fc74 	bl	800e070 <__multadd>
 800d788:	4680      	mov	r8, r0
 800d78a:	4607      	mov	r7, r0
 800d78c:	f109 0901 	add.w	r9, r9, #1
 800d790:	e772      	b.n	800d678 <_dtoa_r+0x9f0>
 800d792:	f000 fc6d 	bl	800e070 <__multadd>
 800d796:	4639      	mov	r1, r7
 800d798:	4680      	mov	r8, r0
 800d79a:	2300      	movs	r3, #0
 800d79c:	220a      	movs	r2, #10
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f000 fc66 	bl	800e070 <__multadd>
 800d7a4:	4607      	mov	r7, r0
 800d7a6:	e7f1      	b.n	800d78c <_dtoa_r+0xb04>
 800d7a8:	9b03      	ldr	r3, [sp, #12]
 800d7aa:	9302      	str	r3, [sp, #8]
 800d7ac:	9d01      	ldr	r5, [sp, #4]
 800d7ae:	ee18 0a10 	vmov	r0, s16
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	f7ff f9dc 	bl	800cb70 <quorem>
 800d7b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d7bc:	9b01      	ldr	r3, [sp, #4]
 800d7be:	f805 ab01 	strb.w	sl, [r5], #1
 800d7c2:	1aea      	subs	r2, r5, r3
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	dd09      	ble.n	800d7de <_dtoa_r+0xb56>
 800d7ca:	ee18 1a10 	vmov	r1, s16
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	220a      	movs	r2, #10
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f000 fc4c 	bl	800e070 <__multadd>
 800d7d8:	ee08 0a10 	vmov	s16, r0
 800d7dc:	e7e7      	b.n	800d7ae <_dtoa_r+0xb26>
 800d7de:	9b02      	ldr	r3, [sp, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bfc8      	it	gt
 800d7e4:	461d      	movgt	r5, r3
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	bfd8      	it	le
 800d7ea:	2501      	movle	r5, #1
 800d7ec:	441d      	add	r5, r3
 800d7ee:	f04f 0800 	mov.w	r8, #0
 800d7f2:	ee18 1a10 	vmov	r1, s16
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 fe33 	bl	800e464 <__lshift>
 800d7fe:	4631      	mov	r1, r6
 800d800:	ee08 0a10 	vmov	s16, r0
 800d804:	f000 fe9e 	bl	800e544 <__mcmp>
 800d808:	2800      	cmp	r0, #0
 800d80a:	dc91      	bgt.n	800d730 <_dtoa_r+0xaa8>
 800d80c:	d102      	bne.n	800d814 <_dtoa_r+0xb8c>
 800d80e:	f01a 0f01 	tst.w	sl, #1
 800d812:	d18d      	bne.n	800d730 <_dtoa_r+0xaa8>
 800d814:	462b      	mov	r3, r5
 800d816:	461d      	mov	r5, r3
 800d818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d81c:	2a30      	cmp	r2, #48	; 0x30
 800d81e:	d0fa      	beq.n	800d816 <_dtoa_r+0xb8e>
 800d820:	e6d7      	b.n	800d5d2 <_dtoa_r+0x94a>
 800d822:	9a01      	ldr	r2, [sp, #4]
 800d824:	429a      	cmp	r2, r3
 800d826:	d184      	bne.n	800d732 <_dtoa_r+0xaaa>
 800d828:	9b00      	ldr	r3, [sp, #0]
 800d82a:	3301      	adds	r3, #1
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	2331      	movs	r3, #49	; 0x31
 800d830:	7013      	strb	r3, [r2, #0]
 800d832:	e6ce      	b.n	800d5d2 <_dtoa_r+0x94a>
 800d834:	4b09      	ldr	r3, [pc, #36]	; (800d85c <_dtoa_r+0xbd4>)
 800d836:	f7ff ba95 	b.w	800cd64 <_dtoa_r+0xdc>
 800d83a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f47f aa6e 	bne.w	800cd1e <_dtoa_r+0x96>
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <_dtoa_r+0xbd8>)
 800d844:	f7ff ba8e 	b.w	800cd64 <_dtoa_r+0xdc>
 800d848:	9b02      	ldr	r3, [sp, #8]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	dcae      	bgt.n	800d7ac <_dtoa_r+0xb24>
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	2b02      	cmp	r3, #2
 800d852:	f73f aea8 	bgt.w	800d5a6 <_dtoa_r+0x91e>
 800d856:	e7a9      	b.n	800d7ac <_dtoa_r+0xb24>
 800d858:	0800ff19 	.word	0x0800ff19
 800d85c:	0800fc88 	.word	0x0800fc88
 800d860:	0800feb1 	.word	0x0800feb1

0800d864 <fiprintf>:
 800d864:	b40e      	push	{r1, r2, r3}
 800d866:	b503      	push	{r0, r1, lr}
 800d868:	4601      	mov	r1, r0
 800d86a:	ab03      	add	r3, sp, #12
 800d86c:	4805      	ldr	r0, [pc, #20]	; (800d884 <fiprintf+0x20>)
 800d86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d872:	6800      	ldr	r0, [r0, #0]
 800d874:	9301      	str	r3, [sp, #4]
 800d876:	f001 f9f5 	bl	800ec64 <_vfiprintf_r>
 800d87a:	b002      	add	sp, #8
 800d87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d880:	b003      	add	sp, #12
 800d882:	4770      	bx	lr
 800d884:	20000024 	.word	0x20000024

0800d888 <rshift>:
 800d888:	6903      	ldr	r3, [r0, #16]
 800d88a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d88e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d892:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d896:	f100 0414 	add.w	r4, r0, #20
 800d89a:	dd45      	ble.n	800d928 <rshift+0xa0>
 800d89c:	f011 011f 	ands.w	r1, r1, #31
 800d8a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d8a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d8a8:	d10c      	bne.n	800d8c4 <rshift+0x3c>
 800d8aa:	f100 0710 	add.w	r7, r0, #16
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	42b1      	cmp	r1, r6
 800d8b2:	d334      	bcc.n	800d91e <rshift+0x96>
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	1eea      	subs	r2, r5, #3
 800d8ba:	4296      	cmp	r6, r2
 800d8bc:	bf38      	it	cc
 800d8be:	2300      	movcc	r3, #0
 800d8c0:	4423      	add	r3, r4
 800d8c2:	e015      	b.n	800d8f0 <rshift+0x68>
 800d8c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d8c8:	f1c1 0820 	rsb	r8, r1, #32
 800d8cc:	40cf      	lsrs	r7, r1
 800d8ce:	f105 0e04 	add.w	lr, r5, #4
 800d8d2:	46a1      	mov	r9, r4
 800d8d4:	4576      	cmp	r6, lr
 800d8d6:	46f4      	mov	ip, lr
 800d8d8:	d815      	bhi.n	800d906 <rshift+0x7e>
 800d8da:	1a9a      	subs	r2, r3, r2
 800d8dc:	0092      	lsls	r2, r2, #2
 800d8de:	3a04      	subs	r2, #4
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	42ae      	cmp	r6, r5
 800d8e4:	bf38      	it	cc
 800d8e6:	2200      	movcc	r2, #0
 800d8e8:	18a3      	adds	r3, r4, r2
 800d8ea:	50a7      	str	r7, [r4, r2]
 800d8ec:	b107      	cbz	r7, 800d8f0 <rshift+0x68>
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	1b1a      	subs	r2, r3, r4
 800d8f2:	42a3      	cmp	r3, r4
 800d8f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8f8:	bf08      	it	eq
 800d8fa:	2300      	moveq	r3, #0
 800d8fc:	6102      	str	r2, [r0, #16]
 800d8fe:	bf08      	it	eq
 800d900:	6143      	streq	r3, [r0, #20]
 800d902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d906:	f8dc c000 	ldr.w	ip, [ip]
 800d90a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d90e:	ea4c 0707 	orr.w	r7, ip, r7
 800d912:	f849 7b04 	str.w	r7, [r9], #4
 800d916:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d91a:	40cf      	lsrs	r7, r1
 800d91c:	e7da      	b.n	800d8d4 <rshift+0x4c>
 800d91e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d922:	f847 cf04 	str.w	ip, [r7, #4]!
 800d926:	e7c3      	b.n	800d8b0 <rshift+0x28>
 800d928:	4623      	mov	r3, r4
 800d92a:	e7e1      	b.n	800d8f0 <rshift+0x68>

0800d92c <__hexdig_fun>:
 800d92c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d930:	2b09      	cmp	r3, #9
 800d932:	d802      	bhi.n	800d93a <__hexdig_fun+0xe>
 800d934:	3820      	subs	r0, #32
 800d936:	b2c0      	uxtb	r0, r0
 800d938:	4770      	bx	lr
 800d93a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d93e:	2b05      	cmp	r3, #5
 800d940:	d801      	bhi.n	800d946 <__hexdig_fun+0x1a>
 800d942:	3847      	subs	r0, #71	; 0x47
 800d944:	e7f7      	b.n	800d936 <__hexdig_fun+0xa>
 800d946:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d801      	bhi.n	800d952 <__hexdig_fun+0x26>
 800d94e:	3827      	subs	r0, #39	; 0x27
 800d950:	e7f1      	b.n	800d936 <__hexdig_fun+0xa>
 800d952:	2000      	movs	r0, #0
 800d954:	4770      	bx	lr
	...

0800d958 <__gethex>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	ed2d 8b02 	vpush	{d8}
 800d960:	b089      	sub	sp, #36	; 0x24
 800d962:	ee08 0a10 	vmov	s16, r0
 800d966:	9304      	str	r3, [sp, #16]
 800d968:	4bb4      	ldr	r3, [pc, #720]	; (800dc3c <__gethex+0x2e4>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	4618      	mov	r0, r3
 800d970:	468b      	mov	fp, r1
 800d972:	4690      	mov	r8, r2
 800d974:	f7f2 fc4c 	bl	8000210 <strlen>
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	f8db 2000 	ldr.w	r2, [fp]
 800d97e:	4403      	add	r3, r0
 800d980:	4682      	mov	sl, r0
 800d982:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d986:	9305      	str	r3, [sp, #20]
 800d988:	1c93      	adds	r3, r2, #2
 800d98a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d98e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d992:	32fe      	adds	r2, #254	; 0xfe
 800d994:	18d1      	adds	r1, r2, r3
 800d996:	461f      	mov	r7, r3
 800d998:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d99c:	9100      	str	r1, [sp, #0]
 800d99e:	2830      	cmp	r0, #48	; 0x30
 800d9a0:	d0f8      	beq.n	800d994 <__gethex+0x3c>
 800d9a2:	f7ff ffc3 	bl	800d92c <__hexdig_fun>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d13a      	bne.n	800da22 <__gethex+0xca>
 800d9ac:	9901      	ldr	r1, [sp, #4]
 800d9ae:	4652      	mov	r2, sl
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f001 fa91 	bl	800eed8 <strncmp>
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	2800      	cmp	r0, #0
 800d9ba:	d168      	bne.n	800da8e <__gethex+0x136>
 800d9bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d9c0:	eb07 060a 	add.w	r6, r7, sl
 800d9c4:	f7ff ffb2 	bl	800d92c <__hexdig_fun>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d062      	beq.n	800da92 <__gethex+0x13a>
 800d9cc:	4633      	mov	r3, r6
 800d9ce:	7818      	ldrb	r0, [r3, #0]
 800d9d0:	2830      	cmp	r0, #48	; 0x30
 800d9d2:	461f      	mov	r7, r3
 800d9d4:	f103 0301 	add.w	r3, r3, #1
 800d9d8:	d0f9      	beq.n	800d9ce <__gethex+0x76>
 800d9da:	f7ff ffa7 	bl	800d92c <__hexdig_fun>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	fab0 f480 	clz	r4, r0
 800d9e4:	0964      	lsrs	r4, r4, #5
 800d9e6:	4635      	mov	r5, r6
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	463a      	mov	r2, r7
 800d9ec:	4616      	mov	r6, r2
 800d9ee:	3201      	adds	r2, #1
 800d9f0:	7830      	ldrb	r0, [r6, #0]
 800d9f2:	f7ff ff9b 	bl	800d92c <__hexdig_fun>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	d1f8      	bne.n	800d9ec <__gethex+0x94>
 800d9fa:	9901      	ldr	r1, [sp, #4]
 800d9fc:	4652      	mov	r2, sl
 800d9fe:	4630      	mov	r0, r6
 800da00:	f001 fa6a 	bl	800eed8 <strncmp>
 800da04:	b980      	cbnz	r0, 800da28 <__gethex+0xd0>
 800da06:	b94d      	cbnz	r5, 800da1c <__gethex+0xc4>
 800da08:	eb06 050a 	add.w	r5, r6, sl
 800da0c:	462a      	mov	r2, r5
 800da0e:	4616      	mov	r6, r2
 800da10:	3201      	adds	r2, #1
 800da12:	7830      	ldrb	r0, [r6, #0]
 800da14:	f7ff ff8a 	bl	800d92c <__hexdig_fun>
 800da18:	2800      	cmp	r0, #0
 800da1a:	d1f8      	bne.n	800da0e <__gethex+0xb6>
 800da1c:	1bad      	subs	r5, r5, r6
 800da1e:	00ad      	lsls	r5, r5, #2
 800da20:	e004      	b.n	800da2c <__gethex+0xd4>
 800da22:	2400      	movs	r4, #0
 800da24:	4625      	mov	r5, r4
 800da26:	e7e0      	b.n	800d9ea <__gethex+0x92>
 800da28:	2d00      	cmp	r5, #0
 800da2a:	d1f7      	bne.n	800da1c <__gethex+0xc4>
 800da2c:	7833      	ldrb	r3, [r6, #0]
 800da2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800da32:	2b50      	cmp	r3, #80	; 0x50
 800da34:	d13b      	bne.n	800daae <__gethex+0x156>
 800da36:	7873      	ldrb	r3, [r6, #1]
 800da38:	2b2b      	cmp	r3, #43	; 0x2b
 800da3a:	d02c      	beq.n	800da96 <__gethex+0x13e>
 800da3c:	2b2d      	cmp	r3, #45	; 0x2d
 800da3e:	d02e      	beq.n	800da9e <__gethex+0x146>
 800da40:	1c71      	adds	r1, r6, #1
 800da42:	f04f 0900 	mov.w	r9, #0
 800da46:	7808      	ldrb	r0, [r1, #0]
 800da48:	f7ff ff70 	bl	800d92c <__hexdig_fun>
 800da4c:	1e43      	subs	r3, r0, #1
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b18      	cmp	r3, #24
 800da52:	d82c      	bhi.n	800daae <__gethex+0x156>
 800da54:	f1a0 0210 	sub.w	r2, r0, #16
 800da58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da5c:	f7ff ff66 	bl	800d92c <__hexdig_fun>
 800da60:	1e43      	subs	r3, r0, #1
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b18      	cmp	r3, #24
 800da66:	d91d      	bls.n	800daa4 <__gethex+0x14c>
 800da68:	f1b9 0f00 	cmp.w	r9, #0
 800da6c:	d000      	beq.n	800da70 <__gethex+0x118>
 800da6e:	4252      	negs	r2, r2
 800da70:	4415      	add	r5, r2
 800da72:	f8cb 1000 	str.w	r1, [fp]
 800da76:	b1e4      	cbz	r4, 800dab2 <__gethex+0x15a>
 800da78:	9b00      	ldr	r3, [sp, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	bf14      	ite	ne
 800da7e:	2700      	movne	r7, #0
 800da80:	2706      	moveq	r7, #6
 800da82:	4638      	mov	r0, r7
 800da84:	b009      	add	sp, #36	; 0x24
 800da86:	ecbd 8b02 	vpop	{d8}
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da8e:	463e      	mov	r6, r7
 800da90:	4625      	mov	r5, r4
 800da92:	2401      	movs	r4, #1
 800da94:	e7ca      	b.n	800da2c <__gethex+0xd4>
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	1cb1      	adds	r1, r6, #2
 800da9c:	e7d3      	b.n	800da46 <__gethex+0xee>
 800da9e:	f04f 0901 	mov.w	r9, #1
 800daa2:	e7fa      	b.n	800da9a <__gethex+0x142>
 800daa4:	230a      	movs	r3, #10
 800daa6:	fb03 0202 	mla	r2, r3, r2, r0
 800daaa:	3a10      	subs	r2, #16
 800daac:	e7d4      	b.n	800da58 <__gethex+0x100>
 800daae:	4631      	mov	r1, r6
 800dab0:	e7df      	b.n	800da72 <__gethex+0x11a>
 800dab2:	1bf3      	subs	r3, r6, r7
 800dab4:	3b01      	subs	r3, #1
 800dab6:	4621      	mov	r1, r4
 800dab8:	2b07      	cmp	r3, #7
 800daba:	dc0b      	bgt.n	800dad4 <__gethex+0x17c>
 800dabc:	ee18 0a10 	vmov	r0, s16
 800dac0:	f000 fa74 	bl	800dfac <_Balloc>
 800dac4:	4604      	mov	r4, r0
 800dac6:	b940      	cbnz	r0, 800dada <__gethex+0x182>
 800dac8:	4b5d      	ldr	r3, [pc, #372]	; (800dc40 <__gethex+0x2e8>)
 800daca:	4602      	mov	r2, r0
 800dacc:	21de      	movs	r1, #222	; 0xde
 800dace:	485d      	ldr	r0, [pc, #372]	; (800dc44 <__gethex+0x2ec>)
 800dad0:	f7ff f830 	bl	800cb34 <__assert_func>
 800dad4:	3101      	adds	r1, #1
 800dad6:	105b      	asrs	r3, r3, #1
 800dad8:	e7ee      	b.n	800dab8 <__gethex+0x160>
 800dada:	f100 0914 	add.w	r9, r0, #20
 800dade:	f04f 0b00 	mov.w	fp, #0
 800dae2:	f1ca 0301 	rsb	r3, sl, #1
 800dae6:	f8cd 9008 	str.w	r9, [sp, #8]
 800daea:	f8cd b000 	str.w	fp, [sp]
 800daee:	9306      	str	r3, [sp, #24]
 800daf0:	42b7      	cmp	r7, r6
 800daf2:	d340      	bcc.n	800db76 <__gethex+0x21e>
 800daf4:	9802      	ldr	r0, [sp, #8]
 800daf6:	9b00      	ldr	r3, [sp, #0]
 800daf8:	f840 3b04 	str.w	r3, [r0], #4
 800dafc:	eba0 0009 	sub.w	r0, r0, r9
 800db00:	1080      	asrs	r0, r0, #2
 800db02:	0146      	lsls	r6, r0, #5
 800db04:	6120      	str	r0, [r4, #16]
 800db06:	4618      	mov	r0, r3
 800db08:	f000 fb42 	bl	800e190 <__hi0bits>
 800db0c:	1a30      	subs	r0, r6, r0
 800db0e:	f8d8 6000 	ldr.w	r6, [r8]
 800db12:	42b0      	cmp	r0, r6
 800db14:	dd63      	ble.n	800dbde <__gethex+0x286>
 800db16:	1b87      	subs	r7, r0, r6
 800db18:	4639      	mov	r1, r7
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 fee6 	bl	800e8ec <__any_on>
 800db20:	4682      	mov	sl, r0
 800db22:	b1a8      	cbz	r0, 800db50 <__gethex+0x1f8>
 800db24:	1e7b      	subs	r3, r7, #1
 800db26:	1159      	asrs	r1, r3, #5
 800db28:	f003 021f 	and.w	r2, r3, #31
 800db2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db30:	f04f 0a01 	mov.w	sl, #1
 800db34:	fa0a f202 	lsl.w	r2, sl, r2
 800db38:	420a      	tst	r2, r1
 800db3a:	d009      	beq.n	800db50 <__gethex+0x1f8>
 800db3c:	4553      	cmp	r3, sl
 800db3e:	dd05      	ble.n	800db4c <__gethex+0x1f4>
 800db40:	1eb9      	subs	r1, r7, #2
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fed2 	bl	800e8ec <__any_on>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d145      	bne.n	800dbd8 <__gethex+0x280>
 800db4c:	f04f 0a02 	mov.w	sl, #2
 800db50:	4639      	mov	r1, r7
 800db52:	4620      	mov	r0, r4
 800db54:	f7ff fe98 	bl	800d888 <rshift>
 800db58:	443d      	add	r5, r7
 800db5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db5e:	42ab      	cmp	r3, r5
 800db60:	da4c      	bge.n	800dbfc <__gethex+0x2a4>
 800db62:	ee18 0a10 	vmov	r0, s16
 800db66:	4621      	mov	r1, r4
 800db68:	f000 fa60 	bl	800e02c <_Bfree>
 800db6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db6e:	2300      	movs	r3, #0
 800db70:	6013      	str	r3, [r2, #0]
 800db72:	27a3      	movs	r7, #163	; 0xa3
 800db74:	e785      	b.n	800da82 <__gethex+0x12a>
 800db76:	1e73      	subs	r3, r6, #1
 800db78:	9a05      	ldr	r2, [sp, #20]
 800db7a:	9303      	str	r3, [sp, #12]
 800db7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db80:	4293      	cmp	r3, r2
 800db82:	d019      	beq.n	800dbb8 <__gethex+0x260>
 800db84:	f1bb 0f20 	cmp.w	fp, #32
 800db88:	d107      	bne.n	800db9a <__gethex+0x242>
 800db8a:	9b02      	ldr	r3, [sp, #8]
 800db8c:	9a00      	ldr	r2, [sp, #0]
 800db8e:	f843 2b04 	str.w	r2, [r3], #4
 800db92:	9302      	str	r3, [sp, #8]
 800db94:	2300      	movs	r3, #0
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	469b      	mov	fp, r3
 800db9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800db9e:	f7ff fec5 	bl	800d92c <__hexdig_fun>
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	f000 000f 	and.w	r0, r0, #15
 800dba8:	fa00 f00b 	lsl.w	r0, r0, fp
 800dbac:	4303      	orrs	r3, r0
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	f10b 0b04 	add.w	fp, fp, #4
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	e00d      	b.n	800dbd4 <__gethex+0x27c>
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	9a06      	ldr	r2, [sp, #24]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	42bb      	cmp	r3, r7
 800dbc0:	d3e0      	bcc.n	800db84 <__gethex+0x22c>
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	9901      	ldr	r1, [sp, #4]
 800dbc6:	9307      	str	r3, [sp, #28]
 800dbc8:	4652      	mov	r2, sl
 800dbca:	f001 f985 	bl	800eed8 <strncmp>
 800dbce:	9b07      	ldr	r3, [sp, #28]
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d1d7      	bne.n	800db84 <__gethex+0x22c>
 800dbd4:	461e      	mov	r6, r3
 800dbd6:	e78b      	b.n	800daf0 <__gethex+0x198>
 800dbd8:	f04f 0a03 	mov.w	sl, #3
 800dbdc:	e7b8      	b.n	800db50 <__gethex+0x1f8>
 800dbde:	da0a      	bge.n	800dbf6 <__gethex+0x29e>
 800dbe0:	1a37      	subs	r7, r6, r0
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	ee18 0a10 	vmov	r0, s16
 800dbe8:	463a      	mov	r2, r7
 800dbea:	f000 fc3b 	bl	800e464 <__lshift>
 800dbee:	1bed      	subs	r5, r5, r7
 800dbf0:	4604      	mov	r4, r0
 800dbf2:	f100 0914 	add.w	r9, r0, #20
 800dbf6:	f04f 0a00 	mov.w	sl, #0
 800dbfa:	e7ae      	b.n	800db5a <__gethex+0x202>
 800dbfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc00:	42a8      	cmp	r0, r5
 800dc02:	dd72      	ble.n	800dcea <__gethex+0x392>
 800dc04:	1b45      	subs	r5, r0, r5
 800dc06:	42ae      	cmp	r6, r5
 800dc08:	dc36      	bgt.n	800dc78 <__gethex+0x320>
 800dc0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d02a      	beq.n	800dc68 <__gethex+0x310>
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	d02c      	beq.n	800dc70 <__gethex+0x318>
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d11c      	bne.n	800dc54 <__gethex+0x2fc>
 800dc1a:	42ae      	cmp	r6, r5
 800dc1c:	d11a      	bne.n	800dc54 <__gethex+0x2fc>
 800dc1e:	2e01      	cmp	r6, #1
 800dc20:	d112      	bne.n	800dc48 <__gethex+0x2f0>
 800dc22:	9a04      	ldr	r2, [sp, #16]
 800dc24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	6123      	str	r3, [r4, #16]
 800dc2e:	f8c9 3000 	str.w	r3, [r9]
 800dc32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc34:	2762      	movs	r7, #98	; 0x62
 800dc36:	601c      	str	r4, [r3, #0]
 800dc38:	e723      	b.n	800da82 <__gethex+0x12a>
 800dc3a:	bf00      	nop
 800dc3c:	0800ff90 	.word	0x0800ff90
 800dc40:	0800ff19 	.word	0x0800ff19
 800dc44:	0800ff2a 	.word	0x0800ff2a
 800dc48:	1e71      	subs	r1, r6, #1
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 fe4e 	bl	800e8ec <__any_on>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d1e6      	bne.n	800dc22 <__gethex+0x2ca>
 800dc54:	ee18 0a10 	vmov	r0, s16
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f000 f9e7 	bl	800e02c <_Bfree>
 800dc5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc60:	2300      	movs	r3, #0
 800dc62:	6013      	str	r3, [r2, #0]
 800dc64:	2750      	movs	r7, #80	; 0x50
 800dc66:	e70c      	b.n	800da82 <__gethex+0x12a>
 800dc68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1f2      	bne.n	800dc54 <__gethex+0x2fc>
 800dc6e:	e7d8      	b.n	800dc22 <__gethex+0x2ca>
 800dc70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1d5      	bne.n	800dc22 <__gethex+0x2ca>
 800dc76:	e7ed      	b.n	800dc54 <__gethex+0x2fc>
 800dc78:	1e6f      	subs	r7, r5, #1
 800dc7a:	f1ba 0f00 	cmp.w	sl, #0
 800dc7e:	d131      	bne.n	800dce4 <__gethex+0x38c>
 800dc80:	b127      	cbz	r7, 800dc8c <__gethex+0x334>
 800dc82:	4639      	mov	r1, r7
 800dc84:	4620      	mov	r0, r4
 800dc86:	f000 fe31 	bl	800e8ec <__any_on>
 800dc8a:	4682      	mov	sl, r0
 800dc8c:	117b      	asrs	r3, r7, #5
 800dc8e:	2101      	movs	r1, #1
 800dc90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dc94:	f007 071f 	and.w	r7, r7, #31
 800dc98:	fa01 f707 	lsl.w	r7, r1, r7
 800dc9c:	421f      	tst	r7, r3
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4620      	mov	r0, r4
 800dca2:	bf18      	it	ne
 800dca4:	f04a 0a02 	orrne.w	sl, sl, #2
 800dca8:	1b76      	subs	r6, r6, r5
 800dcaa:	f7ff fded 	bl	800d888 <rshift>
 800dcae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dcb2:	2702      	movs	r7, #2
 800dcb4:	f1ba 0f00 	cmp.w	sl, #0
 800dcb8:	d048      	beq.n	800dd4c <__gethex+0x3f4>
 800dcba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d015      	beq.n	800dcee <__gethex+0x396>
 800dcc2:	2b03      	cmp	r3, #3
 800dcc4:	d017      	beq.n	800dcf6 <__gethex+0x39e>
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d109      	bne.n	800dcde <__gethex+0x386>
 800dcca:	f01a 0f02 	tst.w	sl, #2
 800dcce:	d006      	beq.n	800dcde <__gethex+0x386>
 800dcd0:	f8d9 0000 	ldr.w	r0, [r9]
 800dcd4:	ea4a 0a00 	orr.w	sl, sl, r0
 800dcd8:	f01a 0f01 	tst.w	sl, #1
 800dcdc:	d10e      	bne.n	800dcfc <__gethex+0x3a4>
 800dcde:	f047 0710 	orr.w	r7, r7, #16
 800dce2:	e033      	b.n	800dd4c <__gethex+0x3f4>
 800dce4:	f04f 0a01 	mov.w	sl, #1
 800dce8:	e7d0      	b.n	800dc8c <__gethex+0x334>
 800dcea:	2701      	movs	r7, #1
 800dcec:	e7e2      	b.n	800dcb4 <__gethex+0x35c>
 800dcee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcf0:	f1c3 0301 	rsb	r3, r3, #1
 800dcf4:	9315      	str	r3, [sp, #84]	; 0x54
 800dcf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d0f0      	beq.n	800dcde <__gethex+0x386>
 800dcfc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dd00:	f104 0314 	add.w	r3, r4, #20
 800dd04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dd08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dd0c:	f04f 0c00 	mov.w	ip, #0
 800dd10:	4618      	mov	r0, r3
 800dd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd16:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dd1a:	d01c      	beq.n	800dd56 <__gethex+0x3fe>
 800dd1c:	3201      	adds	r2, #1
 800dd1e:	6002      	str	r2, [r0, #0]
 800dd20:	2f02      	cmp	r7, #2
 800dd22:	f104 0314 	add.w	r3, r4, #20
 800dd26:	d13f      	bne.n	800dda8 <__gethex+0x450>
 800dd28:	f8d8 2000 	ldr.w	r2, [r8]
 800dd2c:	3a01      	subs	r2, #1
 800dd2e:	42b2      	cmp	r2, r6
 800dd30:	d10a      	bne.n	800dd48 <__gethex+0x3f0>
 800dd32:	1171      	asrs	r1, r6, #5
 800dd34:	2201      	movs	r2, #1
 800dd36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd3a:	f006 061f 	and.w	r6, r6, #31
 800dd3e:	fa02 f606 	lsl.w	r6, r2, r6
 800dd42:	421e      	tst	r6, r3
 800dd44:	bf18      	it	ne
 800dd46:	4617      	movne	r7, r2
 800dd48:	f047 0720 	orr.w	r7, r7, #32
 800dd4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd4e:	601c      	str	r4, [r3, #0]
 800dd50:	9b04      	ldr	r3, [sp, #16]
 800dd52:	601d      	str	r5, [r3, #0]
 800dd54:	e695      	b.n	800da82 <__gethex+0x12a>
 800dd56:	4299      	cmp	r1, r3
 800dd58:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd5c:	d8d8      	bhi.n	800dd10 <__gethex+0x3b8>
 800dd5e:	68a3      	ldr	r3, [r4, #8]
 800dd60:	459b      	cmp	fp, r3
 800dd62:	db19      	blt.n	800dd98 <__gethex+0x440>
 800dd64:	6861      	ldr	r1, [r4, #4]
 800dd66:	ee18 0a10 	vmov	r0, s16
 800dd6a:	3101      	adds	r1, #1
 800dd6c:	f000 f91e 	bl	800dfac <_Balloc>
 800dd70:	4681      	mov	r9, r0
 800dd72:	b918      	cbnz	r0, 800dd7c <__gethex+0x424>
 800dd74:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <__gethex+0x488>)
 800dd76:	4602      	mov	r2, r0
 800dd78:	2184      	movs	r1, #132	; 0x84
 800dd7a:	e6a8      	b.n	800dace <__gethex+0x176>
 800dd7c:	6922      	ldr	r2, [r4, #16]
 800dd7e:	3202      	adds	r2, #2
 800dd80:	f104 010c 	add.w	r1, r4, #12
 800dd84:	0092      	lsls	r2, r2, #2
 800dd86:	300c      	adds	r0, #12
 800dd88:	f7fd f9f2 	bl	800b170 <memcpy>
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	ee18 0a10 	vmov	r0, s16
 800dd92:	f000 f94b 	bl	800e02c <_Bfree>
 800dd96:	464c      	mov	r4, r9
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dda0:	6122      	str	r2, [r4, #16]
 800dda2:	2201      	movs	r2, #1
 800dda4:	615a      	str	r2, [r3, #20]
 800dda6:	e7bb      	b.n	800dd20 <__gethex+0x3c8>
 800dda8:	6922      	ldr	r2, [r4, #16]
 800ddaa:	455a      	cmp	r2, fp
 800ddac:	dd0b      	ble.n	800ddc6 <__gethex+0x46e>
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f7ff fd69 	bl	800d888 <rshift>
 800ddb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddba:	3501      	adds	r5, #1
 800ddbc:	42ab      	cmp	r3, r5
 800ddbe:	f6ff aed0 	blt.w	800db62 <__gethex+0x20a>
 800ddc2:	2701      	movs	r7, #1
 800ddc4:	e7c0      	b.n	800dd48 <__gethex+0x3f0>
 800ddc6:	f016 061f 	ands.w	r6, r6, #31
 800ddca:	d0fa      	beq.n	800ddc2 <__gethex+0x46a>
 800ddcc:	4453      	add	r3, sl
 800ddce:	f1c6 0620 	rsb	r6, r6, #32
 800ddd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddd6:	f000 f9db 	bl	800e190 <__hi0bits>
 800ddda:	42b0      	cmp	r0, r6
 800dddc:	dbe7      	blt.n	800ddae <__gethex+0x456>
 800ddde:	e7f0      	b.n	800ddc2 <__gethex+0x46a>
 800dde0:	0800ff19 	.word	0x0800ff19

0800dde4 <L_shift>:
 800dde4:	f1c2 0208 	rsb	r2, r2, #8
 800dde8:	0092      	lsls	r2, r2, #2
 800ddea:	b570      	push	{r4, r5, r6, lr}
 800ddec:	f1c2 0620 	rsb	r6, r2, #32
 800ddf0:	6843      	ldr	r3, [r0, #4]
 800ddf2:	6804      	ldr	r4, [r0, #0]
 800ddf4:	fa03 f506 	lsl.w	r5, r3, r6
 800ddf8:	432c      	orrs	r4, r5
 800ddfa:	40d3      	lsrs	r3, r2
 800ddfc:	6004      	str	r4, [r0, #0]
 800ddfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800de02:	4288      	cmp	r0, r1
 800de04:	d3f4      	bcc.n	800ddf0 <L_shift+0xc>
 800de06:	bd70      	pop	{r4, r5, r6, pc}

0800de08 <__match>:
 800de08:	b530      	push	{r4, r5, lr}
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	3301      	adds	r3, #1
 800de0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de12:	b914      	cbnz	r4, 800de1a <__match+0x12>
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	2001      	movs	r0, #1
 800de18:	bd30      	pop	{r4, r5, pc}
 800de1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de22:	2d19      	cmp	r5, #25
 800de24:	bf98      	it	ls
 800de26:	3220      	addls	r2, #32
 800de28:	42a2      	cmp	r2, r4
 800de2a:	d0f0      	beq.n	800de0e <__match+0x6>
 800de2c:	2000      	movs	r0, #0
 800de2e:	e7f3      	b.n	800de18 <__match+0x10>

0800de30 <__hexnan>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	680b      	ldr	r3, [r1, #0]
 800de36:	115e      	asrs	r6, r3, #5
 800de38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de3c:	f013 031f 	ands.w	r3, r3, #31
 800de40:	b087      	sub	sp, #28
 800de42:	bf18      	it	ne
 800de44:	3604      	addne	r6, #4
 800de46:	2500      	movs	r5, #0
 800de48:	1f37      	subs	r7, r6, #4
 800de4a:	4690      	mov	r8, r2
 800de4c:	6802      	ldr	r2, [r0, #0]
 800de4e:	9301      	str	r3, [sp, #4]
 800de50:	4682      	mov	sl, r0
 800de52:	f846 5c04 	str.w	r5, [r6, #-4]
 800de56:	46b9      	mov	r9, r7
 800de58:	463c      	mov	r4, r7
 800de5a:	9502      	str	r5, [sp, #8]
 800de5c:	46ab      	mov	fp, r5
 800de5e:	7851      	ldrb	r1, [r2, #1]
 800de60:	1c53      	adds	r3, r2, #1
 800de62:	9303      	str	r3, [sp, #12]
 800de64:	b341      	cbz	r1, 800deb8 <__hexnan+0x88>
 800de66:	4608      	mov	r0, r1
 800de68:	9205      	str	r2, [sp, #20]
 800de6a:	9104      	str	r1, [sp, #16]
 800de6c:	f7ff fd5e 	bl	800d92c <__hexdig_fun>
 800de70:	2800      	cmp	r0, #0
 800de72:	d14f      	bne.n	800df14 <__hexnan+0xe4>
 800de74:	9904      	ldr	r1, [sp, #16]
 800de76:	9a05      	ldr	r2, [sp, #20]
 800de78:	2920      	cmp	r1, #32
 800de7a:	d818      	bhi.n	800deae <__hexnan+0x7e>
 800de7c:	9b02      	ldr	r3, [sp, #8]
 800de7e:	459b      	cmp	fp, r3
 800de80:	dd13      	ble.n	800deaa <__hexnan+0x7a>
 800de82:	454c      	cmp	r4, r9
 800de84:	d206      	bcs.n	800de94 <__hexnan+0x64>
 800de86:	2d07      	cmp	r5, #7
 800de88:	dc04      	bgt.n	800de94 <__hexnan+0x64>
 800de8a:	462a      	mov	r2, r5
 800de8c:	4649      	mov	r1, r9
 800de8e:	4620      	mov	r0, r4
 800de90:	f7ff ffa8 	bl	800dde4 <L_shift>
 800de94:	4544      	cmp	r4, r8
 800de96:	d950      	bls.n	800df3a <__hexnan+0x10a>
 800de98:	2300      	movs	r3, #0
 800de9a:	f1a4 0904 	sub.w	r9, r4, #4
 800de9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dea2:	f8cd b008 	str.w	fp, [sp, #8]
 800dea6:	464c      	mov	r4, r9
 800dea8:	461d      	mov	r5, r3
 800deaa:	9a03      	ldr	r2, [sp, #12]
 800deac:	e7d7      	b.n	800de5e <__hexnan+0x2e>
 800deae:	2929      	cmp	r1, #41	; 0x29
 800deb0:	d156      	bne.n	800df60 <__hexnan+0x130>
 800deb2:	3202      	adds	r2, #2
 800deb4:	f8ca 2000 	str.w	r2, [sl]
 800deb8:	f1bb 0f00 	cmp.w	fp, #0
 800debc:	d050      	beq.n	800df60 <__hexnan+0x130>
 800debe:	454c      	cmp	r4, r9
 800dec0:	d206      	bcs.n	800ded0 <__hexnan+0xa0>
 800dec2:	2d07      	cmp	r5, #7
 800dec4:	dc04      	bgt.n	800ded0 <__hexnan+0xa0>
 800dec6:	462a      	mov	r2, r5
 800dec8:	4649      	mov	r1, r9
 800deca:	4620      	mov	r0, r4
 800decc:	f7ff ff8a 	bl	800dde4 <L_shift>
 800ded0:	4544      	cmp	r4, r8
 800ded2:	d934      	bls.n	800df3e <__hexnan+0x10e>
 800ded4:	f1a8 0204 	sub.w	r2, r8, #4
 800ded8:	4623      	mov	r3, r4
 800deda:	f853 1b04 	ldr.w	r1, [r3], #4
 800dede:	f842 1f04 	str.w	r1, [r2, #4]!
 800dee2:	429f      	cmp	r7, r3
 800dee4:	d2f9      	bcs.n	800deda <__hexnan+0xaa>
 800dee6:	1b3b      	subs	r3, r7, r4
 800dee8:	f023 0303 	bic.w	r3, r3, #3
 800deec:	3304      	adds	r3, #4
 800deee:	3401      	adds	r4, #1
 800def0:	3e03      	subs	r6, #3
 800def2:	42b4      	cmp	r4, r6
 800def4:	bf88      	it	hi
 800def6:	2304      	movhi	r3, #4
 800def8:	4443      	add	r3, r8
 800defa:	2200      	movs	r2, #0
 800defc:	f843 2b04 	str.w	r2, [r3], #4
 800df00:	429f      	cmp	r7, r3
 800df02:	d2fb      	bcs.n	800defc <__hexnan+0xcc>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	b91b      	cbnz	r3, 800df10 <__hexnan+0xe0>
 800df08:	4547      	cmp	r7, r8
 800df0a:	d127      	bne.n	800df5c <__hexnan+0x12c>
 800df0c:	2301      	movs	r3, #1
 800df0e:	603b      	str	r3, [r7, #0]
 800df10:	2005      	movs	r0, #5
 800df12:	e026      	b.n	800df62 <__hexnan+0x132>
 800df14:	3501      	adds	r5, #1
 800df16:	2d08      	cmp	r5, #8
 800df18:	f10b 0b01 	add.w	fp, fp, #1
 800df1c:	dd06      	ble.n	800df2c <__hexnan+0xfc>
 800df1e:	4544      	cmp	r4, r8
 800df20:	d9c3      	bls.n	800deaa <__hexnan+0x7a>
 800df22:	2300      	movs	r3, #0
 800df24:	f844 3c04 	str.w	r3, [r4, #-4]
 800df28:	2501      	movs	r5, #1
 800df2a:	3c04      	subs	r4, #4
 800df2c:	6822      	ldr	r2, [r4, #0]
 800df2e:	f000 000f 	and.w	r0, r0, #15
 800df32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800df36:	6022      	str	r2, [r4, #0]
 800df38:	e7b7      	b.n	800deaa <__hexnan+0x7a>
 800df3a:	2508      	movs	r5, #8
 800df3c:	e7b5      	b.n	800deaa <__hexnan+0x7a>
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d0df      	beq.n	800df04 <__hexnan+0xd4>
 800df44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df48:	f1c3 0320 	rsb	r3, r3, #32
 800df4c:	fa22 f303 	lsr.w	r3, r2, r3
 800df50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df54:	401a      	ands	r2, r3
 800df56:	f846 2c04 	str.w	r2, [r6, #-4]
 800df5a:	e7d3      	b.n	800df04 <__hexnan+0xd4>
 800df5c:	3f04      	subs	r7, #4
 800df5e:	e7d1      	b.n	800df04 <__hexnan+0xd4>
 800df60:	2004      	movs	r0, #4
 800df62:	b007      	add	sp, #28
 800df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df68 <_localeconv_r>:
 800df68:	4800      	ldr	r0, [pc, #0]	; (800df6c <_localeconv_r+0x4>)
 800df6a:	4770      	bx	lr
 800df6c:	2000017c 	.word	0x2000017c

0800df70 <__ascii_mbtowc>:
 800df70:	b082      	sub	sp, #8
 800df72:	b901      	cbnz	r1, 800df76 <__ascii_mbtowc+0x6>
 800df74:	a901      	add	r1, sp, #4
 800df76:	b142      	cbz	r2, 800df8a <__ascii_mbtowc+0x1a>
 800df78:	b14b      	cbz	r3, 800df8e <__ascii_mbtowc+0x1e>
 800df7a:	7813      	ldrb	r3, [r2, #0]
 800df7c:	600b      	str	r3, [r1, #0]
 800df7e:	7812      	ldrb	r2, [r2, #0]
 800df80:	1e10      	subs	r0, r2, #0
 800df82:	bf18      	it	ne
 800df84:	2001      	movne	r0, #1
 800df86:	b002      	add	sp, #8
 800df88:	4770      	bx	lr
 800df8a:	4610      	mov	r0, r2
 800df8c:	e7fb      	b.n	800df86 <__ascii_mbtowc+0x16>
 800df8e:	f06f 0001 	mvn.w	r0, #1
 800df92:	e7f8      	b.n	800df86 <__ascii_mbtowc+0x16>

0800df94 <__malloc_lock>:
 800df94:	4801      	ldr	r0, [pc, #4]	; (800df9c <__malloc_lock+0x8>)
 800df96:	f001 ba41 	b.w	800f41c <__retarget_lock_acquire_recursive>
 800df9a:	bf00      	nop
 800df9c:	2000a608 	.word	0x2000a608

0800dfa0 <__malloc_unlock>:
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__malloc_unlock+0x8>)
 800dfa2:	f001 ba3c 	b.w	800f41e <__retarget_lock_release_recursive>
 800dfa6:	bf00      	nop
 800dfa8:	2000a608 	.word	0x2000a608

0800dfac <_Balloc>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	b976      	cbnz	r6, 800dfd4 <_Balloc+0x28>
 800dfb6:	2010      	movs	r0, #16
 800dfb8:	f7fd f8ca 	bl	800b150 <malloc>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	6260      	str	r0, [r4, #36]	; 0x24
 800dfc0:	b920      	cbnz	r0, 800dfcc <_Balloc+0x20>
 800dfc2:	4b18      	ldr	r3, [pc, #96]	; (800e024 <_Balloc+0x78>)
 800dfc4:	4818      	ldr	r0, [pc, #96]	; (800e028 <_Balloc+0x7c>)
 800dfc6:	2166      	movs	r1, #102	; 0x66
 800dfc8:	f7fe fdb4 	bl	800cb34 <__assert_func>
 800dfcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfd0:	6006      	str	r6, [r0, #0]
 800dfd2:	60c6      	str	r6, [r0, #12]
 800dfd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfd6:	68f3      	ldr	r3, [r6, #12]
 800dfd8:	b183      	cbz	r3, 800dffc <_Balloc+0x50>
 800dfda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfe2:	b9b8      	cbnz	r0, 800e014 <_Balloc+0x68>
 800dfe4:	2101      	movs	r1, #1
 800dfe6:	fa01 f605 	lsl.w	r6, r1, r5
 800dfea:	1d72      	adds	r2, r6, #5
 800dfec:	0092      	lsls	r2, r2, #2
 800dfee:	4620      	mov	r0, r4
 800dff0:	f000 fc9d 	bl	800e92e <_calloc_r>
 800dff4:	b160      	cbz	r0, 800e010 <_Balloc+0x64>
 800dff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dffa:	e00e      	b.n	800e01a <_Balloc+0x6e>
 800dffc:	2221      	movs	r2, #33	; 0x21
 800dffe:	2104      	movs	r1, #4
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fc94 	bl	800e92e <_calloc_r>
 800e006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e008:	60f0      	str	r0, [r6, #12]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1e4      	bne.n	800dfda <_Balloc+0x2e>
 800e010:	2000      	movs	r0, #0
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	6802      	ldr	r2, [r0, #0]
 800e016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e01a:	2300      	movs	r3, #0
 800e01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e020:	e7f7      	b.n	800e012 <_Balloc+0x66>
 800e022:	bf00      	nop
 800e024:	0800fd00 	.word	0x0800fd00
 800e028:	0800ffa4 	.word	0x0800ffa4

0800e02c <_Bfree>:
 800e02c:	b570      	push	{r4, r5, r6, lr}
 800e02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e030:	4605      	mov	r5, r0
 800e032:	460c      	mov	r4, r1
 800e034:	b976      	cbnz	r6, 800e054 <_Bfree+0x28>
 800e036:	2010      	movs	r0, #16
 800e038:	f7fd f88a 	bl	800b150 <malloc>
 800e03c:	4602      	mov	r2, r0
 800e03e:	6268      	str	r0, [r5, #36]	; 0x24
 800e040:	b920      	cbnz	r0, 800e04c <_Bfree+0x20>
 800e042:	4b09      	ldr	r3, [pc, #36]	; (800e068 <_Bfree+0x3c>)
 800e044:	4809      	ldr	r0, [pc, #36]	; (800e06c <_Bfree+0x40>)
 800e046:	218a      	movs	r1, #138	; 0x8a
 800e048:	f7fe fd74 	bl	800cb34 <__assert_func>
 800e04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e050:	6006      	str	r6, [r0, #0]
 800e052:	60c6      	str	r6, [r0, #12]
 800e054:	b13c      	cbz	r4, 800e066 <_Bfree+0x3a>
 800e056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e058:	6862      	ldr	r2, [r4, #4]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e060:	6021      	str	r1, [r4, #0]
 800e062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e066:	bd70      	pop	{r4, r5, r6, pc}
 800e068:	0800fd00 	.word	0x0800fd00
 800e06c:	0800ffa4 	.word	0x0800ffa4

0800e070 <__multadd>:
 800e070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e074:	690d      	ldr	r5, [r1, #16]
 800e076:	4607      	mov	r7, r0
 800e078:	460c      	mov	r4, r1
 800e07a:	461e      	mov	r6, r3
 800e07c:	f101 0c14 	add.w	ip, r1, #20
 800e080:	2000      	movs	r0, #0
 800e082:	f8dc 3000 	ldr.w	r3, [ip]
 800e086:	b299      	uxth	r1, r3
 800e088:	fb02 6101 	mla	r1, r2, r1, r6
 800e08c:	0c1e      	lsrs	r6, r3, #16
 800e08e:	0c0b      	lsrs	r3, r1, #16
 800e090:	fb02 3306 	mla	r3, r2, r6, r3
 800e094:	b289      	uxth	r1, r1
 800e096:	3001      	adds	r0, #1
 800e098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e09c:	4285      	cmp	r5, r0
 800e09e:	f84c 1b04 	str.w	r1, [ip], #4
 800e0a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0a6:	dcec      	bgt.n	800e082 <__multadd+0x12>
 800e0a8:	b30e      	cbz	r6, 800e0ee <__multadd+0x7e>
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	42ab      	cmp	r3, r5
 800e0ae:	dc19      	bgt.n	800e0e4 <__multadd+0x74>
 800e0b0:	6861      	ldr	r1, [r4, #4]
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	3101      	adds	r1, #1
 800e0b6:	f7ff ff79 	bl	800dfac <_Balloc>
 800e0ba:	4680      	mov	r8, r0
 800e0bc:	b928      	cbnz	r0, 800e0ca <__multadd+0x5a>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <__multadd+0x84>)
 800e0c2:	480d      	ldr	r0, [pc, #52]	; (800e0f8 <__multadd+0x88>)
 800e0c4:	21b5      	movs	r1, #181	; 0xb5
 800e0c6:	f7fe fd35 	bl	800cb34 <__assert_func>
 800e0ca:	6922      	ldr	r2, [r4, #16]
 800e0cc:	3202      	adds	r2, #2
 800e0ce:	f104 010c 	add.w	r1, r4, #12
 800e0d2:	0092      	lsls	r2, r2, #2
 800e0d4:	300c      	adds	r0, #12
 800e0d6:	f7fd f84b 	bl	800b170 <memcpy>
 800e0da:	4621      	mov	r1, r4
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff ffa5 	bl	800e02c <_Bfree>
 800e0e2:	4644      	mov	r4, r8
 800e0e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0e8:	3501      	adds	r5, #1
 800e0ea:	615e      	str	r6, [r3, #20]
 800e0ec:	6125      	str	r5, [r4, #16]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f4:	0800ff19 	.word	0x0800ff19
 800e0f8:	0800ffa4 	.word	0x0800ffa4

0800e0fc <__s2b>:
 800e0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e100:	460c      	mov	r4, r1
 800e102:	4615      	mov	r5, r2
 800e104:	461f      	mov	r7, r3
 800e106:	2209      	movs	r2, #9
 800e108:	3308      	adds	r3, #8
 800e10a:	4606      	mov	r6, r0
 800e10c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e110:	2100      	movs	r1, #0
 800e112:	2201      	movs	r2, #1
 800e114:	429a      	cmp	r2, r3
 800e116:	db09      	blt.n	800e12c <__s2b+0x30>
 800e118:	4630      	mov	r0, r6
 800e11a:	f7ff ff47 	bl	800dfac <_Balloc>
 800e11e:	b940      	cbnz	r0, 800e132 <__s2b+0x36>
 800e120:	4602      	mov	r2, r0
 800e122:	4b19      	ldr	r3, [pc, #100]	; (800e188 <__s2b+0x8c>)
 800e124:	4819      	ldr	r0, [pc, #100]	; (800e18c <__s2b+0x90>)
 800e126:	21ce      	movs	r1, #206	; 0xce
 800e128:	f7fe fd04 	bl	800cb34 <__assert_func>
 800e12c:	0052      	lsls	r2, r2, #1
 800e12e:	3101      	adds	r1, #1
 800e130:	e7f0      	b.n	800e114 <__s2b+0x18>
 800e132:	9b08      	ldr	r3, [sp, #32]
 800e134:	6143      	str	r3, [r0, #20]
 800e136:	2d09      	cmp	r5, #9
 800e138:	f04f 0301 	mov.w	r3, #1
 800e13c:	6103      	str	r3, [r0, #16]
 800e13e:	dd16      	ble.n	800e16e <__s2b+0x72>
 800e140:	f104 0909 	add.w	r9, r4, #9
 800e144:	46c8      	mov	r8, r9
 800e146:	442c      	add	r4, r5
 800e148:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e14c:	4601      	mov	r1, r0
 800e14e:	3b30      	subs	r3, #48	; 0x30
 800e150:	220a      	movs	r2, #10
 800e152:	4630      	mov	r0, r6
 800e154:	f7ff ff8c 	bl	800e070 <__multadd>
 800e158:	45a0      	cmp	r8, r4
 800e15a:	d1f5      	bne.n	800e148 <__s2b+0x4c>
 800e15c:	f1a5 0408 	sub.w	r4, r5, #8
 800e160:	444c      	add	r4, r9
 800e162:	1b2d      	subs	r5, r5, r4
 800e164:	1963      	adds	r3, r4, r5
 800e166:	42bb      	cmp	r3, r7
 800e168:	db04      	blt.n	800e174 <__s2b+0x78>
 800e16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16e:	340a      	adds	r4, #10
 800e170:	2509      	movs	r5, #9
 800e172:	e7f6      	b.n	800e162 <__s2b+0x66>
 800e174:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e178:	4601      	mov	r1, r0
 800e17a:	3b30      	subs	r3, #48	; 0x30
 800e17c:	220a      	movs	r2, #10
 800e17e:	4630      	mov	r0, r6
 800e180:	f7ff ff76 	bl	800e070 <__multadd>
 800e184:	e7ee      	b.n	800e164 <__s2b+0x68>
 800e186:	bf00      	nop
 800e188:	0800ff19 	.word	0x0800ff19
 800e18c:	0800ffa4 	.word	0x0800ffa4

0800e190 <__hi0bits>:
 800e190:	0c03      	lsrs	r3, r0, #16
 800e192:	041b      	lsls	r3, r3, #16
 800e194:	b9d3      	cbnz	r3, 800e1cc <__hi0bits+0x3c>
 800e196:	0400      	lsls	r0, r0, #16
 800e198:	2310      	movs	r3, #16
 800e19a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e19e:	bf04      	itt	eq
 800e1a0:	0200      	lsleq	r0, r0, #8
 800e1a2:	3308      	addeq	r3, #8
 800e1a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1a8:	bf04      	itt	eq
 800e1aa:	0100      	lsleq	r0, r0, #4
 800e1ac:	3304      	addeq	r3, #4
 800e1ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1b2:	bf04      	itt	eq
 800e1b4:	0080      	lsleq	r0, r0, #2
 800e1b6:	3302      	addeq	r3, #2
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	db05      	blt.n	800e1c8 <__hi0bits+0x38>
 800e1bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1c0:	f103 0301 	add.w	r3, r3, #1
 800e1c4:	bf08      	it	eq
 800e1c6:	2320      	moveq	r3, #32
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	4770      	bx	lr
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e7e4      	b.n	800e19a <__hi0bits+0xa>

0800e1d0 <__lo0bits>:
 800e1d0:	6803      	ldr	r3, [r0, #0]
 800e1d2:	f013 0207 	ands.w	r2, r3, #7
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	d00b      	beq.n	800e1f2 <__lo0bits+0x22>
 800e1da:	07da      	lsls	r2, r3, #31
 800e1dc:	d423      	bmi.n	800e226 <__lo0bits+0x56>
 800e1de:	0798      	lsls	r0, r3, #30
 800e1e0:	bf49      	itett	mi
 800e1e2:	085b      	lsrmi	r3, r3, #1
 800e1e4:	089b      	lsrpl	r3, r3, #2
 800e1e6:	2001      	movmi	r0, #1
 800e1e8:	600b      	strmi	r3, [r1, #0]
 800e1ea:	bf5c      	itt	pl
 800e1ec:	600b      	strpl	r3, [r1, #0]
 800e1ee:	2002      	movpl	r0, #2
 800e1f0:	4770      	bx	lr
 800e1f2:	b298      	uxth	r0, r3
 800e1f4:	b9a8      	cbnz	r0, 800e222 <__lo0bits+0x52>
 800e1f6:	0c1b      	lsrs	r3, r3, #16
 800e1f8:	2010      	movs	r0, #16
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	b90a      	cbnz	r2, 800e202 <__lo0bits+0x32>
 800e1fe:	3008      	adds	r0, #8
 800e200:	0a1b      	lsrs	r3, r3, #8
 800e202:	071a      	lsls	r2, r3, #28
 800e204:	bf04      	itt	eq
 800e206:	091b      	lsreq	r3, r3, #4
 800e208:	3004      	addeq	r0, #4
 800e20a:	079a      	lsls	r2, r3, #30
 800e20c:	bf04      	itt	eq
 800e20e:	089b      	lsreq	r3, r3, #2
 800e210:	3002      	addeq	r0, #2
 800e212:	07da      	lsls	r2, r3, #31
 800e214:	d403      	bmi.n	800e21e <__lo0bits+0x4e>
 800e216:	085b      	lsrs	r3, r3, #1
 800e218:	f100 0001 	add.w	r0, r0, #1
 800e21c:	d005      	beq.n	800e22a <__lo0bits+0x5a>
 800e21e:	600b      	str	r3, [r1, #0]
 800e220:	4770      	bx	lr
 800e222:	4610      	mov	r0, r2
 800e224:	e7e9      	b.n	800e1fa <__lo0bits+0x2a>
 800e226:	2000      	movs	r0, #0
 800e228:	4770      	bx	lr
 800e22a:	2020      	movs	r0, #32
 800e22c:	4770      	bx	lr
	...

0800e230 <__i2b>:
 800e230:	b510      	push	{r4, lr}
 800e232:	460c      	mov	r4, r1
 800e234:	2101      	movs	r1, #1
 800e236:	f7ff feb9 	bl	800dfac <_Balloc>
 800e23a:	4602      	mov	r2, r0
 800e23c:	b928      	cbnz	r0, 800e24a <__i2b+0x1a>
 800e23e:	4b05      	ldr	r3, [pc, #20]	; (800e254 <__i2b+0x24>)
 800e240:	4805      	ldr	r0, [pc, #20]	; (800e258 <__i2b+0x28>)
 800e242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e246:	f7fe fc75 	bl	800cb34 <__assert_func>
 800e24a:	2301      	movs	r3, #1
 800e24c:	6144      	str	r4, [r0, #20]
 800e24e:	6103      	str	r3, [r0, #16]
 800e250:	bd10      	pop	{r4, pc}
 800e252:	bf00      	nop
 800e254:	0800ff19 	.word	0x0800ff19
 800e258:	0800ffa4 	.word	0x0800ffa4

0800e25c <__multiply>:
 800e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	4691      	mov	r9, r2
 800e262:	690a      	ldr	r2, [r1, #16]
 800e264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e268:	429a      	cmp	r2, r3
 800e26a:	bfb8      	it	lt
 800e26c:	460b      	movlt	r3, r1
 800e26e:	460c      	mov	r4, r1
 800e270:	bfbc      	itt	lt
 800e272:	464c      	movlt	r4, r9
 800e274:	4699      	movlt	r9, r3
 800e276:	6927      	ldr	r7, [r4, #16]
 800e278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e27c:	68a3      	ldr	r3, [r4, #8]
 800e27e:	6861      	ldr	r1, [r4, #4]
 800e280:	eb07 060a 	add.w	r6, r7, sl
 800e284:	42b3      	cmp	r3, r6
 800e286:	b085      	sub	sp, #20
 800e288:	bfb8      	it	lt
 800e28a:	3101      	addlt	r1, #1
 800e28c:	f7ff fe8e 	bl	800dfac <_Balloc>
 800e290:	b930      	cbnz	r0, 800e2a0 <__multiply+0x44>
 800e292:	4602      	mov	r2, r0
 800e294:	4b44      	ldr	r3, [pc, #272]	; (800e3a8 <__multiply+0x14c>)
 800e296:	4845      	ldr	r0, [pc, #276]	; (800e3ac <__multiply+0x150>)
 800e298:	f240 115d 	movw	r1, #349	; 0x15d
 800e29c:	f7fe fc4a 	bl	800cb34 <__assert_func>
 800e2a0:	f100 0514 	add.w	r5, r0, #20
 800e2a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2a8:	462b      	mov	r3, r5
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4543      	cmp	r3, r8
 800e2ae:	d321      	bcc.n	800e2f4 <__multiply+0x98>
 800e2b0:	f104 0314 	add.w	r3, r4, #20
 800e2b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e2b8:	f109 0314 	add.w	r3, r9, #20
 800e2bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e2c0:	9202      	str	r2, [sp, #8]
 800e2c2:	1b3a      	subs	r2, r7, r4
 800e2c4:	3a15      	subs	r2, #21
 800e2c6:	f022 0203 	bic.w	r2, r2, #3
 800e2ca:	3204      	adds	r2, #4
 800e2cc:	f104 0115 	add.w	r1, r4, #21
 800e2d0:	428f      	cmp	r7, r1
 800e2d2:	bf38      	it	cc
 800e2d4:	2204      	movcc	r2, #4
 800e2d6:	9201      	str	r2, [sp, #4]
 800e2d8:	9a02      	ldr	r2, [sp, #8]
 800e2da:	9303      	str	r3, [sp, #12]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d80c      	bhi.n	800e2fa <__multiply+0x9e>
 800e2e0:	2e00      	cmp	r6, #0
 800e2e2:	dd03      	ble.n	800e2ec <__multiply+0x90>
 800e2e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d05a      	beq.n	800e3a2 <__multiply+0x146>
 800e2ec:	6106      	str	r6, [r0, #16]
 800e2ee:	b005      	add	sp, #20
 800e2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f4:	f843 2b04 	str.w	r2, [r3], #4
 800e2f8:	e7d8      	b.n	800e2ac <__multiply+0x50>
 800e2fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800e2fe:	f1ba 0f00 	cmp.w	sl, #0
 800e302:	d024      	beq.n	800e34e <__multiply+0xf2>
 800e304:	f104 0e14 	add.w	lr, r4, #20
 800e308:	46a9      	mov	r9, r5
 800e30a:	f04f 0c00 	mov.w	ip, #0
 800e30e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e312:	f8d9 1000 	ldr.w	r1, [r9]
 800e316:	fa1f fb82 	uxth.w	fp, r2
 800e31a:	b289      	uxth	r1, r1
 800e31c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e324:	f8d9 2000 	ldr.w	r2, [r9]
 800e328:	4461      	add	r1, ip
 800e32a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e32e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e336:	b289      	uxth	r1, r1
 800e338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e33c:	4577      	cmp	r7, lr
 800e33e:	f849 1b04 	str.w	r1, [r9], #4
 800e342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e346:	d8e2      	bhi.n	800e30e <__multiply+0xb2>
 800e348:	9a01      	ldr	r2, [sp, #4]
 800e34a:	f845 c002 	str.w	ip, [r5, r2]
 800e34e:	9a03      	ldr	r2, [sp, #12]
 800e350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e354:	3304      	adds	r3, #4
 800e356:	f1b9 0f00 	cmp.w	r9, #0
 800e35a:	d020      	beq.n	800e39e <__multiply+0x142>
 800e35c:	6829      	ldr	r1, [r5, #0]
 800e35e:	f104 0c14 	add.w	ip, r4, #20
 800e362:	46ae      	mov	lr, r5
 800e364:	f04f 0a00 	mov.w	sl, #0
 800e368:	f8bc b000 	ldrh.w	fp, [ip]
 800e36c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e370:	fb09 220b 	mla	r2, r9, fp, r2
 800e374:	4492      	add	sl, r2
 800e376:	b289      	uxth	r1, r1
 800e378:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e37c:	f84e 1b04 	str.w	r1, [lr], #4
 800e380:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e384:	f8be 1000 	ldrh.w	r1, [lr]
 800e388:	0c12      	lsrs	r2, r2, #16
 800e38a:	fb09 1102 	mla	r1, r9, r2, r1
 800e38e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e392:	4567      	cmp	r7, ip
 800e394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e398:	d8e6      	bhi.n	800e368 <__multiply+0x10c>
 800e39a:	9a01      	ldr	r2, [sp, #4]
 800e39c:	50a9      	str	r1, [r5, r2]
 800e39e:	3504      	adds	r5, #4
 800e3a0:	e79a      	b.n	800e2d8 <__multiply+0x7c>
 800e3a2:	3e01      	subs	r6, #1
 800e3a4:	e79c      	b.n	800e2e0 <__multiply+0x84>
 800e3a6:	bf00      	nop
 800e3a8:	0800ff19 	.word	0x0800ff19
 800e3ac:	0800ffa4 	.word	0x0800ffa4

0800e3b0 <__pow5mult>:
 800e3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	4615      	mov	r5, r2
 800e3b6:	f012 0203 	ands.w	r2, r2, #3
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460f      	mov	r7, r1
 800e3be:	d007      	beq.n	800e3d0 <__pow5mult+0x20>
 800e3c0:	4c25      	ldr	r4, [pc, #148]	; (800e458 <__pow5mult+0xa8>)
 800e3c2:	3a01      	subs	r2, #1
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3ca:	f7ff fe51 	bl	800e070 <__multadd>
 800e3ce:	4607      	mov	r7, r0
 800e3d0:	10ad      	asrs	r5, r5, #2
 800e3d2:	d03d      	beq.n	800e450 <__pow5mult+0xa0>
 800e3d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e3d6:	b97c      	cbnz	r4, 800e3f8 <__pow5mult+0x48>
 800e3d8:	2010      	movs	r0, #16
 800e3da:	f7fc feb9 	bl	800b150 <malloc>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	6270      	str	r0, [r6, #36]	; 0x24
 800e3e2:	b928      	cbnz	r0, 800e3f0 <__pow5mult+0x40>
 800e3e4:	4b1d      	ldr	r3, [pc, #116]	; (800e45c <__pow5mult+0xac>)
 800e3e6:	481e      	ldr	r0, [pc, #120]	; (800e460 <__pow5mult+0xb0>)
 800e3e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e3ec:	f7fe fba2 	bl	800cb34 <__assert_func>
 800e3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3f4:	6004      	str	r4, [r0, #0]
 800e3f6:	60c4      	str	r4, [r0, #12]
 800e3f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e400:	b94c      	cbnz	r4, 800e416 <__pow5mult+0x66>
 800e402:	f240 2171 	movw	r1, #625	; 0x271
 800e406:	4630      	mov	r0, r6
 800e408:	f7ff ff12 	bl	800e230 <__i2b>
 800e40c:	2300      	movs	r3, #0
 800e40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e412:	4604      	mov	r4, r0
 800e414:	6003      	str	r3, [r0, #0]
 800e416:	f04f 0900 	mov.w	r9, #0
 800e41a:	07eb      	lsls	r3, r5, #31
 800e41c:	d50a      	bpl.n	800e434 <__pow5mult+0x84>
 800e41e:	4639      	mov	r1, r7
 800e420:	4622      	mov	r2, r4
 800e422:	4630      	mov	r0, r6
 800e424:	f7ff ff1a 	bl	800e25c <__multiply>
 800e428:	4639      	mov	r1, r7
 800e42a:	4680      	mov	r8, r0
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff fdfd 	bl	800e02c <_Bfree>
 800e432:	4647      	mov	r7, r8
 800e434:	106d      	asrs	r5, r5, #1
 800e436:	d00b      	beq.n	800e450 <__pow5mult+0xa0>
 800e438:	6820      	ldr	r0, [r4, #0]
 800e43a:	b938      	cbnz	r0, 800e44c <__pow5mult+0x9c>
 800e43c:	4622      	mov	r2, r4
 800e43e:	4621      	mov	r1, r4
 800e440:	4630      	mov	r0, r6
 800e442:	f7ff ff0b 	bl	800e25c <__multiply>
 800e446:	6020      	str	r0, [r4, #0]
 800e448:	f8c0 9000 	str.w	r9, [r0]
 800e44c:	4604      	mov	r4, r0
 800e44e:	e7e4      	b.n	800e41a <__pow5mult+0x6a>
 800e450:	4638      	mov	r0, r7
 800e452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e456:	bf00      	nop
 800e458:	080100f0 	.word	0x080100f0
 800e45c:	0800fd00 	.word	0x0800fd00
 800e460:	0800ffa4 	.word	0x0800ffa4

0800e464 <__lshift>:
 800e464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e468:	460c      	mov	r4, r1
 800e46a:	6849      	ldr	r1, [r1, #4]
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e472:	68a3      	ldr	r3, [r4, #8]
 800e474:	4607      	mov	r7, r0
 800e476:	4691      	mov	r9, r2
 800e478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e47c:	f108 0601 	add.w	r6, r8, #1
 800e480:	42b3      	cmp	r3, r6
 800e482:	db0b      	blt.n	800e49c <__lshift+0x38>
 800e484:	4638      	mov	r0, r7
 800e486:	f7ff fd91 	bl	800dfac <_Balloc>
 800e48a:	4605      	mov	r5, r0
 800e48c:	b948      	cbnz	r0, 800e4a2 <__lshift+0x3e>
 800e48e:	4602      	mov	r2, r0
 800e490:	4b2a      	ldr	r3, [pc, #168]	; (800e53c <__lshift+0xd8>)
 800e492:	482b      	ldr	r0, [pc, #172]	; (800e540 <__lshift+0xdc>)
 800e494:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e498:	f7fe fb4c 	bl	800cb34 <__assert_func>
 800e49c:	3101      	adds	r1, #1
 800e49e:	005b      	lsls	r3, r3, #1
 800e4a0:	e7ee      	b.n	800e480 <__lshift+0x1c>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f100 0114 	add.w	r1, r0, #20
 800e4a8:	f100 0210 	add.w	r2, r0, #16
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	4553      	cmp	r3, sl
 800e4b0:	db37      	blt.n	800e522 <__lshift+0xbe>
 800e4b2:	6920      	ldr	r0, [r4, #16]
 800e4b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4b8:	f104 0314 	add.w	r3, r4, #20
 800e4bc:	f019 091f 	ands.w	r9, r9, #31
 800e4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4c8:	d02f      	beq.n	800e52a <__lshift+0xc6>
 800e4ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e4ce:	468a      	mov	sl, r1
 800e4d0:	f04f 0c00 	mov.w	ip, #0
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	fa02 f209 	lsl.w	r2, r2, r9
 800e4da:	ea42 020c 	orr.w	r2, r2, ip
 800e4de:	f84a 2b04 	str.w	r2, [sl], #4
 800e4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4e6:	4298      	cmp	r0, r3
 800e4e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e4ec:	d8f2      	bhi.n	800e4d4 <__lshift+0x70>
 800e4ee:	1b03      	subs	r3, r0, r4
 800e4f0:	3b15      	subs	r3, #21
 800e4f2:	f023 0303 	bic.w	r3, r3, #3
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	f104 0215 	add.w	r2, r4, #21
 800e4fc:	4290      	cmp	r0, r2
 800e4fe:	bf38      	it	cc
 800e500:	2304      	movcc	r3, #4
 800e502:	f841 c003 	str.w	ip, [r1, r3]
 800e506:	f1bc 0f00 	cmp.w	ip, #0
 800e50a:	d001      	beq.n	800e510 <__lshift+0xac>
 800e50c:	f108 0602 	add.w	r6, r8, #2
 800e510:	3e01      	subs	r6, #1
 800e512:	4638      	mov	r0, r7
 800e514:	612e      	str	r6, [r5, #16]
 800e516:	4621      	mov	r1, r4
 800e518:	f7ff fd88 	bl	800e02c <_Bfree>
 800e51c:	4628      	mov	r0, r5
 800e51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e522:	f842 0f04 	str.w	r0, [r2, #4]!
 800e526:	3301      	adds	r3, #1
 800e528:	e7c1      	b.n	800e4ae <__lshift+0x4a>
 800e52a:	3904      	subs	r1, #4
 800e52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e530:	f841 2f04 	str.w	r2, [r1, #4]!
 800e534:	4298      	cmp	r0, r3
 800e536:	d8f9      	bhi.n	800e52c <__lshift+0xc8>
 800e538:	e7ea      	b.n	800e510 <__lshift+0xac>
 800e53a:	bf00      	nop
 800e53c:	0800ff19 	.word	0x0800ff19
 800e540:	0800ffa4 	.word	0x0800ffa4

0800e544 <__mcmp>:
 800e544:	b530      	push	{r4, r5, lr}
 800e546:	6902      	ldr	r2, [r0, #16]
 800e548:	690c      	ldr	r4, [r1, #16]
 800e54a:	1b12      	subs	r2, r2, r4
 800e54c:	d10e      	bne.n	800e56c <__mcmp+0x28>
 800e54e:	f100 0314 	add.w	r3, r0, #20
 800e552:	3114      	adds	r1, #20
 800e554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e55c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e564:	42a5      	cmp	r5, r4
 800e566:	d003      	beq.n	800e570 <__mcmp+0x2c>
 800e568:	d305      	bcc.n	800e576 <__mcmp+0x32>
 800e56a:	2201      	movs	r2, #1
 800e56c:	4610      	mov	r0, r2
 800e56e:	bd30      	pop	{r4, r5, pc}
 800e570:	4283      	cmp	r3, r0
 800e572:	d3f3      	bcc.n	800e55c <__mcmp+0x18>
 800e574:	e7fa      	b.n	800e56c <__mcmp+0x28>
 800e576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e57a:	e7f7      	b.n	800e56c <__mcmp+0x28>

0800e57c <__mdiff>:
 800e57c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	460c      	mov	r4, r1
 800e582:	4606      	mov	r6, r0
 800e584:	4611      	mov	r1, r2
 800e586:	4620      	mov	r0, r4
 800e588:	4690      	mov	r8, r2
 800e58a:	f7ff ffdb 	bl	800e544 <__mcmp>
 800e58e:	1e05      	subs	r5, r0, #0
 800e590:	d110      	bne.n	800e5b4 <__mdiff+0x38>
 800e592:	4629      	mov	r1, r5
 800e594:	4630      	mov	r0, r6
 800e596:	f7ff fd09 	bl	800dfac <_Balloc>
 800e59a:	b930      	cbnz	r0, 800e5aa <__mdiff+0x2e>
 800e59c:	4b3a      	ldr	r3, [pc, #232]	; (800e688 <__mdiff+0x10c>)
 800e59e:	4602      	mov	r2, r0
 800e5a0:	f240 2132 	movw	r1, #562	; 0x232
 800e5a4:	4839      	ldr	r0, [pc, #228]	; (800e68c <__mdiff+0x110>)
 800e5a6:	f7fe fac5 	bl	800cb34 <__assert_func>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	bfa4      	itt	ge
 800e5b6:	4643      	movge	r3, r8
 800e5b8:	46a0      	movge	r8, r4
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e5c0:	bfa6      	itte	ge
 800e5c2:	461c      	movge	r4, r3
 800e5c4:	2500      	movge	r5, #0
 800e5c6:	2501      	movlt	r5, #1
 800e5c8:	f7ff fcf0 	bl	800dfac <_Balloc>
 800e5cc:	b920      	cbnz	r0, 800e5d8 <__mdiff+0x5c>
 800e5ce:	4b2e      	ldr	r3, [pc, #184]	; (800e688 <__mdiff+0x10c>)
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e5d6:	e7e5      	b.n	800e5a4 <__mdiff+0x28>
 800e5d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e5dc:	6926      	ldr	r6, [r4, #16]
 800e5de:	60c5      	str	r5, [r0, #12]
 800e5e0:	f104 0914 	add.w	r9, r4, #20
 800e5e4:	f108 0514 	add.w	r5, r8, #20
 800e5e8:	f100 0e14 	add.w	lr, r0, #20
 800e5ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e5f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e5f4:	f108 0210 	add.w	r2, r8, #16
 800e5f8:	46f2      	mov	sl, lr
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e604:	fa1f f883 	uxth.w	r8, r3
 800e608:	fa11 f18b 	uxtah	r1, r1, fp
 800e60c:	0c1b      	lsrs	r3, r3, #16
 800e60e:	eba1 0808 	sub.w	r8, r1, r8
 800e612:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e616:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e61a:	fa1f f888 	uxth.w	r8, r8
 800e61e:	1419      	asrs	r1, r3, #16
 800e620:	454e      	cmp	r6, r9
 800e622:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e626:	f84a 3b04 	str.w	r3, [sl], #4
 800e62a:	d8e7      	bhi.n	800e5fc <__mdiff+0x80>
 800e62c:	1b33      	subs	r3, r6, r4
 800e62e:	3b15      	subs	r3, #21
 800e630:	f023 0303 	bic.w	r3, r3, #3
 800e634:	3304      	adds	r3, #4
 800e636:	3415      	adds	r4, #21
 800e638:	42a6      	cmp	r6, r4
 800e63a:	bf38      	it	cc
 800e63c:	2304      	movcc	r3, #4
 800e63e:	441d      	add	r5, r3
 800e640:	4473      	add	r3, lr
 800e642:	469e      	mov	lr, r3
 800e644:	462e      	mov	r6, r5
 800e646:	4566      	cmp	r6, ip
 800e648:	d30e      	bcc.n	800e668 <__mdiff+0xec>
 800e64a:	f10c 0203 	add.w	r2, ip, #3
 800e64e:	1b52      	subs	r2, r2, r5
 800e650:	f022 0203 	bic.w	r2, r2, #3
 800e654:	3d03      	subs	r5, #3
 800e656:	45ac      	cmp	ip, r5
 800e658:	bf38      	it	cc
 800e65a:	2200      	movcc	r2, #0
 800e65c:	441a      	add	r2, r3
 800e65e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e662:	b17b      	cbz	r3, 800e684 <__mdiff+0x108>
 800e664:	6107      	str	r7, [r0, #16]
 800e666:	e7a3      	b.n	800e5b0 <__mdiff+0x34>
 800e668:	f856 8b04 	ldr.w	r8, [r6], #4
 800e66c:	fa11 f288 	uxtah	r2, r1, r8
 800e670:	1414      	asrs	r4, r2, #16
 800e672:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e676:	b292      	uxth	r2, r2
 800e678:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e67c:	f84e 2b04 	str.w	r2, [lr], #4
 800e680:	1421      	asrs	r1, r4, #16
 800e682:	e7e0      	b.n	800e646 <__mdiff+0xca>
 800e684:	3f01      	subs	r7, #1
 800e686:	e7ea      	b.n	800e65e <__mdiff+0xe2>
 800e688:	0800ff19 	.word	0x0800ff19
 800e68c:	0800ffa4 	.word	0x0800ffa4

0800e690 <__ulp>:
 800e690:	b082      	sub	sp, #8
 800e692:	ed8d 0b00 	vstr	d0, [sp]
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	4912      	ldr	r1, [pc, #72]	; (800e6e4 <__ulp+0x54>)
 800e69a:	4019      	ands	r1, r3
 800e69c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e6a0:	2900      	cmp	r1, #0
 800e6a2:	dd05      	ble.n	800e6b0 <__ulp+0x20>
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	ec43 2b10 	vmov	d0, r2, r3
 800e6ac:	b002      	add	sp, #8
 800e6ae:	4770      	bx	lr
 800e6b0:	4249      	negs	r1, r1
 800e6b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e6b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e6ba:	f04f 0200 	mov.w	r2, #0
 800e6be:	f04f 0300 	mov.w	r3, #0
 800e6c2:	da04      	bge.n	800e6ce <__ulp+0x3e>
 800e6c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e6c8:	fa41 f300 	asr.w	r3, r1, r0
 800e6cc:	e7ec      	b.n	800e6a8 <__ulp+0x18>
 800e6ce:	f1a0 0114 	sub.w	r1, r0, #20
 800e6d2:	291e      	cmp	r1, #30
 800e6d4:	bfda      	itte	le
 800e6d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e6da:	fa20 f101 	lsrle.w	r1, r0, r1
 800e6de:	2101      	movgt	r1, #1
 800e6e0:	460a      	mov	r2, r1
 800e6e2:	e7e1      	b.n	800e6a8 <__ulp+0x18>
 800e6e4:	7ff00000 	.word	0x7ff00000

0800e6e8 <__b2d>:
 800e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ea:	6905      	ldr	r5, [r0, #16]
 800e6ec:	f100 0714 	add.w	r7, r0, #20
 800e6f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e6f4:	1f2e      	subs	r6, r5, #4
 800e6f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff fd48 	bl	800e190 <__hi0bits>
 800e700:	f1c0 0320 	rsb	r3, r0, #32
 800e704:	280a      	cmp	r0, #10
 800e706:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e784 <__b2d+0x9c>
 800e70a:	600b      	str	r3, [r1, #0]
 800e70c:	dc14      	bgt.n	800e738 <__b2d+0x50>
 800e70e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e712:	fa24 f10e 	lsr.w	r1, r4, lr
 800e716:	42b7      	cmp	r7, r6
 800e718:	ea41 030c 	orr.w	r3, r1, ip
 800e71c:	bf34      	ite	cc
 800e71e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e722:	2100      	movcs	r1, #0
 800e724:	3015      	adds	r0, #21
 800e726:	fa04 f000 	lsl.w	r0, r4, r0
 800e72a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e72e:	ea40 0201 	orr.w	r2, r0, r1
 800e732:	ec43 2b10 	vmov	d0, r2, r3
 800e736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e738:	42b7      	cmp	r7, r6
 800e73a:	bf3a      	itte	cc
 800e73c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e740:	f1a5 0608 	subcc.w	r6, r5, #8
 800e744:	2100      	movcs	r1, #0
 800e746:	380b      	subs	r0, #11
 800e748:	d017      	beq.n	800e77a <__b2d+0x92>
 800e74a:	f1c0 0c20 	rsb	ip, r0, #32
 800e74e:	fa04 f500 	lsl.w	r5, r4, r0
 800e752:	42be      	cmp	r6, r7
 800e754:	fa21 f40c 	lsr.w	r4, r1, ip
 800e758:	ea45 0504 	orr.w	r5, r5, r4
 800e75c:	bf8c      	ite	hi
 800e75e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e762:	2400      	movls	r4, #0
 800e764:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e768:	fa01 f000 	lsl.w	r0, r1, r0
 800e76c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e770:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e774:	ea40 0204 	orr.w	r2, r0, r4
 800e778:	e7db      	b.n	800e732 <__b2d+0x4a>
 800e77a:	ea44 030c 	orr.w	r3, r4, ip
 800e77e:	460a      	mov	r2, r1
 800e780:	e7d7      	b.n	800e732 <__b2d+0x4a>
 800e782:	bf00      	nop
 800e784:	3ff00000 	.word	0x3ff00000

0800e788 <__d2b>:
 800e788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4689      	mov	r9, r1
 800e78e:	2101      	movs	r1, #1
 800e790:	ec57 6b10 	vmov	r6, r7, d0
 800e794:	4690      	mov	r8, r2
 800e796:	f7ff fc09 	bl	800dfac <_Balloc>
 800e79a:	4604      	mov	r4, r0
 800e79c:	b930      	cbnz	r0, 800e7ac <__d2b+0x24>
 800e79e:	4602      	mov	r2, r0
 800e7a0:	4b25      	ldr	r3, [pc, #148]	; (800e838 <__d2b+0xb0>)
 800e7a2:	4826      	ldr	r0, [pc, #152]	; (800e83c <__d2b+0xb4>)
 800e7a4:	f240 310a 	movw	r1, #778	; 0x30a
 800e7a8:	f7fe f9c4 	bl	800cb34 <__assert_func>
 800e7ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e7b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7b4:	bb35      	cbnz	r5, 800e804 <__d2b+0x7c>
 800e7b6:	2e00      	cmp	r6, #0
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	d028      	beq.n	800e80e <__d2b+0x86>
 800e7bc:	4668      	mov	r0, sp
 800e7be:	9600      	str	r6, [sp, #0]
 800e7c0:	f7ff fd06 	bl	800e1d0 <__lo0bits>
 800e7c4:	9900      	ldr	r1, [sp, #0]
 800e7c6:	b300      	cbz	r0, 800e80a <__d2b+0x82>
 800e7c8:	9a01      	ldr	r2, [sp, #4]
 800e7ca:	f1c0 0320 	rsb	r3, r0, #32
 800e7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e7d2:	430b      	orrs	r3, r1
 800e7d4:	40c2      	lsrs	r2, r0
 800e7d6:	6163      	str	r3, [r4, #20]
 800e7d8:	9201      	str	r2, [sp, #4]
 800e7da:	9b01      	ldr	r3, [sp, #4]
 800e7dc:	61a3      	str	r3, [r4, #24]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	bf14      	ite	ne
 800e7e2:	2202      	movne	r2, #2
 800e7e4:	2201      	moveq	r2, #1
 800e7e6:	6122      	str	r2, [r4, #16]
 800e7e8:	b1d5      	cbz	r5, 800e820 <__d2b+0x98>
 800e7ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e7ee:	4405      	add	r5, r0
 800e7f0:	f8c9 5000 	str.w	r5, [r9]
 800e7f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7f8:	f8c8 0000 	str.w	r0, [r8]
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	b003      	add	sp, #12
 800e800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e808:	e7d5      	b.n	800e7b6 <__d2b+0x2e>
 800e80a:	6161      	str	r1, [r4, #20]
 800e80c:	e7e5      	b.n	800e7da <__d2b+0x52>
 800e80e:	a801      	add	r0, sp, #4
 800e810:	f7ff fcde 	bl	800e1d0 <__lo0bits>
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	6163      	str	r3, [r4, #20]
 800e818:	2201      	movs	r2, #1
 800e81a:	6122      	str	r2, [r4, #16]
 800e81c:	3020      	adds	r0, #32
 800e81e:	e7e3      	b.n	800e7e8 <__d2b+0x60>
 800e820:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e824:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e828:	f8c9 0000 	str.w	r0, [r9]
 800e82c:	6918      	ldr	r0, [r3, #16]
 800e82e:	f7ff fcaf 	bl	800e190 <__hi0bits>
 800e832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e836:	e7df      	b.n	800e7f8 <__d2b+0x70>
 800e838:	0800ff19 	.word	0x0800ff19
 800e83c:	0800ffa4 	.word	0x0800ffa4

0800e840 <__ratio>:
 800e840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	4688      	mov	r8, r1
 800e846:	4669      	mov	r1, sp
 800e848:	4681      	mov	r9, r0
 800e84a:	f7ff ff4d 	bl	800e6e8 <__b2d>
 800e84e:	a901      	add	r1, sp, #4
 800e850:	4640      	mov	r0, r8
 800e852:	ec55 4b10 	vmov	r4, r5, d0
 800e856:	f7ff ff47 	bl	800e6e8 <__b2d>
 800e85a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e85e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e862:	eba3 0c02 	sub.w	ip, r3, r2
 800e866:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e86a:	1a9b      	subs	r3, r3, r2
 800e86c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e870:	ec51 0b10 	vmov	r0, r1, d0
 800e874:	2b00      	cmp	r3, #0
 800e876:	bfd6      	itet	le
 800e878:	460a      	movle	r2, r1
 800e87a:	462a      	movgt	r2, r5
 800e87c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e880:	468b      	mov	fp, r1
 800e882:	462f      	mov	r7, r5
 800e884:	bfd4      	ite	le
 800e886:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e88a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e88e:	4620      	mov	r0, r4
 800e890:	ee10 2a10 	vmov	r2, s0
 800e894:	465b      	mov	r3, fp
 800e896:	4639      	mov	r1, r7
 800e898:	f7f1 fff8 	bl	800088c <__aeabi_ddiv>
 800e89c:	ec41 0b10 	vmov	d0, r0, r1
 800e8a0:	b003      	add	sp, #12
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8a6 <__copybits>:
 800e8a6:	3901      	subs	r1, #1
 800e8a8:	b570      	push	{r4, r5, r6, lr}
 800e8aa:	1149      	asrs	r1, r1, #5
 800e8ac:	6914      	ldr	r4, [r2, #16]
 800e8ae:	3101      	adds	r1, #1
 800e8b0:	f102 0314 	add.w	r3, r2, #20
 800e8b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e8b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e8bc:	1f05      	subs	r5, r0, #4
 800e8be:	42a3      	cmp	r3, r4
 800e8c0:	d30c      	bcc.n	800e8dc <__copybits+0x36>
 800e8c2:	1aa3      	subs	r3, r4, r2
 800e8c4:	3b11      	subs	r3, #17
 800e8c6:	f023 0303 	bic.w	r3, r3, #3
 800e8ca:	3211      	adds	r2, #17
 800e8cc:	42a2      	cmp	r2, r4
 800e8ce:	bf88      	it	hi
 800e8d0:	2300      	movhi	r3, #0
 800e8d2:	4418      	add	r0, r3
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4288      	cmp	r0, r1
 800e8d8:	d305      	bcc.n	800e8e6 <__copybits+0x40>
 800e8da:	bd70      	pop	{r4, r5, r6, pc}
 800e8dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e8e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800e8e4:	e7eb      	b.n	800e8be <__copybits+0x18>
 800e8e6:	f840 3b04 	str.w	r3, [r0], #4
 800e8ea:	e7f4      	b.n	800e8d6 <__copybits+0x30>

0800e8ec <__any_on>:
 800e8ec:	f100 0214 	add.w	r2, r0, #20
 800e8f0:	6900      	ldr	r0, [r0, #16]
 800e8f2:	114b      	asrs	r3, r1, #5
 800e8f4:	4298      	cmp	r0, r3
 800e8f6:	b510      	push	{r4, lr}
 800e8f8:	db11      	blt.n	800e91e <__any_on+0x32>
 800e8fa:	dd0a      	ble.n	800e912 <__any_on+0x26>
 800e8fc:	f011 011f 	ands.w	r1, r1, #31
 800e900:	d007      	beq.n	800e912 <__any_on+0x26>
 800e902:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e906:	fa24 f001 	lsr.w	r0, r4, r1
 800e90a:	fa00 f101 	lsl.w	r1, r0, r1
 800e90e:	428c      	cmp	r4, r1
 800e910:	d10b      	bne.n	800e92a <__any_on+0x3e>
 800e912:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e916:	4293      	cmp	r3, r2
 800e918:	d803      	bhi.n	800e922 <__any_on+0x36>
 800e91a:	2000      	movs	r0, #0
 800e91c:	bd10      	pop	{r4, pc}
 800e91e:	4603      	mov	r3, r0
 800e920:	e7f7      	b.n	800e912 <__any_on+0x26>
 800e922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e926:	2900      	cmp	r1, #0
 800e928:	d0f5      	beq.n	800e916 <__any_on+0x2a>
 800e92a:	2001      	movs	r0, #1
 800e92c:	e7f6      	b.n	800e91c <__any_on+0x30>

0800e92e <_calloc_r>:
 800e92e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e930:	fba1 2402 	umull	r2, r4, r1, r2
 800e934:	b94c      	cbnz	r4, 800e94a <_calloc_r+0x1c>
 800e936:	4611      	mov	r1, r2
 800e938:	9201      	str	r2, [sp, #4]
 800e93a:	f7fc fc9b 	bl	800b274 <_malloc_r>
 800e93e:	9a01      	ldr	r2, [sp, #4]
 800e940:	4605      	mov	r5, r0
 800e942:	b930      	cbnz	r0, 800e952 <_calloc_r+0x24>
 800e944:	4628      	mov	r0, r5
 800e946:	b003      	add	sp, #12
 800e948:	bd30      	pop	{r4, r5, pc}
 800e94a:	220c      	movs	r2, #12
 800e94c:	6002      	str	r2, [r0, #0]
 800e94e:	2500      	movs	r5, #0
 800e950:	e7f8      	b.n	800e944 <_calloc_r+0x16>
 800e952:	4621      	mov	r1, r4
 800e954:	f7fc fc1a 	bl	800b18c <memset>
 800e958:	e7f4      	b.n	800e944 <_calloc_r+0x16>

0800e95a <__ssputs_r>:
 800e95a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e95e:	688e      	ldr	r6, [r1, #8]
 800e960:	429e      	cmp	r6, r3
 800e962:	4682      	mov	sl, r0
 800e964:	460c      	mov	r4, r1
 800e966:	4690      	mov	r8, r2
 800e968:	461f      	mov	r7, r3
 800e96a:	d838      	bhi.n	800e9de <__ssputs_r+0x84>
 800e96c:	898a      	ldrh	r2, [r1, #12]
 800e96e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e972:	d032      	beq.n	800e9da <__ssputs_r+0x80>
 800e974:	6825      	ldr	r5, [r4, #0]
 800e976:	6909      	ldr	r1, [r1, #16]
 800e978:	eba5 0901 	sub.w	r9, r5, r1
 800e97c:	6965      	ldr	r5, [r4, #20]
 800e97e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e986:	3301      	adds	r3, #1
 800e988:	444b      	add	r3, r9
 800e98a:	106d      	asrs	r5, r5, #1
 800e98c:	429d      	cmp	r5, r3
 800e98e:	bf38      	it	cc
 800e990:	461d      	movcc	r5, r3
 800e992:	0553      	lsls	r3, r2, #21
 800e994:	d531      	bpl.n	800e9fa <__ssputs_r+0xa0>
 800e996:	4629      	mov	r1, r5
 800e998:	f7fc fc6c 	bl	800b274 <_malloc_r>
 800e99c:	4606      	mov	r6, r0
 800e99e:	b950      	cbnz	r0, 800e9b6 <__ssputs_r+0x5c>
 800e9a0:	230c      	movs	r3, #12
 800e9a2:	f8ca 3000 	str.w	r3, [sl]
 800e9a6:	89a3      	ldrh	r3, [r4, #12]
 800e9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9b6:	6921      	ldr	r1, [r4, #16]
 800e9b8:	464a      	mov	r2, r9
 800e9ba:	f7fc fbd9 	bl	800b170 <memcpy>
 800e9be:	89a3      	ldrh	r3, [r4, #12]
 800e9c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c8:	81a3      	strh	r3, [r4, #12]
 800e9ca:	6126      	str	r6, [r4, #16]
 800e9cc:	6165      	str	r5, [r4, #20]
 800e9ce:	444e      	add	r6, r9
 800e9d0:	eba5 0509 	sub.w	r5, r5, r9
 800e9d4:	6026      	str	r6, [r4, #0]
 800e9d6:	60a5      	str	r5, [r4, #8]
 800e9d8:	463e      	mov	r6, r7
 800e9da:	42be      	cmp	r6, r7
 800e9dc:	d900      	bls.n	800e9e0 <__ssputs_r+0x86>
 800e9de:	463e      	mov	r6, r7
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	4641      	mov	r1, r8
 800e9e6:	f000 fd81 	bl	800f4ec <memmove>
 800e9ea:	68a3      	ldr	r3, [r4, #8]
 800e9ec:	1b9b      	subs	r3, r3, r6
 800e9ee:	60a3      	str	r3, [r4, #8]
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	4433      	add	r3, r6
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	e7db      	b.n	800e9b2 <__ssputs_r+0x58>
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	f000 fd90 	bl	800f520 <_realloc_r>
 800ea00:	4606      	mov	r6, r0
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d1e1      	bne.n	800e9ca <__ssputs_r+0x70>
 800ea06:	6921      	ldr	r1, [r4, #16]
 800ea08:	4650      	mov	r0, sl
 800ea0a:	f7fc fbc7 	bl	800b19c <_free_r>
 800ea0e:	e7c7      	b.n	800e9a0 <__ssputs_r+0x46>

0800ea10 <_svfiprintf_r>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	4698      	mov	r8, r3
 800ea16:	898b      	ldrh	r3, [r1, #12]
 800ea18:	061b      	lsls	r3, r3, #24
 800ea1a:	b09d      	sub	sp, #116	; 0x74
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	460d      	mov	r5, r1
 800ea20:	4614      	mov	r4, r2
 800ea22:	d50e      	bpl.n	800ea42 <_svfiprintf_r+0x32>
 800ea24:	690b      	ldr	r3, [r1, #16]
 800ea26:	b963      	cbnz	r3, 800ea42 <_svfiprintf_r+0x32>
 800ea28:	2140      	movs	r1, #64	; 0x40
 800ea2a:	f7fc fc23 	bl	800b274 <_malloc_r>
 800ea2e:	6028      	str	r0, [r5, #0]
 800ea30:	6128      	str	r0, [r5, #16]
 800ea32:	b920      	cbnz	r0, 800ea3e <_svfiprintf_r+0x2e>
 800ea34:	230c      	movs	r3, #12
 800ea36:	603b      	str	r3, [r7, #0]
 800ea38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea3c:	e0d1      	b.n	800ebe2 <_svfiprintf_r+0x1d2>
 800ea3e:	2340      	movs	r3, #64	; 0x40
 800ea40:	616b      	str	r3, [r5, #20]
 800ea42:	2300      	movs	r3, #0
 800ea44:	9309      	str	r3, [sp, #36]	; 0x24
 800ea46:	2320      	movs	r3, #32
 800ea48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea50:	2330      	movs	r3, #48	; 0x30
 800ea52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ebfc <_svfiprintf_r+0x1ec>
 800ea56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea5a:	f04f 0901 	mov.w	r9, #1
 800ea5e:	4623      	mov	r3, r4
 800ea60:	469a      	mov	sl, r3
 800ea62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea66:	b10a      	cbz	r2, 800ea6c <_svfiprintf_r+0x5c>
 800ea68:	2a25      	cmp	r2, #37	; 0x25
 800ea6a:	d1f9      	bne.n	800ea60 <_svfiprintf_r+0x50>
 800ea6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ea70:	d00b      	beq.n	800ea8a <_svfiprintf_r+0x7a>
 800ea72:	465b      	mov	r3, fp
 800ea74:	4622      	mov	r2, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f7ff ff6e 	bl	800e95a <__ssputs_r>
 800ea7e:	3001      	adds	r0, #1
 800ea80:	f000 80aa 	beq.w	800ebd8 <_svfiprintf_r+0x1c8>
 800ea84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea86:	445a      	add	r2, fp
 800ea88:	9209      	str	r2, [sp, #36]	; 0x24
 800ea8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 80a2 	beq.w	800ebd8 <_svfiprintf_r+0x1c8>
 800ea94:	2300      	movs	r3, #0
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9e:	f10a 0a01 	add.w	sl, sl, #1
 800eaa2:	9304      	str	r3, [sp, #16]
 800eaa4:	9307      	str	r3, [sp, #28]
 800eaa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaaa:	931a      	str	r3, [sp, #104]	; 0x68
 800eaac:	4654      	mov	r4, sl
 800eaae:	2205      	movs	r2, #5
 800eab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab4:	4851      	ldr	r0, [pc, #324]	; (800ebfc <_svfiprintf_r+0x1ec>)
 800eab6:	f7f1 fbb3 	bl	8000220 <memchr>
 800eaba:	9a04      	ldr	r2, [sp, #16]
 800eabc:	b9d8      	cbnz	r0, 800eaf6 <_svfiprintf_r+0xe6>
 800eabe:	06d0      	lsls	r0, r2, #27
 800eac0:	bf44      	itt	mi
 800eac2:	2320      	movmi	r3, #32
 800eac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac8:	0711      	lsls	r1, r2, #28
 800eaca:	bf44      	itt	mi
 800eacc:	232b      	movmi	r3, #43	; 0x2b
 800eace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead2:	f89a 3000 	ldrb.w	r3, [sl]
 800ead6:	2b2a      	cmp	r3, #42	; 0x2a
 800ead8:	d015      	beq.n	800eb06 <_svfiprintf_r+0xf6>
 800eada:	9a07      	ldr	r2, [sp, #28]
 800eadc:	4654      	mov	r4, sl
 800eade:	2000      	movs	r0, #0
 800eae0:	f04f 0c0a 	mov.w	ip, #10
 800eae4:	4621      	mov	r1, r4
 800eae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaea:	3b30      	subs	r3, #48	; 0x30
 800eaec:	2b09      	cmp	r3, #9
 800eaee:	d94e      	bls.n	800eb8e <_svfiprintf_r+0x17e>
 800eaf0:	b1b0      	cbz	r0, 800eb20 <_svfiprintf_r+0x110>
 800eaf2:	9207      	str	r2, [sp, #28]
 800eaf4:	e014      	b.n	800eb20 <_svfiprintf_r+0x110>
 800eaf6:	eba0 0308 	sub.w	r3, r0, r8
 800eafa:	fa09 f303 	lsl.w	r3, r9, r3
 800eafe:	4313      	orrs	r3, r2
 800eb00:	9304      	str	r3, [sp, #16]
 800eb02:	46a2      	mov	sl, r4
 800eb04:	e7d2      	b.n	800eaac <_svfiprintf_r+0x9c>
 800eb06:	9b03      	ldr	r3, [sp, #12]
 800eb08:	1d19      	adds	r1, r3, #4
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	9103      	str	r1, [sp, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	bfbb      	ittet	lt
 800eb12:	425b      	neglt	r3, r3
 800eb14:	f042 0202 	orrlt.w	r2, r2, #2
 800eb18:	9307      	strge	r3, [sp, #28]
 800eb1a:	9307      	strlt	r3, [sp, #28]
 800eb1c:	bfb8      	it	lt
 800eb1e:	9204      	strlt	r2, [sp, #16]
 800eb20:	7823      	ldrb	r3, [r4, #0]
 800eb22:	2b2e      	cmp	r3, #46	; 0x2e
 800eb24:	d10c      	bne.n	800eb40 <_svfiprintf_r+0x130>
 800eb26:	7863      	ldrb	r3, [r4, #1]
 800eb28:	2b2a      	cmp	r3, #42	; 0x2a
 800eb2a:	d135      	bne.n	800eb98 <_svfiprintf_r+0x188>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	1d1a      	adds	r2, r3, #4
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	9203      	str	r2, [sp, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bfb8      	it	lt
 800eb38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb3c:	3402      	adds	r4, #2
 800eb3e:	9305      	str	r3, [sp, #20]
 800eb40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec0c <_svfiprintf_r+0x1fc>
 800eb44:	7821      	ldrb	r1, [r4, #0]
 800eb46:	2203      	movs	r2, #3
 800eb48:	4650      	mov	r0, sl
 800eb4a:	f7f1 fb69 	bl	8000220 <memchr>
 800eb4e:	b140      	cbz	r0, 800eb62 <_svfiprintf_r+0x152>
 800eb50:	2340      	movs	r3, #64	; 0x40
 800eb52:	eba0 000a 	sub.w	r0, r0, sl
 800eb56:	fa03 f000 	lsl.w	r0, r3, r0
 800eb5a:	9b04      	ldr	r3, [sp, #16]
 800eb5c:	4303      	orrs	r3, r0
 800eb5e:	3401      	adds	r4, #1
 800eb60:	9304      	str	r3, [sp, #16]
 800eb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb66:	4826      	ldr	r0, [pc, #152]	; (800ec00 <_svfiprintf_r+0x1f0>)
 800eb68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb6c:	2206      	movs	r2, #6
 800eb6e:	f7f1 fb57 	bl	8000220 <memchr>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d038      	beq.n	800ebe8 <_svfiprintf_r+0x1d8>
 800eb76:	4b23      	ldr	r3, [pc, #140]	; (800ec04 <_svfiprintf_r+0x1f4>)
 800eb78:	bb1b      	cbnz	r3, 800ebc2 <_svfiprintf_r+0x1b2>
 800eb7a:	9b03      	ldr	r3, [sp, #12]
 800eb7c:	3307      	adds	r3, #7
 800eb7e:	f023 0307 	bic.w	r3, r3, #7
 800eb82:	3308      	adds	r3, #8
 800eb84:	9303      	str	r3, [sp, #12]
 800eb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb88:	4433      	add	r3, r6
 800eb8a:	9309      	str	r3, [sp, #36]	; 0x24
 800eb8c:	e767      	b.n	800ea5e <_svfiprintf_r+0x4e>
 800eb8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb92:	460c      	mov	r4, r1
 800eb94:	2001      	movs	r0, #1
 800eb96:	e7a5      	b.n	800eae4 <_svfiprintf_r+0xd4>
 800eb98:	2300      	movs	r3, #0
 800eb9a:	3401      	adds	r4, #1
 800eb9c:	9305      	str	r3, [sp, #20]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	f04f 0c0a 	mov.w	ip, #10
 800eba4:	4620      	mov	r0, r4
 800eba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebaa:	3a30      	subs	r2, #48	; 0x30
 800ebac:	2a09      	cmp	r2, #9
 800ebae:	d903      	bls.n	800ebb8 <_svfiprintf_r+0x1a8>
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d0c5      	beq.n	800eb40 <_svfiprintf_r+0x130>
 800ebb4:	9105      	str	r1, [sp, #20]
 800ebb6:	e7c3      	b.n	800eb40 <_svfiprintf_r+0x130>
 800ebb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e7f0      	b.n	800eba4 <_svfiprintf_r+0x194>
 800ebc2:	ab03      	add	r3, sp, #12
 800ebc4:	9300      	str	r3, [sp, #0]
 800ebc6:	462a      	mov	r2, r5
 800ebc8:	4b0f      	ldr	r3, [pc, #60]	; (800ec08 <_svfiprintf_r+0x1f8>)
 800ebca:	a904      	add	r1, sp, #16
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7fc fc65 	bl	800b49c <_printf_float>
 800ebd2:	1c42      	adds	r2, r0, #1
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	d1d6      	bne.n	800eb86 <_svfiprintf_r+0x176>
 800ebd8:	89ab      	ldrh	r3, [r5, #12]
 800ebda:	065b      	lsls	r3, r3, #25
 800ebdc:	f53f af2c 	bmi.w	800ea38 <_svfiprintf_r+0x28>
 800ebe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebe2:	b01d      	add	sp, #116	; 0x74
 800ebe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe8:	ab03      	add	r3, sp, #12
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	462a      	mov	r2, r5
 800ebee:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <_svfiprintf_r+0x1f8>)
 800ebf0:	a904      	add	r1, sp, #16
 800ebf2:	4638      	mov	r0, r7
 800ebf4:	f7fc fef6 	bl	800b9e4 <_printf_i>
 800ebf8:	e7eb      	b.n	800ebd2 <_svfiprintf_r+0x1c2>
 800ebfa:	bf00      	nop
 800ebfc:	080100fc 	.word	0x080100fc
 800ec00:	08010106 	.word	0x08010106
 800ec04:	0800b49d 	.word	0x0800b49d
 800ec08:	0800e95b 	.word	0x0800e95b
 800ec0c:	08010102 	.word	0x08010102

0800ec10 <__sfputc_r>:
 800ec10:	6893      	ldr	r3, [r2, #8]
 800ec12:	3b01      	subs	r3, #1
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	b410      	push	{r4}
 800ec18:	6093      	str	r3, [r2, #8]
 800ec1a:	da08      	bge.n	800ec2e <__sfputc_r+0x1e>
 800ec1c:	6994      	ldr	r4, [r2, #24]
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	db01      	blt.n	800ec26 <__sfputc_r+0x16>
 800ec22:	290a      	cmp	r1, #10
 800ec24:	d103      	bne.n	800ec2e <__sfputc_r+0x1e>
 800ec26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec2a:	f000 b969 	b.w	800ef00 <__swbuf_r>
 800ec2e:	6813      	ldr	r3, [r2, #0]
 800ec30:	1c58      	adds	r0, r3, #1
 800ec32:	6010      	str	r0, [r2, #0]
 800ec34:	7019      	strb	r1, [r3, #0]
 800ec36:	4608      	mov	r0, r1
 800ec38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec3c:	4770      	bx	lr

0800ec3e <__sfputs_r>:
 800ec3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec40:	4606      	mov	r6, r0
 800ec42:	460f      	mov	r7, r1
 800ec44:	4614      	mov	r4, r2
 800ec46:	18d5      	adds	r5, r2, r3
 800ec48:	42ac      	cmp	r4, r5
 800ec4a:	d101      	bne.n	800ec50 <__sfputs_r+0x12>
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	e007      	b.n	800ec60 <__sfputs_r+0x22>
 800ec50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec54:	463a      	mov	r2, r7
 800ec56:	4630      	mov	r0, r6
 800ec58:	f7ff ffda 	bl	800ec10 <__sfputc_r>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d1f3      	bne.n	800ec48 <__sfputs_r+0xa>
 800ec60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec64 <_vfiprintf_r>:
 800ec64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec68:	460d      	mov	r5, r1
 800ec6a:	b09d      	sub	sp, #116	; 0x74
 800ec6c:	4614      	mov	r4, r2
 800ec6e:	4698      	mov	r8, r3
 800ec70:	4606      	mov	r6, r0
 800ec72:	b118      	cbz	r0, 800ec7c <_vfiprintf_r+0x18>
 800ec74:	6983      	ldr	r3, [r0, #24]
 800ec76:	b90b      	cbnz	r3, 800ec7c <_vfiprintf_r+0x18>
 800ec78:	f000 fb32 	bl	800f2e0 <__sinit>
 800ec7c:	4b89      	ldr	r3, [pc, #548]	; (800eea4 <_vfiprintf_r+0x240>)
 800ec7e:	429d      	cmp	r5, r3
 800ec80:	d11b      	bne.n	800ecba <_vfiprintf_r+0x56>
 800ec82:	6875      	ldr	r5, [r6, #4]
 800ec84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec86:	07d9      	lsls	r1, r3, #31
 800ec88:	d405      	bmi.n	800ec96 <_vfiprintf_r+0x32>
 800ec8a:	89ab      	ldrh	r3, [r5, #12]
 800ec8c:	059a      	lsls	r2, r3, #22
 800ec8e:	d402      	bmi.n	800ec96 <_vfiprintf_r+0x32>
 800ec90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec92:	f000 fbc3 	bl	800f41c <__retarget_lock_acquire_recursive>
 800ec96:	89ab      	ldrh	r3, [r5, #12]
 800ec98:	071b      	lsls	r3, r3, #28
 800ec9a:	d501      	bpl.n	800eca0 <_vfiprintf_r+0x3c>
 800ec9c:	692b      	ldr	r3, [r5, #16]
 800ec9e:	b9eb      	cbnz	r3, 800ecdc <_vfiprintf_r+0x78>
 800eca0:	4629      	mov	r1, r5
 800eca2:	4630      	mov	r0, r6
 800eca4:	f000 f98c 	bl	800efc0 <__swsetup_r>
 800eca8:	b1c0      	cbz	r0, 800ecdc <_vfiprintf_r+0x78>
 800ecaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecac:	07dc      	lsls	r4, r3, #31
 800ecae:	d50e      	bpl.n	800ecce <_vfiprintf_r+0x6a>
 800ecb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecb4:	b01d      	add	sp, #116	; 0x74
 800ecb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecba:	4b7b      	ldr	r3, [pc, #492]	; (800eea8 <_vfiprintf_r+0x244>)
 800ecbc:	429d      	cmp	r5, r3
 800ecbe:	d101      	bne.n	800ecc4 <_vfiprintf_r+0x60>
 800ecc0:	68b5      	ldr	r5, [r6, #8]
 800ecc2:	e7df      	b.n	800ec84 <_vfiprintf_r+0x20>
 800ecc4:	4b79      	ldr	r3, [pc, #484]	; (800eeac <_vfiprintf_r+0x248>)
 800ecc6:	429d      	cmp	r5, r3
 800ecc8:	bf08      	it	eq
 800ecca:	68f5      	ldreq	r5, [r6, #12]
 800eccc:	e7da      	b.n	800ec84 <_vfiprintf_r+0x20>
 800ecce:	89ab      	ldrh	r3, [r5, #12]
 800ecd0:	0598      	lsls	r0, r3, #22
 800ecd2:	d4ed      	bmi.n	800ecb0 <_vfiprintf_r+0x4c>
 800ecd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd6:	f000 fba2 	bl	800f41e <__retarget_lock_release_recursive>
 800ecda:	e7e9      	b.n	800ecb0 <_vfiprintf_r+0x4c>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9309      	str	r3, [sp, #36]	; 0x24
 800ece0:	2320      	movs	r3, #32
 800ece2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ece6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecea:	2330      	movs	r3, #48	; 0x30
 800ecec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eeb0 <_vfiprintf_r+0x24c>
 800ecf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecf4:	f04f 0901 	mov.w	r9, #1
 800ecf8:	4623      	mov	r3, r4
 800ecfa:	469a      	mov	sl, r3
 800ecfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed00:	b10a      	cbz	r2, 800ed06 <_vfiprintf_r+0xa2>
 800ed02:	2a25      	cmp	r2, #37	; 0x25
 800ed04:	d1f9      	bne.n	800ecfa <_vfiprintf_r+0x96>
 800ed06:	ebba 0b04 	subs.w	fp, sl, r4
 800ed0a:	d00b      	beq.n	800ed24 <_vfiprintf_r+0xc0>
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	4622      	mov	r2, r4
 800ed10:	4629      	mov	r1, r5
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7ff ff93 	bl	800ec3e <__sfputs_r>
 800ed18:	3001      	adds	r0, #1
 800ed1a:	f000 80aa 	beq.w	800ee72 <_vfiprintf_r+0x20e>
 800ed1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed20:	445a      	add	r2, fp
 800ed22:	9209      	str	r2, [sp, #36]	; 0x24
 800ed24:	f89a 3000 	ldrb.w	r3, [sl]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f000 80a2 	beq.w	800ee72 <_vfiprintf_r+0x20e>
 800ed2e:	2300      	movs	r3, #0
 800ed30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed38:	f10a 0a01 	add.w	sl, sl, #1
 800ed3c:	9304      	str	r3, [sp, #16]
 800ed3e:	9307      	str	r3, [sp, #28]
 800ed40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed44:	931a      	str	r3, [sp, #104]	; 0x68
 800ed46:	4654      	mov	r4, sl
 800ed48:	2205      	movs	r2, #5
 800ed4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed4e:	4858      	ldr	r0, [pc, #352]	; (800eeb0 <_vfiprintf_r+0x24c>)
 800ed50:	f7f1 fa66 	bl	8000220 <memchr>
 800ed54:	9a04      	ldr	r2, [sp, #16]
 800ed56:	b9d8      	cbnz	r0, 800ed90 <_vfiprintf_r+0x12c>
 800ed58:	06d1      	lsls	r1, r2, #27
 800ed5a:	bf44      	itt	mi
 800ed5c:	2320      	movmi	r3, #32
 800ed5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed62:	0713      	lsls	r3, r2, #28
 800ed64:	bf44      	itt	mi
 800ed66:	232b      	movmi	r3, #43	; 0x2b
 800ed68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed70:	2b2a      	cmp	r3, #42	; 0x2a
 800ed72:	d015      	beq.n	800eda0 <_vfiprintf_r+0x13c>
 800ed74:	9a07      	ldr	r2, [sp, #28]
 800ed76:	4654      	mov	r4, sl
 800ed78:	2000      	movs	r0, #0
 800ed7a:	f04f 0c0a 	mov.w	ip, #10
 800ed7e:	4621      	mov	r1, r4
 800ed80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed84:	3b30      	subs	r3, #48	; 0x30
 800ed86:	2b09      	cmp	r3, #9
 800ed88:	d94e      	bls.n	800ee28 <_vfiprintf_r+0x1c4>
 800ed8a:	b1b0      	cbz	r0, 800edba <_vfiprintf_r+0x156>
 800ed8c:	9207      	str	r2, [sp, #28]
 800ed8e:	e014      	b.n	800edba <_vfiprintf_r+0x156>
 800ed90:	eba0 0308 	sub.w	r3, r0, r8
 800ed94:	fa09 f303 	lsl.w	r3, r9, r3
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	9304      	str	r3, [sp, #16]
 800ed9c:	46a2      	mov	sl, r4
 800ed9e:	e7d2      	b.n	800ed46 <_vfiprintf_r+0xe2>
 800eda0:	9b03      	ldr	r3, [sp, #12]
 800eda2:	1d19      	adds	r1, r3, #4
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	9103      	str	r1, [sp, #12]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	bfbb      	ittet	lt
 800edac:	425b      	neglt	r3, r3
 800edae:	f042 0202 	orrlt.w	r2, r2, #2
 800edb2:	9307      	strge	r3, [sp, #28]
 800edb4:	9307      	strlt	r3, [sp, #28]
 800edb6:	bfb8      	it	lt
 800edb8:	9204      	strlt	r2, [sp, #16]
 800edba:	7823      	ldrb	r3, [r4, #0]
 800edbc:	2b2e      	cmp	r3, #46	; 0x2e
 800edbe:	d10c      	bne.n	800edda <_vfiprintf_r+0x176>
 800edc0:	7863      	ldrb	r3, [r4, #1]
 800edc2:	2b2a      	cmp	r3, #42	; 0x2a
 800edc4:	d135      	bne.n	800ee32 <_vfiprintf_r+0x1ce>
 800edc6:	9b03      	ldr	r3, [sp, #12]
 800edc8:	1d1a      	adds	r2, r3, #4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	9203      	str	r2, [sp, #12]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	bfb8      	it	lt
 800edd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800edd6:	3402      	adds	r4, #2
 800edd8:	9305      	str	r3, [sp, #20]
 800edda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eec0 <_vfiprintf_r+0x25c>
 800edde:	7821      	ldrb	r1, [r4, #0]
 800ede0:	2203      	movs	r2, #3
 800ede2:	4650      	mov	r0, sl
 800ede4:	f7f1 fa1c 	bl	8000220 <memchr>
 800ede8:	b140      	cbz	r0, 800edfc <_vfiprintf_r+0x198>
 800edea:	2340      	movs	r3, #64	; 0x40
 800edec:	eba0 000a 	sub.w	r0, r0, sl
 800edf0:	fa03 f000 	lsl.w	r0, r3, r0
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	4303      	orrs	r3, r0
 800edf8:	3401      	adds	r4, #1
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee00:	482c      	ldr	r0, [pc, #176]	; (800eeb4 <_vfiprintf_r+0x250>)
 800ee02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee06:	2206      	movs	r2, #6
 800ee08:	f7f1 fa0a 	bl	8000220 <memchr>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d03f      	beq.n	800ee90 <_vfiprintf_r+0x22c>
 800ee10:	4b29      	ldr	r3, [pc, #164]	; (800eeb8 <_vfiprintf_r+0x254>)
 800ee12:	bb1b      	cbnz	r3, 800ee5c <_vfiprintf_r+0x1f8>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	3307      	adds	r3, #7
 800ee18:	f023 0307 	bic.w	r3, r3, #7
 800ee1c:	3308      	adds	r3, #8
 800ee1e:	9303      	str	r3, [sp, #12]
 800ee20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee22:	443b      	add	r3, r7
 800ee24:	9309      	str	r3, [sp, #36]	; 0x24
 800ee26:	e767      	b.n	800ecf8 <_vfiprintf_r+0x94>
 800ee28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7a5      	b.n	800ed7e <_vfiprintf_r+0x11a>
 800ee32:	2300      	movs	r3, #0
 800ee34:	3401      	adds	r4, #1
 800ee36:	9305      	str	r3, [sp, #20]
 800ee38:	4619      	mov	r1, r3
 800ee3a:	f04f 0c0a 	mov.w	ip, #10
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee44:	3a30      	subs	r2, #48	; 0x30
 800ee46:	2a09      	cmp	r2, #9
 800ee48:	d903      	bls.n	800ee52 <_vfiprintf_r+0x1ee>
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d0c5      	beq.n	800edda <_vfiprintf_r+0x176>
 800ee4e:	9105      	str	r1, [sp, #20]
 800ee50:	e7c3      	b.n	800edda <_vfiprintf_r+0x176>
 800ee52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee56:	4604      	mov	r4, r0
 800ee58:	2301      	movs	r3, #1
 800ee5a:	e7f0      	b.n	800ee3e <_vfiprintf_r+0x1da>
 800ee5c:	ab03      	add	r3, sp, #12
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	462a      	mov	r2, r5
 800ee62:	4b16      	ldr	r3, [pc, #88]	; (800eebc <_vfiprintf_r+0x258>)
 800ee64:	a904      	add	r1, sp, #16
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7fc fb18 	bl	800b49c <_printf_float>
 800ee6c:	4607      	mov	r7, r0
 800ee6e:	1c78      	adds	r0, r7, #1
 800ee70:	d1d6      	bne.n	800ee20 <_vfiprintf_r+0x1bc>
 800ee72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee74:	07d9      	lsls	r1, r3, #31
 800ee76:	d405      	bmi.n	800ee84 <_vfiprintf_r+0x220>
 800ee78:	89ab      	ldrh	r3, [r5, #12]
 800ee7a:	059a      	lsls	r2, r3, #22
 800ee7c:	d402      	bmi.n	800ee84 <_vfiprintf_r+0x220>
 800ee7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee80:	f000 facd 	bl	800f41e <__retarget_lock_release_recursive>
 800ee84:	89ab      	ldrh	r3, [r5, #12]
 800ee86:	065b      	lsls	r3, r3, #25
 800ee88:	f53f af12 	bmi.w	800ecb0 <_vfiprintf_r+0x4c>
 800ee8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee8e:	e711      	b.n	800ecb4 <_vfiprintf_r+0x50>
 800ee90:	ab03      	add	r3, sp, #12
 800ee92:	9300      	str	r3, [sp, #0]
 800ee94:	462a      	mov	r2, r5
 800ee96:	4b09      	ldr	r3, [pc, #36]	; (800eebc <_vfiprintf_r+0x258>)
 800ee98:	a904      	add	r1, sp, #16
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f7fc fda2 	bl	800b9e4 <_printf_i>
 800eea0:	e7e4      	b.n	800ee6c <_vfiprintf_r+0x208>
 800eea2:	bf00      	nop
 800eea4:	08010130 	.word	0x08010130
 800eea8:	08010150 	.word	0x08010150
 800eeac:	08010110 	.word	0x08010110
 800eeb0:	080100fc 	.word	0x080100fc
 800eeb4:	08010106 	.word	0x08010106
 800eeb8:	0800b49d 	.word	0x0800b49d
 800eebc:	0800ec3f 	.word	0x0800ec3f
 800eec0:	08010102 	.word	0x08010102
 800eec4:	00000000 	.word	0x00000000

0800eec8 <nan>:
 800eec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eed0 <nan+0x8>
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	00000000 	.word	0x00000000
 800eed4:	7ff80000 	.word	0x7ff80000

0800eed8 <strncmp>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	b17a      	cbz	r2, 800eefc <strncmp+0x24>
 800eedc:	4603      	mov	r3, r0
 800eede:	3901      	subs	r1, #1
 800eee0:	1884      	adds	r4, r0, r2
 800eee2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eee6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eeea:	4290      	cmp	r0, r2
 800eeec:	d101      	bne.n	800eef2 <strncmp+0x1a>
 800eeee:	42a3      	cmp	r3, r4
 800eef0:	d101      	bne.n	800eef6 <strncmp+0x1e>
 800eef2:	1a80      	subs	r0, r0, r2
 800eef4:	bd10      	pop	{r4, pc}
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d1f3      	bne.n	800eee2 <strncmp+0xa>
 800eefa:	e7fa      	b.n	800eef2 <strncmp+0x1a>
 800eefc:	4610      	mov	r0, r2
 800eefe:	e7f9      	b.n	800eef4 <strncmp+0x1c>

0800ef00 <__swbuf_r>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	460e      	mov	r6, r1
 800ef04:	4614      	mov	r4, r2
 800ef06:	4605      	mov	r5, r0
 800ef08:	b118      	cbz	r0, 800ef12 <__swbuf_r+0x12>
 800ef0a:	6983      	ldr	r3, [r0, #24]
 800ef0c:	b90b      	cbnz	r3, 800ef12 <__swbuf_r+0x12>
 800ef0e:	f000 f9e7 	bl	800f2e0 <__sinit>
 800ef12:	4b21      	ldr	r3, [pc, #132]	; (800ef98 <__swbuf_r+0x98>)
 800ef14:	429c      	cmp	r4, r3
 800ef16:	d12b      	bne.n	800ef70 <__swbuf_r+0x70>
 800ef18:	686c      	ldr	r4, [r5, #4]
 800ef1a:	69a3      	ldr	r3, [r4, #24]
 800ef1c:	60a3      	str	r3, [r4, #8]
 800ef1e:	89a3      	ldrh	r3, [r4, #12]
 800ef20:	071a      	lsls	r2, r3, #28
 800ef22:	d52f      	bpl.n	800ef84 <__swbuf_r+0x84>
 800ef24:	6923      	ldr	r3, [r4, #16]
 800ef26:	b36b      	cbz	r3, 800ef84 <__swbuf_r+0x84>
 800ef28:	6923      	ldr	r3, [r4, #16]
 800ef2a:	6820      	ldr	r0, [r4, #0]
 800ef2c:	1ac0      	subs	r0, r0, r3
 800ef2e:	6963      	ldr	r3, [r4, #20]
 800ef30:	b2f6      	uxtb	r6, r6
 800ef32:	4283      	cmp	r3, r0
 800ef34:	4637      	mov	r7, r6
 800ef36:	dc04      	bgt.n	800ef42 <__swbuf_r+0x42>
 800ef38:	4621      	mov	r1, r4
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f000 f93c 	bl	800f1b8 <_fflush_r>
 800ef40:	bb30      	cbnz	r0, 800ef90 <__swbuf_r+0x90>
 800ef42:	68a3      	ldr	r3, [r4, #8]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	60a3      	str	r3, [r4, #8]
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	1c5a      	adds	r2, r3, #1
 800ef4c:	6022      	str	r2, [r4, #0]
 800ef4e:	701e      	strb	r6, [r3, #0]
 800ef50:	6963      	ldr	r3, [r4, #20]
 800ef52:	3001      	adds	r0, #1
 800ef54:	4283      	cmp	r3, r0
 800ef56:	d004      	beq.n	800ef62 <__swbuf_r+0x62>
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	07db      	lsls	r3, r3, #31
 800ef5c:	d506      	bpl.n	800ef6c <__swbuf_r+0x6c>
 800ef5e:	2e0a      	cmp	r6, #10
 800ef60:	d104      	bne.n	800ef6c <__swbuf_r+0x6c>
 800ef62:	4621      	mov	r1, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	f000 f927 	bl	800f1b8 <_fflush_r>
 800ef6a:	b988      	cbnz	r0, 800ef90 <__swbuf_r+0x90>
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef70:	4b0a      	ldr	r3, [pc, #40]	; (800ef9c <__swbuf_r+0x9c>)
 800ef72:	429c      	cmp	r4, r3
 800ef74:	d101      	bne.n	800ef7a <__swbuf_r+0x7a>
 800ef76:	68ac      	ldr	r4, [r5, #8]
 800ef78:	e7cf      	b.n	800ef1a <__swbuf_r+0x1a>
 800ef7a:	4b09      	ldr	r3, [pc, #36]	; (800efa0 <__swbuf_r+0xa0>)
 800ef7c:	429c      	cmp	r4, r3
 800ef7e:	bf08      	it	eq
 800ef80:	68ec      	ldreq	r4, [r5, #12]
 800ef82:	e7ca      	b.n	800ef1a <__swbuf_r+0x1a>
 800ef84:	4621      	mov	r1, r4
 800ef86:	4628      	mov	r0, r5
 800ef88:	f000 f81a 	bl	800efc0 <__swsetup_r>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d0cb      	beq.n	800ef28 <__swbuf_r+0x28>
 800ef90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ef94:	e7ea      	b.n	800ef6c <__swbuf_r+0x6c>
 800ef96:	bf00      	nop
 800ef98:	08010130 	.word	0x08010130
 800ef9c:	08010150 	.word	0x08010150
 800efa0:	08010110 	.word	0x08010110

0800efa4 <__ascii_wctomb>:
 800efa4:	b149      	cbz	r1, 800efba <__ascii_wctomb+0x16>
 800efa6:	2aff      	cmp	r2, #255	; 0xff
 800efa8:	bf85      	ittet	hi
 800efaa:	238a      	movhi	r3, #138	; 0x8a
 800efac:	6003      	strhi	r3, [r0, #0]
 800efae:	700a      	strbls	r2, [r1, #0]
 800efb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800efb4:	bf98      	it	ls
 800efb6:	2001      	movls	r0, #1
 800efb8:	4770      	bx	lr
 800efba:	4608      	mov	r0, r1
 800efbc:	4770      	bx	lr
	...

0800efc0 <__swsetup_r>:
 800efc0:	4b32      	ldr	r3, [pc, #200]	; (800f08c <__swsetup_r+0xcc>)
 800efc2:	b570      	push	{r4, r5, r6, lr}
 800efc4:	681d      	ldr	r5, [r3, #0]
 800efc6:	4606      	mov	r6, r0
 800efc8:	460c      	mov	r4, r1
 800efca:	b125      	cbz	r5, 800efd6 <__swsetup_r+0x16>
 800efcc:	69ab      	ldr	r3, [r5, #24]
 800efce:	b913      	cbnz	r3, 800efd6 <__swsetup_r+0x16>
 800efd0:	4628      	mov	r0, r5
 800efd2:	f000 f985 	bl	800f2e0 <__sinit>
 800efd6:	4b2e      	ldr	r3, [pc, #184]	; (800f090 <__swsetup_r+0xd0>)
 800efd8:	429c      	cmp	r4, r3
 800efda:	d10f      	bne.n	800effc <__swsetup_r+0x3c>
 800efdc:	686c      	ldr	r4, [r5, #4]
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efe4:	0719      	lsls	r1, r3, #28
 800efe6:	d42c      	bmi.n	800f042 <__swsetup_r+0x82>
 800efe8:	06dd      	lsls	r5, r3, #27
 800efea:	d411      	bmi.n	800f010 <__swsetup_r+0x50>
 800efec:	2309      	movs	r3, #9
 800efee:	6033      	str	r3, [r6, #0]
 800eff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eff4:	81a3      	strh	r3, [r4, #12]
 800eff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800effa:	e03e      	b.n	800f07a <__swsetup_r+0xba>
 800effc:	4b25      	ldr	r3, [pc, #148]	; (800f094 <__swsetup_r+0xd4>)
 800effe:	429c      	cmp	r4, r3
 800f000:	d101      	bne.n	800f006 <__swsetup_r+0x46>
 800f002:	68ac      	ldr	r4, [r5, #8]
 800f004:	e7eb      	b.n	800efde <__swsetup_r+0x1e>
 800f006:	4b24      	ldr	r3, [pc, #144]	; (800f098 <__swsetup_r+0xd8>)
 800f008:	429c      	cmp	r4, r3
 800f00a:	bf08      	it	eq
 800f00c:	68ec      	ldreq	r4, [r5, #12]
 800f00e:	e7e6      	b.n	800efde <__swsetup_r+0x1e>
 800f010:	0758      	lsls	r0, r3, #29
 800f012:	d512      	bpl.n	800f03a <__swsetup_r+0x7a>
 800f014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f016:	b141      	cbz	r1, 800f02a <__swsetup_r+0x6a>
 800f018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f01c:	4299      	cmp	r1, r3
 800f01e:	d002      	beq.n	800f026 <__swsetup_r+0x66>
 800f020:	4630      	mov	r0, r6
 800f022:	f7fc f8bb 	bl	800b19c <_free_r>
 800f026:	2300      	movs	r3, #0
 800f028:	6363      	str	r3, [r4, #52]	; 0x34
 800f02a:	89a3      	ldrh	r3, [r4, #12]
 800f02c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f030:	81a3      	strh	r3, [r4, #12]
 800f032:	2300      	movs	r3, #0
 800f034:	6063      	str	r3, [r4, #4]
 800f036:	6923      	ldr	r3, [r4, #16]
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	89a3      	ldrh	r3, [r4, #12]
 800f03c:	f043 0308 	orr.w	r3, r3, #8
 800f040:	81a3      	strh	r3, [r4, #12]
 800f042:	6923      	ldr	r3, [r4, #16]
 800f044:	b94b      	cbnz	r3, 800f05a <__swsetup_r+0x9a>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f050:	d003      	beq.n	800f05a <__swsetup_r+0x9a>
 800f052:	4621      	mov	r1, r4
 800f054:	4630      	mov	r0, r6
 800f056:	f000 fa09 	bl	800f46c <__smakebuf_r>
 800f05a:	89a0      	ldrh	r0, [r4, #12]
 800f05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f060:	f010 0301 	ands.w	r3, r0, #1
 800f064:	d00a      	beq.n	800f07c <__swsetup_r+0xbc>
 800f066:	2300      	movs	r3, #0
 800f068:	60a3      	str	r3, [r4, #8]
 800f06a:	6963      	ldr	r3, [r4, #20]
 800f06c:	425b      	negs	r3, r3
 800f06e:	61a3      	str	r3, [r4, #24]
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	b943      	cbnz	r3, 800f086 <__swsetup_r+0xc6>
 800f074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f078:	d1ba      	bne.n	800eff0 <__swsetup_r+0x30>
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	0781      	lsls	r1, r0, #30
 800f07e:	bf58      	it	pl
 800f080:	6963      	ldrpl	r3, [r4, #20]
 800f082:	60a3      	str	r3, [r4, #8]
 800f084:	e7f4      	b.n	800f070 <__swsetup_r+0xb0>
 800f086:	2000      	movs	r0, #0
 800f088:	e7f7      	b.n	800f07a <__swsetup_r+0xba>
 800f08a:	bf00      	nop
 800f08c:	20000024 	.word	0x20000024
 800f090:	08010130 	.word	0x08010130
 800f094:	08010150 	.word	0x08010150
 800f098:	08010110 	.word	0x08010110

0800f09c <abort>:
 800f09c:	b508      	push	{r3, lr}
 800f09e:	2006      	movs	r0, #6
 800f0a0:	f000 fa96 	bl	800f5d0 <raise>
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	f7f4 fc4d 	bl	8003944 <_exit>
	...

0800f0ac <__sflush_r>:
 800f0ac:	898a      	ldrh	r2, [r1, #12]
 800f0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	0710      	lsls	r0, r2, #28
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	d458      	bmi.n	800f16c <__sflush_r+0xc0>
 800f0ba:	684b      	ldr	r3, [r1, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dc05      	bgt.n	800f0cc <__sflush_r+0x20>
 800f0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	dc02      	bgt.n	800f0cc <__sflush_r+0x20>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ce:	2e00      	cmp	r6, #0
 800f0d0:	d0f9      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0d8:	682f      	ldr	r7, [r5, #0]
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	d032      	beq.n	800f144 <__sflush_r+0x98>
 800f0de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	075a      	lsls	r2, r3, #29
 800f0e4:	d505      	bpl.n	800f0f2 <__sflush_r+0x46>
 800f0e6:	6863      	ldr	r3, [r4, #4]
 800f0e8:	1ac0      	subs	r0, r0, r3
 800f0ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0ec:	b10b      	cbz	r3, 800f0f2 <__sflush_r+0x46>
 800f0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0f0:	1ac0      	subs	r0, r0, r3
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0f8:	6a21      	ldr	r1, [r4, #32]
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b0      	blx	r6
 800f0fe:	1c43      	adds	r3, r0, #1
 800f100:	89a3      	ldrh	r3, [r4, #12]
 800f102:	d106      	bne.n	800f112 <__sflush_r+0x66>
 800f104:	6829      	ldr	r1, [r5, #0]
 800f106:	291d      	cmp	r1, #29
 800f108:	d82c      	bhi.n	800f164 <__sflush_r+0xb8>
 800f10a:	4a2a      	ldr	r2, [pc, #168]	; (800f1b4 <__sflush_r+0x108>)
 800f10c:	40ca      	lsrs	r2, r1
 800f10e:	07d6      	lsls	r6, r2, #31
 800f110:	d528      	bpl.n	800f164 <__sflush_r+0xb8>
 800f112:	2200      	movs	r2, #0
 800f114:	6062      	str	r2, [r4, #4]
 800f116:	04d9      	lsls	r1, r3, #19
 800f118:	6922      	ldr	r2, [r4, #16]
 800f11a:	6022      	str	r2, [r4, #0]
 800f11c:	d504      	bpl.n	800f128 <__sflush_r+0x7c>
 800f11e:	1c42      	adds	r2, r0, #1
 800f120:	d101      	bne.n	800f126 <__sflush_r+0x7a>
 800f122:	682b      	ldr	r3, [r5, #0]
 800f124:	b903      	cbnz	r3, 800f128 <__sflush_r+0x7c>
 800f126:	6560      	str	r0, [r4, #84]	; 0x54
 800f128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f12a:	602f      	str	r7, [r5, #0]
 800f12c:	2900      	cmp	r1, #0
 800f12e:	d0ca      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f134:	4299      	cmp	r1, r3
 800f136:	d002      	beq.n	800f13e <__sflush_r+0x92>
 800f138:	4628      	mov	r0, r5
 800f13a:	f7fc f82f 	bl	800b19c <_free_r>
 800f13e:	2000      	movs	r0, #0
 800f140:	6360      	str	r0, [r4, #52]	; 0x34
 800f142:	e7c1      	b.n	800f0c8 <__sflush_r+0x1c>
 800f144:	6a21      	ldr	r1, [r4, #32]
 800f146:	2301      	movs	r3, #1
 800f148:	4628      	mov	r0, r5
 800f14a:	47b0      	blx	r6
 800f14c:	1c41      	adds	r1, r0, #1
 800f14e:	d1c7      	bne.n	800f0e0 <__sflush_r+0x34>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d0c4      	beq.n	800f0e0 <__sflush_r+0x34>
 800f156:	2b1d      	cmp	r3, #29
 800f158:	d001      	beq.n	800f15e <__sflush_r+0xb2>
 800f15a:	2b16      	cmp	r3, #22
 800f15c:	d101      	bne.n	800f162 <__sflush_r+0xb6>
 800f15e:	602f      	str	r7, [r5, #0]
 800f160:	e7b1      	b.n	800f0c6 <__sflush_r+0x1a>
 800f162:	89a3      	ldrh	r3, [r4, #12]
 800f164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	e7ad      	b.n	800f0c8 <__sflush_r+0x1c>
 800f16c:	690f      	ldr	r7, [r1, #16]
 800f16e:	2f00      	cmp	r7, #0
 800f170:	d0a9      	beq.n	800f0c6 <__sflush_r+0x1a>
 800f172:	0793      	lsls	r3, r2, #30
 800f174:	680e      	ldr	r6, [r1, #0]
 800f176:	bf08      	it	eq
 800f178:	694b      	ldreq	r3, [r1, #20]
 800f17a:	600f      	str	r7, [r1, #0]
 800f17c:	bf18      	it	ne
 800f17e:	2300      	movne	r3, #0
 800f180:	eba6 0807 	sub.w	r8, r6, r7
 800f184:	608b      	str	r3, [r1, #8]
 800f186:	f1b8 0f00 	cmp.w	r8, #0
 800f18a:	dd9c      	ble.n	800f0c6 <__sflush_r+0x1a>
 800f18c:	6a21      	ldr	r1, [r4, #32]
 800f18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f190:	4643      	mov	r3, r8
 800f192:	463a      	mov	r2, r7
 800f194:	4628      	mov	r0, r5
 800f196:	47b0      	blx	r6
 800f198:	2800      	cmp	r0, #0
 800f19a:	dc06      	bgt.n	800f1aa <__sflush_r+0xfe>
 800f19c:	89a3      	ldrh	r3, [r4, #12]
 800f19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a2:	81a3      	strh	r3, [r4, #12]
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1a8:	e78e      	b.n	800f0c8 <__sflush_r+0x1c>
 800f1aa:	4407      	add	r7, r0
 800f1ac:	eba8 0800 	sub.w	r8, r8, r0
 800f1b0:	e7e9      	b.n	800f186 <__sflush_r+0xda>
 800f1b2:	bf00      	nop
 800f1b4:	20400001 	.word	0x20400001

0800f1b8 <_fflush_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	690b      	ldr	r3, [r1, #16]
 800f1bc:	4605      	mov	r5, r0
 800f1be:	460c      	mov	r4, r1
 800f1c0:	b913      	cbnz	r3, 800f1c8 <_fflush_r+0x10>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	b118      	cbz	r0, 800f1d2 <_fflush_r+0x1a>
 800f1ca:	6983      	ldr	r3, [r0, #24]
 800f1cc:	b90b      	cbnz	r3, 800f1d2 <_fflush_r+0x1a>
 800f1ce:	f000 f887 	bl	800f2e0 <__sinit>
 800f1d2:	4b14      	ldr	r3, [pc, #80]	; (800f224 <_fflush_r+0x6c>)
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d11b      	bne.n	800f210 <_fflush_r+0x58>
 800f1d8:	686c      	ldr	r4, [r5, #4]
 800f1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0ef      	beq.n	800f1c2 <_fflush_r+0xa>
 800f1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1e4:	07d0      	lsls	r0, r2, #31
 800f1e6:	d404      	bmi.n	800f1f2 <_fflush_r+0x3a>
 800f1e8:	0599      	lsls	r1, r3, #22
 800f1ea:	d402      	bmi.n	800f1f2 <_fflush_r+0x3a>
 800f1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ee:	f000 f915 	bl	800f41c <__retarget_lock_acquire_recursive>
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	f7ff ff59 	bl	800f0ac <__sflush_r>
 800f1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1fc:	07da      	lsls	r2, r3, #31
 800f1fe:	4605      	mov	r5, r0
 800f200:	d4e0      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	059b      	lsls	r3, r3, #22
 800f206:	d4dd      	bmi.n	800f1c4 <_fflush_r+0xc>
 800f208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f20a:	f000 f908 	bl	800f41e <__retarget_lock_release_recursive>
 800f20e:	e7d9      	b.n	800f1c4 <_fflush_r+0xc>
 800f210:	4b05      	ldr	r3, [pc, #20]	; (800f228 <_fflush_r+0x70>)
 800f212:	429c      	cmp	r4, r3
 800f214:	d101      	bne.n	800f21a <_fflush_r+0x62>
 800f216:	68ac      	ldr	r4, [r5, #8]
 800f218:	e7df      	b.n	800f1da <_fflush_r+0x22>
 800f21a:	4b04      	ldr	r3, [pc, #16]	; (800f22c <_fflush_r+0x74>)
 800f21c:	429c      	cmp	r4, r3
 800f21e:	bf08      	it	eq
 800f220:	68ec      	ldreq	r4, [r5, #12]
 800f222:	e7da      	b.n	800f1da <_fflush_r+0x22>
 800f224:	08010130 	.word	0x08010130
 800f228:	08010150 	.word	0x08010150
 800f22c:	08010110 	.word	0x08010110

0800f230 <std>:
 800f230:	2300      	movs	r3, #0
 800f232:	b510      	push	{r4, lr}
 800f234:	4604      	mov	r4, r0
 800f236:	e9c0 3300 	strd	r3, r3, [r0]
 800f23a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f23e:	6083      	str	r3, [r0, #8]
 800f240:	8181      	strh	r1, [r0, #12]
 800f242:	6643      	str	r3, [r0, #100]	; 0x64
 800f244:	81c2      	strh	r2, [r0, #14]
 800f246:	6183      	str	r3, [r0, #24]
 800f248:	4619      	mov	r1, r3
 800f24a:	2208      	movs	r2, #8
 800f24c:	305c      	adds	r0, #92	; 0x5c
 800f24e:	f7fb ff9d 	bl	800b18c <memset>
 800f252:	4b05      	ldr	r3, [pc, #20]	; (800f268 <std+0x38>)
 800f254:	6263      	str	r3, [r4, #36]	; 0x24
 800f256:	4b05      	ldr	r3, [pc, #20]	; (800f26c <std+0x3c>)
 800f258:	62a3      	str	r3, [r4, #40]	; 0x28
 800f25a:	4b05      	ldr	r3, [pc, #20]	; (800f270 <std+0x40>)
 800f25c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f25e:	4b05      	ldr	r3, [pc, #20]	; (800f274 <std+0x44>)
 800f260:	6224      	str	r4, [r4, #32]
 800f262:	6323      	str	r3, [r4, #48]	; 0x30
 800f264:	bd10      	pop	{r4, pc}
 800f266:	bf00      	nop
 800f268:	0800f609 	.word	0x0800f609
 800f26c:	0800f62b 	.word	0x0800f62b
 800f270:	0800f663 	.word	0x0800f663
 800f274:	0800f687 	.word	0x0800f687

0800f278 <_cleanup_r>:
 800f278:	4901      	ldr	r1, [pc, #4]	; (800f280 <_cleanup_r+0x8>)
 800f27a:	f000 b8af 	b.w	800f3dc <_fwalk_reent>
 800f27e:	bf00      	nop
 800f280:	0800f1b9 	.word	0x0800f1b9

0800f284 <__sfmoreglue>:
 800f284:	b570      	push	{r4, r5, r6, lr}
 800f286:	2268      	movs	r2, #104	; 0x68
 800f288:	1e4d      	subs	r5, r1, #1
 800f28a:	4355      	muls	r5, r2
 800f28c:	460e      	mov	r6, r1
 800f28e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f292:	f7fb ffef 	bl	800b274 <_malloc_r>
 800f296:	4604      	mov	r4, r0
 800f298:	b140      	cbz	r0, 800f2ac <__sfmoreglue+0x28>
 800f29a:	2100      	movs	r1, #0
 800f29c:	e9c0 1600 	strd	r1, r6, [r0]
 800f2a0:	300c      	adds	r0, #12
 800f2a2:	60a0      	str	r0, [r4, #8]
 800f2a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f2a8:	f7fb ff70 	bl	800b18c <memset>
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	bd70      	pop	{r4, r5, r6, pc}

0800f2b0 <__sfp_lock_acquire>:
 800f2b0:	4801      	ldr	r0, [pc, #4]	; (800f2b8 <__sfp_lock_acquire+0x8>)
 800f2b2:	f000 b8b3 	b.w	800f41c <__retarget_lock_acquire_recursive>
 800f2b6:	bf00      	nop
 800f2b8:	2000a609 	.word	0x2000a609

0800f2bc <__sfp_lock_release>:
 800f2bc:	4801      	ldr	r0, [pc, #4]	; (800f2c4 <__sfp_lock_release+0x8>)
 800f2be:	f000 b8ae 	b.w	800f41e <__retarget_lock_release_recursive>
 800f2c2:	bf00      	nop
 800f2c4:	2000a609 	.word	0x2000a609

0800f2c8 <__sinit_lock_acquire>:
 800f2c8:	4801      	ldr	r0, [pc, #4]	; (800f2d0 <__sinit_lock_acquire+0x8>)
 800f2ca:	f000 b8a7 	b.w	800f41c <__retarget_lock_acquire_recursive>
 800f2ce:	bf00      	nop
 800f2d0:	2000a60a 	.word	0x2000a60a

0800f2d4 <__sinit_lock_release>:
 800f2d4:	4801      	ldr	r0, [pc, #4]	; (800f2dc <__sinit_lock_release+0x8>)
 800f2d6:	f000 b8a2 	b.w	800f41e <__retarget_lock_release_recursive>
 800f2da:	bf00      	nop
 800f2dc:	2000a60a 	.word	0x2000a60a

0800f2e0 <__sinit>:
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	f7ff fff0 	bl	800f2c8 <__sinit_lock_acquire>
 800f2e8:	69a3      	ldr	r3, [r4, #24]
 800f2ea:	b11b      	cbz	r3, 800f2f4 <__sinit+0x14>
 800f2ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f0:	f7ff bff0 	b.w	800f2d4 <__sinit_lock_release>
 800f2f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2f8:	6523      	str	r3, [r4, #80]	; 0x50
 800f2fa:	4b13      	ldr	r3, [pc, #76]	; (800f348 <__sinit+0x68>)
 800f2fc:	4a13      	ldr	r2, [pc, #76]	; (800f34c <__sinit+0x6c>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	62a2      	str	r2, [r4, #40]	; 0x28
 800f302:	42a3      	cmp	r3, r4
 800f304:	bf04      	itt	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	61a3      	streq	r3, [r4, #24]
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 f820 	bl	800f350 <__sfp>
 800f310:	6060      	str	r0, [r4, #4]
 800f312:	4620      	mov	r0, r4
 800f314:	f000 f81c 	bl	800f350 <__sfp>
 800f318:	60a0      	str	r0, [r4, #8]
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 f818 	bl	800f350 <__sfp>
 800f320:	2200      	movs	r2, #0
 800f322:	60e0      	str	r0, [r4, #12]
 800f324:	2104      	movs	r1, #4
 800f326:	6860      	ldr	r0, [r4, #4]
 800f328:	f7ff ff82 	bl	800f230 <std>
 800f32c:	68a0      	ldr	r0, [r4, #8]
 800f32e:	2201      	movs	r2, #1
 800f330:	2109      	movs	r1, #9
 800f332:	f7ff ff7d 	bl	800f230 <std>
 800f336:	68e0      	ldr	r0, [r4, #12]
 800f338:	2202      	movs	r2, #2
 800f33a:	2112      	movs	r1, #18
 800f33c:	f7ff ff78 	bl	800f230 <std>
 800f340:	2301      	movs	r3, #1
 800f342:	61a3      	str	r3, [r4, #24]
 800f344:	e7d2      	b.n	800f2ec <__sinit+0xc>
 800f346:	bf00      	nop
 800f348:	0800fc74 	.word	0x0800fc74
 800f34c:	0800f279 	.word	0x0800f279

0800f350 <__sfp>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	4607      	mov	r7, r0
 800f354:	f7ff ffac 	bl	800f2b0 <__sfp_lock_acquire>
 800f358:	4b1e      	ldr	r3, [pc, #120]	; (800f3d4 <__sfp+0x84>)
 800f35a:	681e      	ldr	r6, [r3, #0]
 800f35c:	69b3      	ldr	r3, [r6, #24]
 800f35e:	b913      	cbnz	r3, 800f366 <__sfp+0x16>
 800f360:	4630      	mov	r0, r6
 800f362:	f7ff ffbd 	bl	800f2e0 <__sinit>
 800f366:	3648      	adds	r6, #72	; 0x48
 800f368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	d503      	bpl.n	800f378 <__sfp+0x28>
 800f370:	6833      	ldr	r3, [r6, #0]
 800f372:	b30b      	cbz	r3, 800f3b8 <__sfp+0x68>
 800f374:	6836      	ldr	r6, [r6, #0]
 800f376:	e7f7      	b.n	800f368 <__sfp+0x18>
 800f378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f37c:	b9d5      	cbnz	r5, 800f3b4 <__sfp+0x64>
 800f37e:	4b16      	ldr	r3, [pc, #88]	; (800f3d8 <__sfp+0x88>)
 800f380:	60e3      	str	r3, [r4, #12]
 800f382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f386:	6665      	str	r5, [r4, #100]	; 0x64
 800f388:	f000 f847 	bl	800f41a <__retarget_lock_init_recursive>
 800f38c:	f7ff ff96 	bl	800f2bc <__sfp_lock_release>
 800f390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f398:	6025      	str	r5, [r4, #0]
 800f39a:	61a5      	str	r5, [r4, #24]
 800f39c:	2208      	movs	r2, #8
 800f39e:	4629      	mov	r1, r5
 800f3a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f3a4:	f7fb fef2 	bl	800b18c <memset>
 800f3a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f3ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3b4:	3468      	adds	r4, #104	; 0x68
 800f3b6:	e7d9      	b.n	800f36c <__sfp+0x1c>
 800f3b8:	2104      	movs	r1, #4
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f7ff ff62 	bl	800f284 <__sfmoreglue>
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	6030      	str	r0, [r6, #0]
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1d5      	bne.n	800f374 <__sfp+0x24>
 800f3c8:	f7ff ff78 	bl	800f2bc <__sfp_lock_release>
 800f3cc:	230c      	movs	r3, #12
 800f3ce:	603b      	str	r3, [r7, #0]
 800f3d0:	e7ee      	b.n	800f3b0 <__sfp+0x60>
 800f3d2:	bf00      	nop
 800f3d4:	0800fc74 	.word	0x0800fc74
 800f3d8:	ffff0001 	.word	0xffff0001

0800f3dc <_fwalk_reent>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	4688      	mov	r8, r1
 800f3e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3e8:	2700      	movs	r7, #0
 800f3ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3ee:	f1b9 0901 	subs.w	r9, r9, #1
 800f3f2:	d505      	bpl.n	800f400 <_fwalk_reent+0x24>
 800f3f4:	6824      	ldr	r4, [r4, #0]
 800f3f6:	2c00      	cmp	r4, #0
 800f3f8:	d1f7      	bne.n	800f3ea <_fwalk_reent+0xe>
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f400:	89ab      	ldrh	r3, [r5, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d907      	bls.n	800f416 <_fwalk_reent+0x3a>
 800f406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f40a:	3301      	adds	r3, #1
 800f40c:	d003      	beq.n	800f416 <_fwalk_reent+0x3a>
 800f40e:	4629      	mov	r1, r5
 800f410:	4630      	mov	r0, r6
 800f412:	47c0      	blx	r8
 800f414:	4307      	orrs	r7, r0
 800f416:	3568      	adds	r5, #104	; 0x68
 800f418:	e7e9      	b.n	800f3ee <_fwalk_reent+0x12>

0800f41a <__retarget_lock_init_recursive>:
 800f41a:	4770      	bx	lr

0800f41c <__retarget_lock_acquire_recursive>:
 800f41c:	4770      	bx	lr

0800f41e <__retarget_lock_release_recursive>:
 800f41e:	4770      	bx	lr

0800f420 <__swhatbuf_r>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	460e      	mov	r6, r1
 800f424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f428:	2900      	cmp	r1, #0
 800f42a:	b096      	sub	sp, #88	; 0x58
 800f42c:	4614      	mov	r4, r2
 800f42e:	461d      	mov	r5, r3
 800f430:	da08      	bge.n	800f444 <__swhatbuf_r+0x24>
 800f432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f436:	2200      	movs	r2, #0
 800f438:	602a      	str	r2, [r5, #0]
 800f43a:	061a      	lsls	r2, r3, #24
 800f43c:	d410      	bmi.n	800f460 <__swhatbuf_r+0x40>
 800f43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f442:	e00e      	b.n	800f462 <__swhatbuf_r+0x42>
 800f444:	466a      	mov	r2, sp
 800f446:	f000 f945 	bl	800f6d4 <_fstat_r>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	dbf1      	blt.n	800f432 <__swhatbuf_r+0x12>
 800f44e:	9a01      	ldr	r2, [sp, #4]
 800f450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f458:	425a      	negs	r2, r3
 800f45a:	415a      	adcs	r2, r3
 800f45c:	602a      	str	r2, [r5, #0]
 800f45e:	e7ee      	b.n	800f43e <__swhatbuf_r+0x1e>
 800f460:	2340      	movs	r3, #64	; 0x40
 800f462:	2000      	movs	r0, #0
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	b016      	add	sp, #88	; 0x58
 800f468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f46c <__smakebuf_r>:
 800f46c:	898b      	ldrh	r3, [r1, #12]
 800f46e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f470:	079d      	lsls	r5, r3, #30
 800f472:	4606      	mov	r6, r0
 800f474:	460c      	mov	r4, r1
 800f476:	d507      	bpl.n	800f488 <__smakebuf_r+0x1c>
 800f478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	6123      	str	r3, [r4, #16]
 800f480:	2301      	movs	r3, #1
 800f482:	6163      	str	r3, [r4, #20]
 800f484:	b002      	add	sp, #8
 800f486:	bd70      	pop	{r4, r5, r6, pc}
 800f488:	ab01      	add	r3, sp, #4
 800f48a:	466a      	mov	r2, sp
 800f48c:	f7ff ffc8 	bl	800f420 <__swhatbuf_r>
 800f490:	9900      	ldr	r1, [sp, #0]
 800f492:	4605      	mov	r5, r0
 800f494:	4630      	mov	r0, r6
 800f496:	f7fb feed 	bl	800b274 <_malloc_r>
 800f49a:	b948      	cbnz	r0, 800f4b0 <__smakebuf_r+0x44>
 800f49c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a0:	059a      	lsls	r2, r3, #22
 800f4a2:	d4ef      	bmi.n	800f484 <__smakebuf_r+0x18>
 800f4a4:	f023 0303 	bic.w	r3, r3, #3
 800f4a8:	f043 0302 	orr.w	r3, r3, #2
 800f4ac:	81a3      	strh	r3, [r4, #12]
 800f4ae:	e7e3      	b.n	800f478 <__smakebuf_r+0xc>
 800f4b0:	4b0d      	ldr	r3, [pc, #52]	; (800f4e8 <__smakebuf_r+0x7c>)
 800f4b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	6020      	str	r0, [r4, #0]
 800f4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4bc:	81a3      	strh	r3, [r4, #12]
 800f4be:	9b00      	ldr	r3, [sp, #0]
 800f4c0:	6163      	str	r3, [r4, #20]
 800f4c2:	9b01      	ldr	r3, [sp, #4]
 800f4c4:	6120      	str	r0, [r4, #16]
 800f4c6:	b15b      	cbz	r3, 800f4e0 <__smakebuf_r+0x74>
 800f4c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f000 f913 	bl	800f6f8 <_isatty_r>
 800f4d2:	b128      	cbz	r0, 800f4e0 <__smakebuf_r+0x74>
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	f023 0303 	bic.w	r3, r3, #3
 800f4da:	f043 0301 	orr.w	r3, r3, #1
 800f4de:	81a3      	strh	r3, [r4, #12]
 800f4e0:	89a0      	ldrh	r0, [r4, #12]
 800f4e2:	4305      	orrs	r5, r0
 800f4e4:	81a5      	strh	r5, [r4, #12]
 800f4e6:	e7cd      	b.n	800f484 <__smakebuf_r+0x18>
 800f4e8:	0800f279 	.word	0x0800f279

0800f4ec <memmove>:
 800f4ec:	4288      	cmp	r0, r1
 800f4ee:	b510      	push	{r4, lr}
 800f4f0:	eb01 0402 	add.w	r4, r1, r2
 800f4f4:	d902      	bls.n	800f4fc <memmove+0x10>
 800f4f6:	4284      	cmp	r4, r0
 800f4f8:	4623      	mov	r3, r4
 800f4fa:	d807      	bhi.n	800f50c <memmove+0x20>
 800f4fc:	1e43      	subs	r3, r0, #1
 800f4fe:	42a1      	cmp	r1, r4
 800f500:	d008      	beq.n	800f514 <memmove+0x28>
 800f502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f50a:	e7f8      	b.n	800f4fe <memmove+0x12>
 800f50c:	4402      	add	r2, r0
 800f50e:	4601      	mov	r1, r0
 800f510:	428a      	cmp	r2, r1
 800f512:	d100      	bne.n	800f516 <memmove+0x2a>
 800f514:	bd10      	pop	{r4, pc}
 800f516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f51e:	e7f7      	b.n	800f510 <memmove+0x24>

0800f520 <_realloc_r>:
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	4680      	mov	r8, r0
 800f526:	4614      	mov	r4, r2
 800f528:	460e      	mov	r6, r1
 800f52a:	b921      	cbnz	r1, 800f536 <_realloc_r+0x16>
 800f52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f530:	4611      	mov	r1, r2
 800f532:	f7fb be9f 	b.w	800b274 <_malloc_r>
 800f536:	b92a      	cbnz	r2, 800f544 <_realloc_r+0x24>
 800f538:	f7fb fe30 	bl	800b19c <_free_r>
 800f53c:	4625      	mov	r5, r4
 800f53e:	4628      	mov	r0, r5
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	f000 f8fa 	bl	800f73c <_malloc_usable_size_r>
 800f548:	4284      	cmp	r4, r0
 800f54a:	4607      	mov	r7, r0
 800f54c:	d802      	bhi.n	800f554 <_realloc_r+0x34>
 800f54e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f552:	d812      	bhi.n	800f57a <_realloc_r+0x5a>
 800f554:	4621      	mov	r1, r4
 800f556:	4640      	mov	r0, r8
 800f558:	f7fb fe8c 	bl	800b274 <_malloc_r>
 800f55c:	4605      	mov	r5, r0
 800f55e:	2800      	cmp	r0, #0
 800f560:	d0ed      	beq.n	800f53e <_realloc_r+0x1e>
 800f562:	42bc      	cmp	r4, r7
 800f564:	4622      	mov	r2, r4
 800f566:	4631      	mov	r1, r6
 800f568:	bf28      	it	cs
 800f56a:	463a      	movcs	r2, r7
 800f56c:	f7fb fe00 	bl	800b170 <memcpy>
 800f570:	4631      	mov	r1, r6
 800f572:	4640      	mov	r0, r8
 800f574:	f7fb fe12 	bl	800b19c <_free_r>
 800f578:	e7e1      	b.n	800f53e <_realloc_r+0x1e>
 800f57a:	4635      	mov	r5, r6
 800f57c:	e7df      	b.n	800f53e <_realloc_r+0x1e>

0800f57e <_raise_r>:
 800f57e:	291f      	cmp	r1, #31
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4604      	mov	r4, r0
 800f584:	460d      	mov	r5, r1
 800f586:	d904      	bls.n	800f592 <_raise_r+0x14>
 800f588:	2316      	movs	r3, #22
 800f58a:	6003      	str	r3, [r0, #0]
 800f58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f590:	bd38      	pop	{r3, r4, r5, pc}
 800f592:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f594:	b112      	cbz	r2, 800f59c <_raise_r+0x1e>
 800f596:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f59a:	b94b      	cbnz	r3, 800f5b0 <_raise_r+0x32>
 800f59c:	4620      	mov	r0, r4
 800f59e:	f000 f831 	bl	800f604 <_getpid_r>
 800f5a2:	462a      	mov	r2, r5
 800f5a4:	4601      	mov	r1, r0
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5ac:	f000 b818 	b.w	800f5e0 <_kill_r>
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d00a      	beq.n	800f5ca <_raise_r+0x4c>
 800f5b4:	1c59      	adds	r1, r3, #1
 800f5b6:	d103      	bne.n	800f5c0 <_raise_r+0x42>
 800f5b8:	2316      	movs	r3, #22
 800f5ba:	6003      	str	r3, [r0, #0]
 800f5bc:	2001      	movs	r0, #1
 800f5be:	e7e7      	b.n	800f590 <_raise_r+0x12>
 800f5c0:	2400      	movs	r4, #0
 800f5c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	4798      	blx	r3
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	e7e0      	b.n	800f590 <_raise_r+0x12>
	...

0800f5d0 <raise>:
 800f5d0:	4b02      	ldr	r3, [pc, #8]	; (800f5dc <raise+0xc>)
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	6818      	ldr	r0, [r3, #0]
 800f5d6:	f7ff bfd2 	b.w	800f57e <_raise_r>
 800f5da:	bf00      	nop
 800f5dc:	20000024 	.word	0x20000024

0800f5e0 <_kill_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	4d07      	ldr	r5, [pc, #28]	; (800f600 <_kill_r+0x20>)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	602b      	str	r3, [r5, #0]
 800f5ee:	f7f4 f999 	bl	8003924 <_kill>
 800f5f2:	1c43      	adds	r3, r0, #1
 800f5f4:	d102      	bne.n	800f5fc <_kill_r+0x1c>
 800f5f6:	682b      	ldr	r3, [r5, #0]
 800f5f8:	b103      	cbz	r3, 800f5fc <_kill_r+0x1c>
 800f5fa:	6023      	str	r3, [r4, #0]
 800f5fc:	bd38      	pop	{r3, r4, r5, pc}
 800f5fe:	bf00      	nop
 800f600:	2000a604 	.word	0x2000a604

0800f604 <_getpid_r>:
 800f604:	f7f4 b986 	b.w	8003914 <_getpid>

0800f608 <__sread>:
 800f608:	b510      	push	{r4, lr}
 800f60a:	460c      	mov	r4, r1
 800f60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f610:	f000 f89c 	bl	800f74c <_read_r>
 800f614:	2800      	cmp	r0, #0
 800f616:	bfab      	itete	ge
 800f618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f61a:	89a3      	ldrhlt	r3, [r4, #12]
 800f61c:	181b      	addge	r3, r3, r0
 800f61e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f622:	bfac      	ite	ge
 800f624:	6563      	strge	r3, [r4, #84]	; 0x54
 800f626:	81a3      	strhlt	r3, [r4, #12]
 800f628:	bd10      	pop	{r4, pc}

0800f62a <__swrite>:
 800f62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	461f      	mov	r7, r3
 800f630:	898b      	ldrh	r3, [r1, #12]
 800f632:	05db      	lsls	r3, r3, #23
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	4616      	mov	r6, r2
 800f63a:	d505      	bpl.n	800f648 <__swrite+0x1e>
 800f63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f640:	2302      	movs	r3, #2
 800f642:	2200      	movs	r2, #0
 800f644:	f000 f868 	bl	800f718 <_lseek_r>
 800f648:	89a3      	ldrh	r3, [r4, #12]
 800f64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f64e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f652:	81a3      	strh	r3, [r4, #12]
 800f654:	4632      	mov	r2, r6
 800f656:	463b      	mov	r3, r7
 800f658:	4628      	mov	r0, r5
 800f65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f65e:	f000 b817 	b.w	800f690 <_write_r>

0800f662 <__sseek>:
 800f662:	b510      	push	{r4, lr}
 800f664:	460c      	mov	r4, r1
 800f666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f66a:	f000 f855 	bl	800f718 <_lseek_r>
 800f66e:	1c43      	adds	r3, r0, #1
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	bf15      	itete	ne
 800f674:	6560      	strne	r0, [r4, #84]	; 0x54
 800f676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f67a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f67e:	81a3      	strheq	r3, [r4, #12]
 800f680:	bf18      	it	ne
 800f682:	81a3      	strhne	r3, [r4, #12]
 800f684:	bd10      	pop	{r4, pc}

0800f686 <__sclose>:
 800f686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68a:	f000 b813 	b.w	800f6b4 <_close_r>
	...

0800f690 <_write_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4d07      	ldr	r5, [pc, #28]	; (800f6b0 <_write_r+0x20>)
 800f694:	4604      	mov	r4, r0
 800f696:	4608      	mov	r0, r1
 800f698:	4611      	mov	r1, r2
 800f69a:	2200      	movs	r2, #0
 800f69c:	602a      	str	r2, [r5, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	f7f4 f977 	bl	8003992 <_write>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_write_r+0x1e>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_write_r+0x1e>
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	2000a604 	.word	0x2000a604

0800f6b4 <_close_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d06      	ldr	r5, [pc, #24]	; (800f6d0 <_close_r+0x1c>)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	4608      	mov	r0, r1
 800f6be:	602b      	str	r3, [r5, #0]
 800f6c0:	f7f4 f983 	bl	80039ca <_close>
 800f6c4:	1c43      	adds	r3, r0, #1
 800f6c6:	d102      	bne.n	800f6ce <_close_r+0x1a>
 800f6c8:	682b      	ldr	r3, [r5, #0]
 800f6ca:	b103      	cbz	r3, 800f6ce <_close_r+0x1a>
 800f6cc:	6023      	str	r3, [r4, #0]
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	2000a604 	.word	0x2000a604

0800f6d4 <_fstat_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4d07      	ldr	r5, [pc, #28]	; (800f6f4 <_fstat_r+0x20>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	4611      	mov	r1, r2
 800f6e0:	602b      	str	r3, [r5, #0]
 800f6e2:	f7f4 f97e 	bl	80039e2 <_fstat>
 800f6e6:	1c43      	adds	r3, r0, #1
 800f6e8:	d102      	bne.n	800f6f0 <_fstat_r+0x1c>
 800f6ea:	682b      	ldr	r3, [r5, #0]
 800f6ec:	b103      	cbz	r3, 800f6f0 <_fstat_r+0x1c>
 800f6ee:	6023      	str	r3, [r4, #0]
 800f6f0:	bd38      	pop	{r3, r4, r5, pc}
 800f6f2:	bf00      	nop
 800f6f4:	2000a604 	.word	0x2000a604

0800f6f8 <_isatty_r>:
 800f6f8:	b538      	push	{r3, r4, r5, lr}
 800f6fa:	4d06      	ldr	r5, [pc, #24]	; (800f714 <_isatty_r+0x1c>)
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	4604      	mov	r4, r0
 800f700:	4608      	mov	r0, r1
 800f702:	602b      	str	r3, [r5, #0]
 800f704:	f7f4 f97d 	bl	8003a02 <_isatty>
 800f708:	1c43      	adds	r3, r0, #1
 800f70a:	d102      	bne.n	800f712 <_isatty_r+0x1a>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	b103      	cbz	r3, 800f712 <_isatty_r+0x1a>
 800f710:	6023      	str	r3, [r4, #0]
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	2000a604 	.word	0x2000a604

0800f718 <_lseek_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d07      	ldr	r5, [pc, #28]	; (800f738 <_lseek_r+0x20>)
 800f71c:	4604      	mov	r4, r0
 800f71e:	4608      	mov	r0, r1
 800f720:	4611      	mov	r1, r2
 800f722:	2200      	movs	r2, #0
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	f7f4 f976 	bl	8003a18 <_lseek>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d102      	bne.n	800f736 <_lseek_r+0x1e>
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	b103      	cbz	r3, 800f736 <_lseek_r+0x1e>
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	2000a604 	.word	0x2000a604

0800f73c <_malloc_usable_size_r>:
 800f73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f740:	1f18      	subs	r0, r3, #4
 800f742:	2b00      	cmp	r3, #0
 800f744:	bfbc      	itt	lt
 800f746:	580b      	ldrlt	r3, [r1, r0]
 800f748:	18c0      	addlt	r0, r0, r3
 800f74a:	4770      	bx	lr

0800f74c <_read_r>:
 800f74c:	b538      	push	{r3, r4, r5, lr}
 800f74e:	4d07      	ldr	r5, [pc, #28]	; (800f76c <_read_r+0x20>)
 800f750:	4604      	mov	r4, r0
 800f752:	4608      	mov	r0, r1
 800f754:	4611      	mov	r1, r2
 800f756:	2200      	movs	r2, #0
 800f758:	602a      	str	r2, [r5, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	f7f4 f8fc 	bl	8003958 <_read>
 800f760:	1c43      	adds	r3, r0, #1
 800f762:	d102      	bne.n	800f76a <_read_r+0x1e>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	b103      	cbz	r3, 800f76a <_read_r+0x1e>
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	bd38      	pop	{r3, r4, r5, pc}
 800f76c:	2000a604 	.word	0x2000a604

0800f770 <_init>:
 800f770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f772:	bf00      	nop
 800f774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f776:	bc08      	pop	{r3}
 800f778:	469e      	mov	lr, r3
 800f77a:	4770      	bx	lr

0800f77c <_fini>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	bf00      	nop
 800f780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f782:	bc08      	pop	{r3}
 800f784:	469e      	mov	lr, r3
 800f786:	4770      	bx	lr
