
SD_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b84  08006b84  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006b84  08006b84  00016b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b8c  08006b8c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023c0  20000024  08006bb8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  08006bb8  000223e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3cf  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffa  00000000  00000000  0002b423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002d420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205c2  00000000  00000000  0002e788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f060  00000000  00000000  0004ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba9f1  00000000  00000000  0005ddaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011879b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000293c  00000000  00000000  001187ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006694 	.word	0x08006694

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08006694 	.word	0x08006694

08000204 <__aeabi_dmul>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000212:	bf1d      	ittte	ne
 8000214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000218:	ea94 0f0c 	teqne	r4, ip
 800021c:	ea95 0f0c 	teqne	r5, ip
 8000220:	f000 f8de 	bleq	80003e0 <__aeabi_dmul+0x1dc>
 8000224:	442c      	add	r4, r5
 8000226:	ea81 0603 	eor.w	r6, r1, r3
 800022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000236:	bf18      	it	ne
 8000238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800023c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000244:	d038      	beq.n	80002b8 <__aeabi_dmul+0xb4>
 8000246:	fba0 ce02 	umull	ip, lr, r0, r2
 800024a:	f04f 0500 	mov.w	r5, #0
 800024e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000256:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025a:	f04f 0600 	mov.w	r6, #0
 800025e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000262:	f09c 0f00 	teq	ip, #0
 8000266:	bf18      	it	ne
 8000268:	f04e 0e01 	orrne.w	lr, lr, #1
 800026c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000278:	d204      	bcs.n	8000284 <__aeabi_dmul+0x80>
 800027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027e:	416d      	adcs	r5, r5
 8000280:	eb46 0606 	adc.w	r6, r6, r6
 8000284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800029c:	bf88      	it	hi
 800029e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a2:	d81e      	bhi.n	80002e2 <__aeabi_dmul+0xde>
 80002a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002bc:	ea46 0101 	orr.w	r1, r6, r1
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	ea81 0103 	eor.w	r1, r1, r3
 80002c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002cc:	bfc2      	ittt	gt
 80002ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	popgt	{r4, r5, r6, pc}
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f04f 0e00 	mov.w	lr, #0
 80002e0:	3c01      	subs	r4, #1
 80002e2:	f300 80ab 	bgt.w	800043c <__aeabi_dmul+0x238>
 80002e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ea:	bfde      	ittt	le
 80002ec:	2000      	movle	r0, #0
 80002ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f2:	bd70      	pople	{r4, r5, r6, pc}
 80002f4:	f1c4 0400 	rsb	r4, r4, #0
 80002f8:	3c20      	subs	r4, #32
 80002fa:	da35      	bge.n	8000368 <__aeabi_dmul+0x164>
 80002fc:	340c      	adds	r4, #12
 80002fe:	dc1b      	bgt.n	8000338 <__aeabi_dmul+0x134>
 8000300:	f104 0414 	add.w	r4, r4, #20
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f305 	lsl.w	r3, r0, r5
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f205 	lsl.w	r2, r1, r5
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800031c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	fa21 f604 	lsr.w	r6, r1, r4
 8000328:	eb42 0106 	adc.w	r1, r2, r6
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 040c 	rsb	r4, r4, #12
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f304 	lsl.w	r3, r0, r4
 8000344:	fa20 f005 	lsr.w	r0, r0, r5
 8000348:	fa01 f204 	lsl.w	r2, r1, r4
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	f141 0100 	adc.w	r1, r1, #0
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f205 	lsl.w	r2, r0, r5
 8000370:	ea4e 0e02 	orr.w	lr, lr, r2
 8000374:	fa20 f304 	lsr.w	r3, r0, r4
 8000378:	fa01 f205 	lsl.w	r2, r1, r5
 800037c:	ea43 0302 	orr.w	r3, r3, r2
 8000380:	fa21 f004 	lsr.w	r0, r1, r4
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	fa21 f204 	lsr.w	r2, r1, r4
 800038c:	ea20 0002 	bic.w	r0, r0, r2
 8000390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f094 0f00 	teq	r4, #0
 80003a4:	d10f      	bne.n	80003c6 <__aeabi_dmul+0x1c2>
 80003a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003aa:	0040      	lsls	r0, r0, #1
 80003ac:	eb41 0101 	adc.w	r1, r1, r1
 80003b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b4:	bf08      	it	eq
 80003b6:	3c01      	subeq	r4, #1
 80003b8:	d0f7      	beq.n	80003aa <__aeabi_dmul+0x1a6>
 80003ba:	ea41 0106 	orr.w	r1, r1, r6
 80003be:	f095 0f00 	teq	r5, #0
 80003c2:	bf18      	it	ne
 80003c4:	4770      	bxne	lr
 80003c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	eb43 0303 	adc.w	r3, r3, r3
 80003d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3d01      	subeq	r5, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1c6>
 80003da:	ea43 0306 	orr.w	r3, r3, r6
 80003de:	4770      	bx	lr
 80003e0:	ea94 0f0c 	teq	r4, ip
 80003e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e8:	bf18      	it	ne
 80003ea:	ea95 0f0c 	teqne	r5, ip
 80003ee:	d00c      	beq.n	800040a <__aeabi_dmul+0x206>
 80003f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f4:	bf18      	it	ne
 80003f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fa:	d1d1      	bne.n	80003a0 <__aeabi_dmul+0x19c>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040e:	bf06      	itte	eq
 8000410:	4610      	moveq	r0, r2
 8000412:	4619      	moveq	r1, r3
 8000414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000418:	d019      	beq.n	800044e <__aeabi_dmul+0x24a>
 800041a:	ea94 0f0c 	teq	r4, ip
 800041e:	d102      	bne.n	8000426 <__aeabi_dmul+0x222>
 8000420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000424:	d113      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000426:	ea95 0f0c 	teq	r5, ip
 800042a:	d105      	bne.n	8000438 <__aeabi_dmul+0x234>
 800042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000430:	bf1c      	itt	ne
 8000432:	4610      	movne	r0, r2
 8000434:	4619      	movne	r1, r3
 8000436:	d10a      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd70      	pop	{r4, r5, r6, pc}
 800044e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000456:	bd70      	pop	{r4, r5, r6, pc}

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	; 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b974 	b.w	8000b10 <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	4604      	mov	r4, r0
 8000848:	468e      	mov	lr, r1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d14d      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084e:	428a      	cmp	r2, r1
 8000850:	4694      	mov	ip, r2
 8000852:	d969      	bls.n	8000928 <__udivmoddi4+0xe8>
 8000854:	fab2 f282 	clz	r2, r2
 8000858:	b152      	cbz	r2, 8000870 <__udivmoddi4+0x30>
 800085a:	fa01 f302 	lsl.w	r3, r1, r2
 800085e:	f1c2 0120 	rsb	r1, r2, #32
 8000862:	fa20 f101 	lsr.w	r1, r0, r1
 8000866:	fa0c fc02 	lsl.w	ip, ip, r2
 800086a:	ea41 0e03 	orr.w	lr, r1, r3
 800086e:	4094      	lsls	r4, r2
 8000870:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000874:	0c21      	lsrs	r1, r4, #16
 8000876:	fbbe f6f8 	udiv	r6, lr, r8
 800087a:	fa1f f78c 	uxth.w	r7, ip
 800087e:	fb08 e316 	mls	r3, r8, r6, lr
 8000882:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000886:	fb06 f107 	mul.w	r1, r6, r7
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f106 30ff 	add.w	r0, r6, #4294967295
 8000896:	f080 811f 	bcs.w	8000ad8 <__udivmoddi4+0x298>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 811c 	bls.w	8000ad8 <__udivmoddi4+0x298>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b2a4      	uxth	r4, r4
 80008a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ac:	fb08 3310 	mls	r3, r8, r0, r3
 80008b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008b4:	fb00 f707 	mul.w	r7, r0, r7
 80008b8:	42a7      	cmp	r7, r4
 80008ba:	d90a      	bls.n	80008d2 <__udivmoddi4+0x92>
 80008bc:	eb1c 0404 	adds.w	r4, ip, r4
 80008c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80008c4:	f080 810a 	bcs.w	8000adc <__udivmoddi4+0x29c>
 80008c8:	42a7      	cmp	r7, r4
 80008ca:	f240 8107 	bls.w	8000adc <__udivmoddi4+0x29c>
 80008ce:	4464      	add	r4, ip
 80008d0:	3802      	subs	r0, #2
 80008d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008d6:	1be4      	subs	r4, r4, r7
 80008d8:	2600      	movs	r6, #0
 80008da:	b11d      	cbz	r5, 80008e4 <__udivmoddi4+0xa4>
 80008dc:	40d4      	lsrs	r4, r2
 80008de:	2300      	movs	r3, #0
 80008e0:	e9c5 4300 	strd	r4, r3, [r5]
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d909      	bls.n	8000902 <__udivmoddi4+0xc2>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	f000 80ef 	beq.w	8000ad2 <__udivmoddi4+0x292>
 80008f4:	2600      	movs	r6, #0
 80008f6:	e9c5 0100 	strd	r0, r1, [r5]
 80008fa:	4630      	mov	r0, r6
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	fab3 f683 	clz	r6, r3
 8000906:	2e00      	cmp	r6, #0
 8000908:	d14a      	bne.n	80009a0 <__udivmoddi4+0x160>
 800090a:	428b      	cmp	r3, r1
 800090c:	d302      	bcc.n	8000914 <__udivmoddi4+0xd4>
 800090e:	4282      	cmp	r2, r0
 8000910:	f200 80f9 	bhi.w	8000b06 <__udivmoddi4+0x2c6>
 8000914:	1a84      	subs	r4, r0, r2
 8000916:	eb61 0303 	sbc.w	r3, r1, r3
 800091a:	2001      	movs	r0, #1
 800091c:	469e      	mov	lr, r3
 800091e:	2d00      	cmp	r5, #0
 8000920:	d0e0      	beq.n	80008e4 <__udivmoddi4+0xa4>
 8000922:	e9c5 4e00 	strd	r4, lr, [r5]
 8000926:	e7dd      	b.n	80008e4 <__udivmoddi4+0xa4>
 8000928:	b902      	cbnz	r2, 800092c <__udivmoddi4+0xec>
 800092a:	deff      	udf	#255	; 0xff
 800092c:	fab2 f282 	clz	r2, r2
 8000930:	2a00      	cmp	r2, #0
 8000932:	f040 8092 	bne.w	8000a5a <__udivmoddi4+0x21a>
 8000936:	eba1 010c 	sub.w	r1, r1, ip
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f fe8c 	uxth.w	lr, ip
 8000942:	2601      	movs	r6, #1
 8000944:	0c20      	lsrs	r0, r4, #16
 8000946:	fbb1 f3f7 	udiv	r3, r1, r7
 800094a:	fb07 1113 	mls	r1, r7, r3, r1
 800094e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000952:	fb0e f003 	mul.w	r0, lr, r3
 8000956:	4288      	cmp	r0, r1
 8000958:	d908      	bls.n	800096c <__udivmoddi4+0x12c>
 800095a:	eb1c 0101 	adds.w	r1, ip, r1
 800095e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000962:	d202      	bcs.n	800096a <__udivmoddi4+0x12a>
 8000964:	4288      	cmp	r0, r1
 8000966:	f200 80cb 	bhi.w	8000b00 <__udivmoddi4+0x2c0>
 800096a:	4643      	mov	r3, r8
 800096c:	1a09      	subs	r1, r1, r0
 800096e:	b2a4      	uxth	r4, r4
 8000970:	fbb1 f0f7 	udiv	r0, r1, r7
 8000974:	fb07 1110 	mls	r1, r7, r0, r1
 8000978:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800097c:	fb0e fe00 	mul.w	lr, lr, r0
 8000980:	45a6      	cmp	lr, r4
 8000982:	d908      	bls.n	8000996 <__udivmoddi4+0x156>
 8000984:	eb1c 0404 	adds.w	r4, ip, r4
 8000988:	f100 31ff 	add.w	r1, r0, #4294967295
 800098c:	d202      	bcs.n	8000994 <__udivmoddi4+0x154>
 800098e:	45a6      	cmp	lr, r4
 8000990:	f200 80bb 	bhi.w	8000b0a <__udivmoddi4+0x2ca>
 8000994:	4608      	mov	r0, r1
 8000996:	eba4 040e 	sub.w	r4, r4, lr
 800099a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800099e:	e79c      	b.n	80008da <__udivmoddi4+0x9a>
 80009a0:	f1c6 0720 	rsb	r7, r6, #32
 80009a4:	40b3      	lsls	r3, r6
 80009a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ae:	fa20 f407 	lsr.w	r4, r0, r7
 80009b2:	fa01 f306 	lsl.w	r3, r1, r6
 80009b6:	431c      	orrs	r4, r3
 80009b8:	40f9      	lsrs	r1, r7
 80009ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009be:	fa00 f306 	lsl.w	r3, r0, r6
 80009c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80009c6:	0c20      	lsrs	r0, r4, #16
 80009c8:	fa1f fe8c 	uxth.w	lr, ip
 80009cc:	fb09 1118 	mls	r1, r9, r8, r1
 80009d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d4:	fb08 f00e 	mul.w	r0, r8, lr
 80009d8:	4288      	cmp	r0, r1
 80009da:	fa02 f206 	lsl.w	r2, r2, r6
 80009de:	d90b      	bls.n	80009f8 <__udivmoddi4+0x1b8>
 80009e0:	eb1c 0101 	adds.w	r1, ip, r1
 80009e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80009e8:	f080 8088 	bcs.w	8000afc <__udivmoddi4+0x2bc>
 80009ec:	4288      	cmp	r0, r1
 80009ee:	f240 8085 	bls.w	8000afc <__udivmoddi4+0x2bc>
 80009f2:	f1a8 0802 	sub.w	r8, r8, #2
 80009f6:	4461      	add	r1, ip
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a00:	fb09 1110 	mls	r1, r9, r0, r1
 8000a04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a0c:	458e      	cmp	lr, r1
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x1e2>
 8000a10:	eb1c 0101 	adds.w	r1, ip, r1
 8000a14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a18:	d26c      	bcs.n	8000af4 <__udivmoddi4+0x2b4>
 8000a1a:	458e      	cmp	lr, r1
 8000a1c:	d96a      	bls.n	8000af4 <__udivmoddi4+0x2b4>
 8000a1e:	3802      	subs	r0, #2
 8000a20:	4461      	add	r1, ip
 8000a22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a26:	fba0 9402 	umull	r9, r4, r0, r2
 8000a2a:	eba1 010e 	sub.w	r1, r1, lr
 8000a2e:	42a1      	cmp	r1, r4
 8000a30:	46c8      	mov	r8, r9
 8000a32:	46a6      	mov	lr, r4
 8000a34:	d356      	bcc.n	8000ae4 <__udivmoddi4+0x2a4>
 8000a36:	d053      	beq.n	8000ae0 <__udivmoddi4+0x2a0>
 8000a38:	b15d      	cbz	r5, 8000a52 <__udivmoddi4+0x212>
 8000a3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000a3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000a42:	fa01 f707 	lsl.w	r7, r1, r7
 8000a46:	fa22 f306 	lsr.w	r3, r2, r6
 8000a4a:	40f1      	lsrs	r1, r6
 8000a4c:	431f      	orrs	r7, r3
 8000a4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000a52:	2600      	movs	r6, #0
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	f1c2 0320 	rsb	r3, r2, #32
 8000a5e:	40d8      	lsrs	r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	fa21 f303 	lsr.w	r3, r1, r3
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	4301      	orrs	r1, r0
 8000a6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a70:	fa1f fe8c 	uxth.w	lr, ip
 8000a74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a78:	fb07 3610 	mls	r6, r7, r0, r3
 8000a7c:	0c0b      	lsrs	r3, r1, #16
 8000a7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a82:	fb00 f60e 	mul.w	r6, r0, lr
 8000a86:	429e      	cmp	r6, r3
 8000a88:	fa04 f402 	lsl.w	r4, r4, r2
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x260>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a96:	d22f      	bcs.n	8000af8 <__udivmoddi4+0x2b8>
 8000a98:	429e      	cmp	r6, r3
 8000a9a:	d92d      	bls.n	8000af8 <__udivmoddi4+0x2b8>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	b289      	uxth	r1, r1
 8000aa4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aa8:	fb07 3316 	mls	r3, r7, r6, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x28a>
 8000ab8:	eb1c 0101 	adds.w	r1, ip, r1
 8000abc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ac0:	d216      	bcs.n	8000af0 <__udivmoddi4+0x2b0>
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d914      	bls.n	8000af0 <__udivmoddi4+0x2b0>
 8000ac6:	3e02      	subs	r6, #2
 8000ac8:	4461      	add	r1, ip
 8000aca:	1ac9      	subs	r1, r1, r3
 8000acc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ad0:	e738      	b.n	8000944 <__udivmoddi4+0x104>
 8000ad2:	462e      	mov	r6, r5
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e705      	b.n	80008e4 <__udivmoddi4+0xa4>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	e6e3      	b.n	80008a4 <__udivmoddi4+0x64>
 8000adc:	4618      	mov	r0, r3
 8000ade:	e6f8      	b.n	80008d2 <__udivmoddi4+0x92>
 8000ae0:	454b      	cmp	r3, r9
 8000ae2:	d2a9      	bcs.n	8000a38 <__udivmoddi4+0x1f8>
 8000ae4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ae8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aec:	3801      	subs	r0, #1
 8000aee:	e7a3      	b.n	8000a38 <__udivmoddi4+0x1f8>
 8000af0:	4646      	mov	r6, r8
 8000af2:	e7ea      	b.n	8000aca <__udivmoddi4+0x28a>
 8000af4:	4620      	mov	r0, r4
 8000af6:	e794      	b.n	8000a22 <__udivmoddi4+0x1e2>
 8000af8:	4640      	mov	r0, r8
 8000afa:	e7d1      	b.n	8000aa0 <__udivmoddi4+0x260>
 8000afc:	46d0      	mov	r8, sl
 8000afe:	e77b      	b.n	80009f8 <__udivmoddi4+0x1b8>
 8000b00:	3b02      	subs	r3, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	e732      	b.n	800096c <__udivmoddi4+0x12c>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e709      	b.n	800091e <__udivmoddi4+0xde>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	e742      	b.n	8000996 <__udivmoddi4+0x156>

08000b10 <__aeabi_idiv0>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <SELECT+0x18>)
 8000b1e:	f001 faeb 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f001 f862 	bl	8001bec <HAL_Delay>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2104      	movs	r1, #4
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <DESELECT+0x18>)
 8000b3a:	f001 fadd 	bl	80020f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f001 f854 	bl	8001bec <HAL_Delay>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b56:	bf00      	nop
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <SPI_TxByte+0x30>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d1f8      	bne.n	8000b58 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000b66:	1df9      	adds	r1, r7, #7
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <SPI_TxByte+0x30>)
 8000b6e:	f001 ffee 	bl	8002b4e <HAL_SPI_Transmit>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000044 	.word	0x20000044

08000b80 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b8c:	bf00      	nop
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <SPI_TxBuffer+0x30>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d1f8      	bne.n	8000b8e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <SPI_TxBuffer+0x30>)
 8000ba4:	f001 ffd3 	bl	8002b4e <HAL_SPI_Transmit>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000044 	.word	0x20000044

08000bb4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000bba:	23ff      	movs	r3, #255	; 0xff
 8000bbc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bbe:	bf00      	nop
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <SPI_RxByte+0x34>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d1f8      	bne.n	8000bc0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	1df9      	adds	r1, r7, #7
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <SPI_RxByte+0x34>)
 8000bda:	f002 f8f4 	bl	8002dc6 <HAL_SPI_TransmitReceive>

	return data;
 8000bde:	79bb      	ldrb	r3, [r7, #6]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000044 	.word	0x20000044

08000bec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000bf4:	f7ff ffde 	bl	8000bb4 <SPI_RxByte>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	701a      	strb	r2, [r3, #0]
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <SD_ReadyWait+0x30>)
 8000c10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c14:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c16:	f7ff ffcd 	bl	8000bb4 <SPI_RxByte>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2bff      	cmp	r3, #255	; 0xff
 8000c22:	d004      	beq.n	8000c2e <SD_ReadyWait+0x26>
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SD_ReadyWait+0x30>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f3      	bne.n	8000c16 <SD_ReadyWait+0xe>

	return res;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200021a2 	.word	0x200021a2

08000c3c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000c42:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c46:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000c48:	f7ff ff72 	bl	8000b30 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	e005      	b.n	8000c5e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	f7ff ff7a 	bl	8000b4c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	ddf6      	ble.n	8000c52 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000c64:	f7ff ff56 	bl	8000b14 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000c7c:	2395      	movs	r3, #149	; 0x95
 8000c7e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000c80:	463b      	mov	r3, r7
 8000c82:	2106      	movs	r1, #6
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff7b 	bl	8000b80 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c8a:	e002      	b.n	8000c92 <SD_PowerOn+0x56>
	{
		cnt--;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000c92:	f7ff ff8f 	bl	8000bb4 <SPI_RxByte>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d002      	beq.n	8000ca2 <SD_PowerOn+0x66>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f4      	bne.n	8000c8c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ca2:	f7ff ff45 	bl	8000b30 <DESELECT>
	SPI_TxByte(0XFF);
 8000ca6:	20ff      	movs	r0, #255	; 0xff
 8000ca8:	f7ff ff50 	bl	8000b4c <SPI_TxByte>

	PowerFlag = 1;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <SD_PowerOn+0x80>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000041 	.word	0x20000041

08000cc0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <SD_PowerOff+0x14>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	20000041 	.word	0x20000041

08000cd8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SD_CheckPower+0x14>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000041 	.word	0x20000041

08000cf0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <SD_RxDataBlock+0x5c>)
 8000cfc:	22c8      	movs	r2, #200	; 0xc8
 8000cfe:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d00:	f7ff ff58 	bl	8000bb4 <SPI_RxByte>
 8000d04:	4603      	mov	r3, r0
 8000d06:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	2bff      	cmp	r3, #255	; 0xff
 8000d0c:	d104      	bne.n	8000d18 <SD_RxDataBlock+0x28>
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <SD_RxDataBlock+0x5c>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f3      	bne.n	8000d00 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d1c:	d001      	beq.n	8000d22 <SD_RxDataBlock+0x32>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e00f      	b.n	8000d42 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <SPI_RxBytePtr>
	} while(len--);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	603a      	str	r2, [r7, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f4      	bne.n	8000d22 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000d38:	f7ff ff3c 	bl	8000bb4 <SPI_RxByte>
	SPI_RxByte();
 8000d3c:	f7ff ff3a 	bl	8000bb4 <SPI_RxByte>

	return TRUE;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200021a1 	.word	0x200021a1

08000d50 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000d60:	f7ff ff52 	bl	8000c08 <SD_ReadyWait>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d001      	beq.n	8000d6e <SD_TxDataBlock+0x1e>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e02f      	b.n	8000dce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff feeb 	bl	8000b4c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2bfd      	cmp	r3, #253	; 0xfd
 8000d7a:	d020      	beq.n	8000dbe <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fefd 	bl	8000b80 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000d86:	f7ff ff15 	bl	8000bb4 <SPI_RxByte>
		SPI_RxByte();
 8000d8a:	f7ff ff13 	bl	8000bb4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000d8e:	e00b      	b.n	8000da8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000d90:	f7ff ff10 	bl	8000bb4 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	d006      	beq.n	8000db0 <SD_TxDataBlock+0x60>
			i++;
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	3301      	adds	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	d9f0      	bls.n	8000d90 <SD_TxDataBlock+0x40>
 8000dae:	e000      	b.n	8000db2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000db0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000db2:	bf00      	nop
 8000db4:	f7ff fefe 	bl	8000bb4 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0fa      	beq.n	8000db4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f003 031f 	and.w	r3, r3, #31
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d101      	bne.n	8000dcc <SD_TxDataBlock+0x7c>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <SD_TxDataBlock+0x7e>

	return FALSE;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b084      	sub	sp, #16
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	6039      	str	r1, [r7, #0]
 8000de0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000de2:	f7ff ff11 	bl	8000c08 <SD_ReadyWait>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d001      	beq.n	8000df0 <SD_SendCmd+0x1a>
 8000dec:	23ff      	movs	r3, #255	; 0xff
 8000dee:	e042      	b.n	8000e76 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff feaa 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	0e1b      	lsrs	r3, r3, #24
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fea4 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe9e 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	0a1b      	lsrs	r3, r3, #8
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fe98 	bl	8000b4c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fe93 	bl	8000b4c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b40      	cmp	r3, #64	; 0x40
 8000e2a:	d102      	bne.n	8000e32 <SD_SendCmd+0x5c>
 8000e2c:	2395      	movs	r3, #149	; 0x95
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e007      	b.n	8000e42 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b48      	cmp	r3, #72	; 0x48
 8000e36:	d102      	bne.n	8000e3e <SD_SendCmd+0x68>
 8000e38:	2387      	movs	r3, #135	; 0x87
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <SD_SendCmd+0x6c>
	else crc = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe81 	bl	8000b4c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b4c      	cmp	r3, #76	; 0x4c
 8000e4e:	d101      	bne.n	8000e54 <SD_SendCmd+0x7e>
 8000e50:	f7ff feb0 	bl	8000bb4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000e54:	230a      	movs	r3, #10
 8000e56:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000e58:	f7ff feac 	bl	8000bb4 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da05      	bge.n	8000e74 <SD_SendCmd+0x9e>
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	73bb      	strb	r3, [r7, #14]
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f1      	bne.n	8000e58 <SD_SendCmd+0x82>

	return res;
 8000e74:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SD_disk_initialize+0x14>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e0d6      	b.n	8001042 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <SD_disk_initialize+0x1cc>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <SD_disk_initialize+0x2a>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <SD_disk_initialize+0x1cc>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	e0cb      	b.n	8001042 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000eaa:	f7ff fec7 	bl	8000c3c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000eae:	f7ff fe31 	bl	8000b14 <SELECT>

	/* check disk type */
	type = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2040      	movs	r0, #64	; 0x40
 8000eba:	f7ff ff8c 	bl	8000dd6 <SD_SendCmd>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	f040 80a6 	bne.w	8001012 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000ec6:	4b62      	ldr	r3, [pc, #392]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ecc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ece:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ed2:	2048      	movs	r0, #72	; 0x48
 8000ed4:	f7ff ff7f 	bl	8000dd6 <SD_SendCmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d158      	bne.n	8000f90 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e00c      	b.n	8000efe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000ee4:	7bfc      	ldrb	r4, [r7, #15]
 8000ee6:	f7ff fe65 	bl	8000bb4 <SPI_RxByte>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	f104 0310 	add.w	r3, r4, #16
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d9ef      	bls.n	8000ee4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f04:	7abb      	ldrb	r3, [r7, #10]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	f040 8083 	bne.w	8001012 <SD_disk_initialize+0x192>
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	2baa      	cmp	r3, #170	; 0xaa
 8000f10:	d17f      	bne.n	8001012 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f12:	2100      	movs	r1, #0
 8000f14:	2077      	movs	r0, #119	; 0x77
 8000f16:	f7ff ff5e 	bl	8000dd6 <SD_SendCmd>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d807      	bhi.n	8000f30 <SD_disk_initialize+0xb0>
 8000f20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f24:	2069      	movs	r0, #105	; 0x69
 8000f26:	f7ff ff56 	bl	8000dd6 <SD_SendCmd>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1eb      	bne.n	8000f12 <SD_disk_initialize+0x92>
 8000f3a:	e000      	b.n	8000f3e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f3c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d064      	beq.n	8001012 <SD_disk_initialize+0x192>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	207a      	movs	r0, #122	; 0x7a
 8000f4c:	f7ff ff43 	bl	8000dd6 <SD_SendCmd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d15d      	bne.n	8001012 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e00c      	b.n	8000f76 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000f5c:	7bfc      	ldrb	r4, [r7, #15]
 8000f5e:	f7ff fe29 	bl	8000bb4 <SPI_RxByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	f104 0310 	add.w	r3, r4, #16
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9ef      	bls.n	8000f5c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f7c:	7a3b      	ldrb	r3, [r7, #8]
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SD_disk_initialize+0x10a>
 8000f86:	230c      	movs	r3, #12
 8000f88:	e000      	b.n	8000f8c <SD_disk_initialize+0x10c>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e040      	b.n	8001012 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000f90:	2100      	movs	r1, #0
 8000f92:	2077      	movs	r0, #119	; 0x77
 8000f94:	f7ff ff1f 	bl	8000dd6 <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d808      	bhi.n	8000fb0 <SD_disk_initialize+0x130>
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2069      	movs	r0, #105	; 0x69
 8000fa2:	f7ff ff18 	bl	8000dd6 <SD_SendCmd>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d801      	bhi.n	8000fb0 <SD_disk_initialize+0x130>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e000      	b.n	8000fb2 <SD_disk_initialize+0x132>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d10e      	bne.n	8000fd8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2077      	movs	r0, #119	; 0x77
 8000fbe:	f7ff ff0a 	bl	8000dd6 <SD_SendCmd>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d80e      	bhi.n	8000fe6 <SD_disk_initialize+0x166>
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2069      	movs	r0, #105	; 0x69
 8000fcc:	f7ff ff03 	bl	8000dd6 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <SD_disk_initialize+0x166>
 8000fd6:	e00d      	b.n	8000ff4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2041      	movs	r0, #65	; 0x41
 8000fdc:	f7ff fefb 	bl	8000dd6 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e1      	bne.n	8000fb4 <SD_disk_initialize+0x134>
 8000ff0:	e000      	b.n	8000ff4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ff2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <SD_disk_initialize+0x1d0>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <SD_disk_initialize+0x18e>
 8000ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001002:	2050      	movs	r0, #80	; 0x50
 8001004:	f7ff fee7 	bl	8000dd6 <SD_SendCmd>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SD_disk_initialize+0x192>
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <SD_disk_initialize+0x1d4>)
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001018:	f7ff fd8a 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 800101c:	f7ff fdca 	bl	8000bb4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <SD_disk_initialize+0x1cc>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <SD_disk_initialize+0x1cc>)
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e001      	b.n	800103c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001038:	f7ff fe42 	bl	8000cc0 <SD_PowerOff>
	}

	return Stat;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <SD_disk_initialize+0x1cc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bd90      	pop	{r4, r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000
 8001050:	200021a1 	.word	0x200021a1
 8001054:	20000040 	.word	0x20000040

08001058 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_disk_status+0x14>
 8001068:	2301      	movs	r3, #1
 800106a:	e002      	b.n	8001072 <SD_disk_status+0x1a>
	return Stat;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SD_disk_status+0x28>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000

08001084 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <SD_disk_read+0x1c>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <SD_disk_read+0x20>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e051      	b.n	8001148 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <SD_disk_read+0xcc>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SD_disk_read+0x32>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e048      	b.n	8001148 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SD_disk_read+0xd0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <SD_disk_read+0x44>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	607b      	str	r3, [r7, #4]

	SELECT();
 80010c8:	f7ff fd24 	bl	8000b14 <SELECT>

	if (count == 1)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d111      	bne.n	80010f6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2051      	movs	r0, #81	; 0x51
 80010d6:	f7ff fe7e 	bl	8000dd6 <SD_SendCmd>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d129      	bne.n	8001134 <SD_disk_read+0xb0>
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f7ff fe03 	bl	8000cf0 <SD_RxDataBlock>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <SD_disk_read+0xb0>
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	e01e      	b.n	8001134 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	2052      	movs	r0, #82	; 0x52
 80010fa:	f7ff fe6c 	bl	8000dd6 <SD_SendCmd>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d117      	bne.n	8001134 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001108:	68b8      	ldr	r0, [r7, #8]
 800110a:	f7ff fdf1 	bl	8000cf0 <SD_RxDataBlock>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00a      	beq.n	800112a <SD_disk_read+0xa6>
				buff += 512;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800111a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ed      	bne.n	8001104 <SD_disk_read+0x80>
 8001128:	e000      	b.n	800112c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800112a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	204c      	movs	r0, #76	; 0x4c
 8001130:	f7ff fe51 	bl	8000dd6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001134:	f7ff fcfc 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 8001138:	f7ff fd3c 	bl	8000bb4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	b2db      	uxtb	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000040 	.word	0x20000040

08001158 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <SD_disk_write+0x1c>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <SD_disk_write+0x20>
 8001174:	2304      	movs	r3, #4
 8001176:	e06b      	b.n	8001250 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <SD_disk_write+0x100>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SD_disk_write+0x32>
 8001186:	2303      	movs	r3, #3
 8001188:	e062      	b.n	8001250 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <SD_disk_write+0x100>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SD_disk_write+0x44>
 8001198:	2302      	movs	r3, #2
 800119a:	e059      	b.n	8001250 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <SD_disk_write+0x104>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <SD_disk_write+0x56>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	607b      	str	r3, [r7, #4]

	SELECT();
 80011ae:	f7ff fcb1 	bl	8000b14 <SELECT>

	if (count == 1)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	2058      	movs	r0, #88	; 0x58
 80011bc:	f7ff fe0b 	bl	8000dd6 <SD_SendCmd>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d13a      	bne.n	800123c <SD_disk_write+0xe4>
 80011c6:	21fe      	movs	r1, #254	; 0xfe
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f7ff fdc1 	bl	8000d50 <SD_TxDataBlock>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d033      	beq.n	800123c <SD_disk_write+0xe4>
			count = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	e030      	b.n	800123c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <SD_disk_write+0x104>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2077      	movs	r0, #119	; 0x77
 80011ea:	f7ff fdf4 	bl	8000dd6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	2057      	movs	r0, #87	; 0x57
 80011f2:	f7ff fdf0 	bl	8000dd6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2059      	movs	r0, #89	; 0x59
 80011fa:	f7ff fdec 	bl	8000dd6 <SD_SendCmd>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001204:	21fc      	movs	r1, #252	; 0xfc
 8001206:	68b8      	ldr	r0, [r7, #8]
 8001208:	f7ff fda2 	bl	8000d50 <SD_TxDataBlock>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <SD_disk_write+0xd0>
				buff += 512;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001218:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1ee      	bne.n	8001204 <SD_disk_write+0xac>
 8001226:	e000      	b.n	800122a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001228:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800122a:	21fd      	movs	r1, #253	; 0xfd
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fd8f 	bl	8000d50 <SD_TxDataBlock>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <SD_disk_write+0xe4>
			{
				count = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800123c:	f7ff fc78 	bl	8000b30 <DESELECT>
	SPI_RxByte();
 8001240:	f7ff fcb8 	bl	8000bb4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000040 	.word	0x20000040

08001260 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08b      	sub	sp, #44	; 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	460b      	mov	r3, r1
 800126e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SD_disk_ioctl+0x1e>
 800127a:	2304      	movs	r3, #4
 800127c:	e115      	b.n	80014aa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d124      	bne.n	80012d4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d012      	beq.n	80012b8 <SD_disk_ioctl+0x58>
 8001292:	2b02      	cmp	r3, #2
 8001294:	dc1a      	bgt.n	80012cc <SD_disk_ioctl+0x6c>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <SD_disk_ioctl+0x40>
 800129a:	2b01      	cmp	r3, #1
 800129c:	d006      	beq.n	80012ac <SD_disk_ioctl+0x4c>
 800129e:	e015      	b.n	80012cc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80012a0:	f7ff fd0e 	bl	8000cc0 <SD_PowerOff>
			res = RES_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012aa:	e0fc      	b.n	80014a6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80012ac:	f7ff fcc6 	bl	8000c3c <SD_PowerOn>
			res = RES_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012b6:	e0f6      	b.n	80014a6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	1c5c      	adds	r4, r3, #1
 80012bc:	f7ff fd0c 	bl	8000cd8 <SD_CheckPower>
 80012c0:	4603      	mov	r3, r0
 80012c2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012ca:	e0ec      	b.n	80014a6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012d2:	e0e8      	b.n	80014a6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012d4:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <SD_disk_ioctl+0x254>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SD_disk_ioctl+0x86>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e0e1      	b.n	80014aa <SD_disk_ioctl+0x24a>

		SELECT();
 80012e6:	f7ff fc15 	bl	8000b14 <SELECT>

		switch (ctrl)
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	2b0d      	cmp	r3, #13
 80012ee:	f200 80cb 	bhi.w	8001488 <SD_disk_ioctl+0x228>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <SD_disk_ioctl+0x98>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	080013f3 	.word	0x080013f3
 80012fc:	08001331 	.word	0x08001331
 8001300:	080013e3 	.word	0x080013e3
 8001304:	08001489 	.word	0x08001489
 8001308:	08001489 	.word	0x08001489
 800130c:	08001489 	.word	0x08001489
 8001310:	08001489 	.word	0x08001489
 8001314:	08001489 	.word	0x08001489
 8001318:	08001489 	.word	0x08001489
 800131c:	08001489 	.word	0x08001489
 8001320:	08001489 	.word	0x08001489
 8001324:	08001405 	.word	0x08001405
 8001328:	08001429 	.word	0x08001429
 800132c:	0800144d 	.word	0x0800144d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001330:	2100      	movs	r1, #0
 8001332:	2049      	movs	r0, #73	; 0x49
 8001334:	f7ff fd4f 	bl	8000dd6 <SD_SendCmd>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80a8 	bne.w	8001490 <SD_disk_ioctl+0x230>
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	2110      	movs	r1, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcd2 	bl	8000cf0 <SD_RxDataBlock>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 809e 	beq.w	8001490 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	099b      	lsrs	r3, r3, #6
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d10e      	bne.n	800137c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800135e:	7d7b      	ldrb	r3, [r7, #21]
 8001360:	b29a      	uxth	r2, r3
 8001362:	7d3b      	ldrb	r3, [r7, #20]
 8001364:	b29b      	uxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001372:	8bfb      	ldrh	r3, [r7, #30]
 8001374:	029a      	lsls	r2, r3, #10
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	e02e      	b.n	80013da <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800137c:	7c7b      	ldrb	r3, [r7, #17]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	b2da      	uxtb	r2, r3
 8001384:	7dbb      	ldrb	r3, [r7, #22]
 8001386:	09db      	lsrs	r3, r3, #7
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b2da      	uxtb	r2, r3
 800138e:	7d7b      	ldrb	r3, [r7, #21]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0306 	and.w	r3, r3, #6
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3302      	adds	r3, #2
 80013a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013a4:	7d3b      	ldrb	r3, [r7, #20]
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	7cbb      	ldrb	r3, [r7, #18]
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80013cc:	8bfa      	ldrh	r2, [r7, #30]
 80013ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013d2:	3b09      	subs	r3, #9
 80013d4:	409a      	lsls	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80013e0:	e056      	b.n	8001490 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013e8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80013f0:	e055      	b.n	800149e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80013f2:	f7ff fc09 	bl	8000c08 <SD_ReadyWait>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d14b      	bne.n	8001494 <SD_disk_ioctl+0x234>
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001402:	e047      	b.n	8001494 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001404:	2100      	movs	r1, #0
 8001406:	2049      	movs	r0, #73	; 0x49
 8001408:	f7ff fce5 	bl	8000dd6 <SD_SendCmd>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d142      	bne.n	8001498 <SD_disk_ioctl+0x238>
 8001412:	2110      	movs	r1, #16
 8001414:	6a38      	ldr	r0, [r7, #32]
 8001416:	f7ff fc6b 	bl	8000cf0 <SD_RxDataBlock>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d03b      	beq.n	8001498 <SD_disk_ioctl+0x238>
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001426:	e037      	b.n	8001498 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001428:	2100      	movs	r1, #0
 800142a:	204a      	movs	r0, #74	; 0x4a
 800142c:	f7ff fcd3 	bl	8000dd6 <SD_SendCmd>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d132      	bne.n	800149c <SD_disk_ioctl+0x23c>
 8001436:	2110      	movs	r1, #16
 8001438:	6a38      	ldr	r0, [r7, #32]
 800143a:	f7ff fc59 	bl	8000cf0 <SD_RxDataBlock>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d02b      	beq.n	800149c <SD_disk_ioctl+0x23c>
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800144a:	e027      	b.n	800149c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800144c:	2100      	movs	r1, #0
 800144e:	207a      	movs	r0, #122	; 0x7a
 8001450:	f7ff fcc1 	bl	8000dd6 <SD_SendCmd>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800145a:	2300      	movs	r3, #0
 800145c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001460:	e00b      	b.n	800147a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001462:	6a3c      	ldr	r4, [r7, #32]
 8001464:	1c63      	adds	r3, r4, #1
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	f7ff fba4 	bl	8000bb4 <SPI_RxByte>
 800146c:	4603      	mov	r3, r0
 800146e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001474:	3301      	adds	r3, #1
 8001476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800147a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800147e:	2b03      	cmp	r3, #3
 8001480:	d9ef      	bls.n	8001462 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001488:	2304      	movs	r3, #4
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800148e:	e006      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001490:	bf00      	nop
 8001492:	e004      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001494:	bf00      	nop
 8001496:	e002      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 8001498:	bf00      	nop
 800149a:	e000      	b.n	800149e <SD_disk_ioctl+0x23e>
			break;
 800149c:	bf00      	nop
		}

		DESELECT();
 800149e:	f7ff fb47 	bl	8000b30 <DESELECT>
		SPI_RxByte();
 80014a2:	f7ff fb87 	bl	8000bb4 <SPI_RxByte>
	}

	return res;
 80014a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	372c      	adds	r7, #44	; 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd90      	pop	{r4, r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000000 	.word	0x20000000

080014b8 <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int i=0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80014c4:	e002      	b.n	80014cc <bufsize+0x14>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f6      	bne.n	80014c6 <bufsize+0xe>
	return i;
 80014d8:	68fb      	ldr	r3, [r7, #12]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <clear_buffer>:

void clear_buffer (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	e007      	b.n	8001504 <clear_buffer+0x1c>
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <clear_buffer+0x30>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b7f      	cmp	r3, #127	; 0x7f
 8001508:	ddf4      	ble.n	80014f4 <clear_buffer+0xc>
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	20002120 	.word	0x20002120

0800151c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001520:	f000 faf2 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001524:	f000 f8c0 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001528:	f000 f952 	bl	80017d0 <MX_GPIO_Init>
  MX_FATFS_Init();
 800152c:	f001 feb8 	bl	80032a0 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001530:	f000 f918 	bl	8001764 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	484c      	ldr	r0, [pc, #304]	; (8001668 <main+0x14c>)
 8001538:	f000 fdf7 	bl	800212a <HAL_GPIO_TogglePin>
  HAL_Delay(1000);
 800153c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001540:	f000 fb54 	bl	8001bec <HAL_Delay>
  HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	4848      	ldr	r0, [pc, #288]	; (8001668 <main+0x14c>)
 8001548:	f000 fdef 	bl	800212a <HAL_GPIO_TogglePin>

  fresult = f_mount(&fs,"/",1);
 800154c:	2201      	movs	r2, #1
 800154e:	4947      	ldr	r1, [pc, #284]	; (800166c <main+0x150>)
 8001550:	4847      	ldr	r0, [pc, #284]	; (8001670 <main+0x154>)
 8001552:	f004 f8ef 	bl	8005734 <f_mount>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b46      	ldr	r3, [pc, #280]	; (8001674 <main+0x158>)
 800155c:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 800155e:	4b45      	ldr	r3, [pc, #276]	; (8001674 <main+0x158>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <main+0x4e>
	  Error_Handler();
 8001566:	f000 f9bb 	bl	80018e0 <Error_Handler>

  /*************** Card capacity details ********************/
  /* Check free space */
  f_getfree("", &fre_clust, &pfs);
 800156a:	4a43      	ldr	r2, [pc, #268]	; (8001678 <main+0x15c>)
 800156c:	4943      	ldr	r1, [pc, #268]	; (800167c <main+0x160>)
 800156e:	4844      	ldr	r0, [pc, #272]	; (8001680 <main+0x164>)
 8001570:	f004 fe8d 	bl	800628e <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <main+0x15c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b02      	subs	r3, #2
 800157c:	4a3e      	ldr	r2, [pc, #248]	; (8001678 <main+0x15c>)
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	8952      	ldrh	r2, [r2, #10]
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f8a8 	bl	80006dc <__aeabi_ui2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <main+0x168>)
 8001592:	f7fe fe37 	bl	8000204 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff f917 	bl	80007d0 <__aeabi_d2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a38      	ldr	r2, [pc, #224]	; (8001688 <main+0x16c>)
 80015a6:	6013      	str	r3, [r2, #0]

  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <main+0x15c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	895b      	ldrh	r3, [r3, #10]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <main+0x160>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f88f 	bl	80006dc <__aeabi_ui2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <main+0x168>)
 80015c4:	f7fe fe1e 	bl	8000204 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff f8fe 	bl	80007d0 <__aeabi_d2uiz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a2d      	ldr	r2, [pc, #180]	; (800168c <main+0x170>)
 80015d8:	6013      	str	r3, [r2, #0]


  /* Create second file with read write access and open it */
  fresult = f_open(&fil, "SAC_SD_Valid.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80015da:	220a      	movs	r2, #10
 80015dc:	492c      	ldr	r1, [pc, #176]	; (8001690 <main+0x174>)
 80015de:	482d      	ldr	r0, [pc, #180]	; (8001694 <main+0x178>)
 80015e0:	f004 f8ee 	bl	80057c0 <f_open>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <main+0x158>)
 80015ea:	701a      	strb	r2, [r3, #0]

  /* Writing text */
	strcpy (buffer, "This a test for the SD card in SAC\n");
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <main+0x17c>)
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <main+0x180>)
 80015f0:	4614      	mov	r4, r2
 80015f2:	461d      	mov	r5, r3
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	6023      	str	r3, [r4, #0]

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001600:	4825      	ldr	r0, [pc, #148]	; (8001698 <main+0x17c>)
 8001602:	f7ff ff59 	bl	80014b8 <bufsize>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <main+0x184>)
 800160c:	4922      	ldr	r1, [pc, #136]	; (8001698 <main+0x17c>)
 800160e:	4821      	ldr	r0, [pc, #132]	; (8001694 <main+0x178>)
 8001610:	f004 fc01 	bl	8005e16 <f_write>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <main+0x158>)
 800161a:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&fil);
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <main+0x178>)
 800161e:	f004 fe0c 	bl	800623a <f_close>



	// clearing buffer to show that result obtained is from the file
	clear_buffer();
 8001622:	f7ff ff61 	bl	80014e8 <clear_buffer>

	/* Open second file to read */
	fresult = f_open(&fil, "SAC_SD_Valid.txt", FA_READ);
 8001626:	2201      	movs	r2, #1
 8001628:	4919      	ldr	r1, [pc, #100]	; (8001690 <main+0x174>)
 800162a:	481a      	ldr	r0, [pc, #104]	; (8001694 <main+0x178>)
 800162c:	f004 f8c8 	bl	80057c0 <f_open>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <main+0x158>)
 8001636:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <main+0x158>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <main+0x128>
		Error_Handler();
 8001640:	f000 f94e 	bl	80018e0 <Error_Handler>

	/* Read data from the file
	 * Please see the function details for the arguments */
	f_read (&fil, buffer, f_size(&fil), &br);
 8001644:	4b13      	ldr	r3, [pc, #76]	; (8001694 <main+0x178>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <main+0x188>)
 800164a:	4913      	ldr	r1, [pc, #76]	; (8001698 <main+0x17c>)
 800164c:	4811      	ldr	r0, [pc, #68]	; (8001694 <main+0x178>)
 800164e:	f004 fa83 	bl	8005b58 <f_read>

	/* Close file */
	f_close(&fil);
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <main+0x178>)
 8001654:	f004 fdf1 	bl	800623a <f_close>

    clear_buffer();
 8001658:	f7ff ff46 	bl	80014e8 <clear_buffer>
    HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	4802      	ldr	r0, [pc, #8]	; (8001668 <main+0x14c>)
 8001660:	f000 fd63 	bl	800212a <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001664:	e7fe      	b.n	8001664 <main+0x148>
 8001666:	bf00      	nop
 8001668:	40020800 	.word	0x40020800
 800166c:	080066ac 	.word	0x080066ac
 8001670:	2000009c 	.word	0x2000009c
 8001674:	20002104 	.word	0x20002104
 8001678:	20002110 	.word	0x20002110
 800167c:	20002114 	.word	0x20002114
 8001680:	080066b0 	.word	0x080066b0
 8001684:	3fe00000 	.word	0x3fe00000
 8001688:	20002118 	.word	0x20002118
 800168c:	2000211c 	.word	0x2000211c
 8001690:	080066b4 	.word	0x080066b4
 8001694:	200010d4 	.word	0x200010d4
 8001698:	20002120 	.word	0x20002120
 800169c:	080066c8 	.word	0x080066c8
 80016a0:	2000210c 	.word	0x2000210c
 80016a4:	20002108 	.word	0x20002108

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2234      	movs	r2, #52	; 0x34
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 ffe4 	bl	8006684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <SystemClock_Config+0xb4>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <SystemClock_Config+0xb4>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <SystemClock_Config+0xb4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	2300      	movs	r3, #0
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <SystemClock_Config+0xb8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <SystemClock_Config+0xb8>)
 80016f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <SystemClock_Config+0xb8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001704:	2302      	movs	r3, #2
 8001706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170c:	2310      	movs	r3, #16
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4618      	mov	r0, r3
 800171a:	f000 ff0b 	bl	8002534 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001724:	f000 f8dc 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	230f      	movs	r3, #15
 800172a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fd0c 	bl	8002160 <HAL_RCC_ClockConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800174e:	f000 f8c7 	bl	80018e0 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	3750      	adds	r7, #80	; 0x50
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000

08001764 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI3_Init+0x64>)
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_SPI3_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI3_Init+0x64>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI3_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI3_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI3_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI3_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI3_Init+0x64>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI3_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_SPI3_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI3_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_SPI3_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI3_Init+0x64>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_SPI3_Init+0x64>)
 80017b6:	f001 f941 	bl	8002a3c <HAL_SPI_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017c0:	f000 f88e 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000044 	.word	0x20000044
 80017cc:	40003c00 	.word	0x40003c00

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <MX_GPIO_Init+0x100>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <MX_GPIO_Init+0x100>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <MX_GPIO_Init+0x100>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <MX_GPIO_Init+0x100>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a2a      	ldr	r2, [pc, #168]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_GPIO_Init+0x100>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_GPIO_Init+0x100>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_TAS_GPIO_Port, uSD_CS_TAS_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	2110      	movs	r1, #16
 800185a:	481e      	ldr	r0, [pc, #120]	; (80018d4 <MX_GPIO_Init+0x104>)
 800185c:	f000 fc4c 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_L1_GPIO_Port, Status_L1_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	481c      	ldr	r0, [pc, #112]	; (80018d8 <MX_GPIO_Init+0x108>)
 8001866:	f000 fc47 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(uSD_CS_SAC_GPIO_Port, uSD_CS_SAC_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2104      	movs	r1, #4
 800186e:	481b      	ldr	r0, [pc, #108]	; (80018dc <MX_GPIO_Init+0x10c>)
 8001870:	f000 fc42 	bl	80020f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_CS_TAS_Pin */
  GPIO_InitStruct.Pin = uSD_CS_TAS_Pin;
 8001874:	2310      	movs	r3, #16
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_TAS_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4812      	ldr	r0, [pc, #72]	; (80018d4 <MX_GPIO_Init+0x104>)
 800188c:	f000 fab8 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Status_L1_Pin */
  GPIO_InitStruct.Pin = Status_L1_Pin;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Status_L1_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <MX_GPIO_Init+0x108>)
 80018a8:	f000 faaa 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CS_SAC_Pin */
  GPIO_InitStruct.Pin = uSD_CS_SAC_Pin;
 80018ac:	2304      	movs	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uSD_CS_SAC_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_GPIO_Init+0x10c>)
 80018c4:	f000 fa9c 	bl	8001e00 <HAL_GPIO_Init>

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_SPI_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12c      	bne.n	80019b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001996:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a8:	2306      	movs	r3, #6
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 80019b4:	f000 fa24 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40003c00 	.word	0x40003c00
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800

080019cc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <SDTimer_Handler+0x40>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <SDTimer_Handler+0x1c>
    Timer1--;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <SDTimer_Handler+0x40>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <SDTimer_Handler+0x40>)
 80019e6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <SDTimer_Handler+0x44>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <SDTimer_Handler+0x34>
    Timer2--;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <SDTimer_Handler+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SDTimer_Handler+0x44>)
 80019fe:	701a      	strb	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200021a1 	.word	0x200021a1
 8001a10:	200021a2 	.word	0x200021a2

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <SysTick_Handler+0x30>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <SysTick_Handler+0x30>)
 8001a6c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <SysTick_Handler+0x30>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d904      	bls.n	8001a82 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SysTick_Handler+0x30>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001a7e:	f7ff ffa5 	bl	80019cc <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f893 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200021a0 	.word	0x200021a0

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ade:	f7ff ffd7 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f004 fdab 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fd19 	bl	800151c <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001aec:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001af8:	08006b94 	.word	0x08006b94
  ldr r2, =_sbss
 8001afc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001b00:	200023e4 	.word	0x200023e4

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f931 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fed6 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f93b 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f000 f911 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	200021a4 	.word	0x200021a4

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200021a4 	.word	0x200021a4

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffde 	bl	8001bd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff47 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff5c 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffb0 	bl	8001d54 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	; 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	e153      	b.n	80020c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	f040 8142 	bne.w	80020be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d005      	beq.n	8001e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d130      	bne.n	8001eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 0201 	and.w	r2, r3, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d017      	beq.n	8001ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d123      	bne.n	8001f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	08da      	lsrs	r2, r3, #3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3208      	adds	r2, #8
 8001f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 809c 	beq.w	80020be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a53      	ldr	r2, [pc, #332]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa2:	4a4f      	ldr	r2, [pc, #316]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x1f6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a45      	ldr	r2, [pc, #276]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x1f2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a44      	ldr	r2, [pc, #272]	; (80020ec <HAL_GPIO_Init+0x2ec>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a43      	ldr	r2, [pc, #268]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x1ea>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002008:	4935      	ldr	r1, [pc, #212]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203a:	4a2e      	ldr	r2, [pc, #184]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002064:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800208e:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3301      	adds	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	f67f aea8 	bls.w	8001e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	40020400 	.word	0x40020400
 80020ec:	40020800 	.word	0x40020800
 80020f0:	40020c00 	.word	0x40020c00
 80020f4:	40013c00 	.word	0x40013c00

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4013      	ands	r3, r2
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43d9      	mvns	r1, r3
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	400b      	ands	r3, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0cc      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d90c      	bls.n	800219c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d001      	beq.n	800219c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0b8      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b4:	4b59      	ldr	r3, [pc, #356]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021cc:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	494d      	ldr	r1, [pc, #308]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d044      	beq.n	8002280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d119      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e067      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4934      	ldr	r1, [pc, #208]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002250:	f7ff fcc0 	bl	8001bd4 <HAL_GetTick>
 8002254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	e00a      	b.n	800226e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7ff fcbc 	bl	8001bd4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e04f      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 020c 	and.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	429a      	cmp	r2, r3
 800227e:	d1eb      	bne.n	8002258 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b25      	ldr	r3, [pc, #148]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d20c      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e032      	b.n	800230e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b19      	ldr	r3, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4916      	ldr	r1, [pc, #88]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d2:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490e      	ldr	r1, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022e6:	f000 f821 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490a      	ldr	r1, [pc, #40]	; (8002320 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a09      	ldr	r2, [pc, #36]	; (8002324 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc20 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00
 800231c:	40023800 	.word	0x40023800
 8002320:	08006734 	.word	0x08006734
 8002324:	20000004 	.word	0x20000004
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002330:	b094      	sub	sp, #80	; 0x50
 8002332:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	647b      	str	r3, [r7, #68]	; 0x44
 8002338:	2300      	movs	r3, #0
 800233a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800233c:	2300      	movs	r3, #0
 800233e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002344:	4b79      	ldr	r3, [pc, #484]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d00d      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x40>
 8002350:	2b08      	cmp	r3, #8
 8002352:	f200 80e1 	bhi.w	8002518 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x34>
 800235a:	2b04      	cmp	r3, #4
 800235c:	d003      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x3a>
 800235e:	e0db      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCC_GetSysClockFreq+0x204>)
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002364:	e0db      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002366:	4b72      	ldr	r3, [pc, #456]	; (8002530 <HAL_RCC_GetSysClockFreq+0x204>)
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236a:	e0d8      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	2200      	movs	r2, #0
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
 800238c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
 800239a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800239e:	4622      	mov	r2, r4
 80023a0:	462b      	mov	r3, r5
 80023a2:	f04f 0000 	mov.w	r0, #0
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	0159      	lsls	r1, r3, #5
 80023ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023b0:	0150      	lsls	r0, r2, #5
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4621      	mov	r1, r4
 80023b8:	1a51      	subs	r1, r2, r1
 80023ba:	6139      	str	r1, [r7, #16]
 80023bc:	4629      	mov	r1, r5
 80023be:	eb63 0301 	sbc.w	r3, r3, r1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023d0:	4659      	mov	r1, fp
 80023d2:	018b      	lsls	r3, r1, #6
 80023d4:	4651      	mov	r1, sl
 80023d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023da:	4651      	mov	r1, sl
 80023dc:	018a      	lsls	r2, r1, #6
 80023de:	4651      	mov	r1, sl
 80023e0:	ebb2 0801 	subs.w	r8, r2, r1
 80023e4:	4659      	mov	r1, fp
 80023e6:	eb63 0901 	sbc.w	r9, r3, r1
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fe:	4690      	mov	r8, r2
 8002400:	4699      	mov	r9, r3
 8002402:	4623      	mov	r3, r4
 8002404:	eb18 0303 	adds.w	r3, r8, r3
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	462b      	mov	r3, r5
 800240c:	eb49 0303 	adc.w	r3, r9, r3
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800241e:	4629      	mov	r1, r5
 8002420:	028b      	lsls	r3, r1, #10
 8002422:	4621      	mov	r1, r4
 8002424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002428:	4621      	mov	r1, r4
 800242a:	028a      	lsls	r2, r1, #10
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	2200      	movs	r2, #0
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002438:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800243c:	f7fe f9e8 	bl	8000810 <__aeabi_uldivmod>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4613      	mov	r3, r2
 8002446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002448:	e058      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	2200      	movs	r2, #0
 8002452:	4618      	mov	r0, r3
 8002454:	4611      	mov	r1, r2
 8002456:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002464:	4642      	mov	r2, r8
 8002466:	464b      	mov	r3, r9
 8002468:	f04f 0000 	mov.w	r0, #0
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	0159      	lsls	r1, r3, #5
 8002472:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002476:	0150      	lsls	r0, r2, #5
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4641      	mov	r1, r8
 800247e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002482:	4649      	mov	r1, r9
 8002484:	eb63 0b01 	sbc.w	fp, r3, r1
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002494:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002498:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800249c:	ebb2 040a 	subs.w	r4, r2, sl
 80024a0:	eb63 050b 	sbc.w	r5, r3, fp
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	00eb      	lsls	r3, r5, #3
 80024ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024b2:	00e2      	lsls	r2, r4, #3
 80024b4:	4614      	mov	r4, r2
 80024b6:	461d      	mov	r5, r3
 80024b8:	4643      	mov	r3, r8
 80024ba:	18e3      	adds	r3, r4, r3
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	464b      	mov	r3, r9
 80024c0:	eb45 0303 	adc.w	r3, r5, r3
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024d2:	4629      	mov	r1, r5
 80024d4:	028b      	lsls	r3, r1, #10
 80024d6:	4621      	mov	r1, r4
 80024d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024dc:	4621      	mov	r1, r4
 80024de:	028a      	lsls	r2, r1, #10
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e6:	2200      	movs	r2, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	61fa      	str	r2, [r7, #28]
 80024ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f0:	f7fe f98e 	bl	8000810 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_GetSysClockFreq+0x200>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800250c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800250e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e002      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetSysClockFreq+0x204>)
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800251c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002520:	4618      	mov	r0, r3
 8002522:	3750      	adds	r7, #80	; 0x50
 8002524:	46bd      	mov	sp, r7
 8002526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	00f42400 	.word	0x00f42400

08002534 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e273      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d075      	beq.n	800263e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002552:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d00c      	beq.n	8002578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b85      	ldr	r3, [pc, #532]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002566:	2b08      	cmp	r3, #8
 8002568:	d112      	bne.n	8002590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002576:	d10b      	bne.n	8002590 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05b      	beq.n	800263c <HAL_RCC_OscConfig+0x108>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d157      	bne.n	800263c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e24e      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x74>
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a75      	ldr	r2, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x98>
 80025b2:	4b70      	ldr	r3, [pc, #448]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6f      	ldr	r2, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b6d      	ldr	r3, [pc, #436]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xb0>
 80025cc:	4b69      	ldr	r3, [pc, #420]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a68      	ldr	r2, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b66      	ldr	r3, [pc, #408]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a65      	ldr	r2, [pc, #404]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff faf2 	bl	8001bd4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff faee 	bl	8001bd4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e213      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b5b      	ldr	r3, [pc, #364]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xc0>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff fade 	bl	8001bd4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff fada 	bl	8001bd4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e1ff      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0xe8>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d063      	beq.n	8002712 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800264a:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d11c      	bne.n	800269c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002662:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d116      	bne.n	800269c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_RCC_OscConfig+0x152>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e1d3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4937      	ldr	r1, [pc, #220]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	e03a      	b.n	8002712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x244>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7ff fa93 	bl	8001bd4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026b2:	f7ff fa8f 	bl	8001bd4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1b4      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4925      	ldr	r1, [pc, #148]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x244>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff fa72 	bl	8001bd4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f4:	f7ff fa6e 	bl	8001bd4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e193      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d036      	beq.n	800278c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_RCC_OscConfig+0x248>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff fa52 	bl	8001bd4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002734:	f7ff fa4e 	bl	8001bd4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e173      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x240>)
 8002748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x200>
 8002752:	e01b      	b.n	800278c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x248>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff fa3b 	bl	8001bd4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	e00e      	b.n	8002780 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002762:	f7ff fa37 	bl	8001bd4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d907      	bls.n	8002780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e15c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
 8002774:	40023800 	.word	0x40023800
 8002778:	42470000 	.word	0x42470000
 800277c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ea      	bne.n	8002762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8097 	beq.w	80028c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b83      	ldr	r3, [pc, #524]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	4b7f      	ldr	r3, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a7e      	ldr	r2, [pc, #504]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <HAL_RCC_OscConfig+0x47c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d118      	bne.n	8002808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x47c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	; (80029b0 <HAL_RCC_OscConfig+0x47c>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7ff f9f7 	bl	8001bd4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7ff f9f3 	bl	8001bd4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e118      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <HAL_RCC_OscConfig+0x47c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x2ea>
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a65      	ldr	r2, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	e01c      	b.n	8002858 <HAL_RCC_OscConfig+0x324>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x30c>
 8002826:	4b61      	ldr	r3, [pc, #388]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a60      	ldr	r2, [pc, #384]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	4b5e      	ldr	r3, [pc, #376]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a5d      	ldr	r2, [pc, #372]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0x324>
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a59      	ldr	r2, [pc, #356]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b57      	ldr	r3, [pc, #348]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7ff f9b8 	bl	8001bd4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7ff f9b4 	bl	8001bd4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0d7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ee      	beq.n	8002868 <HAL_RCC_OscConfig+0x334>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff f9a2 	bl	8001bd4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7ff f99e 	bl	8001bd4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e0c1      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	4b40      	ldr	r3, [pc, #256]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ee      	bne.n	8002894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80ad 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d060      	beq.n	80029a0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d145      	bne.n	8002972 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <HAL_RCC_OscConfig+0x480>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7ff f972 	bl	8001bd4 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f4:	f7ff f96e 	bl	8001bd4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e093      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	3b01      	subs	r3, #1
 800292c:	041b      	lsls	r3, r3, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	071b      	lsls	r3, r3, #28
 800293e:	491b      	ldr	r1, [pc, #108]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x480>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff f943 	bl	8001bd4 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002952:	f7ff f93f 	bl	8001bd4 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e064      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x41e>
 8002970:	e05c      	b.n	8002a2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_RCC_OscConfig+0x480>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff f92c 	bl	8001bd4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff f928 	bl	8001bd4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e04d      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_RCC_OscConfig+0x478>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x44c>
 800299e:	e045      	b.n	8002a2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e040      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000
 80029b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCC_OscConfig+0x504>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d030      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d129      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d122      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d119      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	3b01      	subs	r3, #1
 8002a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d10f      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e07b      	b.n	8002b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5e:	d009      	beq.n	8002a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
 8002a66:	e005      	b.n	8002a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe ff54 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0104 	and.w	r1, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f003 0210 	and.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b088      	sub	sp, #32
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_SPI_Transmit+0x22>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e126      	b.n	8002dbe <HAL_SPI_Transmit+0x270>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b78:	f7ff f82c 	bl	8001bd4 <HAL_GetTick>
 8002b7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d002      	beq.n	8002b94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b92:	e10b      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x52>
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba4:	e102      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bec:	d10f      	bne.n	8002c0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b40      	cmp	r3, #64	; 0x40
 8002c1a:	d007      	beq.n	8002c2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c34:	d14b      	bne.n	8002cce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0xf6>
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13e      	bne.n	8002cc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	1c9a      	adds	r2, r3, #2
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c68:	e02b      	b.n	8002cc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d112      	bne.n	8002c9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c9c:	e011      	b.n	8002cc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9e:	f7fe ff99 	bl	8001bd4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d803      	bhi.n	8002cb6 <HAL_SPI_Transmit+0x168>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x16e>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cc0:	e074      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ce      	bne.n	8002c6a <HAL_SPI_Transmit+0x11c>
 8002ccc:	e04c      	b.n	8002d68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x18e>
 8002cd6:	8afb      	ldrh	r3, [r7, #22]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d140      	bne.n	8002d5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d02:	e02c      	b.n	8002d5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d113      	bne.n	8002d3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d38:	e011      	b.n	8002d5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d3a:	f7fe ff4b 	bl	8001bd4 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d803      	bhi.n	8002d52 <HAL_SPI_Transmit+0x204>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_Transmit+0x20a>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d5c:	e026      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1cd      	bne.n	8002d04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fa55 	bl	800321c <SPI_EndRxTxTransaction>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e000      	b.n	8002dac <HAL_SPI_Transmit+0x25e>
  }

error:
 8002daa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b08c      	sub	sp, #48	; 0x30
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_SPI_TransmitReceive+0x26>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e18a      	b.n	8003102 <HAL_SPI_TransmitReceive+0x33c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df4:	f7fe feee 	bl	8001bd4 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00f      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x70>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e1c:	d107      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x68>
 8002e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e34:	e15b      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x82>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_TransmitReceive+0x82>
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e4e:	e14e      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d003      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	887a      	ldrh	r2, [r7, #2]
 8002e7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec0:	d178      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x10a>
 8002eca:	8b7b      	ldrh	r3, [r7, #26]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d166      	bne.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ef4:	e053      	b.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d113      	bne.n	8002f3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	1c9a      	adds	r2, r3, #2
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d119      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x1b8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	1c9a      	adds	r2, r3, #2
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f7e:	f7fe fe29 	bl	8001bd4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d807      	bhi.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d003      	beq.n	8002f9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f9c:	e0a7      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1a6      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x130>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1a1      	bne.n	8002ef6 <HAL_SPI_TransmitReceive+0x130>
 8002fb2:	e07c      	b.n	80030ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x1fc>
 8002fbc:	8b7b      	ldrh	r3, [r7, #26]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d16b      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe8:	e057      	b.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11c      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d017      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d114      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	7812      	ldrb	r2, [r2, #0]
 8003014:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d119      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x2ae>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d014      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003070:	2301      	movs	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003074:	f7fe fdae 	bl	8001bd4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003080:	429a      	cmp	r2, r3
 8003082:	d803      	bhi.n	800308c <HAL_SPI_TransmitReceive+0x2c6>
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d102      	bne.n	8003092 <HAL_SPI_TransmitReceive+0x2cc>
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003098:	e029      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1a2      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x224>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d19d      	bne.n	8002fea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8b2 	bl	800321c <SPI_EndRxTxTransaction>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030ca:	e010      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	e000      	b.n	80030ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003102:	4618      	mov	r0, r3
 8003104:	3730      	adds	r7, #48	; 0x30
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800311c:	f7fe fd5a 	bl	8001bd4 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4413      	add	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800312c:	f7fe fd52 	bl	8001bd4 <HAL_GetTick>
 8003130:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	0d1b      	lsrs	r3, r3, #20
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003142:	e054      	b.n	80031ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d050      	beq.n	80031ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800314c:	f7fe fd42 	bl	8001bd4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	429a      	cmp	r2, r3
 800315a:	d902      	bls.n	8003162 <SPI_WaitFlagStateUntilTimeout+0x56>
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d13d      	bne.n	80031de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d111      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d004      	beq.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d107      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a8:	d10f      	bne.n	80031ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e017      	b.n	800320e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	429a      	cmp	r2, r3
 800320a:	d19b      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004

0800321c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <SPI_EndRxTxTransaction+0x7c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <SPI_EndRxTxTransaction+0x80>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0d5b      	lsrs	r3, r3, #21
 8003234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003246:	d112      	bne.n	800326e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ff5a 	bl	800310c <SPI_WaitFlagStateUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e00f      	b.n	800328e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3b01      	subs	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d0f2      	beq.n	800326e <SPI_EndRxTxTransaction+0x52>
 8003288:	e000      	b.n	800328c <SPI_EndRxTxTransaction+0x70>
        break;
 800328a:	bf00      	nop
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000004 	.word	0x20000004
 800329c:	165e9f81 	.word	0x165e9f81

080032a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <MX_FATFS_Init+0x18>)
 80032a6:	4805      	ldr	r0, [pc, #20]	; (80032bc <MX_FATFS_Init+0x1c>)
 80032a8:	f003 f8f2 	bl	8006490 <FATFS_LinkDriver>
 80032ac:	4603      	mov	r3, r0
 80032ae:	461a      	mov	r2, r3
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <MX_FATFS_Init+0x20>)
 80032b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200021ac 	.word	0x200021ac
 80032bc:	20000010 	.word	0x20000010
 80032c0:	200021a8 	.word	0x200021a8

080032c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fdcd 	bl	8000e80 <SD_disk_initialize>
 80032e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd feab 	bl	8001058 <SD_disk_status>
 8003302:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800331c:	7bf8      	ldrb	r0, [r7, #15]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	f7fd feae 	bl	8001084 <SD_disk_read>
 8003328:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003342:	7bf8      	ldrb	r0, [r7, #15]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	f7fd ff05 	bl	8001158 <SD_disk_write>
 800334e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	603a      	str	r2, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	460b      	mov	r3, r1
 8003366:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003368:	79b9      	ldrb	r1, [r7, #6]
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd ff76 	bl	8001260 <SD_disk_ioctl>
 8003374:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <disk_status+0x30>)
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	79fa      	ldrb	r2, [r7, #7]
 8003398:	4905      	ldr	r1, [pc, #20]	; (80033b0 <disk_status+0x30>)
 800339a:	440a      	add	r2, r1
 800339c:	7a12      	ldrb	r2, [r2, #8]
 800339e:	4610      	mov	r0, r2
 80033a0:	4798      	blx	r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200023d8 	.word	0x200023d8

080033b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <disk_initialize+0x48>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <disk_initialize+0x48>)
 80033d0:	2101      	movs	r1, #1
 80033d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <disk_initialize+0x48>)
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	79fa      	ldrb	r2, [r7, #7]
 80033e2:	4906      	ldr	r1, [pc, #24]	; (80033fc <disk_initialize+0x48>)
 80033e4:	440a      	add	r2, r1
 80033e6:	7a12      	ldrb	r2, [r2, #8]
 80033e8:	4610      	mov	r0, r2
 80033ea:	4798      	blx	r3
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200023d8 	.word	0x200023d8

08003400 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003400:	b590      	push	{r4, r7, lr}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <disk_read+0x3c>)
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	689c      	ldr	r4, [r3, #8]
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4a07      	ldr	r2, [pc, #28]	; (800343c <disk_read+0x3c>)
 8003420:	4413      	add	r3, r2
 8003422:	7a18      	ldrb	r0, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	47a0      	blx	r4
 800342c:	4603      	mov	r3, r0
 800342e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop
 800343c:	200023d8 	.word	0x200023d8

08003440 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <disk_write+0x3c>)
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68dc      	ldr	r4, [r3, #12]
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <disk_write+0x3c>)
 8003460:	4413      	add	r3, r2
 8003462:	7a18      	ldrb	r0, [r3, #8]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	47a0      	blx	r4
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003470:	7dfb      	ldrb	r3, [r7, #23]
}
 8003472:	4618      	mov	r0, r3
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	bf00      	nop
 800347c:	200023d8 	.word	0x200023d8

08003480 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	603a      	str	r2, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	460b      	mov	r3, r1
 800348e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <disk_ioctl+0x38>)
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	79fa      	ldrb	r2, [r7, #7]
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <disk_ioctl+0x38>)
 80034a0:	440a      	add	r2, r1
 80034a2:	7a10      	ldrb	r0, [r2, #8]
 80034a4:	79b9      	ldrb	r1, [r7, #6]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4798      	blx	r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	200023d8 	.word	0x200023d8

080034bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80034cc:	89fb      	ldrh	r3, [r7, #14]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	b21a      	sxth	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	4313      	orrs	r3, r2
 80034da:	b21b      	sxth	r3, r3
 80034dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034de:	89fb      	ldrh	r3, [r7, #14]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3303      	adds	r3, #3
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	3202      	adds	r2, #2
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	3201      	adds	r2, #1
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
	return rv;
 8003524:	68fb      	ldr	r3, [r7, #12]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	0a1b      	lsrs	r3, r3, #8
 80035a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	1c53      	adds	r3, r2, #1
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1c59      	adds	r1, r3, #1
 80035e4:	6179      	str	r1, [r7, #20]
 80035e6:	7812      	ldrb	r2, [r2, #0]
 80035e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f1      	bne.n	80035da <mem_cpy+0x1a>
	}
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003602:	b480      	push	{r7}
 8003604:	b087      	sub	sp, #28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	617a      	str	r2, [r7, #20]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3b01      	subs	r3, #1
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f3      	bne.n	8003612 <mem_set+0x10>
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	61fa      	str	r2, [r7, #28]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	61ba      	str	r2, [r7, #24]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	1acb      	subs	r3, r1, r3
 8003664:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3b01      	subs	r3, #1
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <mem_cmp+0x40>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0eb      	beq.n	8003650 <mem_cmp+0x18>

	return r;
 8003678:	697b      	ldr	r3, [r7, #20]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003690:	e002      	b.n	8003698 <chk_chr+0x12>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3301      	adds	r3, #1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <chk_chr+0x26>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d1f2      	bne.n	8003692 <chk_chr+0xc>
	return *str;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	781b      	ldrb	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e029      	b.n	8003724 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <chk_lock+0xb4>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01d      	beq.n	800371a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036de:	4a24      	ldr	r2, [pc, #144]	; (8003770 <chk_lock+0xb4>)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4413      	add	r3, r2
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d116      	bne.n	800371e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <chk_lock+0xb4>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003700:	429a      	cmp	r2, r3
 8003702:	d10c      	bne.n	800371e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <chk_lock+0xb4>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	3308      	adds	r3, #8
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003714:	429a      	cmp	r2, r3
 8003716:	d102      	bne.n	800371e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003718:	e007      	b.n	800372a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d9d2      	bls.n	80036d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d109      	bne.n	8003744 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <chk_lock+0x80>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d101      	bne.n	8003740 <chk_lock+0x84>
 800373c:	2300      	movs	r3, #0
 800373e:	e010      	b.n	8003762 <chk_lock+0xa6>
 8003740:	2312      	movs	r3, #18
 8003742:	e00e      	b.n	8003762 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <chk_lock+0xa0>
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <chk_lock+0xb4>)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	4413      	add	r3, r2
 8003752:	330c      	adds	r3, #12
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d101      	bne.n	8003760 <chk_lock+0xa4>
 800375c:	2310      	movs	r3, #16
 800375e:	e000      	b.n	8003762 <chk_lock+0xa6>
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	200021b8 	.word	0x200021b8

08003774 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	e002      	b.n	8003786 <enq_lock+0x12>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d806      	bhi.n	800379a <enq_lock+0x26>
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <enq_lock+0x40>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f2      	bne.n	8003780 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	200021b8 	.word	0x200021b8

080037b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e01f      	b.n	8003808 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80037c8:	4a41      	ldr	r2, [pc, #260]	; (80038d0 <inc_lock+0x118>)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d113      	bne.n	8003802 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037da:	4a3d      	ldr	r2, [pc, #244]	; (80038d0 <inc_lock+0x118>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d109      	bne.n	8003802 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037ee:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <inc_lock+0x118>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	4413      	add	r3, r2
 80037f6:	3308      	adds	r3, #8
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037fe:	429a      	cmp	r2, r3
 8003800:	d006      	beq.n	8003810 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3301      	adds	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d9dc      	bls.n	80037c8 <inc_lock+0x10>
 800380e:	e000      	b.n	8003812 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003810:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d132      	bne.n	800387e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e002      	b.n	8003824 <inc_lock+0x6c>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d806      	bhi.n	8003838 <inc_lock+0x80>
 800382a:	4a29      	ldr	r2, [pc, #164]	; (80038d0 <inc_lock+0x118>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f2      	bne.n	800381e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d101      	bne.n	8003842 <inc_lock+0x8a>
 800383e:	2300      	movs	r3, #0
 8003840:	e040      	b.n	80038c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4922      	ldr	r1, [pc, #136]	; (80038d0 <inc_lock+0x118>)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	440b      	add	r3, r1
 800384e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	491e      	ldr	r1, [pc, #120]	; (80038d0 <inc_lock+0x118>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	440b      	add	r3, r1
 800385c:	3304      	adds	r3, #4
 800385e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	491a      	ldr	r1, [pc, #104]	; (80038d0 <inc_lock+0x118>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	440b      	add	r3, r1
 800386c:	3308      	adds	r3, #8
 800386e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <inc_lock+0x118>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	330c      	adds	r3, #12
 800387a:	2200      	movs	r2, #0
 800387c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <inc_lock+0xe0>
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <inc_lock+0x118>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	330c      	adds	r3, #12
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <inc_lock+0xe0>
 8003894:	2300      	movs	r3, #0
 8003896:	e015      	b.n	80038c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <inc_lock+0xf8>
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <inc_lock+0x118>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	330c      	adds	r3, #12
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	3301      	adds	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	e001      	b.n	80038b4 <inc_lock+0xfc>
 80038b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038b4:	4906      	ldr	r1, [pc, #24]	; (80038d0 <inc_lock+0x118>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	440b      	add	r3, r1
 80038bc:	330c      	adds	r3, #12
 80038be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	200021b8 	.word	0x200021b8

080038d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d825      	bhi.n	8003934 <dec_lock+0x60>
		n = Files[i].ctr;
 80038e8:	4a17      	ldr	r2, [pc, #92]	; (8003948 <dec_lock+0x74>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4413      	add	r3, r2
 80038f0:	330c      	adds	r3, #12
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038f6:	89fb      	ldrh	r3, [r7, #14]
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d101      	bne.n	8003902 <dec_lock+0x2e>
 80038fe:	2300      	movs	r3, #0
 8003900:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <dec_lock+0x3a>
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	3b01      	subs	r3, #1
 800390c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <dec_lock+0x74>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4413      	add	r3, r2
 8003916:	330c      	adds	r3, #12
 8003918:	89fa      	ldrh	r2, [r7, #14]
 800391a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <dec_lock+0x5a>
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <dec_lock+0x74>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	737b      	strb	r3, [r7, #13]
 8003932:	e001      	b.n	8003938 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003934:	2302      	movs	r3, #2
 8003936:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003938:	7b7b      	ldrb	r3, [r7, #13]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	200021b8 	.word	0x200021b8

0800394c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e010      	b.n	800397c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800395a:	4a0d      	ldr	r2, [pc, #52]	; (8003990 <clear_lock+0x44>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4413      	add	r3, r2
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d105      	bne.n	8003976 <clear_lock+0x2a>
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <clear_lock+0x44>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4413      	add	r3, r2
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d9eb      	bls.n	800395a <clear_lock+0xe>
	}
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	200021b8 	.word	0x200021b8

08003994 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d034      	beq.n	8003a12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7858      	ldrb	r0, [r3, #1]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039b8:	2301      	movs	r3, #1
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	f7ff fd40 	bl	8003440 <disk_write>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e022      	b.n	8003a12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	1ad2      	subs	r2, r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d217      	bcs.n	8003a12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	789b      	ldrb	r3, [r3, #2]
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e010      	b.n	8003a0c <sync_window+0x78>
					wsect += fs->fsize;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7858      	ldrb	r0, [r3, #1]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80039fe:	2301      	movs	r3, #1
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	f7ff fd1d 	bl	8003440 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d8eb      	bhi.n	80039ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d01b      	beq.n	8003a6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ffad 	bl	8003994 <sync_window>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d113      	bne.n	8003a6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7858      	ldrb	r0, [r3, #1]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a4e:	2301      	movs	r3, #1
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	f7ff fcd5 	bl	8003400 <disk_read>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ff87 	bl	8003994 <sync_window>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d159      	bne.n	8003b44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d149      	bne.n	8003b2c <sync_fs+0xb4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	791b      	ldrb	r3, [r3, #4]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d145      	bne.n	8003b2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	899b      	ldrh	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2100      	movs	r1, #0
 8003aae:	f7ff fda8 	bl	8003602 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3338      	adds	r3, #56	; 0x38
 8003ab6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003aba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fd37 	bl	8003532 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3338      	adds	r3, #56	; 0x38
 8003ac8:	4921      	ldr	r1, [pc, #132]	; (8003b50 <sync_fs+0xd8>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fd4c 	bl	8003568 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3338      	adds	r3, #56	; 0x38
 8003ad4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ad8:	491e      	ldr	r1, [pc, #120]	; (8003b54 <sync_fs+0xdc>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff fd44 	bl	8003568 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3338      	adds	r3, #56	; 0x38
 8003ae4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7ff fd3a 	bl	8003568 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3338      	adds	r3, #56	; 0x38
 8003af8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7ff fd30 	bl	8003568 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7858      	ldrb	r0, [r3, #1]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b20:	2301      	movs	r3, #1
 8003b22:	f7ff fc8d 	bl	8003440 <disk_write>
			fs->fsi_flag = 0;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fca3 	bl	8003480 <disk_ioctl>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <sync_fs+0xcc>
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	41615252 	.word	0x41615252
 8003b54:	61417272 	.word	0x61417272

08003b58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	3b02      	subs	r3, #2
 8003b66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	3b02      	subs	r3, #2
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d301      	bcc.n	8003b78 <clust2sect+0x20>
 8003b74:	2300      	movs	r3, #0
 8003b76:	e008      	b.n	8003b8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	895b      	ldrh	r3, [r3, #10]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	fb03 f202 	mul.w	r2, r3, r2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	4413      	add	r3, r2
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d904      	bls.n	8003bb6 <get_fat+0x20>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <get_fat+0x26>
		val = 1;	/* Internal error */
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e0bb      	b.n	8003d34 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	f000 8083 	beq.w	8003cd2 <get_fat+0x13c>
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	f300 80a7 	bgt.w	8003d20 <get_fat+0x18a>
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d002      	beq.n	8003bdc <get_fat+0x46>
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d056      	beq.n	8003c88 <get_fat+0xf2>
 8003bda:	e0a1      	b.n	8003d20 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	899b      	ldrh	r3, [r3, #12]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6938      	ldr	r0, [r7, #16]
 8003c00:	f7ff ff0c 	bl	8003a1c <move_window>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 808d 	bne.w	8003d26 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	60fa      	str	r2, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	8992      	ldrh	r2, [r2, #12]
 8003c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c1a:	fb01 f202 	mul.w	r2, r1, r2
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	899b      	ldrh	r3, [r3, #12]
 8003c32:	4619      	mov	r1, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6938      	ldr	r0, [r7, #16]
 8003c40:	f7ff feec 	bl	8003a1c <move_window>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d16f      	bne.n	8003d2a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	899b      	ldrh	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c56:	fb01 f202 	mul.w	r2, r1, r2
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	461a      	mov	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <get_fat+0xe8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	e002      	b.n	8003c84 <get_fat+0xee>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	617b      	str	r3, [r7, #20]
			break;
 8003c86:	e055      	b.n	8003d34 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	899b      	ldrh	r3, [r3, #12]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6938      	ldr	r0, [r7, #16]
 8003ca2:	f7ff febb 	bl	8003a1c <move_window>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d140      	bne.n	8003d2e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	8992      	ldrh	r2, [r2, #12]
 8003cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cbe:	fb00 f202 	mul.w	r2, r0, r2
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fbf8 	bl	80034bc <ld_word>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	617b      	str	r3, [r7, #20]
			break;
 8003cd0:	e030      	b.n	8003d34 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	899b      	ldrh	r3, [r3, #12]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6938      	ldr	r0, [r7, #16]
 8003cec:	f7ff fe96 	bl	8003a1c <move_window>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11d      	bne.n	8003d32 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	8992      	ldrh	r2, [r2, #12]
 8003d04:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d08:	fb00 f202 	mul.w	r2, r0, r2
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	440b      	add	r3, r1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fbeb 	bl	80034ec <ld_dword>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d1c:	617b      	str	r3, [r7, #20]
			break;
 8003d1e:	e009      	b.n	8003d34 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003d20:	2301      	movs	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e006      	b.n	8003d34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d26:	bf00      	nop
 8003d28:	e004      	b.n	8003d34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003d2a:	bf00      	nop
 8003d2c:	e002      	b.n	8003d34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003d2e:	bf00      	nop
 8003d30:	e000      	b.n	8003d34 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003d32:	bf00      	nop
		}
	}

	return val;
 8003d34:	697b      	ldr	r3, [r7, #20]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003d3e:	b590      	push	{r4, r7, lr}
 8003d40:	b089      	sub	sp, #36	; 0x24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f240 8102 	bls.w	8003f5a <put_fat+0x21c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	f080 80fc 	bcs.w	8003f5a <put_fat+0x21c>
		switch (fs->fs_type) {
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	f000 80b6 	beq.w	8003ed8 <put_fat+0x19a>
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	f300 80fd 	bgt.w	8003f6c <put_fat+0x22e>
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d003      	beq.n	8003d7e <put_fat+0x40>
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	f000 8083 	beq.w	8003e82 <put_fat+0x144>
 8003d7c:	e0f6      	b.n	8003f6c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	899b      	ldrh	r3, [r3, #12]
 8003d94:	4619      	mov	r1, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f7ff fe3b 	bl	8003a1c <move_window>
 8003da6:	4603      	mov	r3, r0
 8003da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 80d6 	bne.w	8003f5e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	61ba      	str	r2, [r7, #24]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	8992      	ldrh	r2, [r2, #12]
 8003dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003dc6:	fb00 f202 	mul.w	r2, r0, r2
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	440b      	add	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <put_fat+0xb8>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	b25b      	sxtb	r3, r3
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b25a      	sxtb	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e001      	b.n	8003dfa <put_fat+0xbc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	899b      	ldrh	r3, [r3, #12]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e14:	4413      	add	r3, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff fdff 	bl	8003a1c <move_window>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e22:	7ffb      	ldrb	r3, [r7, #31]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 809c 	bne.w	8003f62 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	899b      	ldrh	r3, [r3, #12]
 8003e34:	461a      	mov	r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e3c:	fb00 f202 	mul.w	r2, r0, r2
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <put_fat+0x11a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e00e      	b.n	8003e76 <put_fat+0x138>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f023 030f 	bic.w	r3, r3, #15
 8003e62:	b25a      	sxtb	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	70da      	strb	r2, [r3, #3]
			break;
 8003e80:	e074      	b.n	8003f6c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	899b      	ldrh	r3, [r3, #12]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e96:	4413      	add	r3, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff fdbe 	bl	8003a1c <move_window>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d15d      	bne.n	8003f66 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	8992      	ldrh	r2, [r2, #12]
 8003eb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ebc:	fb00 f202 	mul.w	r2, r0, r2
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fb31 	bl	8003532 <st_word>
			fs->wflag = 1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	70da      	strb	r2, [r3, #3]
			break;
 8003ed6:	e049      	b.n	8003f6c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	899b      	ldrh	r3, [r3, #12]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eec:	4413      	add	r3, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f7ff fd93 	bl	8003a1c <move_window>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d134      	bne.n	8003f6a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	8992      	ldrh	r2, [r2, #12]
 8003f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f18:	fb00 f202 	mul.w	r2, r0, r2
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	440b      	add	r3, r1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fae3 	bl	80034ec <ld_dword>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f2c:	4323      	orrs	r3, r4
 8003f2e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	8992      	ldrh	r2, [r2, #12]
 8003f3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003f42:	fb00 f202 	mul.w	r2, r0, r2
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	440b      	add	r3, r1
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fb0b 	bl	8003568 <st_dword>
			fs->wflag = 1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	70da      	strb	r2, [r3, #3]
			break;
 8003f58:	e008      	b.n	8003f6c <put_fat+0x22e>
		}
	}
 8003f5a:	bf00      	nop
 8003f5c:	e006      	b.n	8003f6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f5e:	bf00      	nop
 8003f60:	e004      	b.n	8003f6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f62:	bf00      	nop
 8003f64:	e002      	b.n	8003f6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f66:	bf00      	nop
 8003f68:	e000      	b.n	8003f6c <put_fat+0x22e>
			if (res != FR_OK) break;
 8003f6a:	bf00      	nop
	return res;
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}

08003f76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b088      	sub	sp, #32
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d904      	bls.n	8003f9c <remove_chain+0x26>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d301      	bcc.n	8003fa0 <remove_chain+0x2a>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e04b      	b.n	8004038 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00c      	beq.n	8003fc0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	69b8      	ldr	r0, [r7, #24]
 8003fae:	f7ff fec6 	bl	8003d3e <put_fat>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003fb6:	7ffb      	ldrb	r3, [r7, #31]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <remove_chain+0x4a>
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	e03b      	b.n	8004038 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff fde7 	bl	8003b96 <get_fat>
 8003fc8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d031      	beq.n	8004034 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <remove_chain+0x64>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e02e      	b.n	8004038 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d101      	bne.n	8003fe6 <remove_chain+0x70>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e028      	b.n	8004038 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	69b8      	ldr	r0, [r7, #24]
 8003fec:	f7ff fea7 	bl	8003d3e <put_fat>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <remove_chain+0x88>
 8003ffa:	7ffb      	ldrb	r3, [r7, #31]
 8003ffc:	e01c      	b.n	8004038 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	3b02      	subs	r3, #2
 8004008:	429a      	cmp	r2, r3
 800400a:	d20b      	bcs.n	8004024 <remove_chain+0xae>
			fs->free_clst++;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	791b      	ldrb	r3, [r3, #4]
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d3c6      	bcc.n	8003fc0 <remove_chain+0x4a>
 8004032:	e000      	b.n	8004036 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004034:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <create_chain+0x2c>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d31b      	bcc.n	80040a4 <create_chain+0x64>
 800406c:	2301      	movs	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e018      	b.n	80040a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fd8e 	bl	8003b96 <get_fat>
 800407a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d801      	bhi.n	8004086 <create_chain+0x46>
 8004082:	2301      	movs	r3, #1
 8004084:	e070      	b.n	8004168 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d101      	bne.n	8004092 <create_chain+0x52>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	e06a      	b.n	8004168 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d201      	bcs.n	80040a0 <create_chain+0x60>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e063      	b.n	8004168 <create_chain+0x128>
		scl = clst;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3301      	adds	r3, #1
 80040ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d307      	bcc.n	80040c8 <create_chain+0x88>
				ncl = 2;
 80040b8:	2302      	movs	r3, #2
 80040ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d901      	bls.n	80040c8 <create_chain+0x88>
 80040c4:	2300      	movs	r3, #0
 80040c6:	e04f      	b.n	8004168 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80040c8:	69f9      	ldr	r1, [r7, #28]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fd63 	bl	8003b96 <get_fat>
 80040d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00e      	beq.n	80040f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d003      	beq.n	80040e6 <create_chain+0xa6>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d101      	bne.n	80040ea <create_chain+0xaa>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	e03e      	b.n	8004168 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d1da      	bne.n	80040a8 <create_chain+0x68>
 80040f2:	2300      	movs	r3, #0
 80040f4:	e038      	b.n	8004168 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80040f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80040f8:	f04f 32ff 	mov.w	r2, #4294967295
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	6938      	ldr	r0, [r7, #16]
 8004100:	f7ff fe1d 	bl	8003d3e <put_fat>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004108:	7dfb      	ldrb	r3, [r7, #23]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <create_chain+0xe2>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	6938      	ldr	r0, [r7, #16]
 800411a:	f7ff fe10 	bl	8003d3e <put_fat>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <create_chain+0x116>
		fs->last_clst = ncl;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	3b02      	subs	r3, #2
 8004138:	429a      	cmp	r2, r3
 800413a:	d804      	bhi.n	8004146 <create_chain+0x106>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	1e5a      	subs	r2, r3, #1
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	791b      	ldrb	r3, [r3, #4]
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	711a      	strb	r2, [r3, #4]
 8004154:	e007      	b.n	8004166 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <create_chain+0x122>
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e000      	b.n	8004164 <create_chain+0x124>
 8004162:	2301      	movs	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004166:	69fb      	ldr	r3, [r7, #28]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	3304      	adds	r3, #4
 8004186:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	899b      	ldrh	r3, [r3, #12]
 800418c:	461a      	mov	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	fbb3 f3f2 	udiv	r3, r3, r2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	8952      	ldrh	r2, [r2, #10]
 8004198:	fbb3 f3f2 	udiv	r3, r3, r2
 800419c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1d1a      	adds	r2, r3, #4
 80041a2:	613a      	str	r2, [r7, #16]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <clmt_clust+0x42>
 80041ae:	2300      	movs	r3, #0
 80041b0:	e010      	b.n	80041d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d307      	bcc.n	80041ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3304      	adds	r3, #4
 80041c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80041c8:	e7e9      	b.n	800419e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80041ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	4413      	add	r3, r2
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f6:	d204      	bcs.n	8004202 <dir_sdi+0x22>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004202:	2302      	movs	r3, #2
 8004204:	e071      	b.n	80042ea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <dir_sdi+0x46>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d902      	bls.n	8004226 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10c      	bne.n	8004246 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	8912      	ldrh	r2, [r2, #8]
 8004234:	4293      	cmp	r3, r2
 8004236:	d301      	bcc.n	800423c <dir_sdi+0x5c>
 8004238:	2302      	movs	r3, #2
 800423a:	e056      	b.n	80042ea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	61da      	str	r2, [r3, #28]
 8004244:	e02d      	b.n	80042a2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	461a      	mov	r2, r3
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	899b      	ldrh	r3, [r3, #12]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004256:	e019      	b.n	800428c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fc9a 	bl	8003b96 <get_fat>
 8004262:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d101      	bne.n	8004270 <dir_sdi+0x90>
 800426c:	2301      	movs	r3, #1
 800426e:	e03c      	b.n	80042ea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d904      	bls.n	8004280 <dir_sdi+0xa0>
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d301      	bcc.n	8004284 <dir_sdi+0xa4>
 8004280:	2302      	movs	r3, #2
 8004282:	e032      	b.n	80042ea <dir_sdi+0x10a>
			ofs -= csz;
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d2e1      	bcs.n	8004258 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	6938      	ldr	r0, [r7, #16]
 8004298:	f7ff fc5e 	bl	8003b58 <clust2sect>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <dir_sdi+0xd4>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e01a      	b.n	80042ea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	899b      	ldrh	r3, [r3, #12]
 80042bc:	4619      	mov	r1, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c4:	441a      	add	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	899b      	ldrh	r3, [r3, #12]
 80042d4:	461a      	mov	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80042dc:	fb00 f202 	mul.w	r2, r0, r2
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	18ca      	adds	r2, r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	3320      	adds	r3, #32
 8004308:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <dir_next+0x28>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004318:	d301      	bcc.n	800431e <dir_next+0x2c>
 800431a:	2304      	movs	r3, #4
 800431c:	e0bb      	b.n	8004496 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	899b      	ldrh	r3, [r3, #12]
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	fbb3 f1f2 	udiv	r1, r3, r2
 800432a:	fb01 f202 	mul.w	r2, r1, r2
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 809d 	bne.w	8004470 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	8912      	ldrh	r2, [r2, #8]
 8004350:	4293      	cmp	r3, r2
 8004352:	f0c0 808d 	bcc.w	8004470 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	61da      	str	r2, [r3, #28]
 800435c:	2304      	movs	r3, #4
 800435e:	e09a      	b.n	8004496 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	899b      	ldrh	r3, [r3, #12]
 8004364:	461a      	mov	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	fbb3 f3f2 	udiv	r3, r3, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	8952      	ldrh	r2, [r2, #10]
 8004370:	3a01      	subs	r2, #1
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d17b      	bne.n	8004470 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7ff fc08 	bl	8003b96 <get_fat>
 8004386:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d801      	bhi.n	8004392 <dir_next+0xa0>
 800438e:	2302      	movs	r3, #2
 8004390:	e081      	b.n	8004496 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d101      	bne.n	800439e <dir_next+0xac>
 800439a:	2301      	movs	r3, #1
 800439c:	e07b      	b.n	8004496 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d359      	bcc.n	800445c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	61da      	str	r2, [r3, #28]
 80043b4:	2304      	movs	r3, #4
 80043b6:	e06e      	b.n	8004496 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7ff fe3d 	bl	8004040 <create_chain>
 80043c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <dir_next+0xe0>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e061      	b.n	8004496 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <dir_next+0xea>
 80043d8:	2302      	movs	r3, #2
 80043da:	e05c      	b.n	8004496 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d101      	bne.n	80043e8 <dir_next+0xf6>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e056      	b.n	8004496 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fad3 	bl	8003994 <sync_window>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <dir_next+0x106>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04e      	b.n	8004496 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	899b      	ldrh	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	2100      	movs	r1, #0
 8004406:	f7ff f8fc 	bl	8003602 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fba1 	bl	8003b58 <clust2sect>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	635a      	str	r2, [r3, #52]	; 0x34
 800441c:	e012      	b.n	8004444 <dir_next+0x152>
						fs->wflag = 1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fab5 	bl	8003994 <sync_window>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <dir_next+0x142>
 8004430:	2301      	movs	r3, #1
 8004432:	e030      	b.n	8004496 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3301      	adds	r3, #1
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	635a      	str	r2, [r3, #52]	; 0x34
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	895b      	ldrh	r3, [r3, #10]
 8004448:	461a      	mov	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4293      	cmp	r3, r2
 800444e:	d3e6      	bcc.n	800441e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f7ff fb77 	bl	8003b58 <clust2sect>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	899b      	ldrh	r3, [r3, #12]
 8004480:	461a      	mov	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	fbb3 f0f2 	udiv	r0, r3, r2
 8004488:	fb00 f202 	mul.w	r2, r0, r2
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	18ca      	adds	r2, r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80044ae:	2100      	movs	r1, #0
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fe95 	bl	80041e0 <dir_sdi>
 80044b6:	4603      	mov	r3, r0
 80044b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d12b      	bne.n	8004518 <dir_alloc+0x7a>
		n = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	4619      	mov	r1, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff faa6 	bl	8003a1c <move_window>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11d      	bne.n	8004516 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2be5      	cmp	r3, #229	; 0xe5
 80044e2:	d004      	beq.n	80044ee <dir_alloc+0x50>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	3301      	adds	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d102      	bne.n	8004502 <dir_alloc+0x64>
 80044fc:	e00c      	b.n	8004518 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004502:	2101      	movs	r1, #1
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fef4 	bl	80042f2 <dir_next>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0d7      	beq.n	80044c4 <dir_alloc+0x26>
 8004514:	e000      	b.n	8004518 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004516:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d101      	bne.n	8004522 <dir_alloc+0x84>
 800451e:	2307      	movs	r3, #7
 8004520:	75fb      	strb	r3, [r7, #23]
	return res;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	331a      	adds	r3, #26
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe ffbe 	bl	80034bc <ld_word>
 8004540:	4603      	mov	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d109      	bne.n	8004560 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	3314      	adds	r3, #20
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe ffb3 	bl	80034bc <ld_word>
 8004556:	4603      	mov	r3, r0
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	331a      	adds	r3, #26
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	b292      	uxth	r2, r2
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe ffd6 	bl	8003532 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d109      	bne.n	80045a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f103 0214 	add.w	r2, r3, #20
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b29b      	uxth	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7fe ffc8 	bl	8003532 <st_word>
	}
}
 80045a2:	bf00      	nop
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	331a      	adds	r3, #26
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe ff7e 	bl	80034bc <ld_word>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <cmp_lfn+0x1e>
 80045c6:	2300      	movs	r3, #0
 80045c8:	e059      	b.n	800467e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80045e0:	2301      	movs	r3, #1
 80045e2:	81fb      	strh	r3, [r7, #14]
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e033      	b.n	8004652 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80045ea:	4a27      	ldr	r2, [pc, #156]	; (8004688 <cmp_lfn+0xdc>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ff5f 	bl	80034bc <ld_word>
 80045fe:	4603      	mov	r3, r0
 8004600:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004602:	89fb      	ldrh	r3, [r7, #14]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01a      	beq.n	800463e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2bfe      	cmp	r3, #254	; 0xfe
 800460c:	d812      	bhi.n	8004634 <cmp_lfn+0x88>
 800460e:	89bb      	ldrh	r3, [r7, #12]
 8004610:	4618      	mov	r0, r3
 8004612:	f001 ff89 	bl	8006528 <ff_wtoupper>
 8004616:	4603      	mov	r3, r0
 8004618:	461c      	mov	r4, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	617a      	str	r2, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f001 ff7d 	bl	8006528 <ff_wtoupper>
 800462e:	4603      	mov	r3, r0
 8004630:	429c      	cmp	r4, r3
 8004632:	d001      	beq.n	8004638 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004634:	2300      	movs	r3, #0
 8004636:	e022      	b.n	800467e <cmp_lfn+0xd2>
			}
			wc = uc;
 8004638:	89bb      	ldrh	r3, [r7, #12]
 800463a:	81fb      	strh	r3, [r7, #14]
 800463c:	e006      	b.n	800464c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800463e:	89bb      	ldrh	r3, [r7, #12]
 8004640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004644:	4293      	cmp	r3, r2
 8004646:	d001      	beq.n	800464c <cmp_lfn+0xa0>
 8004648:	2300      	movs	r3, #0
 800464a:	e018      	b.n	800467e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3301      	adds	r3, #1
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b0c      	cmp	r3, #12
 8004656:	d9c8      	bls.n	80045ea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <cmp_lfn+0xd0>
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d008      	beq.n	800467c <cmp_lfn+0xd0>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <cmp_lfn+0xd0>
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800467c:	2301      	movs	r3, #1
}
 800467e:	4618      	mov	r0, r3
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	080067c4 	.word	0x080067c4

0800468c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	460b      	mov	r3, r1
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	4613      	mov	r3, r2
 80046a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	330d      	adds	r3, #13
 80046a6:	79ba      	ldrb	r2, [r7, #6]
 80046a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	330b      	adds	r3, #11
 80046ae:	220f      	movs	r2, #15
 80046b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	330c      	adds	r3, #12
 80046b6:	2200      	movs	r2, #0
 80046b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	331a      	adds	r3, #26
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe ff36 	bl	8003532 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	82fb      	strh	r3, [r7, #22]
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80046de:	8afb      	ldrh	r3, [r7, #22]
 80046e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <put_lfn+0x6c>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80046f8:	4a17      	ldr	r2, [pc, #92]	; (8004758 <put_lfn+0xcc>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4413      	add	r3, r2
 8004706:	8afa      	ldrh	r2, [r7, #22]
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe ff11 	bl	8003532 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004710:	8afb      	ldrh	r3, [r7, #22]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <put_lfn+0x90>
 8004716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800471a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	3301      	adds	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d9da      	bls.n	80046de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004728:	8afb      	ldrh	r3, [r7, #22]
 800472a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800472e:	4293      	cmp	r3, r2
 8004730:	d006      	beq.n	8004740 <put_lfn+0xb4>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <put_lfn+0xbc>
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	79fa      	ldrb	r2, [r7, #7]
 800474c:	701a      	strb	r2, [r3, #0]
}
 800474e:	bf00      	nop
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	080067c4 	.word	0x080067c4

0800475c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800476a:	220b      	movs	r2, #11
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7fe ff26 	bl	80035c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b05      	cmp	r3, #5
 8004778:	d92b      	bls.n	80047d2 <gen_numname+0x76>
		sr = seq;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800477e:	e022      	b.n	80047c6 <gen_numname+0x6a>
			wc = *lfn++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
 800478e:	e017      	b.n	80047c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005a      	lsls	r2, r3, #1
 8004794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800479e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <gen_numname+0x5e>
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80047b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80047b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	3301      	adds	r3, #1
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d9e4      	bls.n	8004790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1d8      	bne.n	8004780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80047d2:	2307      	movs	r3, #7
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	3330      	adds	r3, #48	; 0x30
 80047e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80047e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047ea:	2b39      	cmp	r3, #57	; 0x39
 80047ec:	d904      	bls.n	80047f8 <gen_numname+0x9c>
 80047ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047f2:	3307      	adds	r3, #7
 80047f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	1e5a      	subs	r2, r3, #1
 80047fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80047fe:	3330      	adds	r3, #48	; 0x30
 8004800:	443b      	add	r3, r7
 8004802:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004806:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1df      	bne.n	80047d6 <gen_numname+0x7a>
	ns[i] = '~';
 8004816:	f107 0214 	add.w	r2, r7, #20
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	4413      	add	r3, r2
 800481e:	227e      	movs	r2, #126	; 0x7e
 8004820:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004822:	2300      	movs	r3, #0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	e002      	b.n	800482e <gen_numname+0xd2>
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	3301      	adds	r3, #1
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	429a      	cmp	r2, r3
 8004834:	d205      	bcs.n	8004842 <gen_numname+0xe6>
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	4413      	add	r3, r2
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b20      	cmp	r3, #32
 8004840:	d1f2      	bne.n	8004828 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	2b07      	cmp	r3, #7
 8004846:	d807      	bhi.n	8004858 <gen_numname+0xfc>
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	62ba      	str	r2, [r7, #40]	; 0x28
 800484e:	3330      	adds	r3, #48	; 0x30
 8004850:	443b      	add	r3, r7
 8004852:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004856:	e000      	b.n	800485a <gen_numname+0xfe>
 8004858:	2120      	movs	r1, #32
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	627a      	str	r2, [r7, #36]	; 0x24
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	460a      	mov	r2, r1
 8004866:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2b07      	cmp	r3, #7
 800486c:	d9e9      	bls.n	8004842 <gen_numname+0xe6>
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	3730      	adds	r7, #48	; 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004884:	230b      	movs	r3, #11
 8004886:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	0852      	lsrs	r2, r2, #1
 800488e:	01db      	lsls	r3, r3, #7
 8004890:	4313      	orrs	r3, r2
 8004892:	b2da      	uxtb	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6079      	str	r1, [r7, #4]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4413      	add	r3, r2
 800489e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ed      	bne.n	8004888 <sum_sfn+0x10>
	return sum;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80048c8:	2100      	movs	r1, #0
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff fc88 	bl	80041e0 <dir_sdi>
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <dir_find+0x24>
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	e0a9      	b.n	8004a32 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80048de:	23ff      	movs	r3, #255	; 0xff
 80048e0:	753b      	strb	r3, [r7, #20]
 80048e2:	7d3b      	ldrb	r3, [r7, #20]
 80048e4:	757b      	strb	r3, [r7, #21]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6938      	ldr	r0, [r7, #16]
 80048f6:	f7ff f891 	bl	8003a1c <move_window>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 8090 	bne.w	8004a26 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800490e:	7dbb      	ldrb	r3, [r7, #22]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <dir_find+0x60>
 8004914:	2304      	movs	r3, #4
 8004916:	75fb      	strb	r3, [r7, #23]
 8004918:	e08a      	b.n	8004a30 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	330b      	adds	r3, #11
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800492e:	7dbb      	ldrb	r3, [r7, #22]
 8004930:	2be5      	cmp	r3, #229	; 0xe5
 8004932:	d007      	beq.n	8004944 <dir_find+0x8a>
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <dir_find+0x98>
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d006      	beq.n	8004952 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004944:	23ff      	movs	r3, #255	; 0xff
 8004946:	757b      	strb	r3, [r7, #21]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f04f 32ff 	mov.w	r2, #4294967295
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
 8004950:	e05e      	b.n	8004a10 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b0f      	cmp	r3, #15
 8004956:	d136      	bne.n	80049c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800495e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d154      	bne.n	8004a10 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004966:	7dbb      	ldrb	r3, [r7, #22]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	7b5b      	ldrb	r3, [r3, #13]
 8004976:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004978:	7dbb      	ldrb	r3, [r7, #22]
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	75bb      	strb	r3, [r7, #22]
 8004980:	7dbb      	ldrb	r3, [r7, #22]
 8004982:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800498c:	7dba      	ldrb	r2, [r7, #22]
 800498e:	7d7b      	ldrb	r3, [r7, #21]
 8004990:	429a      	cmp	r2, r3
 8004992:	d115      	bne.n	80049c0 <dir_find+0x106>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	330d      	adds	r3, #13
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	7d3a      	ldrb	r2, [r7, #20]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d10e      	bne.n	80049c0 <dir_find+0x106>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7ff fdfd 	bl	80045ac <cmp_lfn>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <dir_find+0x106>
 80049b8:	7d7b      	ldrb	r3, [r7, #21]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e000      	b.n	80049c2 <dir_find+0x108>
 80049c0:	23ff      	movs	r3, #255	; 0xff
 80049c2:	757b      	strb	r3, [r7, #21]
 80049c4:	e024      	b.n	8004a10 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80049c6:	7d7b      	ldrb	r3, [r7, #21]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <dir_find+0x126>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff51 	bl	8004878 <sum_sfn>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	7d3b      	ldrb	r3, [r7, #20]
 80049dc:	4293      	cmp	r3, r2
 80049de:	d024      	beq.n	8004a2a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <dir_find+0x14a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a18      	ldr	r0, [r3, #32]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	220b      	movs	r2, #11
 80049f8:	4619      	mov	r1, r3
 80049fa:	f7fe fe1d 	bl	8003638 <mem_cmp>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d014      	beq.n	8004a2e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004a04:	23ff      	movs	r3, #255	; 0xff
 8004a06:	757b      	strb	r3, [r7, #21]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004a10:	2100      	movs	r1, #0
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fc6d 	bl	80042f2 <dir_next>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f43f af65 	beq.w	80048ee <dir_find+0x34>
 8004a24:	e004      	b.n	8004a30 <dir_find+0x176>
		if (res != FR_OK) break;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004a2e:	bf00      	nop

	return res;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08c      	sub	sp, #48	; 0x30
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a50:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <dir_register+0x20>
 8004a58:	2306      	movs	r3, #6
 8004a5a:	e0e0      	b.n	8004c1e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e002      	b.n	8004a68 <dir_register+0x2c>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3301      	adds	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f4      	bne.n	8004a62 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004a7e:	f107 030c 	add.w	r3, r7, #12
 8004a82:	220c      	movs	r2, #12
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fd9b 	bl	80035c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d032      	beq.n	8004afa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa0:	e016      	b.n	8004ad0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	f107 010c 	add.w	r1, r7, #12
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f7ff fe53 	bl	800475c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff feff 	bl	80048ba <dir_find>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8004ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	3301      	adds	r3, #1
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	2b63      	cmp	r3, #99	; 0x63
 8004ad4:	d9e5      	bls.n	8004aa2 <dir_register+0x66>
 8004ad6:	e000      	b.n	8004ada <dir_register+0x9e>
			if (res != FR_OK) break;
 8004ad8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b64      	cmp	r3, #100	; 0x64
 8004ade:	d101      	bne.n	8004ae4 <dir_register+0xa8>
 8004ae0:	2307      	movs	r3, #7
 8004ae2:	e09c      	b.n	8004c1e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d002      	beq.n	8004af2 <dir_register+0xb6>
 8004aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004af0:	e095      	b.n	8004c1e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004af2:	7dfa      	ldrb	r2, [r7, #23]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004afa:	7dfb      	ldrb	r3, [r7, #23]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <dir_register+0xd8>
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	330c      	adds	r3, #12
 8004b08:	4a47      	ldr	r2, [pc, #284]	; (8004c28 <dir_register+0x1ec>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3301      	adds	r3, #1
 8004b12:	e000      	b.n	8004b16 <dir_register+0xda>
 8004b14:	2301      	movs	r3, #1
 8004b16:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004b18:	6a39      	ldr	r1, [r7, #32]
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fcbf 	bl	800449e <dir_alloc>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d148      	bne.n	8004bc0 <dir_register+0x184>
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	623b      	str	r3, [r7, #32]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d042      	beq.n	8004bc0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	015b      	lsls	r3, r3, #5
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fb4a 	bl	80041e0 <dir_sdi>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d132      	bne.n	8004bc0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3324      	adds	r3, #36	; 0x24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fe8a 	bl	8004878 <sum_sfn>
 8004b64:	4603      	mov	r3, r0
 8004b66:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	69f8      	ldr	r0, [r7, #28]
 8004b70:	f7fe ff54 	bl	8003a1c <move_window>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8004b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11d      	bne.n	8004bbe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	6918      	ldr	r0, [r3, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a19      	ldr	r1, [r3, #32]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	7efb      	ldrb	r3, [r7, #27]
 8004b90:	f7ff fd7c 	bl	800468c <put_lfn>
				fs->wflag = 1;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2201      	movs	r2, #1
 8004b98:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff fba8 	bl	80042f2 <dir_next>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <dir_register+0x184>
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1d5      	bne.n	8004b68 <dir_register+0x12c>
 8004bbc:	e000      	b.n	8004bc0 <dir_register+0x184>
				if (res != FR_OK) break;
 8004bbe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d128      	bne.n	8004c1a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	69f8      	ldr	r0, [r7, #28]
 8004bd0:	f7fe ff24 	bl	8003a1c <move_window>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11b      	bne.n	8004c1a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2220      	movs	r2, #32
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fd09 	bl	8003602 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a18      	ldr	r0, [r3, #32]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3324      	adds	r3, #36	; 0x24
 8004bf8:	220b      	movs	r2, #11
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f7fe fce0 	bl	80035c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	f002 0218 	and.w	r2, r2, #24
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2201      	movs	r2, #1
 8004c18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	4ec4ec4f 	.word	0x4ec4ec4f

08004c2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	61ba      	str	r2, [r7, #24]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4413      	add	r3, r2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5c:	2b1f      	cmp	r3, #31
 8004c5e:	d940      	bls.n	8004ce2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c62:	2b2f      	cmp	r3, #47	; 0x2f
 8004c64:	d006      	beq.n	8004c74 <create_name+0x48>
 8004c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c68:	2b5c      	cmp	r3, #92	; 0x5c
 8004c6a:	d110      	bne.n	8004c8e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004c6c:	e002      	b.n	8004c74 <create_name+0x48>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	3301      	adds	r3, #1
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	4413      	add	r3, r2
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c7e:	d0f6      	beq.n	8004c6e <create_name+0x42>
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	4413      	add	r3, r2
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b5c      	cmp	r3, #92	; 0x5c
 8004c8a:	d0f0      	beq.n	8004c6e <create_name+0x42>
			break;
 8004c8c:	e02a      	b.n	8004ce4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2bfe      	cmp	r3, #254	; 0xfe
 8004c92:	d901      	bls.n	8004c98 <create_name+0x6c>
 8004c94:	2306      	movs	r3, #6
 8004c96:	e17d      	b.n	8004f94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004c98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004c9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 fc04 	bl	80064b0 <ff_convert>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <create_name+0x8a>
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	e16e      	b.n	8004f94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cba:	d809      	bhi.n	8004cd0 <create_name+0xa4>
 8004cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	488d      	ldr	r0, [pc, #564]	; (8004ef8 <create_name+0x2cc>)
 8004cc2:	f7fe fce0 	bl	8003686 <chk_chr>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <create_name+0xa4>
 8004ccc:	2306      	movs	r3, #6
 8004cce:	e161      	b.n	8004f94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	617a      	str	r2, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cde:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004ce0:	e7b4      	b.n	8004c4c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8004ce2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	441a      	add	r2, r3
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cf0:	2b1f      	cmp	r3, #31
 8004cf2:	d801      	bhi.n	8004cf8 <create_name+0xcc>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	e000      	b.n	8004cfa <create_name+0xce>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004cfe:	e011      	b.n	8004d24 <create_name+0xf8>
		w = lfn[di - 1];
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d06:	3b01      	subs	r3, #1
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d002      	beq.n	8004d1e <create_name+0xf2>
 8004d18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d1c:	d106      	bne.n	8004d2c <create_name+0x100>
		di--;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1ea      	bne.n	8004d00 <create_name+0xd4>
 8004d2a:	e000      	b.n	8004d2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8004d2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4413      	add	r3, r2
 8004d36:	2200      	movs	r2, #0
 8004d38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <create_name+0x118>
 8004d40:	2306      	movs	r3, #6
 8004d42:	e127      	b.n	8004f94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3324      	adds	r3, #36	; 0x24
 8004d48:	220b      	movs	r2, #11
 8004d4a:	2120      	movs	r1, #32
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fe fc58 	bl	8003602 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e002      	b.n	8004d5e <create_name+0x132>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d0f5      	beq.n	8004d58 <create_name+0x12c>
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	2b2e      	cmp	r3, #46	; 0x2e
 8004d78:	d0ee      	beq.n	8004d58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <create_name+0x168>
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	f043 0303 	orr.w	r3, r3, #3
 8004d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004d8c:	e002      	b.n	8004d94 <create_name+0x168>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <create_name+0x182>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004da0:	3b01      	subs	r3, #1
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	2b2e      	cmp	r3, #46	; 0x2e
 8004dac:	d1ef      	bne.n	8004d8e <create_name+0x162>

	i = b = 0; ni = 8;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004db4:	2300      	movs	r3, #0
 8004db6:	623b      	str	r3, [r7, #32]
 8004db8:	2308      	movs	r3, #8
 8004dba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	61ba      	str	r2, [r7, #24]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8090 	beq.w	8004ef4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d006      	beq.n	8004de8 <create_name+0x1bc>
 8004dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8004dde:	d10a      	bne.n	8004df6 <create_name+0x1ca>
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d006      	beq.n	8004df6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8004de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dec:	f043 0303 	orr.w	r3, r3, #3
 8004df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004df4:	e07d      	b.n	8004ef2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d203      	bcs.n	8004e06 <create_name+0x1da>
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d123      	bne.n	8004e4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b0b      	cmp	r3, #11
 8004e0a:	d106      	bne.n	8004e1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e10:	f043 0303 	orr.w	r3, r3, #3
 8004e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e18:	e075      	b.n	8004f06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d005      	beq.n	8004e2e <create_name+0x202>
 8004e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e26:	f043 0303 	orr.w	r3, r3, #3
 8004e2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d866      	bhi.n	8004f04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	230b      	movs	r3, #11
 8004e40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004e4c:	e051      	b.n	8004ef2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e50:	2b7f      	cmp	r3, #127	; 0x7f
 8004e52:	d914      	bls.n	8004e7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fb29 	bl	80064b0 <ff_convert>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <create_name+0x246>
 8004e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e6a:	3b80      	subs	r3, #128	; 0x80
 8004e6c:	4a23      	ldr	r2, [pc, #140]	; (8004efc <create_name+0x2d0>)
 8004e6e:	5cd3      	ldrb	r3, [r2, r3]
 8004e70:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <create_name+0x268>
 8004e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e86:	4619      	mov	r1, r3
 8004e88:	481d      	ldr	r0, [pc, #116]	; (8004f00 <create_name+0x2d4>)
 8004e8a:	f7fe fbfc 	bl	8003686 <chk_chr>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004e94:	235f      	movs	r3, #95	; 0x5f
 8004e96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e9c:	f043 0303 	orr.w	r3, r3, #3
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004ea4:	e01b      	b.n	8004ede <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d909      	bls.n	8004ec0 <create_name+0x294>
 8004eac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eae:	2b5a      	cmp	r3, #90	; 0x5a
 8004eb0:	d806      	bhi.n	8004ec0 <create_name+0x294>
					b |= 2;
 8004eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004eb6:	f043 0302 	orr.w	r3, r3, #2
 8004eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ebe:	e00e      	b.n	8004ede <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec2:	2b60      	cmp	r3, #96	; 0x60
 8004ec4:	d90b      	bls.n	8004ede <create_name+0x2b2>
 8004ec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ec8:	2b7a      	cmp	r3, #122	; 0x7a
 8004eca:	d808      	bhi.n	8004ede <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8004ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eda:	3b20      	subs	r3, #32
 8004edc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	623a      	str	r2, [r7, #32]
 8004ee4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ee6:	b2d1      	uxtb	r1, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	460a      	mov	r2, r1
 8004eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8004ef2:	e763      	b.n	8004dbc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8004ef4:	bf00      	nop
 8004ef6:	e006      	b.n	8004f06 <create_name+0x2da>
 8004ef8:	080066ec 	.word	0x080066ec
 8004efc:	08006744 	.word	0x08006744
 8004f00:	080066f8 	.word	0x080066f8
			if (si > di) break;			/* No extension */
 8004f04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f0c:	2be5      	cmp	r3, #229	; 0xe5
 8004f0e:	d103      	bne.n	8004f18 <create_name+0x2ec>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2205      	movs	r2, #5
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d104      	bne.n	8004f28 <create_name+0x2fc>
 8004f1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d005      	beq.n	8004f40 <create_name+0x314>
 8004f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d105      	bne.n	8004f4c <create_name+0x320>
 8004f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d117      	bne.n	8004f88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <create_name+0x344>
 8004f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d105      	bne.n	8004f88 <create_name+0x35c>
 8004f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f80:	f043 0308 	orr.w	r3, r3, #8
 8004f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8004f92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004fb0:	e002      	b.n	8004fb8 <follow_path+0x1c>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8004fbe:	d0f8      	beq.n	8004fb2 <follow_path+0x16>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8004fc6:	d0f4      	beq.n	8004fb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b1f      	cmp	r3, #31
 8004fd4:	d80a      	bhi.n	8004fec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2280      	movs	r2, #128	; 0x80
 8004fda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff f8fd 	bl	80041e0 <dir_sdi>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]
 8004fea:	e048      	b.n	800507e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fec:	463b      	mov	r3, r7
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fe1b 	bl	8004c2c <create_name>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d139      	bne.n	8005074 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fc5a 	bl	80048ba <dir_find>
 8005006:	4603      	mov	r3, r0
 8005008:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005010:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d12c      	bne.n	8005078 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800501e:	7afb      	ldrb	r3, [r7, #11]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d127      	bne.n	8005078 <follow_path+0xdc>
 8005028:	2305      	movs	r3, #5
 800502a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800502c:	e024      	b.n	8005078 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d121      	bne.n	800507c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	799b      	ldrb	r3, [r3, #6]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005044:	2305      	movs	r3, #5
 8005046:	75fb      	strb	r3, [r7, #23]
 8005048:	e019      	b.n	800507e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	8992      	ldrh	r2, [r2, #12]
 8005058:	fbb3 f0f2 	udiv	r0, r3, r2
 800505c:	fb00 f202 	mul.w	r2, r0, r2
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	440b      	add	r3, r1
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff fa60 	bl	800452c <ld_clust>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005072:	e7bb      	b.n	8004fec <follow_path+0x50>
			if (res != FR_OK) break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <follow_path+0xe2>
				break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800507c:	bf00      	nop
			}
		}
	}

	return res;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d031      	beq.n	8005102 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e002      	b.n	80050ac <get_ldnumber+0x24>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3301      	adds	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b1f      	cmp	r3, #31
 80050b2:	d903      	bls.n	80050bc <get_ldnumber+0x34>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b3a      	cmp	r3, #58	; 0x3a
 80050ba:	d1f4      	bne.n	80050a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b3a      	cmp	r3, #58	; 0x3a
 80050c2:	d11c      	bne.n	80050fe <get_ldnumber+0x76>
			tp = *path;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	3b30      	subs	r3, #48	; 0x30
 80050d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d80e      	bhi.n	80050fa <get_ldnumber+0x72>
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d10a      	bne.n	80050fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <get_ldnumber+0x72>
					vol = (int)i;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3301      	adds	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	e002      	b.n	8005104 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005102:	693b      	ldr	r3, [r7, #16]
}
 8005104:	4618      	mov	r0, r3
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	70da      	strb	r2, [r3, #3]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe fc76 	bl	8003a1c <move_window>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <check_fs+0x2a>
 8005136:	2304      	movs	r3, #4
 8005138:	e038      	b.n	80051ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3338      	adds	r3, #56	; 0x38
 800513e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f9ba 	bl	80034bc <ld_word>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <check_fs+0x48>
 8005154:	2303      	movs	r3, #3
 8005156:	e029      	b.n	80051ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800515e:	2be9      	cmp	r3, #233	; 0xe9
 8005160:	d009      	beq.n	8005176 <check_fs+0x66>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005168:	2beb      	cmp	r3, #235	; 0xeb
 800516a:	d11e      	bne.n	80051aa <check_fs+0x9a>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005172:	2b90      	cmp	r3, #144	; 0x90
 8005174:	d119      	bne.n	80051aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3338      	adds	r3, #56	; 0x38
 800517a:	3336      	adds	r3, #54	; 0x36
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe f9b5 	bl	80034ec <ld_dword>
 8005182:	4603      	mov	r3, r0
 8005184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005188:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <check_fs+0xa4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <check_fs+0x82>
 800518e:	2300      	movs	r3, #0
 8005190:	e00c      	b.n	80051ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3338      	adds	r3, #56	; 0x38
 8005196:	3352      	adds	r3, #82	; 0x52
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe f9a7 	bl	80034ec <ld_dword>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a05      	ldr	r2, [pc, #20]	; (80051b8 <check_fs+0xa8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d101      	bne.n	80051aa <check_fs+0x9a>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80051aa:	2302      	movs	r3, #2
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	00544146 	.word	0x00544146
 80051b8:	33544146 	.word	0x33544146

080051bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b096      	sub	sp, #88	; 0x58
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff59 	bl	8005088 <get_ldnumber>
 80051d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da01      	bge.n	80051e2 <find_volume+0x26>
 80051de:	230b      	movs	r3, #11
 80051e0:	e265      	b.n	80056ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80051e2:	4a9f      	ldr	r2, [pc, #636]	; (8005460 <find_volume+0x2a4>)
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <find_volume+0x3a>
 80051f2:	230c      	movs	r3, #12
 80051f4:	e25b      	b.n	80056ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe f8b5 	bl	8003380 <disk_status>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800521c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10c      	bne.n	8005242 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <find_volume+0x82>
 800522e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800523a:	230a      	movs	r3, #10
 800523c:	e237      	b.n	80056ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800523e:	2300      	movs	r3, #0
 8005240:	e235      	b.n	80056ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800524a:	b2da      	uxtb	r2, r3
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fe f8ad 	bl	80033b4 <disk_initialize>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800526c:	2303      	movs	r3, #3
 800526e:	e21e      	b.n	80056ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d007      	beq.n	8005286 <find_volume+0xca>
 8005276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005282:	230a      	movs	r3, #10
 8005284:	e213      	b.n	80056ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	7858      	ldrb	r0, [r3, #1]
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	330c      	adds	r3, #12
 800528e:	461a      	mov	r2, r3
 8005290:	2102      	movs	r1, #2
 8005292:	f7fe f8f5 	bl	8003480 <disk_ioctl>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <find_volume+0xe4>
 800529c:	2301      	movs	r3, #1
 800529e:	e206      	b.n	80056ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	899b      	ldrh	r3, [r3, #12]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d80d      	bhi.n	80052c6 <find_volume+0x10a>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	899b      	ldrh	r3, [r3, #12]
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	d308      	bcc.n	80052c6 <find_volume+0x10a>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	899b      	ldrh	r3, [r3, #12]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	899b      	ldrh	r3, [r3, #12]
 80052be:	3b01      	subs	r3, #1
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <find_volume+0x10e>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e1f1      	b.n	80056ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80052ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052d2:	f7ff ff1d 	bl	8005110 <check_fs>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80052dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d149      	bne.n	8005378 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052e4:	2300      	movs	r3, #0
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
 80052e8:	e01e      	b.n	8005328 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052f8:	4413      	add	r3, r2
 80052fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	3304      	adds	r3, #4
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <find_volume+0x158>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	3308      	adds	r3, #8
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe f8ee 	bl	80034ec <ld_dword>
 8005310:	4602      	mov	r2, r0
 8005312:	e000      	b.n	8005316 <find_volume+0x15a>
 8005314:	2200      	movs	r2, #0
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	3358      	adds	r3, #88	; 0x58
 800531c:	443b      	add	r3, r7
 800531e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005324:	3301      	adds	r3, #1
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	2b03      	cmp	r3, #3
 800532c:	d9dd      	bls.n	80052ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800532e:	2300      	movs	r3, #0
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <find_volume+0x182>
 8005338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800533a:	3b01      	subs	r3, #1
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3358      	adds	r3, #88	; 0x58
 8005344:	443b      	add	r3, r7
 8005346:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800534c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d005      	beq.n	800535e <find_volume+0x1a2>
 8005352:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005356:	f7ff fedb 	bl	8005110 <check_fs>
 800535a:	4603      	mov	r3, r0
 800535c:	e000      	b.n	8005360 <find_volume+0x1a4>
 800535e:	2303      	movs	r3, #3
 8005360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005368:	2b01      	cmp	r3, #1
 800536a:	d905      	bls.n	8005378 <find_volume+0x1bc>
 800536c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536e:	3301      	adds	r3, #1
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
 8005372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005374:	2b03      	cmp	r3, #3
 8005376:	d9e2      	bls.n	800533e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800537c:	2b04      	cmp	r3, #4
 800537e:	d101      	bne.n	8005384 <find_volume+0x1c8>
 8005380:	2301      	movs	r3, #1
 8005382:	e194      	b.n	80056ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005388:	2b01      	cmp	r3, #1
 800538a:	d901      	bls.n	8005390 <find_volume+0x1d4>
 800538c:	230d      	movs	r3, #13
 800538e:	e18e      	b.n	80056ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	3338      	adds	r3, #56	; 0x38
 8005394:	330b      	adds	r3, #11
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe f890 	bl	80034bc <ld_word>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	899b      	ldrh	r3, [r3, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d001      	beq.n	80053ac <find_volume+0x1f0>
 80053a8:	230d      	movs	r3, #13
 80053aa:	e180      	b.n	80056ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	3338      	adds	r3, #56	; 0x38
 80053b0:	3316      	adds	r3, #22
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe f882 	bl	80034bc <ld_word>
 80053b8:	4603      	mov	r3, r0
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <find_volume+0x214>
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	3338      	adds	r3, #56	; 0x38
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe f88f 	bl	80034ec <ld_dword>
 80053ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	789b      	ldrb	r3, [r3, #2]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d005      	beq.n	80053f4 <find_volume+0x238>
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	789b      	ldrb	r3, [r3, #2]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d001      	beq.n	80053f4 <find_volume+0x238>
 80053f0:	230d      	movs	r3, #13
 80053f2:	e15c      	b.n	80056ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	789b      	ldrb	r3, [r3, #2]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005408:	b29a      	uxth	r2, r3
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	895b      	ldrh	r3, [r3, #10]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <find_volume+0x26c>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	895b      	ldrh	r3, [r3, #10]
 800541a:	461a      	mov	r2, r3
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	895b      	ldrh	r3, [r3, #10]
 8005420:	3b01      	subs	r3, #1
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <find_volume+0x270>
 8005428:	230d      	movs	r3, #13
 800542a:	e140      	b.n	80056ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	3338      	adds	r3, #56	; 0x38
 8005430:	3311      	adds	r3, #17
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe f842 	bl	80034bc <ld_word>
 8005438:	4603      	mov	r3, r0
 800543a:	461a      	mov	r2, r3
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	891b      	ldrh	r3, [r3, #8]
 8005444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005446:	8992      	ldrh	r2, [r2, #12]
 8005448:	0952      	lsrs	r2, r2, #5
 800544a:	b292      	uxth	r2, r2
 800544c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005450:	fb01 f202 	mul.w	r2, r1, r2
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <find_volume+0x2a8>
 800545c:	230d      	movs	r3, #13
 800545e:	e126      	b.n	80056ae <find_volume+0x4f2>
 8005460:	200021b0 	.word	0x200021b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	3338      	adds	r3, #56	; 0x38
 8005468:	3313      	adds	r3, #19
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe f826 	bl	80034bc <ld_word>
 8005470:	4603      	mov	r3, r0
 8005472:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <find_volume+0x2cc>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	3338      	adds	r3, #56	; 0x38
 800547e:	3320      	adds	r3, #32
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe f833 	bl	80034ec <ld_dword>
 8005486:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	3338      	adds	r3, #56	; 0x38
 800548c:	330e      	adds	r3, #14
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe f814 	bl	80034bc <ld_word>
 8005494:	4603      	mov	r3, r0
 8005496:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <find_volume+0x2e6>
 800549e:	230d      	movs	r3, #13
 80054a0:	e105      	b.n	80056ae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80054a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	4413      	add	r3, r2
 80054a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054aa:	8911      	ldrh	r1, [r2, #8]
 80054ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ae:	8992      	ldrh	r2, [r2, #12]
 80054b0:	0952      	lsrs	r2, r2, #5
 80054b2:	b292      	uxth	r2, r2
 80054b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80054b8:	b292      	uxth	r2, r2
 80054ba:	4413      	add	r3, r2
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d201      	bcs.n	80054ca <find_volume+0x30e>
 80054c6:	230d      	movs	r3, #13
 80054c8:	e0f1      	b.n	80056ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80054ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	8952      	ldrh	r2, [r2, #10]
 80054d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <find_volume+0x328>
 80054e0:	230d      	movs	r3, #13
 80054e2:	e0e4      	b.n	80056ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 80054e4:	2303      	movs	r3, #3
 80054e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d802      	bhi.n	80054fa <find_volume+0x33e>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005500:	4293      	cmp	r3, r2
 8005502:	d802      	bhi.n	800550a <find_volume+0x34e>
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	1c9a      	adds	r2, r3, #2
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005516:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005518:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551c:	441a      	add	r2, r3
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	441a      	add	r2, r3
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800552c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005530:	2b03      	cmp	r3, #3
 8005532:	d11e      	bne.n	8005572 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	3338      	adds	r3, #56	; 0x38
 8005538:	332a      	adds	r3, #42	; 0x2a
 800553a:	4618      	mov	r0, r3
 800553c:	f7fd ffbe 	bl	80034bc <ld_word>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <find_volume+0x38e>
 8005546:	230d      	movs	r3, #13
 8005548:	e0b1      	b.n	80056ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	891b      	ldrh	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <find_volume+0x39a>
 8005552:	230d      	movs	r3, #13
 8005554:	e0ab      	b.n	80056ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	3338      	adds	r3, #56	; 0x38
 800555a:	332c      	adds	r3, #44	; 0x2c
 800555c:	4618      	mov	r0, r3
 800555e:	f7fd ffc5 	bl	80034ec <ld_dword>
 8005562:	4602      	mov	r2, r0
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	647b      	str	r3, [r7, #68]	; 0x44
 8005570:	e01f      	b.n	80055b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	891b      	ldrh	r3, [r3, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <find_volume+0x3c2>
 800557a:	230d      	movs	r3, #13
 800557c:	e097      	b.n	80056ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	441a      	add	r2, r3
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800558a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800558e:	2b02      	cmp	r3, #2
 8005590:	d103      	bne.n	800559a <find_volume+0x3de>
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	e00a      	b.n	80055b0 <find_volume+0x3f4>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	085a      	lsrs	r2, r3, #1
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80055b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	6a1a      	ldr	r2, [r3, #32]
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	899b      	ldrh	r3, [r3, #12]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055be:	440b      	add	r3, r1
 80055c0:	3b01      	subs	r3, #1
 80055c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055c4:	8989      	ldrh	r1, [r1, #12]
 80055c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d201      	bcs.n	80055d2 <find_volume+0x416>
 80055ce:	230d      	movs	r3, #13
 80055d0:	e06d      	b.n	80056ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80055d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	619a      	str	r2, [r3, #24]
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2280      	movs	r2, #128	; 0x80
 80055e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80055e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d149      	bne.n	8005684 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	3338      	adds	r3, #56	; 0x38
 80055f4:	3330      	adds	r3, #48	; 0x30
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd ff60 	bl	80034bc <ld_word>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d140      	bne.n	8005684 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005604:	3301      	adds	r3, #1
 8005606:	4619      	mov	r1, r3
 8005608:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800560a:	f7fe fa07 	bl	8003a1c <move_window>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d137      	bne.n	8005684 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	2200      	movs	r2, #0
 8005618:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	3338      	adds	r3, #56	; 0x38
 800561e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005622:	4618      	mov	r0, r3
 8005624:	f7fd ff4a 	bl	80034bc <ld_word>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005630:	429a      	cmp	r2, r3
 8005632:	d127      	bne.n	8005684 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	3338      	adds	r3, #56	; 0x38
 8005638:	4618      	mov	r0, r3
 800563a:	f7fd ff57 	bl	80034ec <ld_dword>
 800563e:	4603      	mov	r3, r0
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <find_volume+0x4fc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d11e      	bne.n	8005684 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	3338      	adds	r3, #56	; 0x38
 800564a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd ff4c 	bl	80034ec <ld_dword>
 8005654:	4603      	mov	r3, r0
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <find_volume+0x500>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d113      	bne.n	8005684 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	3338      	adds	r3, #56	; 0x38
 8005660:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd ff41 	bl	80034ec <ld_dword>
 800566a:	4602      	mov	r2, r0
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	3338      	adds	r3, #56	; 0x38
 8005674:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd ff37 	bl	80034ec <ld_dword>
 800567e:	4602      	mov	r2, r0
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800568a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <find_volume+0x504>)
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <find_volume+0x504>)
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <find_volume+0x504>)
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <find_volume+0x508>)
 80056a4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80056a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056a8:	f7fe f950 	bl	800394c <clear_lock>
#endif
	return FR_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3758      	adds	r7, #88	; 0x58
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	41615252 	.word	0x41615252
 80056bc:	61417272 	.word	0x61417272
 80056c0:	200021b4 	.word	0x200021b4
 80056c4:	200021d8 	.word	0x200021d8

080056c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80056d2:	2309      	movs	r3, #9
 80056d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01c      	beq.n	8005716 <validate+0x4e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d018      	beq.n	8005716 <validate+0x4e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d013      	beq.n	8005716 <validate+0x4e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	889a      	ldrh	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	88db      	ldrh	r3, [r3, #6]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d10c      	bne.n	8005716 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fd fe3c 	bl	8003380 <disk_status>
 8005708:	4603      	mov	r3, r0
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <validate+0x4e>
			res = FR_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <validate+0x5a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	e000      	b.n	8005724 <validate+0x5c>
 8005722:	2300      	movs	r3, #0
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	6013      	str	r3, [r2, #0]
	return res;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff fc9c 	bl	8005088 <get_ldnumber>
 8005750:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	da01      	bge.n	800575c <f_mount+0x28>
 8005758:	230b      	movs	r3, #11
 800575a:	e02b      	b.n	80057b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <f_mount+0x88>)
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005764:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800576c:	69b8      	ldr	r0, [r7, #24]
 800576e:	f7fe f8ed 	bl	800394c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	490d      	ldr	r1, [pc, #52]	; (80057bc <f_mount+0x88>)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <f_mount+0x66>
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <f_mount+0x6a>
 800579a:	2300      	movs	r3, #0
 800579c:	e00a      	b.n	80057b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800579e:	f107 010c 	add.w	r1, r7, #12
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	2200      	movs	r2, #0
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fd07 	bl	80051bc <find_volume>
 80057ae:	4603      	mov	r3, r0
 80057b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80057b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	200021b0 	.word	0x200021b0

080057c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b09a      	sub	sp, #104	; 0x68
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <f_open+0x18>
 80057d4:	2309      	movs	r3, #9
 80057d6:	e1bb      	b.n	8005b50 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80057e0:	79fa      	ldrb	r2, [r7, #7]
 80057e2:	f107 0114 	add.w	r1, r7, #20
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fce6 	bl	80051bc <find_volume>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80057f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 819f 	bne.w	8005b3e <f_open+0x37e>
		dj.obj.fs = fs;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	f107 0318 	add.w	r3, r7, #24
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fbc5 	bl	8004f9c <follow_path>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005818:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11a      	bne.n	8005856 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005824:	b25b      	sxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	da03      	bge.n	8005832 <f_open+0x72>
				res = FR_INVALID_NAME;
 800582a:	2306      	movs	r3, #6
 800582c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005830:	e011      	b.n	8005856 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	f107 0318 	add.w	r3, r7, #24
 8005848:	4611      	mov	r1, r2
 800584a:	4618      	mov	r0, r3
 800584c:	f7fd ff36 	bl	80036bc <chk_lock>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	f003 031c 	and.w	r3, r3, #28
 800585c:	2b00      	cmp	r3, #0
 800585e:	d07f      	beq.n	8005960 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005860:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800586c:	2b04      	cmp	r3, #4
 800586e:	d10e      	bne.n	800588e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005870:	f7fd ff80 	bl	8003774 <enq_lock>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <f_open+0xc8>
 800587a:	f107 0318 	add.w	r3, r7, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f8dc 	bl	8004a3c <dir_register>
 8005884:	4603      	mov	r3, r0
 8005886:	e000      	b.n	800588a <f_open+0xca>
 8005888:	2312      	movs	r3, #18
 800588a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	f043 0308 	orr.w	r3, r3, #8
 8005894:	71fb      	strb	r3, [r7, #7]
 8005896:	e010      	b.n	80058ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005898:	7fbb      	ldrb	r3, [r7, #30]
 800589a:	f003 0311 	and.w	r3, r3, #17
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <f_open+0xea>
					res = FR_DENIED;
 80058a2:	2307      	movs	r3, #7
 80058a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80058a8:	e007      	b.n	80058ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <f_open+0xfa>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80058ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d168      	bne.n	8005994 <f_open+0x1d4>
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d063      	beq.n	8005994 <f_open+0x1d4>
				dw = GET_FATTIME();
 80058cc:	f7fd fcfa 	bl	80032c4 <get_fattime>
 80058d0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	330e      	adds	r3, #14
 80058d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd fe45 	bl	8003568 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	3316      	adds	r3, #22
 80058e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fe3f 	bl	8003568 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	330b      	adds	r3, #11
 80058ee:	2220      	movs	r2, #32
 80058f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fe17 	bl	800452c <ld_clust>
 80058fe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005904:	2200      	movs	r2, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fe2f 	bl	800456a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	331c      	adds	r3, #28
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f7fd fe28 	bl	8003568 <st_dword>
					fs->wflag = 1;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2201      	movs	r2, #1
 800591c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800591e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005920:	2b00      	cmp	r3, #0
 8005922:	d037      	beq.n	8005994 <f_open+0x1d4>
						dw = fs->winsect;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800592a:	f107 0318 	add.w	r3, r7, #24
 800592e:	2200      	movs	r2, #0
 8005930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fb1f 	bl	8003f76 <remove_chain>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800593e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005942:	2b00      	cmp	r3, #0
 8005944:	d126      	bne.n	8005994 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe f866 	bl	8003a1c <move_window>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800595a:	3a01      	subs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
 800595e:	e019      	b.n	8005994 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005960:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005964:	2b00      	cmp	r3, #0
 8005966:	d115      	bne.n	8005994 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005968:	7fbb      	ldrb	r3, [r7, #30]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <f_open+0x1ba>
					res = FR_NO_FILE;
 8005972:	2304      	movs	r3, #4
 8005974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005978:	e00c      	b.n	8005994 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <f_open+0x1d4>
 8005984:	7fbb      	ldrb	r3, [r7, #30]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <f_open+0x1d4>
						res = FR_DENIED;
 800598e:	2307      	movs	r3, #7
 8005990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005994:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005998:	2b00      	cmp	r3, #0
 800599a:	d128      	bne.n	80059ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80059b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	f107 0318 	add.w	r3, r7, #24
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fd feef 	bl	80037b8 <inc_lock>
 80059da:	4602      	mov	r2, r0
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d102      	bne.n	80059ee <f_open+0x22e>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80059ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 80a3 	bne.w	8005b3e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fd94 	bl	800452c <ld_clust>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	331c      	adds	r3, #28
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd fd6c 	bl	80034ec <ld_dword>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	88da      	ldrh	r2, [r3, #6]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	79fa      	ldrb	r2, [r7, #7]
 8005a32:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3330      	adds	r3, #48	; 0x30
 8005a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fd fdd6 	bl	8003602 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d06e      	beq.n	8005b3e <f_open+0x37e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d06a      	beq.n	8005b3e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	895b      	ldrh	r3, [r3, #10]
 8005a74:	461a      	mov	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	899b      	ldrh	r3, [r3, #12]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a8c:	e016      	b.n	8005abc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fe f87f 	bl	8003b96 <get_fat>
 8005a98:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d802      	bhi.n	8005aa6 <f_open+0x2e6>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d102      	bne.n	8005ab4 <f_open+0x2f4>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ab4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005abc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <f_open+0x30c>
 8005ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d8e0      	bhi.n	8005a8e <f_open+0x2ce>
				}
				fp->clust = clst;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ad0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d131      	bne.n	8005b3e <f_open+0x37e>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	899b      	ldrh	r3, [r3, #12]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ae6:	fb01 f202 	mul.w	r2, r1, r2
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d026      	beq.n	8005b3e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fe f82f 	bl	8003b58 <clust2sect>
 8005afa:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <f_open+0x34a>
						res = FR_INT_ERR;
 8005b02:	2302      	movs	r3, #2
 8005b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005b08:	e019      	b.n	8005b3e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	899b      	ldrh	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	7858      	ldrb	r0, [r3, #1]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f7fd fc67 	bl	8003400 <disk_read>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <f_open+0x37e>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <f_open+0x38c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3768      	adds	r7, #104	; 0x68
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08e      	sub	sp, #56	; 0x38
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f107 0214 	add.w	r2, r7, #20
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fda5 	bl	80056c8 <validate>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <f_read+0x44>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	7d5b      	ldrb	r3, [r3, #21]
 8005b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <f_read+0x4a>
 8005b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ba0:	e135      	b.n	8005e0e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	7d1b      	ldrb	r3, [r3, #20]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <f_read+0x5a>
 8005bae:	2307      	movs	r3, #7
 8005bb0:	e12d      	b.n	8005e0e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f240 811e 	bls.w	8005e04 <f_read+0x2ac>
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005bcc:	e11a      	b.n	8005e04 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	8992      	ldrh	r2, [r2, #12]
 8005bd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bda:	fb01 f202 	mul.w	r2, r1, r2
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 80d5 	bne.w	8005d90 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	8992      	ldrh	r2, [r2, #12]
 8005bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	8952      	ldrh	r2, [r2, #10]
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d12f      	bne.n	8005c62 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c10:	e013      	b.n	8005c3a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7fe faa5 	bl	8004170 <clmt_clust>
 8005c26:	6338      	str	r0, [r7, #48]	; 0x30
 8005c28:	e007      	b.n	8005c3a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fd ffaf 	bl	8003b96 <get_fat>
 8005c38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d804      	bhi.n	8005c4a <f_read+0xf2>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2202      	movs	r2, #2
 8005c44:	755a      	strb	r2, [r3, #21]
 8005c46:	2302      	movs	r3, #2
 8005c48:	e0e1      	b.n	8005e0e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d104      	bne.n	8005c5c <f_read+0x104>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	755a      	strb	r2, [r3, #21]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0d8      	b.n	8005e0e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f7fd ff74 	bl	8003b58 <clust2sect>
 8005c70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <f_read+0x12a>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	755a      	strb	r2, [r3, #21]
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e0c5      	b.n	8005e0e <f_read+0x2b6>
			sect += csect;
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	899b      	ldrh	r3, [r3, #12]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d041      	beq.n	8005d22 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	4413      	add	r3, r2
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	8952      	ldrh	r2, [r2, #10]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d905      	bls.n	8005cb8 <f_read+0x160>
					cc = fs->csize - csect;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	7858      	ldrb	r0, [r3, #1]
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc2:	f7fd fb9d 	bl	8003400 <disk_read>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <f_read+0x17e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	755a      	strb	r2, [r3, #21]
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e09b      	b.n	8005e0e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	7d1b      	ldrb	r3, [r3, #20]
 8005cda:	b25b      	sxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	da18      	bge.n	8005d12 <f_read+0x1ba>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d911      	bls.n	8005d12 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	8992      	ldrh	r2, [r2, #12]
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d00:	18d0      	adds	r0, r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	899b      	ldrh	r3, [r3, #12]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f7fd fc57 	bl	80035c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	899b      	ldrh	r3, [r3, #12]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005d20:	e05c      	b.n	8005ddc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d02e      	beq.n	8005d8a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	7d1b      	ldrb	r3, [r3, #20]
 8005d30:	b25b      	sxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da18      	bge.n	8005d68 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	7858      	ldrb	r0, [r3, #1]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	2301      	movs	r3, #1
 8005d46:	f7fd fb7b 	bl	8003440 <disk_write>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <f_read+0x202>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2201      	movs	r2, #1
 8005d54:	755a      	strb	r2, [r3, #21]
 8005d56:	2301      	movs	r3, #1
 8005d58:	e059      	b.n	8005e0e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	7d1b      	ldrb	r3, [r3, #20]
 8005d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	7858      	ldrb	r0, [r3, #1]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d72:	2301      	movs	r3, #1
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	f7fd fb43 	bl	8003400 <disk_read>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <f_read+0x232>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	755a      	strb	r2, [r3, #21]
 8005d86:	2301      	movs	r3, #1
 8005d88:	e041      	b.n	8005e0e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	899b      	ldrh	r3, [r3, #12]
 8005d94:	4618      	mov	r0, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	8992      	ldrh	r2, [r2, #12]
 8005d9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da2:	fb01 f202 	mul.w	r2, r1, r2
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	1ac3      	subs	r3, r0, r3
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d901      	bls.n	8005db8 <f_read+0x260>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	8992      	ldrh	r2, [r2, #12]
 8005dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dca:	fb00 f202 	mul.w	r2, r0, r2
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd8:	f7fd fbf2 	bl	80035c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	4413      	add	r3, r2
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	441a      	add	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	619a      	str	r2, [r3, #24]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	441a      	add	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f47f aee1 	bne.w	8005bce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3738      	adds	r7, #56	; 0x38
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b08c      	sub	sp, #48	; 0x30
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f107 0210 	add.w	r2, r7, #16
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fc46 	bl	80056c8 <validate>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d107      	bne.n	8005e5a <f_write+0x44>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	7d5b      	ldrb	r3, [r3, #21]
 8005e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <f_write+0x4a>
 8005e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e5e:	e16a      	b.n	8006136 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	7d1b      	ldrb	r3, [r3, #20]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <f_write+0x5a>
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	e162      	b.n	8006136 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	441a      	add	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	f080 814c 	bcs.w	800611a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	43db      	mvns	r3, r3
 8005e88:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005e8a:	e146      	b.n	800611a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	8992      	ldrh	r2, [r2, #12]
 8005e94:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e98:	fb01 f202 	mul.w	r2, r1, r2
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f040 80f1 	bne.w	8006086 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	8992      	ldrh	r2, [r2, #12]
 8005eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	8952      	ldrh	r2, [r2, #10]
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d143      	bne.n	8005f48 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11a      	bne.n	8005f0a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fe f8b1 	bl	8004040 <create_chain>
 8005ede:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ee0:	e013      	b.n	8005f0a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7fe f93d 	bl	8004170 <clmt_clust>
 8005ef6:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ef8:	e007      	b.n	8005f0a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe f89c 	bl	8004040 <create_chain>
 8005f08:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8109 	beq.w	8006124 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d104      	bne.n	8005f22 <f_write+0x10c>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	755a      	strb	r2, [r3, #21]
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e109      	b.n	8006136 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d104      	bne.n	8005f34 <f_write+0x11e>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	755a      	strb	r2, [r3, #21]
 8005f30:	2301      	movs	r3, #1
 8005f32:	e100      	b.n	8006136 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f38:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <f_write+0x132>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f46:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	7d1b      	ldrb	r3, [r3, #20]
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da18      	bge.n	8005f84 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	7858      	ldrb	r0, [r3, #1]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	2301      	movs	r3, #1
 8005f62:	f7fd fa6d 	bl	8003440 <disk_write>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <f_write+0x160>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	755a      	strb	r2, [r3, #21]
 8005f72:	2301      	movs	r3, #1
 8005f74:	e0df      	b.n	8006136 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	7d1b      	ldrb	r3, [r3, #20]
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fd fde3 	bl	8003b58 <clust2sect>
 8005f92:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d104      	bne.n	8005fa4 <f_write+0x18e>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	755a      	strb	r2, [r3, #21]
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e0c8      	b.n	8006136 <f_write+0x320>
			sect += csect;
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4413      	add	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	899b      	ldrh	r3, [r3, #12]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d043      	beq.n	8006048 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	8952      	ldrh	r2, [r2, #10]
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d905      	bls.n	8005fda <f_write+0x1c4>
					cc = fs->csize - csect;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	895b      	ldrh	r3, [r3, #10]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	7858      	ldrb	r0, [r3, #1]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	f7fd fa2c 	bl	8003440 <disk_write>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <f_write+0x1e2>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	755a      	strb	r2, [r3, #21]
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e09e      	b.n	8006136 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1a      	ldr	r2, [r3, #32]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	6a3a      	ldr	r2, [r7, #32]
 8006002:	429a      	cmp	r2, r3
 8006004:	d918      	bls.n	8006038 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	8992      	ldrh	r2, [r2, #12]
 8006018:	fb02 f303 	mul.w	r3, r2, r3
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	18d1      	adds	r1, r2, r3
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	899b      	ldrh	r3, [r3, #12]
 8006024:	461a      	mov	r2, r3
 8006026:	f7fd facb 	bl	80035c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	7d1b      	ldrb	r3, [r3, #20]
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	899b      	ldrh	r3, [r3, #12]
 800603c:	461a      	mov	r2, r3
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	fb02 f303 	mul.w	r3, r2, r3
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006046:	e04b      	b.n	80060e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	429a      	cmp	r2, r3
 8006050:	d016      	beq.n	8006080 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800605a:	429a      	cmp	r2, r3
 800605c:	d210      	bcs.n	8006080 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	7858      	ldrb	r0, [r3, #1]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006068:	2301      	movs	r3, #1
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	f7fd f9c8 	bl	8003400 <disk_read>
 8006070:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006072:	2b00      	cmp	r3, #0
 8006074:	d004      	beq.n	8006080 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	755a      	strb	r2, [r3, #21]
 800607c:	2301      	movs	r3, #1
 800607e:	e05a      	b.n	8006136 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	899b      	ldrh	r3, [r3, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	8992      	ldrh	r2, [r2, #12]
 8006094:	fbb3 f1f2 	udiv	r1, r3, r2
 8006098:	fb01 f202 	mul.w	r2, r1, r2
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	1ac3      	subs	r3, r0, r3
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d901      	bls.n	80060ae <f_write+0x298>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	8992      	ldrh	r2, [r2, #12]
 80060bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80060c0:	fb00 f202 	mul.w	r2, r0, r2
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	440b      	add	r3, r1
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	69f9      	ldr	r1, [r7, #28]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fd fa77 	bl	80035c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	7d1b      	ldrb	r3, [r3, #20]
 80060d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	4413      	add	r3, r2
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	441a      	add	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	619a      	str	r2, [r3, #24]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	bf38      	it	cc
 8006100:	461a      	movcc	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	441a      	add	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	f47f aeb5 	bne.w	8005e8c <f_write+0x76>
 8006122:	e000      	b.n	8006126 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006124:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	7d1b      	ldrb	r3, [r3, #20]
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	b2da      	uxtb	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3730      	adds	r7, #48	; 0x30
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f107 0208 	add.w	r2, r7, #8
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff faba 	bl	80056c8 <validate>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d168      	bne.n	8006230 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7d1b      	ldrb	r3, [r3, #20]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d062      	beq.n	8006230 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7d1b      	ldrb	r3, [r3, #20]
 800616e:	b25b      	sxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	da15      	bge.n	80061a0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	7858      	ldrb	r0, [r3, #1]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	2301      	movs	r3, #1
 8006184:	f7fd f95c 	bl	8003440 <disk_write>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <f_sync+0x54>
 800618e:	2301      	movs	r3, #1
 8006190:	e04f      	b.n	8006232 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7d1b      	ldrb	r3, [r3, #20]
 8006196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619a:	b2da      	uxtb	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80061a0:	f7fd f890 	bl	80032c4 <get_fattime>
 80061a4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fd fc34 	bl	8003a1c <move_window>
 80061b4:	4603      	mov	r3, r0
 80061b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d138      	bne.n	8006230 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	330b      	adds	r3, #11
 80061c8:	781a      	ldrb	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	330b      	adds	r3, #11
 80061ce:	f042 0220 	orr.w	r2, r2, #32
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	461a      	mov	r2, r3
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	f7fe f9c2 	bl	800456a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f103 021c 	add.w	r2, r3, #28
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4610      	mov	r0, r2
 80061f4:	f7fd f9b8 	bl	8003568 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3316      	adds	r3, #22
 80061fc:	6939      	ldr	r1, [r7, #16]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd f9b2 	bl	8003568 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3312      	adds	r3, #18
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd f991 	bl	8003532 <st_word>
					fs->wflag = 1;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2201      	movs	r2, #1
 8006214:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f7fd fc2d 	bl	8003a78 <sync_fs>
 800621e:	4603      	mov	r3, r0
 8006220:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7d1b      	ldrb	r3, [r3, #20]
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	b2da      	uxtb	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff ff7b 	bl	800613e <f_sync>
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d118      	bne.n	8006284 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f107 0208 	add.w	r2, r7, #8
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fa34 	bl	80056c8 <validate>
 8006260:	4603      	mov	r3, r0
 8006262:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	4618      	mov	r0, r3
 8006270:	f7fd fb30 	bl	80038d4 <dec_lock>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b092      	sub	sp, #72	; 0x48
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800629a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	2200      	movs	r2, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe ff89 	bl	80051bc <find_volume>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80062b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8099 	bne.w	80063ec <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80062ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	3b02      	subs	r3, #2
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d804      	bhi.n	80062d8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e089      	b.n	80063ec <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80062dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d128      	bne.n	8006336 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80062e4:	2302      	movs	r3, #2
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80062ec:	f107 0314 	add.w	r3, r7, #20
 80062f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fd fc4f 	bl	8003b96 <get_fat>
 80062f8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d103      	bne.n	800630a <f_getfree+0x7c>
 8006302:	2301      	movs	r3, #1
 8006304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006308:	e063      	b.n	80063d2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d103      	bne.n	8006318 <f_getfree+0x8a>
 8006310:	2302      	movs	r3, #2
 8006312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006316:	e05c      	b.n	80063d2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <f_getfree+0x96>
 800631e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006320:	3301      	adds	r3, #1
 8006322:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006326:	3301      	adds	r3, #1
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006330:	429a      	cmp	r2, r3
 8006332:	d3db      	bcc.n	80062ec <f_getfree+0x5e>
 8006334:	e04d      	b.n	80063d2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	2300      	movs	r3, #0
 8006348:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800634a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634c:	2b00      	cmp	r3, #0
 800634e:	d113      	bne.n	8006378 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	63ba      	str	r2, [r7, #56]	; 0x38
 8006358:	4619      	mov	r1, r3
 800635a:	f7fd fb5f 	bl	8003a1c <move_window>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006368:	2b00      	cmp	r3, #0
 800636a:	d131      	bne.n	80063d0 <f_getfree+0x142>
							p = fs->win;
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	3338      	adds	r3, #56	; 0x38
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	899b      	ldrh	r3, [r3, #12]
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d10f      	bne.n	80063a0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006382:	f7fd f89b 	bl	80034bc <ld_word>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <f_getfree+0x104>
 800638c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800638e:	3301      	adds	r3, #1
 8006390:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	3302      	adds	r3, #2
 8006396:	633b      	str	r3, [r7, #48]	; 0x30
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	3b02      	subs	r3, #2
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
 800639e:	e010      	b.n	80063c2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80063a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a2:	f7fd f8a3 	bl	80034ec <ld_dword>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <f_getfree+0x128>
 80063b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b2:	3301      	adds	r3, #1
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	3304      	adds	r3, #4
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	3b04      	subs	r3, #4
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80063c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c4:	3b01      	subs	r3, #1
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1bd      	bne.n	800634a <f_getfree+0xbc>
 80063ce:	e000      	b.n	80063d2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80063d0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063d6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063dc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	791a      	ldrb	r2, [r3, #4]
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80063ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3748      	adds	r7, #72	; 0x48
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b087      	sub	sp, #28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800640e:	4b1f      	ldr	r3, [pc, #124]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006410:	7a5b      	ldrb	r3, [r3, #9]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d131      	bne.n	800647c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <FATFS_LinkDriverEx+0x94>)
 800641a:	7a5b      	ldrb	r3, [r3, #9]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	461a      	mov	r2, r3
 8006420:	4b1a      	ldr	r3, [pc, #104]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006422:	2100      	movs	r1, #0
 8006424:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006428:	7a5b      	ldrb	r3, [r3, #9]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	4a17      	ldr	r2, [pc, #92]	; (800648c <FATFS_LinkDriverEx+0x94>)
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006438:	7a5b      	ldrb	r3, [r3, #9]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006440:	4413      	add	r3, r2
 8006442:	79fa      	ldrb	r2, [r7, #7]
 8006444:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006448:	7a5b      	ldrb	r3, [r3, #9]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	b2d1      	uxtb	r1, r2
 8006450:	4a0e      	ldr	r2, [pc, #56]	; (800648c <FATFS_LinkDriverEx+0x94>)
 8006452:	7251      	strb	r1, [r2, #9]
 8006454:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006456:	7dbb      	ldrb	r3, [r7, #22]
 8006458:	3330      	adds	r3, #48	; 0x30
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3301      	adds	r3, #1
 8006464:	223a      	movs	r2, #58	; 0x3a
 8006466:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3302      	adds	r3, #2
 800646c:	222f      	movs	r2, #47	; 0x2f
 800646e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	3303      	adds	r3, #3
 8006474:	2200      	movs	r2, #0
 8006476:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	200023d8 	.word	0x200023d8

08006490 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800649a:	2200      	movs	r2, #0
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ffaa 	bl	80063f8 <FATFS_LinkDriverEx>
 80064a4:	4603      	mov	r3, r0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	2b7f      	cmp	r3, #127	; 0x7f
 80064c0:	d802      	bhi.n	80064c8 <ff_convert+0x18>
		c = chr;
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	81fb      	strh	r3, [r7, #14]
 80064c6:	e025      	b.n	8006514 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	2bff      	cmp	r3, #255	; 0xff
 80064d2:	d805      	bhi.n	80064e0 <ff_convert+0x30>
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	3b80      	subs	r3, #128	; 0x80
 80064d8:	4a12      	ldr	r2, [pc, #72]	; (8006524 <ff_convert+0x74>)
 80064da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064de:	e000      	b.n	80064e2 <ff_convert+0x32>
 80064e0:	2300      	movs	r3, #0
 80064e2:	81fb      	strh	r3, [r7, #14]
 80064e4:	e016      	b.n	8006514 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80064e6:	2300      	movs	r3, #0
 80064e8:	81fb      	strh	r3, [r7, #14]
 80064ea:	e009      	b.n	8006500 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80064ec:	89fb      	ldrh	r3, [r7, #14]
 80064ee:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <ff_convert+0x74>)
 80064f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d006      	beq.n	8006508 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80064fa:	89fb      	ldrh	r3, [r7, #14]
 80064fc:	3301      	adds	r3, #1
 80064fe:	81fb      	strh	r3, [r7, #14]
 8006500:	89fb      	ldrh	r3, [r7, #14]
 8006502:	2b7f      	cmp	r3, #127	; 0x7f
 8006504:	d9f2      	bls.n	80064ec <ff_convert+0x3c>
 8006506:	e000      	b.n	800650a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006508:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	3380      	adds	r3, #128	; 0x80
 800650e:	b29b      	uxth	r3, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006514:	89fb      	ldrh	r3, [r7, #14]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	080067d4 	.word	0x080067d4

08006528 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d201      	bcs.n	800653e <ff_wtoupper+0x16>
 800653a:	4b3e      	ldr	r3, [pc, #248]	; (8006634 <ff_wtoupper+0x10c>)
 800653c:	e000      	b.n	8006540 <ff_wtoupper+0x18>
 800653e:	4b3e      	ldr	r3, [pc, #248]	; (8006638 <ff_wtoupper+0x110>)
 8006540:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	1c9a      	adds	r2, r3, #2
 8006546:	617a      	str	r2, [r7, #20]
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800654c:	8a7b      	ldrh	r3, [r7, #18]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d068      	beq.n	8006624 <ff_wtoupper+0xfc>
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	8a7b      	ldrh	r3, [r7, #18]
 8006556:	429a      	cmp	r2, r3
 8006558:	d364      	bcc.n	8006624 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	1c9a      	adds	r2, r3, #2
 800655e:	617a      	str	r2, [r7, #20]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	823b      	strh	r3, [r7, #16]
 8006564:	8a3b      	ldrh	r3, [r7, #16]
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	81fb      	strh	r3, [r7, #14]
 800656a:	8a3b      	ldrh	r3, [r7, #16]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	8a79      	ldrh	r1, [r7, #18]
 8006574:	8a3b      	ldrh	r3, [r7, #16]
 8006576:	440b      	add	r3, r1
 8006578:	429a      	cmp	r2, r3
 800657a:	da49      	bge.n	8006610 <ff_wtoupper+0xe8>
			switch (cmd) {
 800657c:	89fb      	ldrh	r3, [r7, #14]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d84f      	bhi.n	8006622 <ff_wtoupper+0xfa>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <ff_wtoupper+0x60>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065ad 	.word	0x080065ad
 800658c:	080065bf 	.word	0x080065bf
 8006590:	080065d5 	.word	0x080065d5
 8006594:	080065dd 	.word	0x080065dd
 8006598:	080065e5 	.word	0x080065e5
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	08006605 	.word	0x08006605
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	8a7b      	ldrh	r3, [r7, #18]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	80fb      	strh	r3, [r7, #6]
 80065bc:	e027      	b.n	800660e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80065be:	88fa      	ldrh	r2, [r7, #6]
 80065c0:	8a7b      	ldrh	r3, [r7, #18]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	88fa      	ldrh	r2, [r7, #6]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	80fb      	strh	r3, [r7, #6]
 80065d2:	e01c      	b.n	800660e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	3b10      	subs	r3, #16
 80065d8:	80fb      	strh	r3, [r7, #6]
 80065da:	e018      	b.n	800660e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	3b20      	subs	r3, #32
 80065e0:	80fb      	strh	r3, [r7, #6]
 80065e2:	e014      	b.n	800660e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	3b30      	subs	r3, #48	; 0x30
 80065e8:	80fb      	strh	r3, [r7, #6]
 80065ea:	e010      	b.n	800660e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	3b1a      	subs	r3, #26
 80065f0:	80fb      	strh	r3, [r7, #6]
 80065f2:	e00c      	b.n	800660e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	3308      	adds	r3, #8
 80065f8:	80fb      	strh	r3, [r7, #6]
 80065fa:	e008      	b.n	800660e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	3b50      	subs	r3, #80	; 0x50
 8006600:	80fb      	strh	r3, [r7, #6]
 8006602:	e004      	b.n	800660e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800660a:	80fb      	strh	r3, [r7, #6]
 800660c:	bf00      	nop
			}
			break;
 800660e:	e008      	b.n	8006622 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006610:	89fb      	ldrh	r3, [r7, #14]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d195      	bne.n	8006542 <ff_wtoupper+0x1a>
 8006616:	8a3b      	ldrh	r3, [r7, #16]
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4413      	add	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006620:	e78f      	b.n	8006542 <ff_wtoupper+0x1a>
			break;
 8006622:	bf00      	nop
	}

	return chr;
 8006624:	88fb      	ldrh	r3, [r7, #6]
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	080068d4 	.word	0x080068d4
 8006638:	08006ac8 	.word	0x08006ac8

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	; (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	; (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	; (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f820 	bl	8006694 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	08006b8c 	.word	0x08006b8c
 8006678:	08006b8c 	.word	0x08006b8c
 800667c:	08006b8c 	.word	0x08006b8c
 8006680:	08006b90 	.word	0x08006b90

08006684 <memset>:
 8006684:	4402      	add	r2, r0
 8006686:	4603      	mov	r3, r0
 8006688:	4293      	cmp	r3, r2
 800668a:	d100      	bne.n	800668e <memset+0xa>
 800668c:	4770      	bx	lr
 800668e:	f803 1b01 	strb.w	r1, [r3], #1
 8006692:	e7f9      	b.n	8006688 <memset+0x4>

08006694 <_init>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr

080066a0 <_fini>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr
