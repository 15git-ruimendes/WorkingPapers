
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004348  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800457c  0800457c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  080045f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080045f4  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ec  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225c  00000000  00000000  00030a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00032ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a94  00000000  00000000  00034910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011685  00000000  00000000  000563a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3aff  00000000  00000000  00067a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b528  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  0013b578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004500 	.word	0x08004500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004500 	.word	0x08004500

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ADC_Selector>:
static void MX_RTC_Init(void);
static void MX_TIM6_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
uint32_t ADC_Selector(uint8_t Channel, ADC_HandleTypeDef* hadc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
	switch (Channel)
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <ADC_Selector+0x2a>
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d010      	beq.n	800060e <ADC_Selector+0x4a>
 80005ec:	e022      	b.n	8000634 <ADC_Selector+0x70>
	{
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(hadc,&sConfig) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	6838      	ldr	r0, [r7, #0]
 80005fe:	f000 fe1d 	bl	800123c <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d012      	beq.n	800062e <ADC_Selector+0x6a>
			return -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	e022      	b.n	8000654 <ADC_Selector+0x90>
		break;
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 800060e:	2301      	movs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(hadc,&sConfig) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	4619      	mov	r1, r3
 800061c:	6838      	ldr	r0, [r7, #0]
 800061e:	f000 fe0d 	bl	800123c <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d004      	beq.n	8000632 <ADC_Selector+0x6e>
			return -1;
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	e012      	b.n	8000654 <ADC_Selector+0x90>
		break;
 800062e:	bf00      	nop
 8000630:	e000      	b.n	8000634 <ADC_Selector+0x70>
		break;
 8000632:	bf00      	nop
	}
	HAL_ADC_Start(hadc);
 8000634:	6838      	ldr	r0, [r7, #0]
 8000636:	f000 fc81 	bl	8000f3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc,HAL_MAX_DELAY);
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f000 fd63 	bl	800110a <HAL_ADC_PollForConversion>
	uint32_t Measurment = HAL_ADC_GetValue(hadc);
 8000644:	6838      	ldr	r0, [r7, #0]
 8000646:	f000 fdeb 	bl	8001220 <HAL_ADC_GetValue>
 800064a:	61f8      	str	r0, [r7, #28]
	HAL_ADC_Stop(hadc);
 800064c:	6838      	ldr	r0, [r7, #0]
 800064e:	f000 fd29 	bl	80010a4 <HAL_ADC_Stop>
	return Measurment;
 8000652:	69fb      	ldr	r3, [r7, #28]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fbb6 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f816 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f980 	bl	800096c <MX_GPIO_Init>
  MX_ADC1_Init();
 800066c:	f000 f874 	bl	8000758 <MX_ADC1_Init>
  MX_RTC_Init();
 8000670:	f000 f8f6 	bl	8000860 <MX_RTC_Init>
  MX_TIM6_Init();
 8000674:	f000 f91a 	bl	80008ac <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f94e 	bl	8000918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <main+0x30>)
 800067e:	f002 fedd 	bl	800343c <HAL_UART_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <main+0x34>)
 8000684:	f002 fc0a 	bl	8002e9c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x2c>
 800068a:	bf00      	nop
 800068c:	2000013c 	.word	0x2000013c
 8000690:	200000f4 	.word	0x200000f4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fab6 	bl	8003c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xbc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a23      	ldr	r2, [pc, #140]	; (8000750 <SystemClock_Config+0xbc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <SystemClock_Config+0xbc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <SystemClock_Config+0xc0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <SystemClock_Config+0xc0>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <SystemClock_Config+0xc0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006f0:	230a      	movs	r3, #10
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fff7 	bl	8002700 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000718:	f000 f9a8 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fbf6 	bl	8001f28 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000742:	f000 f993 	bl	8000a6c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800076c:	463b      	mov	r3, r7
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fa4e 	bl	8003c14 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000778:	4b35      	ldr	r3, [pc, #212]	; (8000850 <MX_ADC1_Init+0xf8>)
 800077a:	4a36      	ldr	r2, [pc, #216]	; (8000854 <MX_ADC1_Init+0xfc>)
 800077c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_ADC1_Init+0xf8>)
 800078c:	2201      	movs	r2, #1
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007a6:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <MX_ADC1_Init+0x100>)
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	4822      	ldr	r0, [pc, #136]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007c6:	f000 fb75 	bl	8000eb4 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f94c 	bl	8000a6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	481a      	ldr	r0, [pc, #104]	; (8000850 <MX_ADC1_Init+0xf8>)
 80007e8:	f000 fd28 	bl	800123c <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007f2:	f000 f93b 	bl	8000a6c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_ADC1_Init+0x104>)
 800080c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000820:	f000 ff2a 	bl	8001678 <HAL_ADCEx_InjectedConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800082a:	f000 f91f 	bl	8000a6c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC1_Init+0xf8>)
 8000838:	f000 ff1e 	bl	8001678 <HAL_ADCEx_InjectedConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000842:	f000 f913 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	; 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40012000 	.word	0x40012000
 8000858:	0f000001 	.word	0x0f000001
 800085c:	000f0001 	.word	0x000f0001

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_RTC_Init+0x44>)
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_RTC_Init+0x48>)
 8000868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_RTC_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_RTC_Init+0x44>)
 8000872:	227f      	movs	r2, #127	; 0x7f
 8000874:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_RTC_Init+0x44>)
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_RTC_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_RTC_Init+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_RTC_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_RTC_Init+0x44>)
 8000890:	f002 f9ba 	bl	8002c08 <HAL_RTC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800089a:	f000 f8e7 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000d4 	.word	0x200000d4
 80008a8:	40002800 	.word	0x40002800

080008ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM6_Init+0x64>)
 80008bc:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_TIM6_Init+0x68>)
 80008be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1500;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_TIM6_Init+0x64>)
 80008c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80008c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_TIM6_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5333;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_TIM6_Init+0x64>)
 80008d0:	f241 42d5 	movw	r2, #5333	; 0x14d5
 80008d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_TIM6_Init+0x64>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_TIM6_Init+0x64>)
 80008de:	f002 fa8d 	bl	8002dfc <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008e8:	f000 f8c0 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM6_Init+0x64>)
 80008fa:	f002 fd0f 	bl	800331c <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 f8b2 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000f4 	.word	0x200000f4
 8000914:	40001000 	.word	0x40001000

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART1_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000950:	f002 fd74 	bl	800343c <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f887 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000013c 	.word	0x2000013c
 8000968:	40011000 	.word	0x40011000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_GPIO_Init+0x9c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_GPIO_Init+0x9c>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x9c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x9c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_L1_GPIO_Port, Status_L1_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0xa0>)
 80009de:	f001 fa6f 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Status_L1_Pin */
  GPIO_InitStruct.Pin = Status_L1_Pin;
 80009e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Status_L1_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0xa0>)
 80009fc:	f001 f8e4 	bl	8001bc8 <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020800 	.word	0x40020800

08000a10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	char auxSTR[100];
	sprintf(auxSTR,"Number Read: %d",ADC_Selector(0,&hadc1));
 8000a18:	4910      	ldr	r1, [pc, #64]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fdd2 	bl	80005c4 <ADC_Selector>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f003 f8fb 	bl	8003c24 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t* )auxSTR,strlen(auxSTR),1000);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fbec 	bl	8000210 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	f107 010c 	add.w	r1, r7, #12
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a46:	f002 fd46 	bl	80034d6 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(Status_L1_GPIO_Port,Status_L1_Pin);
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a50:	f001 fa4f 	bl	8001ef2 <HAL_GPIO_TogglePin>
}
 8000a54:	bf00      	nop
 8000a56:	3770      	adds	r7, #112	; 0x70
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	08004518 	.word	0x08004518
 8000a64:	2000013c 	.word	0x2000013c
 8000a68:	40020800 	.word	0x40020800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_ADC_MspInit+0x7c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d127      	bne.n	8000b3a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_ADC_MspInit+0x80>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b22:	2303      	movs	r3, #3
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_ADC_MspInit+0x84>)
 8000b36:	f001 f847 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40012000 	.word	0x40012000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b092      	sub	sp, #72	; 0x48
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	223c      	movs	r2, #60	; 0x3c
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 f857 	bl	8003c14 <memset>
  if(hrtc->Instance==RTC)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <HAL_RTC_MspInit+0x4c>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d111      	bne.n	8000b94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b70:	2308      	movs	r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fbf0 	bl	8002364 <HAL_RCCEx_PeriphCLKConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b8a:	f7ff ff6f 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_RTC_MspInit+0x50>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3748      	adds	r7, #72	; 0x48
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40002800 	.word	0x40002800
 8000ba0:	42470e3c 	.word	0x42470e3c

08000ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_TIM_Base_MspInit+0x48>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d115      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc0:	f043 0310 	orr.w	r3, r3, #16
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2036      	movs	r0, #54	; 0x36
 8000bd8:	f000 ffbf 	bl	8001b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bdc:	2036      	movs	r0, #54	; 0x36
 8000bde:	f000 ffd8 	bl	8001b92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40001000 	.word	0x40001000
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_UART_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_UART_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c60:	2307      	movs	r3, #7
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0x8c>)
 8000c6c:	f000 ffac 	bl	8001bc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8d0 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM6_IRQHandler+0x10>)
 8000cde:	f002 f94d 	bl	8002f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000f4 	.word	0x200000f4

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f002 ff50 	bl	8003bc0 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20040000 	.word	0x20040000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000180 	.word	0x20000180
 8000d54:	20000198 	.word	0x20000198

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f002 ff0f 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fc55 	bl	800065c <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc0:	08004584 	.word	0x08004584
  ldr r2, =_sbss
 8000dc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc8:	20000198 	.word	0x20000198

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 fea3 	bl	8001b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff fe38 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 febb 	bl	8001bae <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 fe83 	bl	8001b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000184 	.word	0x20000184

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000184 	.word	0x20000184

08000eb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e033      	b.n	8000f32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fdf8 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d118      	bne.n	8000f24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000efa:	f023 0302 	bic.w	r3, r3, #2
 8000efe:	f043 0202 	orr.w	r2, r3, #2
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 faba 	bl	8001480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
 8000f22:	e001      	b.n	8000f28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d101      	bne.n	8000f56 <HAL_ADC_Start+0x1a>
 8000f52:	2302      	movs	r3, #2
 8000f54:	e097      	b.n	8001086 <HAL_ADC_Start+0x14a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d018      	beq.n	8000f9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f7c:	4b45      	ldr	r3, [pc, #276]	; (8001094 <HAL_ADC_Start+0x158>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_ADC_Start+0x15c>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	0c9a      	lsrs	r2, r3, #18
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f90:	e002      	b.n	8000f98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f9      	bne.n	8000f92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d15f      	bne.n	800106c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fea:	d106      	bne.n	8000ffa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f023 0206 	bic.w	r2, r3, #6
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ff8:	e002      	b.n	8001000 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <HAL_ADC_Start+0x160>)
 800100a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001014:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d129      	bne.n	8001084 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	e020      	b.n	8001084 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <HAL_ADC_Start+0x164>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d11b      	bne.n	8001084 <HAL_ADC_Start+0x148>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d114      	bne.n	8001084 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	e00b      	b.n	8001084 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f043 0210 	orr.w	r2, r3, #16
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	431bde83 	.word	0x431bde83
 800109c:	40012300 	.word	0x40012300
 80010a0:	40012000 	.word	0x40012000

080010a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Stop+0x16>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e021      	b.n	80010fe <HAL_ADC_Stop+0x5a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b084      	sub	sp, #16
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	d113      	bne.n	8001150 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001136:	d10b      	bne.n	8001150 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f043 0220 	orr.w	r2, r3, #32
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e063      	b.n	8001218 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001150:	f7ff fea4 	bl	8000e9c <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001156:	e021      	b.n	800119c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115e:	d01d      	beq.n	800119c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <HAL_ADC_PollForConversion+0x6c>
 8001166:	f7ff fe99 	bl	8000e9c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d212      	bcs.n	800119c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b02      	cmp	r3, #2
 8001182:	d00b      	beq.n	800119c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f043 0204 	orr.w	r2, r3, #4
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e03d      	b.n	8001218 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d1d6      	bne.n	8001158 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0212 	mvn.w	r2, #18
 80011b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d123      	bne.n	8001216 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11f      	bne.n	8001216 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d111      	bne.n	8001216 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x1c>
 8001254:	2302      	movs	r3, #2
 8001256:	e105      	b.n	8001464 <HAL_ADC_ConfigChannel+0x228>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b09      	cmp	r3, #9
 8001266:	d925      	bls.n	80012b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68d9      	ldr	r1, [r3, #12]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	3b1e      	subs	r3, #30
 800127e:	2207      	movs	r2, #7
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68d9      	ldr	r1, [r3, #12]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	4603      	mov	r3, r0
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4403      	add	r3, r0
 80012a6:	3b1e      	subs	r3, #30
 80012a8:	409a      	lsls	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	e022      	b.n	80012fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6919      	ldr	r1, [r3, #16]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	2207      	movs	r2, #7
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6919      	ldr	r1, [r3, #16]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4403      	add	r3, r0
 80012f0:	409a      	lsls	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d824      	bhi.n	800134c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b05      	subs	r3, #5
 8001314:	221f      	movs	r2, #31
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b05      	subs	r3, #5
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
 800134a:	e04c      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d824      	bhi.n	800139e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b23      	subs	r3, #35	; 0x23
 8001366:	221f      	movs	r2, #31
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43da      	mvns	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	400a      	ands	r2, r1
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	3b23      	subs	r3, #35	; 0x23
 8001390:	fa00 f203 	lsl.w	r2, r0, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	e023      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3b41      	subs	r3, #65	; 0x41
 80013b0:	221f      	movs	r2, #31
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	400a      	ands	r2, r1
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	3b41      	subs	r3, #65	; 0x41
 80013da:	fa00 f203 	lsl.w	r2, r0, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e6:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_ADC_ConfigChannel+0x234>)
 80013e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a21      	ldr	r2, [pc, #132]	; (8001474 <HAL_ADC_ConfigChannel+0x238>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d109      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1cc>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_ADC_ConfigChannel+0x238>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d123      	bne.n	800145a <HAL_ADC_ConfigChannel+0x21e>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b10      	cmp	r3, #16
 8001418:	d003      	beq.n	8001422 <HAL_ADC_ConfigChannel+0x1e6>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b11      	cmp	r3, #17
 8001420:	d11b      	bne.n	800145a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b10      	cmp	r3, #16
 8001434:	d111      	bne.n	800145a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_ADC_ConfigChannel+0x23c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_ADC_ConfigChannel+0x240>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9a      	lsrs	r2, r3, #18
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800144c:	e002      	b.n	8001454 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3b01      	subs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f9      	bne.n	800144e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40012300 	.word	0x40012300
 8001474:	40012000 	.word	0x40012000
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001488:	4b79      	ldr	r3, [pc, #484]	; (8001670 <ADC_Init+0x1f0>)
 800148a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	431a      	orrs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	021a      	lsls	r2, r3, #8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6899      	ldr	r1, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <ADC_Init+0x1f4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d022      	beq.n	800155e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6899      	ldr	r1, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6899      	ldr	r1, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	e00f      	b.n	800157e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800157c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0202 	bic.w	r2, r2, #2
 800158c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6899      	ldr	r1, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	005a      	lsls	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01b      	beq.n	80015e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	3b01      	subs	r3, #1
 80015d8:	035a      	lsls	r2, r3, #13
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	e007      	b.n	80015f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	3b01      	subs	r3, #1
 8001610:	051a      	lsls	r2, r3, #20
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001636:	025a      	lsls	r2, r3, #9
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6899      	ldr	r1, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	029a      	lsls	r2, r3, #10
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	609a      	str	r2, [r3, #8]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40012300 	.word	0x40012300
 8001674:	0f000001 	.word	0x0f000001

08001678 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800168c:	2302      	movs	r3, #2
 800168e:	e17d      	b.n	800198c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b09      	cmp	r3, #9
 800169e:	d925      	bls.n	80016ec <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68d9      	ldr	r1, [r3, #12]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	3b1e      	subs	r3, #30
 80016b6:	2207      	movs	r2, #7
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43da      	mvns	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	400a      	ands	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68d9      	ldr	r1, [r3, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4403      	add	r3, r0
 80016de:	3b1e      	subs	r3, #30
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	e022      	b.n	8001732 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6919      	ldr	r1, [r3, #16]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	2207      	movs	r2, #7
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	4603      	mov	r3, r0
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4403      	add	r3, r0
 8001728:	409a      	lsls	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001740:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	3b01      	subs	r3, #1
 800174e:	051a      	lsls	r2, r3, #20
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3303      	adds	r3, #3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	221f      	movs	r2, #31
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43da      	mvns	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	400a      	ands	r2, r1
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3303      	adds	r3, #3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a74      	ldr	r2, [pc, #464]	; (8001998 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d022      	beq.n	8001810 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80017d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6899      	ldr	r1, [r3, #8]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	699a      	ldr	r2, [r3, #24]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	e00f      	b.n	8001830 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800181e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800182e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7d5b      	ldrb	r3, [r3, #21]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	e007      	b.n	800185a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001858:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	7d1b      	ldrb	r3, [r3, #20]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e007      	b.n	8001884 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001882:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d02e      	beq.n	80018ea <HAL_ADCEx_InjectedConfigChannel+0x272>
 800188c:	2b03      	cmp	r3, #3
 800188e:	d840      	bhi.n	8001912 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8001890:	2b01      	cmp	r3, #1
 8001892:	d002      	beq.n	800189a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8001894:	2b02      	cmp	r3, #2
 8001896:	d014      	beq.n	80018c2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8001898:	e03b      	b.n	8001912 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018a8:	f023 030f 	bic.w	r3, r3, #15
 80018ac:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6959      	ldr	r1, [r3, #20]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]
      break;
 80018c0:	e03b      	b.n	800193a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018d0:	f023 030f 	bic.w	r3, r3, #15
 80018d4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6999      	ldr	r1, [r3, #24]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	619a      	str	r2, [r3, #24]
      break;
 80018e8:	e027      	b.n	800193a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018f8:	f023 030f 	bic.w	r3, r3, #15
 80018fc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69d9      	ldr	r1, [r3, #28]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	61da      	str	r2, [r3, #28]
      break;
 8001910:	e013      	b.n	800193a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001920:	f023 030f 	bic.w	r3, r3, #15
 8001924:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a19      	ldr	r1, [r3, #32]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
      break;
 8001938:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800193c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d109      	bne.n	800195c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b12      	cmp	r3, #18
 800194e:	d105      	bne.n	800195c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10d      	bne.n	8001982 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d003      	beq.n	8001976 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b11      	cmp	r3, #17
 8001974:	d105      	bne.n	8001982 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	000f0001 	.word	0x000f0001
 800199c:	40012300 	.word	0x40012300
 80019a0:	40012000 	.word	0x40012000

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4907      	ldr	r1, [pc, #28]	; (8001a40 <__NVIC_EnableIRQ+0x38>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100

08001a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6039      	str	r1, [r7, #0]
 8001a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db0a      	blt.n	8001a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	490c      	ldr	r1, [pc, #48]	; (8001a90 <__NVIC_SetPriority+0x4c>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	0112      	lsls	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a6c:	e00a      	b.n	8001a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4908      	ldr	r1, [pc, #32]	; (8001a94 <__NVIC_SetPriority+0x50>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	440b      	add	r3, r1
 8001a82:	761a      	strb	r2, [r3, #24]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f1c3 0307 	rsb	r3, r3, #7
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	bf28      	it	cs
 8001ab6:	2304      	movcs	r3, #4
 8001ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3304      	adds	r3, #4
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d902      	bls.n	8001ac8 <NVIC_EncodePriority+0x30>
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3b03      	subs	r3, #3
 8001ac6:	e000      	b.n	8001aca <NVIC_EncodePriority+0x32>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	4313      	orrs	r3, r2
         );
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b10:	d301      	bcc.n	8001b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00f      	b.n	8001b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <SysTick_Config+0x40>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1e:	210f      	movs	r1, #15
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f7ff ff8e 	bl	8001a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <SysTick_Config+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <SysTick_Config+0x40>)
 8001b30:	2207      	movs	r2, #7
 8001b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	e000e010 	.word	0xe000e010

08001b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff29 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6c:	f7ff ff3e 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	6978      	ldr	r0, [r7, #20]
 8001b78:	f7ff ff8e 	bl	8001a98 <NVIC_EncodePriority>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5d 	bl	8001a44 <__NVIC_SetPriority>
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff31 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffa2 	bl	8001b00 <SysTick_Config>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e153      	b.n	8001e8c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8142 	bne.w	8001e86 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 809c 	beq.w	8001e86 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a53      	ldr	r2, [pc, #332]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <HAL_GPIO_Init+0x2dc>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_Init+0x2e0>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a46      	ldr	r2, [pc, #280]	; (8001eac <HAL_GPIO_Init+0x2e4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x1f6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_GPIO_Init+0x2e8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x1f2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a44      	ldr	r2, [pc, #272]	; (8001eb4 <HAL_GPIO_Init+0x2ec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x1ee>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a43      	ldr	r2, [pc, #268]	; (8001eb8 <HAL_GPIO_Init+0x2f0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x1ea>
 8001dae:	2303      	movs	r3, #3
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x1f8>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x1f8>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x1f8>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x1f8>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x2e0>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e2c:	4a23      	ldr	r2, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e56:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_GPIO_Init+0x2f4>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f aea8 	bls.w	8001be4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	619a      	str	r2, [r3, #24]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	460b      	mov	r3, r1
 8001efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	041a      	lsls	r2, r3, #16
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	400b      	ands	r3, r1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0cc      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90c      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b8      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f94:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	494d      	ldr	r1, [pc, #308]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d044      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e07f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e06f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e067      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4934      	ldr	r1, [pc, #208]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7fe ff40 	bl	8000e9c <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe ff3c 	bl	8000e9c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04f      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d20c      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e032      	b.n	80020d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4916      	ldr	r1, [pc, #88]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	490e      	ldr	r1, [pc, #56]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ae:	f000 f821 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 80020b2:	4602      	mov	r2, r0
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	490a      	ldr	r1, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fea0 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	08004528 	.word	0x08004528
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f8:	b094      	sub	sp, #80	; 0x50
 80020fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	2300      	movs	r3, #0
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800210c:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d00d      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x40>
 8002118:	2b08      	cmp	r3, #8
 800211a:	f200 80e1 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x34>
 8002122:	2b04      	cmp	r3, #4
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x3a>
 8002126:	e0db      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002128:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800212c:	e0db      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002132:	e0d8      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d063      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214a:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	099b      	lsrs	r3, r3, #6
 8002150:	2200      	movs	r2, #0
 8002152:	63bb      	str	r3, [r7, #56]	; 0x38
 8002154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
 800215e:	2300      	movs	r3, #0
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
 8002162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	6139      	str	r1, [r7, #16]
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002198:	4659      	mov	r1, fp
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4651      	mov	r1, sl
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4651      	mov	r1, sl
 80021a8:	ebb2 0801 	subs.w	r8, r2, r1
 80021ac:	4659      	mov	r1, fp
 80021ae:	eb63 0901 	sbc.w	r9, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c6:	4690      	mov	r8, r2
 80021c8:	4699      	mov	r9, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb18 0303 	adds.w	r3, r8, r3
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb49 0303 	adc.w	r3, r9, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fa:	2200      	movs	r2, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002204:	f7fe f85c 	bl	80002c0 <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002210:	e058      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	099b      	lsrs	r3, r3, #6
 8002218:	2200      	movs	r2, #0
 800221a:	4618      	mov	r0, r3
 800221c:	4611      	mov	r1, r2
 800221e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
 8002228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4641      	mov	r1, r8
 8002246:	ebb2 0a01 	subs.w	sl, r2, r1
 800224a:	4649      	mov	r1, r9
 800224c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800225c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002264:	ebb2 040a 	subs.w	r4, r2, sl
 8002268:	eb63 050b 	sbc.w	r5, r3, fp
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	00eb      	lsls	r3, r5, #3
 8002276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800227a:	00e2      	lsls	r2, r4, #3
 800227c:	4614      	mov	r4, r2
 800227e:	461d      	mov	r5, r3
 8002280:	4643      	mov	r3, r8
 8002282:	18e3      	adds	r3, r4, r3
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	464b      	mov	r3, r9
 8002288:	eb45 0303 	adc.w	r3, r5, r3
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4500 	ldrd	r4, r5, [r7]
 800229a:	4629      	mov	r1, r5
 800229c:	028b      	lsls	r3, r1, #10
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a4:	4621      	mov	r1, r4
 80022a6:	028a      	lsls	r2, r1, #10
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	61fa      	str	r2, [r7, #28]
 80022b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b8:	f7fe f802 	bl	80002c0 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3750      	adds	r7, #80	; 0x50
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400

080022fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a9b      	lsrs	r3, r3, #10
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	08004538 	.word	0x08004538

0800233c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002340:	f7ff ffdc 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0b5b      	lsrs	r3, r3, #13
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	08004538 	.word	0x08004538

08002364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d010      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002384:	4b87      	ldr	r3, [pc, #540]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4984      	ldr	r1, [pc, #528]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80023a2:	2301      	movs	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4978      	ldr	r1, [pc, #480]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80023d0:	2301      	movs	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8083 	beq.w	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800240a:	f7fe fd47 	bl	8000e9c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fd43 	bl	8000e9c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e162      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002424:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002430:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02f      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d028      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800244e:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002458:	4b54      	ldr	r3, [pc, #336]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800246a:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b01      	cmp	r3, #1
 8002474:	d114      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fd11 	bl	8000e9c <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fd0d 	bl	8000e9c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e12a      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ac:	d10d      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x166>
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]
 80024c8:	e005      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4a35      	ldr	r2, [pc, #212]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024d4:	6093      	str	r3, [r2, #8]
 80024d6:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	4930      	ldr	r1, [pc, #192]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024fc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	4922      	ldr	r1, [pc, #136]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d011      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	491a      	ldr	r1, [pc, #104]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254a:	d101      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800254c:	2301      	movs	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800255e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002562:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d004      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	f040 8091 	bne.w	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002588:	f7fe fc88 	bl	8000e9c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800258e:	e013      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002590:	f7fe fc84 	bl	8000e9c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d90c      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e0a3      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x386>
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470e40 	.word	0x42470e40
 80025b0:	424711e0 	.word	0x424711e0
 80025b4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e5      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d023      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d019      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002608:	d00e      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d019      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002626:	d110      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	492c      	ldr	r1, [pc, #176]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	061b      	lsls	r3, r3, #24
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	071b      	lsls	r3, r3, #28
 8002670:	4920      	ldr	r1, [pc, #128]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800267e:	f7fe fc0d 	bl	8000e9c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002686:	f7fe fc09 	bl	8000e9c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e028      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80026b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	490d      	ldr	r1, [pc, #52]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	424710d8 	.word	0x424710d8
 80026fc:	42470068 	.word	0x42470068

08002700 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e273      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d075      	beq.n	800280a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00c      	beq.n	8002744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002732:	2b08      	cmp	r3, #8
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	4b7e      	ldr	r3, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05b      	beq.n	8002808 <HAL_RCC_OscConfig+0x108>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d157      	bne.n	8002808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e24e      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x74>
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x98>
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6f      	ldr	r2, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6c      	ldr	r2, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fb70 	bl	8000e9c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fb6c 	bl	8000e9c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e213      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fb5c 	bl	8000e9c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fb58 	bl	8000e9c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1ff      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0xe8>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1d3      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x244>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fb11 	bl	8000e9c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fb0d 	bl	8000e9c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1b4      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4925      	ldr	r1, [pc, #148]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x244>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe faf0 	bl	8000e9c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe faec 	bl	8000e9c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e193      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x248>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fad0 	bl	8000e9c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe facc 	bl	8000e9c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e173      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x200>
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x248>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fab9 	bl	8000e9c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	e00e      	b.n	800294c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe fab5 	bl	8000e9c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e15c      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ea      	bne.n	800292e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b7c      	ldr	r3, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_RCC_OscConfig+0x47c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x47c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x47c>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fa75 	bl	8000e9c <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fa71 	bl	8000e9c <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e118      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_RCC_OscConfig+0x47c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x2ea>
 80029dc:	4b66      	ldr	r3, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a65      	ldr	r2, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x30c>
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	; 0x70
 80029fe:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4a59      	ldr	r2, [pc, #356]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70
 8002a18:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a56      	ldr	r2, [pc, #344]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fa36 	bl	8000e9c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fa32 	bl	8000e9c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0d7      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCC_OscConfig+0x334>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe fa20 	bl	8000e9c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fa1c 	bl	8000e9c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0c1      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	4a3a      	ldr	r2, [pc, #232]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80ad 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d060      	beq.n	8002b6c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d145      	bne.n	8002b3e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_OscConfig+0x480>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f9f0 	bl	8000e9c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f9ec 	bl	8000e9c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e093      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	491b      	ldr	r1, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x480>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe f9c1 	bl	8000e9c <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe f9bd 	bl	8000e9c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e064      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x41e>
 8002b3c:	e05c      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x480>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f9aa 	bl	8000e9c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f9a6 	bl	8000e9c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04d      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x44c>
 8002b6a:	e045      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e040      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_RCC_OscConfig+0x504>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d129      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d122      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d119      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800

08002c08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e066      	b.n	8002cec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7f5b      	ldrb	r3, [r3, #29]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd ff8e 	bl	8000b50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	22ca      	movs	r2, #202	; 0xca
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2253      	movs	r2, #83	; 0x53
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f87a 	bl	8002d44 <RTC_EnterInitMode>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d12c      	bne.n	8002cb4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c6c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68d2      	ldr	r2, [r2, #12]
 8002c94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6919      	ldr	r1, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f881 	bl	8002db2 <RTC_ExitInitMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d113      	bne.n	8002ce2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d10:	f7fe f8c4 	bl	8000e9c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d18:	f7fe f8c0 	bl	8000e9c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d26:	d901      	bls.n	8002d2c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e007      	b.n	8002d3c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d122      	bne.n	8002da8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d72:	f7fe f893 	bl	8000e9c <HAL_GetTick>
 8002d76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d78:	e00c      	b.n	8002d94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d7a:	f7fe f88f 	bl	8000e9c <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d88:	d904      	bls.n	8002d94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <RTC_EnterInitMode+0x64>
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d1e8      	bne.n	8002d7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff89 	bl	8002cf4 <HAL_RTC_WaitForSynchro>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e041      	b.n	8002e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd febe 	bl	8000ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f000 f9ce 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e04e      	b.n	8002f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d01d      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d111      	bne.n	8002f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d010      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	e007      	b.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800

08002f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8ee 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8e0 	bl	800318c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8f1 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0204 	mvn.w	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8c4 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8b6 	bl	800318c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8c7 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0208 	mvn.w	r2, #8
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2204      	movs	r2, #4
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f89a 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f88c 	bl	800318c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f89d 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0210 	mvn.w	r2, #16
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2208      	movs	r2, #8
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f870 	bl	80031a0 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f862 	bl	800318c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f873 	bl	80031b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fc88 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f97e 	bl	8003428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b40      	cmp	r3, #64	; 0x40
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f838 	bl	80031c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b20      	cmp	r3, #32
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b20      	cmp	r3, #32
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0220 	mvn.w	r2, #32
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f948 	bl	8003414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a3b      	ldr	r2, [pc, #236]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x40>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d02b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d027      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2c      	ldr	r2, [pc, #176]	; (80032f4 <TIM_Base_SetConfig+0x118>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d023      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <TIM_Base_SetConfig+0x11c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <TIM_Base_SetConfig+0x120>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <TIM_Base_SetConfig+0x124>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d017      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a28      	ldr	r2, [pc, #160]	; (8003304 <TIM_Base_SetConfig+0x128>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a27      	ldr	r2, [pc, #156]	; (8003308 <TIM_Base_SetConfig+0x12c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00f      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a26      	ldr	r2, [pc, #152]	; (800330c <TIM_Base_SetConfig+0x130>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0x134>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a24      	ldr	r2, [pc, #144]	; (8003314 <TIM_Base_SetConfig+0x138>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <TIM_Base_SetConfig+0x13c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d108      	bne.n	80032a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d003      	beq.n	80032d4 <TIM_Base_SetConfig+0xf8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40010400 	.word	0x40010400
 8003304:	40014000 	.word	0x40014000
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	40001800 	.word	0x40001800
 8003314:	40001c00 	.word	0x40001c00
 8003318:	40002000 	.word	0x40002000

0800331c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e05a      	b.n	80033ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a21      	ldr	r2, [pc, #132]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003380:	d01d      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1a      	ldr	r2, [pc, #104]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a15      	ldr	r2, [pc, #84]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10c      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40010000 	.word	0x40010000
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40010400 	.word	0x40010400
 800340c:	40014000 	.word	0x40014000
 8003410:	40001800 	.word	0x40001800

08003414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e03f      	b.n	80034ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fbc6 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f929 	bl	80036d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b08a      	sub	sp, #40	; 0x28
 80034da:	af02      	add	r7, sp, #8
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d17c      	bne.n	80035f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Transmit+0x2c>
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e075      	b.n	80035f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit+0x3e>
 8003510:	2302      	movs	r3, #2
 8003512:	e06e      	b.n	80035f2 <HAL_UART_Transmit+0x11c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2221      	movs	r2, #33	; 0x21
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352a:	f7fd fcb7 	bl	8000e9c <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d108      	bne.n	8003558 <HAL_UART_Transmit+0x82>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e003      	b.n	8003560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003568:	e02a      	b.n	80035c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f840 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e036      	b.n	80035f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	3302      	adds	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	e007      	b.n	80035b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1cf      	bne.n	800356a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2140      	movs	r1, #64	; 0x40
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f810 	bl	80035fa <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e006      	b.n	80035f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	e000      	b.n	80035f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b090      	sub	sp, #64	; 0x40
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	e050      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d04c      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x30>
 800361a:	f7fd fc3f 	bl	8000e9c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003626:	429a      	cmp	r2, r3
 8003628:	d241      	bcs.n	80036ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	330c      	adds	r3, #12
 8003648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800364a:	637a      	str	r2, [r7, #52]	; 0x34
 800364c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e5      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3314      	adds	r3, #20
 8003664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	613b      	str	r3, [r7, #16]
   return(result);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800367e:	623a      	str	r2, [r7, #32]
 8003680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	69f9      	ldr	r1, [r7, #28]
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	61bb      	str	r3, [r7, #24]
   return(result);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e00f      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d09f      	beq.n	800360c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3740      	adds	r7, #64	; 0x40
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b0c0      	sub	sp, #256	; 0x100
 80036de:	af00      	add	r7, sp, #0
 80036e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	68d9      	ldr	r1, [r3, #12]
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	ea40 0301 	orr.w	r3, r0, r1
 8003700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	431a      	orrs	r2, r3
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003730:	f021 010c 	bic.w	r1, r1, #12
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800373e:	430b      	orrs	r3, r1
 8003740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	6999      	ldr	r1, [r3, #24]
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	ea40 0301 	orr.w	r3, r0, r1
 800375e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <UART_SetConfig+0x2cc>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d005      	beq.n	8003778 <UART_SetConfig+0xa0>
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b8d      	ldr	r3, [pc, #564]	; (80039a8 <UART_SetConfig+0x2d0>)
 8003774:	429a      	cmp	r2, r3
 8003776:	d104      	bne.n	8003782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe fde0 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 800377c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003780:	e003      	b.n	800378a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7fe fdc7 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	f040 810c 	bne.w	80039b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379c:	2200      	movs	r2, #0
 800379e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037aa:	4622      	mov	r2, r4
 80037ac:	462b      	mov	r3, r5
 80037ae:	1891      	adds	r1, r2, r2
 80037b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b2:	415b      	adcs	r3, r3
 80037b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ba:	4621      	mov	r1, r4
 80037bc:	eb12 0801 	adds.w	r8, r2, r1
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb43 0901 	adc.w	r9, r3, r1
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037da:	4690      	mov	r8, r2
 80037dc:	4699      	mov	r9, r3
 80037de:	4623      	mov	r3, r4
 80037e0:	eb18 0303 	adds.w	r3, r8, r3
 80037e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037e8:	462b      	mov	r3, r5
 80037ea:	eb49 0303 	adc.w	r3, r9, r3
 80037ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003806:	460b      	mov	r3, r1
 8003808:	18db      	adds	r3, r3, r3
 800380a:	653b      	str	r3, [r7, #80]	; 0x50
 800380c:	4613      	mov	r3, r2
 800380e:	eb42 0303 	adc.w	r3, r2, r3
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
 8003814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800381c:	f7fc fd50 	bl	80002c0 <__aeabi_uldivmod>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <UART_SetConfig+0x2d4>)
 8003826:	fba3 2302 	umull	r2, r3, r3, r2
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	011c      	lsls	r4, r3, #4
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800383c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	64b9      	str	r1, [r7, #72]	; 0x48
 8003848:	415b      	adcs	r3, r3
 800384a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800384c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003850:	4641      	mov	r1, r8
 8003852:	eb12 0a01 	adds.w	sl, r2, r1
 8003856:	4649      	mov	r1, r9
 8003858:	eb43 0b01 	adc.w	fp, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800386c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003870:	4692      	mov	sl, r2
 8003872:	469b      	mov	fp, r3
 8003874:	4643      	mov	r3, r8
 8003876:	eb1a 0303 	adds.w	r3, sl, r3
 800387a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800387e:	464b      	mov	r3, r9
 8003880:	eb4b 0303 	adc.w	r3, fp, r3
 8003884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800389c:	460b      	mov	r3, r1
 800389e:	18db      	adds	r3, r3, r3
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
 80038a2:	4613      	mov	r3, r2
 80038a4:	eb42 0303 	adc.w	r3, r2, r3
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
 80038aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038b2:	f7fc fd05 	bl	80002c0 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <UART_SetConfig+0x2d4>)
 80038be:	fba3 2301 	umull	r2, r3, r3, r1
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2264      	movs	r2, #100	; 0x64
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	1acb      	subs	r3, r1, r3
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038d2:	4b36      	ldr	r3, [pc, #216]	; (80039ac <UART_SetConfig+0x2d4>)
 80038d4:	fba3 2302 	umull	r2, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e0:	441c      	add	r4, r3
 80038e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e6:	2200      	movs	r2, #0
 80038e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	1891      	adds	r1, r2, r2
 80038fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80038fc:	415b      	adcs	r3, r3
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003904:	4641      	mov	r1, r8
 8003906:	1851      	adds	r1, r2, r1
 8003908:	6339      	str	r1, [r7, #48]	; 0x30
 800390a:	4649      	mov	r1, r9
 800390c:	414b      	adcs	r3, r1
 800390e:	637b      	str	r3, [r7, #52]	; 0x34
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800391c:	4659      	mov	r1, fp
 800391e:	00cb      	lsls	r3, r1, #3
 8003920:	4651      	mov	r1, sl
 8003922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003926:	4651      	mov	r1, sl
 8003928:	00ca      	lsls	r2, r1, #3
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	4603      	mov	r3, r0
 8003930:	4642      	mov	r2, r8
 8003932:	189b      	adds	r3, r3, r2
 8003934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003938:	464b      	mov	r3, r9
 800393a:	460a      	mov	r2, r1
 800393c:	eb42 0303 	adc.w	r3, r2, r3
 8003940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003958:	460b      	mov	r3, r1
 800395a:	18db      	adds	r3, r3, r3
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
 800395e:	4613      	mov	r3, r2
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800396a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800396e:	f7fc fca7 	bl	80002c0 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <UART_SetConfig+0x2d4>)
 8003978:	fba3 1302 	umull	r1, r3, r3, r2
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	2164      	movs	r1, #100	; 0x64
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	3332      	adds	r3, #50	; 0x32
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <UART_SetConfig+0x2d4>)
 800398c:	fba2 2303 	umull	r2, r3, r2, r3
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4422      	add	r2, r4
 800399e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a0:	e105      	b.n	8003bae <UART_SetConfig+0x4d6>
 80039a2:	bf00      	nop
 80039a4:	40011000 	.word	0x40011000
 80039a8:	40011400 	.word	0x40011400
 80039ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039c2:	4642      	mov	r2, r8
 80039c4:	464b      	mov	r3, r9
 80039c6:	1891      	adds	r1, r2, r2
 80039c8:	6239      	str	r1, [r7, #32]
 80039ca:	415b      	adcs	r3, r3
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d2:	4641      	mov	r1, r8
 80039d4:	1854      	adds	r4, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb43 0501 	adc.w	r5, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	00eb      	lsls	r3, r5, #3
 80039e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039f8:	464b      	mov	r3, r9
 80039fa:	eb45 0303 	adc.w	r3, r5, r3
 80039fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a1e:	4629      	mov	r1, r5
 8003a20:	008b      	lsls	r3, r1, #2
 8003a22:	4621      	mov	r1, r4
 8003a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a28:	4621      	mov	r1, r4
 8003a2a:	008a      	lsls	r2, r1, #2
 8003a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a30:	f7fc fc46 	bl	80002c0 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b60      	ldr	r3, [pc, #384]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	011c      	lsls	r4, r3, #4
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	61b9      	str	r1, [r7, #24]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6139      	str	r1, [r7, #16]
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a98:	464b      	mov	r3, r9
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003abc:	4649      	mov	r1, r9
 8003abe:	008b      	lsls	r3, r1, #2
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	008a      	lsls	r2, r1, #2
 8003aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ace:	f7fc fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	3332      	adds	r3, #50	; 0x32
 8003aea:	4a34      	ldr	r2, [pc, #208]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af6:	441c      	add	r4, r3
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	673b      	str	r3, [r7, #112]	; 0x70
 8003b00:	677a      	str	r2, [r7, #116]	; 0x74
 8003b02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b06:	4642      	mov	r2, r8
 8003b08:	464b      	mov	r3, r9
 8003b0a:	1891      	adds	r1, r2, r2
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	415b      	adcs	r3, r3
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b16:	4641      	mov	r1, r8
 8003b18:	1851      	adds	r1, r2, r1
 8003b1a:	6039      	str	r1, [r7, #0]
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	414b      	adcs	r3, r1
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b2e:	4659      	mov	r1, fp
 8003b30:	00cb      	lsls	r3, r1, #3
 8003b32:	4651      	mov	r1, sl
 8003b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b38:	4651      	mov	r1, sl
 8003b3a:	00ca      	lsls	r2, r1, #3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4603      	mov	r3, r0
 8003b42:	4642      	mov	r2, r8
 8003b44:	189b      	adds	r3, r3, r2
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	667a      	str	r2, [r7, #100]	; 0x64
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	008b      	lsls	r3, r1, #2
 8003b6e:	4641      	mov	r1, r8
 8003b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b74:	4641      	mov	r1, r8
 8003b76:	008a      	lsls	r2, r1, #2
 8003b78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b7c:	f7fc fba0 	bl	80002c0 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003b86:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2164      	movs	r1, #100	; 0x64
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <UART_SetConfig+0x4e4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4422      	add	r2, r4
 8003bac:	609a      	str	r2, [r3, #8]
}
 8003bae:	bf00      	nop
 8003bb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	51eb851f 	.word	0x51eb851f

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	; (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4d0d      	ldr	r5, [pc, #52]	; (8003c04 <__libc_init_array+0x38>)
 8003bd0:	4c0d      	ldr	r4, [pc, #52]	; (8003c08 <__libc_init_array+0x3c>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	4d0b      	ldr	r5, [pc, #44]	; (8003c0c <__libc_init_array+0x40>)
 8003bde:	4c0c      	ldr	r4, [pc, #48]	; (8003c10 <__libc_init_array+0x44>)
 8003be0:	f000 fc8e 	bl	8004500 <_init>
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	2600      	movs	r6, #0
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	0800457c 	.word	0x0800457c
 8003c08:	0800457c 	.word	0x0800457c
 8003c0c:	0800457c 	.word	0x0800457c
 8003c10:	08004580 	.word	0x08004580

08003c14 <memset>:
 8003c14:	4402      	add	r2, r0
 8003c16:	4603      	mov	r3, r0
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <memset+0xa>
 8003c1c:	4770      	bx	lr
 8003c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c22:	e7f9      	b.n	8003c18 <memset+0x4>

08003c24 <siprintf>:
 8003c24:	b40e      	push	{r1, r2, r3}
 8003c26:	b500      	push	{lr}
 8003c28:	b09c      	sub	sp, #112	; 0x70
 8003c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003c2c:	9002      	str	r0, [sp, #8]
 8003c2e:	9006      	str	r0, [sp, #24]
 8003c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c34:	4809      	ldr	r0, [pc, #36]	; (8003c5c <siprintf+0x38>)
 8003c36:	9107      	str	r1, [sp, #28]
 8003c38:	9104      	str	r1, [sp, #16]
 8003c3a:	4909      	ldr	r1, [pc, #36]	; (8003c60 <siprintf+0x3c>)
 8003c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c40:	9105      	str	r1, [sp, #20]
 8003c42:	6800      	ldr	r0, [r0, #0]
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	a902      	add	r1, sp, #8
 8003c48:	f000 f868 	bl	8003d1c <_svfiprintf_r>
 8003c4c:	9b02      	ldr	r3, [sp, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	b01c      	add	sp, #112	; 0x70
 8003c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c58:	b003      	add	sp, #12
 8003c5a:	4770      	bx	lr
 8003c5c:	2000000c 	.word	0x2000000c
 8003c60:	ffff0208 	.word	0xffff0208

08003c64 <__ssputs_r>:
 8003c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c68:	688e      	ldr	r6, [r1, #8]
 8003c6a:	429e      	cmp	r6, r3
 8003c6c:	4682      	mov	sl, r0
 8003c6e:	460c      	mov	r4, r1
 8003c70:	4690      	mov	r8, r2
 8003c72:	461f      	mov	r7, r3
 8003c74:	d838      	bhi.n	8003ce8 <__ssputs_r+0x84>
 8003c76:	898a      	ldrh	r2, [r1, #12]
 8003c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c7c:	d032      	beq.n	8003ce4 <__ssputs_r+0x80>
 8003c7e:	6825      	ldr	r5, [r4, #0]
 8003c80:	6909      	ldr	r1, [r1, #16]
 8003c82:	eba5 0901 	sub.w	r9, r5, r1
 8003c86:	6965      	ldr	r5, [r4, #20]
 8003c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c90:	3301      	adds	r3, #1
 8003c92:	444b      	add	r3, r9
 8003c94:	106d      	asrs	r5, r5, #1
 8003c96:	429d      	cmp	r5, r3
 8003c98:	bf38      	it	cc
 8003c9a:	461d      	movcc	r5, r3
 8003c9c:	0553      	lsls	r3, r2, #21
 8003c9e:	d531      	bpl.n	8003d04 <__ssputs_r+0xa0>
 8003ca0:	4629      	mov	r1, r5
 8003ca2:	f000 fb63 	bl	800436c <_malloc_r>
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	b950      	cbnz	r0, 8003cc0 <__ssputs_r+0x5c>
 8003caa:	230c      	movs	r3, #12
 8003cac:	f8ca 3000 	str.w	r3, [sl]
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb6:	81a3      	strh	r3, [r4, #12]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc0:	6921      	ldr	r1, [r4, #16]
 8003cc2:	464a      	mov	r2, r9
 8003cc4:	f000 fabe 	bl	8004244 <memcpy>
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	6126      	str	r6, [r4, #16]
 8003cd6:	6165      	str	r5, [r4, #20]
 8003cd8:	444e      	add	r6, r9
 8003cda:	eba5 0509 	sub.w	r5, r5, r9
 8003cde:	6026      	str	r6, [r4, #0]
 8003ce0:	60a5      	str	r5, [r4, #8]
 8003ce2:	463e      	mov	r6, r7
 8003ce4:	42be      	cmp	r6, r7
 8003ce6:	d900      	bls.n	8003cea <__ssputs_r+0x86>
 8003ce8:	463e      	mov	r6, r7
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	4632      	mov	r2, r6
 8003cee:	4641      	mov	r1, r8
 8003cf0:	f000 fab6 	bl	8004260 <memmove>
 8003cf4:	68a3      	ldr	r3, [r4, #8]
 8003cf6:	1b9b      	subs	r3, r3, r6
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	4433      	add	r3, r6
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	2000      	movs	r0, #0
 8003d02:	e7db      	b.n	8003cbc <__ssputs_r+0x58>
 8003d04:	462a      	mov	r2, r5
 8003d06:	f000 fba5 	bl	8004454 <_realloc_r>
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d1e1      	bne.n	8003cd4 <__ssputs_r+0x70>
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	4650      	mov	r0, sl
 8003d14:	f000 fabe 	bl	8004294 <_free_r>
 8003d18:	e7c7      	b.n	8003caa <__ssputs_r+0x46>
	...

08003d1c <_svfiprintf_r>:
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	4698      	mov	r8, r3
 8003d22:	898b      	ldrh	r3, [r1, #12]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	b09d      	sub	sp, #116	; 0x74
 8003d28:	4607      	mov	r7, r0
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	d50e      	bpl.n	8003d4e <_svfiprintf_r+0x32>
 8003d30:	690b      	ldr	r3, [r1, #16]
 8003d32:	b963      	cbnz	r3, 8003d4e <_svfiprintf_r+0x32>
 8003d34:	2140      	movs	r1, #64	; 0x40
 8003d36:	f000 fb19 	bl	800436c <_malloc_r>
 8003d3a:	6028      	str	r0, [r5, #0]
 8003d3c:	6128      	str	r0, [r5, #16]
 8003d3e:	b920      	cbnz	r0, 8003d4a <_svfiprintf_r+0x2e>
 8003d40:	230c      	movs	r3, #12
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	e0d1      	b.n	8003eee <_svfiprintf_r+0x1d2>
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	616b      	str	r3, [r5, #20]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9309      	str	r3, [sp, #36]	; 0x24
 8003d52:	2320      	movs	r3, #32
 8003d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d5c:	2330      	movs	r3, #48	; 0x30
 8003d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f08 <_svfiprintf_r+0x1ec>
 8003d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d66:	f04f 0901 	mov.w	r9, #1
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	469a      	mov	sl, r3
 8003d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d72:	b10a      	cbz	r2, 8003d78 <_svfiprintf_r+0x5c>
 8003d74:	2a25      	cmp	r2, #37	; 0x25
 8003d76:	d1f9      	bne.n	8003d6c <_svfiprintf_r+0x50>
 8003d78:	ebba 0b04 	subs.w	fp, sl, r4
 8003d7c:	d00b      	beq.n	8003d96 <_svfiprintf_r+0x7a>
 8003d7e:	465b      	mov	r3, fp
 8003d80:	4622      	mov	r2, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	4638      	mov	r0, r7
 8003d86:	f7ff ff6d 	bl	8003c64 <__ssputs_r>
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f000 80aa 	beq.w	8003ee4 <_svfiprintf_r+0x1c8>
 8003d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d92:	445a      	add	r2, fp
 8003d94:	9209      	str	r2, [sp, #36]	; 0x24
 8003d96:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80a2 	beq.w	8003ee4 <_svfiprintf_r+0x1c8>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003daa:	f10a 0a01 	add.w	sl, sl, #1
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	9307      	str	r3, [sp, #28]
 8003db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003db6:	931a      	str	r3, [sp, #104]	; 0x68
 8003db8:	4654      	mov	r4, sl
 8003dba:	2205      	movs	r2, #5
 8003dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc0:	4851      	ldr	r0, [pc, #324]	; (8003f08 <_svfiprintf_r+0x1ec>)
 8003dc2:	f7fc fa2d 	bl	8000220 <memchr>
 8003dc6:	9a04      	ldr	r2, [sp, #16]
 8003dc8:	b9d8      	cbnz	r0, 8003e02 <_svfiprintf_r+0xe6>
 8003dca:	06d0      	lsls	r0, r2, #27
 8003dcc:	bf44      	itt	mi
 8003dce:	2320      	movmi	r3, #32
 8003dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dd4:	0711      	lsls	r1, r2, #28
 8003dd6:	bf44      	itt	mi
 8003dd8:	232b      	movmi	r3, #43	; 0x2b
 8003dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dde:	f89a 3000 	ldrb.w	r3, [sl]
 8003de2:	2b2a      	cmp	r3, #42	; 0x2a
 8003de4:	d015      	beq.n	8003e12 <_svfiprintf_r+0xf6>
 8003de6:	9a07      	ldr	r2, [sp, #28]
 8003de8:	4654      	mov	r4, sl
 8003dea:	2000      	movs	r0, #0
 8003dec:	f04f 0c0a 	mov.w	ip, #10
 8003df0:	4621      	mov	r1, r4
 8003df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df6:	3b30      	subs	r3, #48	; 0x30
 8003df8:	2b09      	cmp	r3, #9
 8003dfa:	d94e      	bls.n	8003e9a <_svfiprintf_r+0x17e>
 8003dfc:	b1b0      	cbz	r0, 8003e2c <_svfiprintf_r+0x110>
 8003dfe:	9207      	str	r2, [sp, #28]
 8003e00:	e014      	b.n	8003e2c <_svfiprintf_r+0x110>
 8003e02:	eba0 0308 	sub.w	r3, r0, r8
 8003e06:	fa09 f303 	lsl.w	r3, r9, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	9304      	str	r3, [sp, #16]
 8003e0e:	46a2      	mov	sl, r4
 8003e10:	e7d2      	b.n	8003db8 <_svfiprintf_r+0x9c>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	1d19      	adds	r1, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9103      	str	r1, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfbb      	ittet	lt
 8003e1e:	425b      	neglt	r3, r3
 8003e20:	f042 0202 	orrlt.w	r2, r2, #2
 8003e24:	9307      	strge	r3, [sp, #28]
 8003e26:	9307      	strlt	r3, [sp, #28]
 8003e28:	bfb8      	it	lt
 8003e2a:	9204      	strlt	r2, [sp, #16]
 8003e2c:	7823      	ldrb	r3, [r4, #0]
 8003e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e30:	d10c      	bne.n	8003e4c <_svfiprintf_r+0x130>
 8003e32:	7863      	ldrb	r3, [r4, #1]
 8003e34:	2b2a      	cmp	r3, #42	; 0x2a
 8003e36:	d135      	bne.n	8003ea4 <_svfiprintf_r+0x188>
 8003e38:	9b03      	ldr	r3, [sp, #12]
 8003e3a:	1d1a      	adds	r2, r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	9203      	str	r2, [sp, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bfb8      	it	lt
 8003e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e48:	3402      	adds	r4, #2
 8003e4a:	9305      	str	r3, [sp, #20]
 8003e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f18 <_svfiprintf_r+0x1fc>
 8003e50:	7821      	ldrb	r1, [r4, #0]
 8003e52:	2203      	movs	r2, #3
 8003e54:	4650      	mov	r0, sl
 8003e56:	f7fc f9e3 	bl	8000220 <memchr>
 8003e5a:	b140      	cbz	r0, 8003e6e <_svfiprintf_r+0x152>
 8003e5c:	2340      	movs	r3, #64	; 0x40
 8003e5e:	eba0 000a 	sub.w	r0, r0, sl
 8003e62:	fa03 f000 	lsl.w	r0, r3, r0
 8003e66:	9b04      	ldr	r3, [sp, #16]
 8003e68:	4303      	orrs	r3, r0
 8003e6a:	3401      	adds	r4, #1
 8003e6c:	9304      	str	r3, [sp, #16]
 8003e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e72:	4826      	ldr	r0, [pc, #152]	; (8003f0c <_svfiprintf_r+0x1f0>)
 8003e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e78:	2206      	movs	r2, #6
 8003e7a:	f7fc f9d1 	bl	8000220 <memchr>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d038      	beq.n	8003ef4 <_svfiprintf_r+0x1d8>
 8003e82:	4b23      	ldr	r3, [pc, #140]	; (8003f10 <_svfiprintf_r+0x1f4>)
 8003e84:	bb1b      	cbnz	r3, 8003ece <_svfiprintf_r+0x1b2>
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	3307      	adds	r3, #7
 8003e8a:	f023 0307 	bic.w	r3, r3, #7
 8003e8e:	3308      	adds	r3, #8
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e94:	4433      	add	r3, r6
 8003e96:	9309      	str	r3, [sp, #36]	; 0x24
 8003e98:	e767      	b.n	8003d6a <_svfiprintf_r+0x4e>
 8003e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	e7a5      	b.n	8003df0 <_svfiprintf_r+0xd4>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	3401      	adds	r4, #1
 8003ea8:	9305      	str	r3, [sp, #20]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 0c0a 	mov.w	ip, #10
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eb6:	3a30      	subs	r2, #48	; 0x30
 8003eb8:	2a09      	cmp	r2, #9
 8003eba:	d903      	bls.n	8003ec4 <_svfiprintf_r+0x1a8>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0c5      	beq.n	8003e4c <_svfiprintf_r+0x130>
 8003ec0:	9105      	str	r1, [sp, #20]
 8003ec2:	e7c3      	b.n	8003e4c <_svfiprintf_r+0x130>
 8003ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ec8:	4604      	mov	r4, r0
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e7f0      	b.n	8003eb0 <_svfiprintf_r+0x194>
 8003ece:	ab03      	add	r3, sp, #12
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <_svfiprintf_r+0x1f8>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f3af 8000 	nop.w
 8003ede:	1c42      	adds	r2, r0, #1
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	d1d6      	bne.n	8003e92 <_svfiprintf_r+0x176>
 8003ee4:	89ab      	ldrh	r3, [r5, #12]
 8003ee6:	065b      	lsls	r3, r3, #25
 8003ee8:	f53f af2c 	bmi.w	8003d44 <_svfiprintf_r+0x28>
 8003eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eee:	b01d      	add	sp, #116	; 0x74
 8003ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef4:	ab03      	add	r3, sp, #12
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <_svfiprintf_r+0x1f8>)
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	4638      	mov	r0, r7
 8003f00:	f000 f87a 	bl	8003ff8 <_printf_i>
 8003f04:	e7eb      	b.n	8003ede <_svfiprintf_r+0x1c2>
 8003f06:	bf00      	nop
 8003f08:	08004540 	.word	0x08004540
 8003f0c:	0800454a 	.word	0x0800454a
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003c65 	.word	0x08003c65
 8003f18:	08004546 	.word	0x08004546

08003f1c <_printf_common>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	4616      	mov	r6, r2
 8003f22:	4699      	mov	r9, r3
 8003f24:	688a      	ldr	r2, [r1, #8]
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bfb8      	it	lt
 8003f30:	4613      	movlt	r3, r2
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f38:	4607      	mov	r7, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b10a      	cbz	r2, 8003f42 <_printf_common+0x26>
 8003f3e:	3301      	adds	r3, #1
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	0699      	lsls	r1, r3, #26
 8003f46:	bf42      	ittt	mi
 8003f48:	6833      	ldrmi	r3, [r6, #0]
 8003f4a:	3302      	addmi	r3, #2
 8003f4c:	6033      	strmi	r3, [r6, #0]
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	f015 0506 	ands.w	r5, r5, #6
 8003f54:	d106      	bne.n	8003f64 <_printf_common+0x48>
 8003f56:	f104 0a19 	add.w	sl, r4, #25
 8003f5a:	68e3      	ldr	r3, [r4, #12]
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	42ab      	cmp	r3, r5
 8003f62:	dc26      	bgt.n	8003fb2 <_printf_common+0x96>
 8003f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f68:	1e13      	subs	r3, r2, #0
 8003f6a:	6822      	ldr	r2, [r4, #0]
 8003f6c:	bf18      	it	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	0692      	lsls	r2, r2, #26
 8003f72:	d42b      	bmi.n	8003fcc <_printf_common+0xb0>
 8003f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d01e      	beq.n	8003fc0 <_printf_common+0xa4>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	68e5      	ldr	r5, [r4, #12]
 8003f86:	6832      	ldr	r2, [r6, #0]
 8003f88:	f003 0306 	and.w	r3, r3, #6
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	bf08      	it	eq
 8003f90:	1aad      	subeq	r5, r5, r2
 8003f92:	68a3      	ldr	r3, [r4, #8]
 8003f94:	6922      	ldr	r2, [r4, #16]
 8003f96:	bf0c      	ite	eq
 8003f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f9c:	2500      	movne	r5, #0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bfc4      	itt	gt
 8003fa2:	1a9b      	subgt	r3, r3, r2
 8003fa4:	18ed      	addgt	r5, r5, r3
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	341a      	adds	r4, #26
 8003faa:	42b5      	cmp	r5, r6
 8003fac:	d11a      	bne.n	8003fe4 <_printf_common+0xc8>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e008      	b.n	8003fc4 <_printf_common+0xa8>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4652      	mov	r2, sl
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	4638      	mov	r0, r7
 8003fba:	47c0      	blx	r8
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_printf_common+0xac>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	3501      	adds	r5, #1
 8003fca:	e7c6      	b.n	8003f5a <_printf_common+0x3e>
 8003fcc:	18e1      	adds	r1, r4, r3
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	2030      	movs	r0, #48	; 0x30
 8003fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fd6:	4422      	add	r2, r4
 8003fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	e7c7      	b.n	8003f74 <_printf_common+0x58>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	4649      	mov	r1, r9
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c0      	blx	r8
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d0e6      	beq.n	8003fc0 <_printf_common+0xa4>
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7d9      	b.n	8003faa <_printf_common+0x8e>
	...

08003ff8 <_printf_i>:
 8003ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	7e0f      	ldrb	r7, [r1, #24]
 8003ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004000:	2f78      	cmp	r7, #120	; 0x78
 8004002:	4691      	mov	r9, r2
 8004004:	4680      	mov	r8, r0
 8004006:	460c      	mov	r4, r1
 8004008:	469a      	mov	sl, r3
 800400a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800400e:	d807      	bhi.n	8004020 <_printf_i+0x28>
 8004010:	2f62      	cmp	r7, #98	; 0x62
 8004012:	d80a      	bhi.n	800402a <_printf_i+0x32>
 8004014:	2f00      	cmp	r7, #0
 8004016:	f000 80d8 	beq.w	80041ca <_printf_i+0x1d2>
 800401a:	2f58      	cmp	r7, #88	; 0x58
 800401c:	f000 80a3 	beq.w	8004166 <_printf_i+0x16e>
 8004020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004028:	e03a      	b.n	80040a0 <_printf_i+0xa8>
 800402a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800402e:	2b15      	cmp	r3, #21
 8004030:	d8f6      	bhi.n	8004020 <_printf_i+0x28>
 8004032:	a101      	add	r1, pc, #4	; (adr r1, 8004038 <_printf_i+0x40>)
 8004034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004038:	08004091 	.word	0x08004091
 800403c:	080040a5 	.word	0x080040a5
 8004040:	08004021 	.word	0x08004021
 8004044:	08004021 	.word	0x08004021
 8004048:	08004021 	.word	0x08004021
 800404c:	08004021 	.word	0x08004021
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08004021 	.word	0x08004021
 8004058:	08004021 	.word	0x08004021
 800405c:	08004021 	.word	0x08004021
 8004060:	08004021 	.word	0x08004021
 8004064:	080041b1 	.word	0x080041b1
 8004068:	080040d5 	.word	0x080040d5
 800406c:	08004193 	.word	0x08004193
 8004070:	08004021 	.word	0x08004021
 8004074:	08004021 	.word	0x08004021
 8004078:	080041d3 	.word	0x080041d3
 800407c:	08004021 	.word	0x08004021
 8004080:	080040d5 	.word	0x080040d5
 8004084:	08004021 	.word	0x08004021
 8004088:	08004021 	.word	0x08004021
 800408c:	0800419b 	.word	0x0800419b
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	602a      	str	r2, [r5, #0]
 8004098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800409c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0a3      	b.n	80041ec <_printf_i+0x1f4>
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	6829      	ldr	r1, [r5, #0]
 80040a8:	0606      	lsls	r6, r0, #24
 80040aa:	f101 0304 	add.w	r3, r1, #4
 80040ae:	d50a      	bpl.n	80040c6 <_printf_i+0xce>
 80040b0:	680e      	ldr	r6, [r1, #0]
 80040b2:	602b      	str	r3, [r5, #0]
 80040b4:	2e00      	cmp	r6, #0
 80040b6:	da03      	bge.n	80040c0 <_printf_i+0xc8>
 80040b8:	232d      	movs	r3, #45	; 0x2d
 80040ba:	4276      	negs	r6, r6
 80040bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040c0:	485e      	ldr	r0, [pc, #376]	; (800423c <_printf_i+0x244>)
 80040c2:	230a      	movs	r3, #10
 80040c4:	e019      	b.n	80040fa <_printf_i+0x102>
 80040c6:	680e      	ldr	r6, [r1, #0]
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ce:	bf18      	it	ne
 80040d0:	b236      	sxthne	r6, r6
 80040d2:	e7ef      	b.n	80040b4 <_printf_i+0xbc>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	1d19      	adds	r1, r3, #4
 80040da:	6029      	str	r1, [r5, #0]
 80040dc:	0601      	lsls	r1, r0, #24
 80040de:	d501      	bpl.n	80040e4 <_printf_i+0xec>
 80040e0:	681e      	ldr	r6, [r3, #0]
 80040e2:	e002      	b.n	80040ea <_printf_i+0xf2>
 80040e4:	0646      	lsls	r6, r0, #25
 80040e6:	d5fb      	bpl.n	80040e0 <_printf_i+0xe8>
 80040e8:	881e      	ldrh	r6, [r3, #0]
 80040ea:	4854      	ldr	r0, [pc, #336]	; (800423c <_printf_i+0x244>)
 80040ec:	2f6f      	cmp	r7, #111	; 0x6f
 80040ee:	bf0c      	ite	eq
 80040f0:	2308      	moveq	r3, #8
 80040f2:	230a      	movne	r3, #10
 80040f4:	2100      	movs	r1, #0
 80040f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040fa:	6865      	ldr	r5, [r4, #4]
 80040fc:	60a5      	str	r5, [r4, #8]
 80040fe:	2d00      	cmp	r5, #0
 8004100:	bfa2      	ittt	ge
 8004102:	6821      	ldrge	r1, [r4, #0]
 8004104:	f021 0104 	bicge.w	r1, r1, #4
 8004108:	6021      	strge	r1, [r4, #0]
 800410a:	b90e      	cbnz	r6, 8004110 <_printf_i+0x118>
 800410c:	2d00      	cmp	r5, #0
 800410e:	d04d      	beq.n	80041ac <_printf_i+0x1b4>
 8004110:	4615      	mov	r5, r2
 8004112:	fbb6 f1f3 	udiv	r1, r6, r3
 8004116:	fb03 6711 	mls	r7, r3, r1, r6
 800411a:	5dc7      	ldrb	r7, [r0, r7]
 800411c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004120:	4637      	mov	r7, r6
 8004122:	42bb      	cmp	r3, r7
 8004124:	460e      	mov	r6, r1
 8004126:	d9f4      	bls.n	8004112 <_printf_i+0x11a>
 8004128:	2b08      	cmp	r3, #8
 800412a:	d10b      	bne.n	8004144 <_printf_i+0x14c>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	07de      	lsls	r6, r3, #31
 8004130:	d508      	bpl.n	8004144 <_printf_i+0x14c>
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6861      	ldr	r1, [r4, #4]
 8004136:	4299      	cmp	r1, r3
 8004138:	bfde      	ittt	le
 800413a:	2330      	movle	r3, #48	; 0x30
 800413c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004144:	1b52      	subs	r2, r2, r5
 8004146:	6122      	str	r2, [r4, #16]
 8004148:	f8cd a000 	str.w	sl, [sp]
 800414c:	464b      	mov	r3, r9
 800414e:	aa03      	add	r2, sp, #12
 8004150:	4621      	mov	r1, r4
 8004152:	4640      	mov	r0, r8
 8004154:	f7ff fee2 	bl	8003f1c <_printf_common>
 8004158:	3001      	adds	r0, #1
 800415a:	d14c      	bne.n	80041f6 <_printf_i+0x1fe>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	b004      	add	sp, #16
 8004162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004166:	4835      	ldr	r0, [pc, #212]	; (800423c <_printf_i+0x244>)
 8004168:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800416c:	6829      	ldr	r1, [r5, #0]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f851 6b04 	ldr.w	r6, [r1], #4
 8004174:	6029      	str	r1, [r5, #0]
 8004176:	061d      	lsls	r5, r3, #24
 8004178:	d514      	bpl.n	80041a4 <_printf_i+0x1ac>
 800417a:	07df      	lsls	r7, r3, #31
 800417c:	bf44      	itt	mi
 800417e:	f043 0320 	orrmi.w	r3, r3, #32
 8004182:	6023      	strmi	r3, [r4, #0]
 8004184:	b91e      	cbnz	r6, 800418e <_printf_i+0x196>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f023 0320 	bic.w	r3, r3, #32
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	2310      	movs	r3, #16
 8004190:	e7b0      	b.n	80040f4 <_printf_i+0xfc>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	f043 0320 	orr.w	r3, r3, #32
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	2378      	movs	r3, #120	; 0x78
 800419c:	4828      	ldr	r0, [pc, #160]	; (8004240 <_printf_i+0x248>)
 800419e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041a2:	e7e3      	b.n	800416c <_printf_i+0x174>
 80041a4:	0659      	lsls	r1, r3, #25
 80041a6:	bf48      	it	mi
 80041a8:	b2b6      	uxthmi	r6, r6
 80041aa:	e7e6      	b.n	800417a <_printf_i+0x182>
 80041ac:	4615      	mov	r5, r2
 80041ae:	e7bb      	b.n	8004128 <_printf_i+0x130>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	6826      	ldr	r6, [r4, #0]
 80041b4:	6961      	ldr	r1, [r4, #20]
 80041b6:	1d18      	adds	r0, r3, #4
 80041b8:	6028      	str	r0, [r5, #0]
 80041ba:	0635      	lsls	r5, r6, #24
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	d501      	bpl.n	80041c4 <_printf_i+0x1cc>
 80041c0:	6019      	str	r1, [r3, #0]
 80041c2:	e002      	b.n	80041ca <_printf_i+0x1d2>
 80041c4:	0670      	lsls	r0, r6, #25
 80041c6:	d5fb      	bpl.n	80041c0 <_printf_i+0x1c8>
 80041c8:	8019      	strh	r1, [r3, #0]
 80041ca:	2300      	movs	r3, #0
 80041cc:	6123      	str	r3, [r4, #16]
 80041ce:	4615      	mov	r5, r2
 80041d0:	e7ba      	b.n	8004148 <_printf_i+0x150>
 80041d2:	682b      	ldr	r3, [r5, #0]
 80041d4:	1d1a      	adds	r2, r3, #4
 80041d6:	602a      	str	r2, [r5, #0]
 80041d8:	681d      	ldr	r5, [r3, #0]
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	2100      	movs	r1, #0
 80041de:	4628      	mov	r0, r5
 80041e0:	f7fc f81e 	bl	8000220 <memchr>
 80041e4:	b108      	cbz	r0, 80041ea <_printf_i+0x1f2>
 80041e6:	1b40      	subs	r0, r0, r5
 80041e8:	6060      	str	r0, [r4, #4]
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	2300      	movs	r3, #0
 80041f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f4:	e7a8      	b.n	8004148 <_printf_i+0x150>
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	462a      	mov	r2, r5
 80041fa:	4649      	mov	r1, r9
 80041fc:	4640      	mov	r0, r8
 80041fe:	47d0      	blx	sl
 8004200:	3001      	adds	r0, #1
 8004202:	d0ab      	beq.n	800415c <_printf_i+0x164>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	079b      	lsls	r3, r3, #30
 8004208:	d413      	bmi.n	8004232 <_printf_i+0x23a>
 800420a:	68e0      	ldr	r0, [r4, #12]
 800420c:	9b03      	ldr	r3, [sp, #12]
 800420e:	4298      	cmp	r0, r3
 8004210:	bfb8      	it	lt
 8004212:	4618      	movlt	r0, r3
 8004214:	e7a4      	b.n	8004160 <_printf_i+0x168>
 8004216:	2301      	movs	r3, #1
 8004218:	4632      	mov	r2, r6
 800421a:	4649      	mov	r1, r9
 800421c:	4640      	mov	r0, r8
 800421e:	47d0      	blx	sl
 8004220:	3001      	adds	r0, #1
 8004222:	d09b      	beq.n	800415c <_printf_i+0x164>
 8004224:	3501      	adds	r5, #1
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	9903      	ldr	r1, [sp, #12]
 800422a:	1a5b      	subs	r3, r3, r1
 800422c:	42ab      	cmp	r3, r5
 800422e:	dcf2      	bgt.n	8004216 <_printf_i+0x21e>
 8004230:	e7eb      	b.n	800420a <_printf_i+0x212>
 8004232:	2500      	movs	r5, #0
 8004234:	f104 0619 	add.w	r6, r4, #25
 8004238:	e7f5      	b.n	8004226 <_printf_i+0x22e>
 800423a:	bf00      	nop
 800423c:	08004551 	.word	0x08004551
 8004240:	08004562 	.word	0x08004562

08004244 <memcpy>:
 8004244:	440a      	add	r2, r1
 8004246:	4291      	cmp	r1, r2
 8004248:	f100 33ff 	add.w	r3, r0, #4294967295
 800424c:	d100      	bne.n	8004250 <memcpy+0xc>
 800424e:	4770      	bx	lr
 8004250:	b510      	push	{r4, lr}
 8004252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800425a:	4291      	cmp	r1, r2
 800425c:	d1f9      	bne.n	8004252 <memcpy+0xe>
 800425e:	bd10      	pop	{r4, pc}

08004260 <memmove>:
 8004260:	4288      	cmp	r0, r1
 8004262:	b510      	push	{r4, lr}
 8004264:	eb01 0402 	add.w	r4, r1, r2
 8004268:	d902      	bls.n	8004270 <memmove+0x10>
 800426a:	4284      	cmp	r4, r0
 800426c:	4623      	mov	r3, r4
 800426e:	d807      	bhi.n	8004280 <memmove+0x20>
 8004270:	1e43      	subs	r3, r0, #1
 8004272:	42a1      	cmp	r1, r4
 8004274:	d008      	beq.n	8004288 <memmove+0x28>
 8004276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800427a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427e:	e7f8      	b.n	8004272 <memmove+0x12>
 8004280:	4402      	add	r2, r0
 8004282:	4601      	mov	r1, r0
 8004284:	428a      	cmp	r2, r1
 8004286:	d100      	bne.n	800428a <memmove+0x2a>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004292:	e7f7      	b.n	8004284 <memmove+0x24>

08004294 <_free_r>:
 8004294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004296:	2900      	cmp	r1, #0
 8004298:	d044      	beq.n	8004324 <_free_r+0x90>
 800429a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800429e:	9001      	str	r0, [sp, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f1a1 0404 	sub.w	r4, r1, #4
 80042a6:	bfb8      	it	lt
 80042a8:	18e4      	addlt	r4, r4, r3
 80042aa:	f000 f913 	bl	80044d4 <__malloc_lock>
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <_free_r+0x94>)
 80042b0:	9801      	ldr	r0, [sp, #4]
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	b933      	cbnz	r3, 80042c4 <_free_r+0x30>
 80042b6:	6063      	str	r3, [r4, #4]
 80042b8:	6014      	str	r4, [r2, #0]
 80042ba:	b003      	add	sp, #12
 80042bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042c0:	f000 b90e 	b.w	80044e0 <__malloc_unlock>
 80042c4:	42a3      	cmp	r3, r4
 80042c6:	d908      	bls.n	80042da <_free_r+0x46>
 80042c8:	6825      	ldr	r5, [r4, #0]
 80042ca:	1961      	adds	r1, r4, r5
 80042cc:	428b      	cmp	r3, r1
 80042ce:	bf01      	itttt	eq
 80042d0:	6819      	ldreq	r1, [r3, #0]
 80042d2:	685b      	ldreq	r3, [r3, #4]
 80042d4:	1949      	addeq	r1, r1, r5
 80042d6:	6021      	streq	r1, [r4, #0]
 80042d8:	e7ed      	b.n	80042b6 <_free_r+0x22>
 80042da:	461a      	mov	r2, r3
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b10b      	cbz	r3, 80042e4 <_free_r+0x50>
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	d9fa      	bls.n	80042da <_free_r+0x46>
 80042e4:	6811      	ldr	r1, [r2, #0]
 80042e6:	1855      	adds	r5, r2, r1
 80042e8:	42a5      	cmp	r5, r4
 80042ea:	d10b      	bne.n	8004304 <_free_r+0x70>
 80042ec:	6824      	ldr	r4, [r4, #0]
 80042ee:	4421      	add	r1, r4
 80042f0:	1854      	adds	r4, r2, r1
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	6011      	str	r1, [r2, #0]
 80042f6:	d1e0      	bne.n	80042ba <_free_r+0x26>
 80042f8:	681c      	ldr	r4, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	6053      	str	r3, [r2, #4]
 80042fe:	4421      	add	r1, r4
 8004300:	6011      	str	r1, [r2, #0]
 8004302:	e7da      	b.n	80042ba <_free_r+0x26>
 8004304:	d902      	bls.n	800430c <_free_r+0x78>
 8004306:	230c      	movs	r3, #12
 8004308:	6003      	str	r3, [r0, #0]
 800430a:	e7d6      	b.n	80042ba <_free_r+0x26>
 800430c:	6825      	ldr	r5, [r4, #0]
 800430e:	1961      	adds	r1, r4, r5
 8004310:	428b      	cmp	r3, r1
 8004312:	bf04      	itt	eq
 8004314:	6819      	ldreq	r1, [r3, #0]
 8004316:	685b      	ldreq	r3, [r3, #4]
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	bf04      	itt	eq
 800431c:	1949      	addeq	r1, r1, r5
 800431e:	6021      	streq	r1, [r4, #0]
 8004320:	6054      	str	r4, [r2, #4]
 8004322:	e7ca      	b.n	80042ba <_free_r+0x26>
 8004324:	b003      	add	sp, #12
 8004326:	bd30      	pop	{r4, r5, pc}
 8004328:	20000188 	.word	0x20000188

0800432c <sbrk_aligned>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4e0e      	ldr	r6, [pc, #56]	; (8004368 <sbrk_aligned+0x3c>)
 8004330:	460c      	mov	r4, r1
 8004332:	6831      	ldr	r1, [r6, #0]
 8004334:	4605      	mov	r5, r0
 8004336:	b911      	cbnz	r1, 800433e <sbrk_aligned+0x12>
 8004338:	f000 f8bc 	bl	80044b4 <_sbrk_r>
 800433c:	6030      	str	r0, [r6, #0]
 800433e:	4621      	mov	r1, r4
 8004340:	4628      	mov	r0, r5
 8004342:	f000 f8b7 	bl	80044b4 <_sbrk_r>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	d00a      	beq.n	8004360 <sbrk_aligned+0x34>
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d007      	beq.n	8004364 <sbrk_aligned+0x38>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4628      	mov	r0, r5
 8004358:	f000 f8ac 	bl	80044b4 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d101      	bne.n	8004364 <sbrk_aligned+0x38>
 8004360:	f04f 34ff 	mov.w	r4, #4294967295
 8004364:	4620      	mov	r0, r4
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	2000018c 	.word	0x2000018c

0800436c <_malloc_r>:
 800436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004370:	1ccd      	adds	r5, r1, #3
 8004372:	f025 0503 	bic.w	r5, r5, #3
 8004376:	3508      	adds	r5, #8
 8004378:	2d0c      	cmp	r5, #12
 800437a:	bf38      	it	cc
 800437c:	250c      	movcc	r5, #12
 800437e:	2d00      	cmp	r5, #0
 8004380:	4607      	mov	r7, r0
 8004382:	db01      	blt.n	8004388 <_malloc_r+0x1c>
 8004384:	42a9      	cmp	r1, r5
 8004386:	d905      	bls.n	8004394 <_malloc_r+0x28>
 8004388:	230c      	movs	r3, #12
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	2600      	movs	r6, #0
 800438e:	4630      	mov	r0, r6
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	4e2e      	ldr	r6, [pc, #184]	; (8004450 <_malloc_r+0xe4>)
 8004396:	f000 f89d 	bl	80044d4 <__malloc_lock>
 800439a:	6833      	ldr	r3, [r6, #0]
 800439c:	461c      	mov	r4, r3
 800439e:	bb34      	cbnz	r4, 80043ee <_malloc_r+0x82>
 80043a0:	4629      	mov	r1, r5
 80043a2:	4638      	mov	r0, r7
 80043a4:	f7ff ffc2 	bl	800432c <sbrk_aligned>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	4604      	mov	r4, r0
 80043ac:	d14d      	bne.n	800444a <_malloc_r+0xde>
 80043ae:	6834      	ldr	r4, [r6, #0]
 80043b0:	4626      	mov	r6, r4
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	d140      	bne.n	8004438 <_malloc_r+0xcc>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	4631      	mov	r1, r6
 80043ba:	4638      	mov	r0, r7
 80043bc:	eb04 0803 	add.w	r8, r4, r3
 80043c0:	f000 f878 	bl	80044b4 <_sbrk_r>
 80043c4:	4580      	cmp	r8, r0
 80043c6:	d13a      	bne.n	800443e <_malloc_r+0xd2>
 80043c8:	6821      	ldr	r1, [r4, #0]
 80043ca:	3503      	adds	r5, #3
 80043cc:	1a6d      	subs	r5, r5, r1
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	4629      	mov	r1, r5
 80043dc:	4638      	mov	r0, r7
 80043de:	f7ff ffa5 	bl	800432c <sbrk_aligned>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d02b      	beq.n	800443e <_malloc_r+0xd2>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	442b      	add	r3, r5
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	e00e      	b.n	800440c <_malloc_r+0xa0>
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	1b52      	subs	r2, r2, r5
 80043f2:	d41e      	bmi.n	8004432 <_malloc_r+0xc6>
 80043f4:	2a0b      	cmp	r2, #11
 80043f6:	d916      	bls.n	8004426 <_malloc_r+0xba>
 80043f8:	1961      	adds	r1, r4, r5
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	bf18      	it	ne
 8004400:	6059      	strne	r1, [r3, #4]
 8004402:	6863      	ldr	r3, [r4, #4]
 8004404:	bf08      	it	eq
 8004406:	6031      	streq	r1, [r6, #0]
 8004408:	5162      	str	r2, [r4, r5]
 800440a:	604b      	str	r3, [r1, #4]
 800440c:	4638      	mov	r0, r7
 800440e:	f104 060b 	add.w	r6, r4, #11
 8004412:	f000 f865 	bl	80044e0 <__malloc_unlock>
 8004416:	f026 0607 	bic.w	r6, r6, #7
 800441a:	1d23      	adds	r3, r4, #4
 800441c:	1af2      	subs	r2, r6, r3
 800441e:	d0b6      	beq.n	800438e <_malloc_r+0x22>
 8004420:	1b9b      	subs	r3, r3, r6
 8004422:	50a3      	str	r3, [r4, r2]
 8004424:	e7b3      	b.n	800438e <_malloc_r+0x22>
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	42a3      	cmp	r3, r4
 800442a:	bf0c      	ite	eq
 800442c:	6032      	streq	r2, [r6, #0]
 800442e:	605a      	strne	r2, [r3, #4]
 8004430:	e7ec      	b.n	800440c <_malloc_r+0xa0>
 8004432:	4623      	mov	r3, r4
 8004434:	6864      	ldr	r4, [r4, #4]
 8004436:	e7b2      	b.n	800439e <_malloc_r+0x32>
 8004438:	4634      	mov	r4, r6
 800443a:	6876      	ldr	r6, [r6, #4]
 800443c:	e7b9      	b.n	80043b2 <_malloc_r+0x46>
 800443e:	230c      	movs	r3, #12
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4638      	mov	r0, r7
 8004444:	f000 f84c 	bl	80044e0 <__malloc_unlock>
 8004448:	e7a1      	b.n	800438e <_malloc_r+0x22>
 800444a:	6025      	str	r5, [r4, #0]
 800444c:	e7de      	b.n	800440c <_malloc_r+0xa0>
 800444e:	bf00      	nop
 8004450:	20000188 	.word	0x20000188

08004454 <_realloc_r>:
 8004454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	4680      	mov	r8, r0
 800445a:	4614      	mov	r4, r2
 800445c:	460e      	mov	r6, r1
 800445e:	b921      	cbnz	r1, 800446a <_realloc_r+0x16>
 8004460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004464:	4611      	mov	r1, r2
 8004466:	f7ff bf81 	b.w	800436c <_malloc_r>
 800446a:	b92a      	cbnz	r2, 8004478 <_realloc_r+0x24>
 800446c:	f7ff ff12 	bl	8004294 <_free_r>
 8004470:	4625      	mov	r5, r4
 8004472:	4628      	mov	r0, r5
 8004474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004478:	f000 f838 	bl	80044ec <_malloc_usable_size_r>
 800447c:	4284      	cmp	r4, r0
 800447e:	4607      	mov	r7, r0
 8004480:	d802      	bhi.n	8004488 <_realloc_r+0x34>
 8004482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004486:	d812      	bhi.n	80044ae <_realloc_r+0x5a>
 8004488:	4621      	mov	r1, r4
 800448a:	4640      	mov	r0, r8
 800448c:	f7ff ff6e 	bl	800436c <_malloc_r>
 8004490:	4605      	mov	r5, r0
 8004492:	2800      	cmp	r0, #0
 8004494:	d0ed      	beq.n	8004472 <_realloc_r+0x1e>
 8004496:	42bc      	cmp	r4, r7
 8004498:	4622      	mov	r2, r4
 800449a:	4631      	mov	r1, r6
 800449c:	bf28      	it	cs
 800449e:	463a      	movcs	r2, r7
 80044a0:	f7ff fed0 	bl	8004244 <memcpy>
 80044a4:	4631      	mov	r1, r6
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fef4 	bl	8004294 <_free_r>
 80044ac:	e7e1      	b.n	8004472 <_realloc_r+0x1e>
 80044ae:	4635      	mov	r5, r6
 80044b0:	e7df      	b.n	8004472 <_realloc_r+0x1e>
	...

080044b4 <_sbrk_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	4d06      	ldr	r5, [pc, #24]	; (80044d0 <_sbrk_r+0x1c>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	602b      	str	r3, [r5, #0]
 80044c0:	f7fc fc14 	bl	8000cec <_sbrk>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d102      	bne.n	80044ce <_sbrk_r+0x1a>
 80044c8:	682b      	ldr	r3, [r5, #0]
 80044ca:	b103      	cbz	r3, 80044ce <_sbrk_r+0x1a>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	bd38      	pop	{r3, r4, r5, pc}
 80044d0:	20000190 	.word	0x20000190

080044d4 <__malloc_lock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__malloc_lock+0x8>)
 80044d6:	f000 b811 	b.w	80044fc <__retarget_lock_acquire_recursive>
 80044da:	bf00      	nop
 80044dc:	20000194 	.word	0x20000194

080044e0 <__malloc_unlock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_unlock+0x8>)
 80044e2:	f000 b80c 	b.w	80044fe <__retarget_lock_release_recursive>
 80044e6:	bf00      	nop
 80044e8:	20000194 	.word	0x20000194

080044ec <_malloc_usable_size_r>:
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f18      	subs	r0, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbc      	itt	lt
 80044f6:	580b      	ldrlt	r3, [r1, r0]
 80044f8:	18c0      	addlt	r0, r0, r3
 80044fa:	4770      	bx	lr

080044fc <__retarget_lock_acquire_recursive>:
 80044fc:	4770      	bx	lr

080044fe <__retarget_lock_release_recursive>:
 80044fe:	4770      	bx	lr

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
