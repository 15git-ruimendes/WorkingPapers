
EthernetBlink_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c4c  08011030  08011030  00021030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c7c  08013c7c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08013c7c  08013c7c  00023c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c84  08013c84  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c84  08013c84  00023c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c88  08013c88  00023c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013c8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08013d1c  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08013dbc  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008780  200001d0  08013e5c  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008950  08013e5c  00038950  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022b90  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005823  00000000  00000000  00052d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001808  00000000  00000000  000585b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001738  00000000  00000000  00059dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032e9b  00000000  00000000  0005b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002871e  00000000  00000000  0008e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101836  00000000  00000000  000b6ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001b82e7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006c74  00000000  00000000  001b8338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011018 	.word	0x08011018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08011018 	.word	0x08011018

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005b8:	f000 f97e 	bl	80008b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fda8 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f812 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f8d6 	bl	8000774 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f876 	bl	80006b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f8a4 	bl	8000718 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005d0:	f004 fbac 	bl	8004d2c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80005d4:	f000 fba6 	bl	8000d24 <udpServer_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ethernetif_input(&gnetif);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <main+0x30>)
 80005da:	f004 fe43 	bl	8005264 <ethernetif_input>
	  sys_check_timeouts();
 80005de:	f00c f9a7 	bl	800c930 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005e2:	e7f9      	b.n	80005d8 <main+0x24>
 80005e4:	20000784 	.word	0x20000784

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00f fb02 	bl	800fc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f002 fb7e 	bl	8002d0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xc8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <SystemClock_Config+0xc8>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <SystemClock_Config+0xcc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000648:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800065c:	2348      	movs	r3, #72	; 0x48
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000664:	2303      	movs	r3, #3
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fb5d 	bl	8002d2c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f94b 	bl	8000912 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	2102      	movs	r1, #2
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fdeb 	bl	8003274 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a4:	f000 f935 	bl	8000912 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART3_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART3_UART_Init+0x58>)
 80006fc:	f003 fbd0 	bl	8003ea0 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f904 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001ec 	.word	0x200001ec
 8000714:	40004800 	.word	0x40004800

08000718 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000726:	2206      	movs	r2, #6
 8000728:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000738:	2202      	movs	r2, #2
 800073a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073e:	2201      	movs	r2, #1
 8000740:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000750:	2201      	movs	r2, #1
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	f002 f98d 	bl	8002a7a <HAL_PCD_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8d4 	bl	8000912 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000274 	.word	0x20000274

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	; 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b47      	ldr	r3, [pc, #284]	; (80008a8 <MX_GPIO_Init+0x134>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a3a      	ldr	r2, [pc, #232]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a34      	ldr	r2, [pc, #208]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000820:	4822      	ldr	r0, [pc, #136]	; (80008ac <MX_GPIO_Init+0x138>)
 8000822:	f002 f8f7 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	; 0x40
 800082a:	4821      	ldr	r0, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x13c>)
 800082c:	f002 f8f2 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481b      	ldr	r0, [pc, #108]	; (80008b4 <MX_GPIO_Init+0x140>)
 8000848:	f001 ff38 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_GPIO_Init+0x138>)
 8000866:	f001 ff29 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <MX_GPIO_Init+0x13c>)
 8000882:	f001 ff1b 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0x13c>)
 800089a:	f001 ff0f 	bl	80026bc <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40020800 	.word	0x40020800

080008b8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ca:	f000 fd89 	bl	80013e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80008d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80008da:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 80008dc:	2304      	movs	r3, #4
 80008de:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e8:	2300      	movs	r3, #0
 80008ea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fda6 	bl	8001450 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000904:	2004      	movs	r0, #4
 8000906:	f000 fd83 	bl	8001410 <HAL_MPU_Enable>

}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000916:	b672      	cpsid	i
}
 8000918:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091a:	e7fe      	b.n	800091a <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x44>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x44>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x44>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x44>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x44>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x44>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b0aa      	sub	sp, #168	; 0xa8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2284      	movs	r2, #132	; 0x84
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00f f93b 	bl	800fc00 <memset>
  if(huart->Instance==USART3)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <HAL_UART_MspInit+0xb4>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d13c      	bne.n	8000a0e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000998:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800099a:	2300      	movs	r3, #0
 800099c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fe8c 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f7ff ffb0 	bl	8000912 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0xbc>)
 8000a0a:	f001 fe57 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	37a8      	adds	r7, #168	; 0xa8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004800 	.word	0x40004800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ac      	sub	sp, #176	; 0xb0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2284      	movs	r2, #132	; 0x84
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00f f8db 	bl	800fc00 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a52:	d159      	bne.n	8000b08 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a58:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fe2b 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a70:	f7ff ff4f 	bl	8000912 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a8c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <HAL_PCD_MspInit+0xf0>)
 8000ab4:	f001 fe02 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <HAL_PCD_MspInit+0xf0>)
 8000ad4:	f001 fdf2 	bl	80026bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6453      	str	r3, [r2, #68]	; 0x44
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <HAL_PCD_MspInit+0xec>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b08:	bf00      	nop
 8000b0a:	37b0      	adds	r7, #176	; 0xb0
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 fb12 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_kill>:

int _kill(int pid, int sig)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <_kill+0x20>)
 8000b88:	2216      	movs	r2, #22
 8000b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20008940 	.word	0x20008940

08000ba0 <_exit>:

void _exit (int status)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ffe5 	bl	8000b7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bb2:	e7fe      	b.n	8000bb2 <_exit+0x12>

08000bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e00a      	b.n	8000bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc6:	f3af 8000 	nop.w
 8000bca:	4601      	mov	r1, r0
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60ba      	str	r2, [r7, #8]
 8000bd2:	b2ca      	uxtb	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf0      	blt.n	8000bc6 <_read+0x12>
  }

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	60f8      	str	r0, [r7, #12]
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	e009      	b.n	8000c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	60ba      	str	r2, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf1      	blt.n	8000c00 <_write+0x12>
  }
  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_close>:

int _close(int file)
{
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_isatty>:

int _isatty(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c66:	2301      	movs	r3, #1
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d205      	bcs.n	8000ccc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <_sbrk+0x6c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20050000 	.word	0x20050000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	2000077c 	.word	0x2000077c
 8000cf8:	20008950 	.word	0x20008950
 8000cfc:	20008940 	.word	0x20008940

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000d2a:	f00c fb6f 	bl	800d40c <udp_new>
 8000d2e:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 230);
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <udpServer_init+0x44>)
 8000d32:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 7);  // 7 is the server UDP port
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2207      	movs	r2, #7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f00c f9e6 	bl	800d10c <udp_bind>
 8000d40:	4603      	mov	r3, r0
 8000d42:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000d44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4907      	ldr	r1, [pc, #28]	; (8000d6c <udpServer_init+0x48>)
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f00c faf9 	bl	800d348 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000d56:	e002      	b.n	8000d5e <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f00c fb15 	bl	800d388 <udp_remove>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e601a8c0 	.word	0xe601a8c0
 8000d6c:	08000d71 	.word	0x08000d71

08000d70 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0a0      	sub	sp, #128	; 0x80
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 8000d7e:	6838      	ldr	r0, [r7, #0]
 8000d80:	f00d ff3e 	bl	800ec00 <ip4addr_ntoa>
 8000d84:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];

	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	481a      	ldr	r0, [pc, #104]	; (8000df4 <udp_receive_callback+0x84>)
 8000d8c:	f001 fe5b 	bl	8002a46 <HAL_GPIO_TogglePin>

	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4917      	ldr	r1, [pc, #92]	; (8000df8 <udp_receive_callback+0x88>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00e ff8e 	bl	800fcbc <siprintf>
 8000da0:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000daa:	4619      	mov	r1, r3
 8000dac:	2036      	movs	r0, #54	; 0x36
 8000dae:	f005 fd47 	bl	8006840 <pbuf_alloc>
 8000db2:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8000db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000dc0:	f006 fa8e 	bl	80072e0 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000dc4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000dc8:	461a      	mov	r2, r3
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	68b8      	ldr	r0, [r7, #8]
 8000dce:	f00c fa25 	bl	800d21c <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000dd2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000dd4:	68b8      	ldr	r0, [r7, #8]
 8000dd6:	f00b ffaf 	bl	800cd38 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f00c fa8c 	bl	800d2f8 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000de0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000de2:	f006 f811 	bl	8006e08 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f006 f80e 	bl	8006e08 <pbuf_free>
}
 8000dec:	bf00      	nop
 8000dee:	3780      	adds	r7, #128	; 0x80
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020400 	.word	0x40020400
 8000df8:	08011030 	.word	0x08011030

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ff6b 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f00e fe8d 	bl	800fb48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fbc1 	bl	80005b4 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e40:	08013c8c 	.word	0x08013c8c
  ldr r2, =_sbss
 8000e44:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000e48:	20008950 	.word	0x20008950

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>

08000e4e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <LAN8742_RegisterBusIO+0x28>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d007      	beq.n	8000e76 <LAN8742_RegisterBusIO+0x28>
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <LAN8742_RegisterBusIO+0x28>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7a:	e014      	b.n	8000ea6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d17c      	bne.n	8000fcc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e01c      	b.n	8000f26 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f107 0208 	add.w	r2, r7, #8
 8000ef4:	2112      	movs	r1, #18
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	4798      	blx	r3
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	da03      	bge.n	8000f08 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000f00:	f06f 0304 	mvn.w	r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000f06:	e00b      	b.n	8000f20 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d105      	bne.n	8000f20 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
         break;
 8000f1e:	e005      	b.n	8000f2c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2b1f      	cmp	r3, #31
 8000f2a:	d9df      	bls.n	8000eec <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b1f      	cmp	r3, #31
 8000f32:	d902      	bls.n	8000f3a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f34:	f06f 0302 	mvn.w	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d145      	bne.n	8000fcc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6810      	ldr	r0, [r2, #0]
 8000f48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4798      	blx	r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db37      	blt.n	8000fc6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6810      	ldr	r0, [r2, #0]
 8000f5e:	f107 0208 	add.w	r2, r7, #8
 8000f62:	2100      	movs	r1, #0
 8000f64:	4798      	blx	r3
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db28      	blt.n	8000fbe <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4798      	blx	r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f76:	e01c      	b.n	8000fb2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4798      	blx	r3
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8a:	d80e      	bhi.n	8000faa <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6810      	ldr	r0, [r2, #0]
 8000f94:	f107 0208 	add.w	r2, r7, #8
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da07      	bge.n	8000fb2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000fa2:	f06f 0304 	mvn.w	r3, #4
 8000fa6:	613b      	str	r3, [r7, #16]
                 break;
 8000fa8:	e010      	b.n	8000fcc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000faa:	f06f 0301 	mvn.w	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
               break;
 8000fb0:	e00c      	b.n	8000fcc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1dd      	bne.n	8000f78 <LAN8742_Init+0xc6>
 8000fbc:	e006      	b.n	8000fcc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000fbe:	f06f 0304 	mvn.w	r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	e002      	b.n	8000fcc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fc6:	f06f 0303 	mvn.w	r3, #3
 8000fca:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d112      	bne.n	8000ff8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4798      	blx	r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fdc:	bf00      	nop
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4798      	blx	r3
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ff0:	d9f5      	bls.n	8000fde <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 }
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6810      	ldr	r0, [r2, #0]
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	2101      	movs	r1, #1
 800101c:	4798      	blx	r3
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	da02      	bge.n	800102a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001024:	f06f 0304 	mvn.w	r3, #4
 8001028:	e06e      	b.n	8001108 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6810      	ldr	r0, [r2, #0]
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	2101      	movs	r1, #1
 8001038:	4798      	blx	r3
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001040:	f06f 0304 	mvn.w	r3, #4
 8001044:	e060      	b.n	8001108 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001050:	2301      	movs	r3, #1
 8001052:	e059      	b.n	8001108 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6810      	ldr	r0, [r2, #0]
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	2100      	movs	r1, #0
 8001062:	4798      	blx	r3
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	da02      	bge.n	8001070 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800106a:	f06f 0304 	mvn.w	r3, #4
 800106e:	e04b      	b.n	8001108 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11b      	bne.n	80010b2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <LAN8742_GetLinkState+0x90>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800108e:	2302      	movs	r3, #2
 8001090:	e03a      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800109c:	2303      	movs	r3, #3
 800109e:	e033      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010aa:	2304      	movs	r3, #4
 80010ac:	e02c      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010ae:	2305      	movs	r3, #5
 80010b0:	e02a      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6810      	ldr	r0, [r2, #0]
 80010ba:	f107 020c 	add.w	r2, r7, #12
 80010be:	211f      	movs	r1, #31
 80010c0:	4798      	blx	r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da02      	bge.n	80010ce <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010c8:	f06f 0304 	mvn.w	r3, #4
 80010cc:	e01c      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010d8:	2306      	movs	r3, #6
 80010da:	e015      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 031c 	and.w	r3, r3, #28
 80010e2:	2b18      	cmp	r3, #24
 80010e4:	d101      	bne.n	80010ea <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010e6:	2302      	movs	r3, #2
 80010e8:	e00e      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f003 031c 	and.w	r3, r3, #28
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d101      	bne.n	80010f8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e007      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 031c 	and.w	r3, r3, #28
 80010fe:	2b14      	cmp	r3, #20
 8001100:	d101      	bne.n	8001106 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001102:	2304      	movs	r3, #4
 8001104:	e000      	b.n	8001108 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001106:	2305      	movs	r3, #5
    }				
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 f92f 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f806 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fbfc 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f93b 	bl	80013c6 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001168:	f000 f911 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000780 	.word	0x20000780

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000780 	.word	0x20000780

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <__NVIC_SetPriorityGrouping+0x40>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	4313      	orrs	r3, r2
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x40>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	05fa0000 	.word	0x05fa0000

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff47 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff5c 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffb0 	bl	8001334 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013e4:	f3bf 8f5f 	dmb	sy
}
 80013e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_MPU_Disable+0x28>)
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_MPU_Disable+0x28>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_MPU_Disable+0x2c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	e000ed90 	.word	0xe000ed90

08001410 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_MPU_Enable+0x38>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_MPU_Enable+0x3c>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_MPU_Enable+0x3c>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800142e:	f3bf 8f4f 	dsb	sy
}
 8001432:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001434:	f3bf 8f6f 	isb	sy
}
 8001438:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed90 	.word	0xe000ed90
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	785a      	ldrb	r2, [r3, #1]
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_MPU_ConfigRegion+0x84>)
 800145e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d029      	beq.n	80014bc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001468:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <HAL_MPU_ConfigRegion+0x84>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1b      	ldrb	r3, [r3, #12]
 8001474:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7adb      	ldrb	r3, [r3, #11]
 800147a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800147c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7a9b      	ldrb	r3, [r3, #10]
 8001482:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001484:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7b5b      	ldrb	r3, [r3, #13]
 800148a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800148c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7b9b      	ldrb	r3, [r3, #14]
 8001492:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001494:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7bdb      	ldrb	r3, [r3, #15]
 800149a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800149c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a5b      	ldrb	r3, [r3, #9]
 80014a2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014b6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80014ba:	e005      	b.n	80014c8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_MPU_ConfigRegion+0x84>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_MPU_ConfigRegion+0x84>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed90 	.word	0xe000ed90

080014d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06a      	b.n	80015c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2223      	movs	r2, #35	; 0x23
 80014f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f003 ff21 	bl	8005344 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_ETH_Init+0xf0>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_ETH_Init+0xf0>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <HAL_ETH_Init+0xf0>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <HAL_ETH_Init+0xf4>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <HAL_ETH_Init+0xf4>)
 8001520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001524:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_ETH_Init+0xf4>)
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4927      	ldr	r1, [pc, #156]	; (80015cc <HAL_ETH_Init+0xf4>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_ETH_Init+0xf4>)
 8001536:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001550:	f7ff fe30 	bl	80011b4 <HAL_GetTick>
 8001554:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001556:	e011      	b.n	800157c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001558:	f7ff fe2c 	bl	80011b4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001566:	d909      	bls.n	800157c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2204      	movs	r2, #4
 800156c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	22e0      	movs	r2, #224	; 0xe0
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e021      	b.n	80015c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e4      	bne.n	8001558 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fdf0 	bl	8002174 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fe97 	bl	80022c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 feed 	bl	800237a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	461a      	mov	r2, r3
 80015a6:	2100      	movs	r1, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fe55 	bl	8002258 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2210      	movs	r2, #16
 80015ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800

080015d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d150      	bne.n	8001684 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2223      	movs	r2, #35	; 0x23
 80015e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f9fd 	bl	80019f0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0208 	orr.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fddc 	bl	80011cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0204 	orr.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fdc9 	bl	80011cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fc36 	bl	8001eb4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001676:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2223      	movs	r2, #35	; 0x23
 800167c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	e000      	b.n	8001686 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800169c:	2b23      	cmp	r3, #35	; 0x23
 800169e:	d14a      	bne.n	8001736 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2223      	movs	r2, #35	; 0x23
 80016a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016be:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fd6b 	bl	80011cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fbd8 	bl	8001eb4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0208 	bic.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fd55 	bl	80011cc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2210      	movs	r2, #16
 800172e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07c      	b.n	8001860 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176c:	2b23      	cmp	r3, #35	; 0x23
 800176e:	d176      	bne.n	800185e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001770:	2200      	movs	r2, #0
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fe6d 	bl	8002454 <ETH_Prepare_Tx_Descriptors>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	f043 0202 	orr.w	r2, r3, #2
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e065      	b.n	8001860 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3206      	adds	r2, #6
 80017a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d904      	bls.n	80017c4 <HAL_ETH_Transmit+0x84>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	1f1a      	subs	r2, r3, #4
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3106      	adds	r1, #6
 80017d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017d8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80017da:	f7ff fceb 	bl	80011b4 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017e0:	e037      	b.n	8001852 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d011      	beq.n	8001818 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	f043 0208 	orr.w	r2, r3, #8
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e023      	b.n	8001860 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800181e:	d018      	beq.n	8001852 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001820:	f7ff fcc8 	bl	80011b4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	d302      	bcc.n	8001836 <HAL_ETH_Transmit+0xf6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800184c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e006      	b.n	8001860 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	dbc3      	blt.n	80017e2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0a8      	b.n	80019e6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189a:	2b23      	cmp	r3, #35	; 0x23
 800189c:	d001      	beq.n	80018a2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0a1      	b.n	80019e6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	3212      	adds	r2, #18
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b8:	f1c3 0304 	rsb	r3, r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018be:	e06a      	b.n	8001996 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d103      	bne.n	80018f0 <HAL_ETH_ReadData+0x88>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d040      	beq.n	8001972 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00c      	beq.n	8001934 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001924:	3b04      	subs	r3, #4
 8001926:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800194c:	461a      	mov	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	b29b      	uxth	r3, r3
 8001952:	f003 feb9 	bl	80056c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	441a      	add	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d902      	bls.n	8001984 <HAL_ETH_ReadData+0x11c>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b04      	subs	r3, #4
 8001982:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	3212      	adds	r2, #18
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db06      	blt.n	80019ac <HAL_ETH_ReadData+0x144>
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d202      	bcs.n	80019ac <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d089      	beq.n	80018c0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	441a      	add	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f815 	bl	80019f0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	e000      	b.n	80019e6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019fc:	2301      	movs	r3, #1
 80019fe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a04:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	3212      	adds	r2, #18
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a16:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a18:	e040      	b.n	8001a9c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d112      	bne.n	8001a48 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fe1e 	bl	8005668 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	74fb      	strb	r3, [r7, #19]
 8001a36:	e007      	b.n	8001a48 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	461a      	mov	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a48:	7cfb      	ldrb	r3, [r7, #19]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d026      	beq.n	8001a9c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d103      	bne.n	8001a5e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <ETH_UpdateDescriptor+0xe4>)
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	e003      	b.n	8001a66 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001a64:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a66:	f3bf 8f5f 	dmb	sy
}
 8001a6a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d902      	bls.n	8001a8a <ETH_UpdateDescriptor+0x9a>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	3b04      	subs	r3, #4
 8001a88:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	3212      	adds	r2, #18
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <ETH_UpdateDescriptor+0xb8>
 8001aa2:	7cfb      	ldrb	r3, [r7, #19]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1b8      	bne.n	8001a1a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d00c      	beq.n	8001acc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aba:	461a      	mov	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	80004600 	.word	0x80004600

08001ad8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 031c 	and.w	r3, r3, #28
 8001af4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	02db      	lsls	r3, r3, #11
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f023 0302 	bic.w	r3, r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b28:	f7ff fb44 	bl	80011b4 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b2e:	e00d      	b.n	8001b4c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b30:	f7ff fb40 	bl	80011b4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d301      	bcc.n	8001b44 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e010      	b.n	8001b66 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ec      	bne.n	8001b30 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 031c 	and.w	r3, r3, #28
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	02db      	lsls	r3, r3, #11
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc8:	f7ff faf4 	bl	80011b4 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bce:	e00d      	b.n	8001bec <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bd0:	f7ff faf0 	bl	80011b4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d301      	bcc.n	8001be4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e009      	b.n	8001bf8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ec      	bne.n	8001bd0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d9      	b.n	8001dc8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e00b      	b.n	8001e00 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d105      	bne.n	8001dfe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f883 	bl	8001f00 <ETH_SetMACConfig>

    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 031c 	bic.w	r3, r3, #28
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e20:	f001 fc1a 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8001e24:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d908      	bls.n	8001e40 <HAL_ETH_SetMDIOClockRange+0x38>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d804      	bhi.n	8001e40 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e027      	b.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d908      	bls.n	8001e5a <HAL_ETH_SetMDIOClockRange+0x52>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4a17      	ldr	r2, [pc, #92]	; (8001ea8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d204      	bcs.n	8001e5a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 030c 	orr.w	r3, r3, #12
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e01a      	b.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d303      	bcc.n	8001e6a <HAL_ETH_SetMDIOClockRange+0x62>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d911      	bls.n	8001e8e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d908      	bls.n	8001e84 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d804      	bhi.n	8001e84 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e005      	b.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f043 0310 	orr.w	r3, r3, #16
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e000      	b.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e8e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	611a      	str	r2, [r3, #16]
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	01312cff 	.word	0x01312cff
 8001ea4:	02160ebf 	.word	0x02160ebf
 8001ea8:	03938700 	.word	0x03938700
 8001eac:	05f5e0ff 	.word	0x05f5e0ff
 8001eb0:	08f0d17f 	.word	0x08f0d17f

08001eb4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff f971 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef4:	6193      	str	r3, [r2, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4b51      	ldr	r3, [pc, #324]	; (800205c <ETH_SetMACConfig+0x15c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	7c1b      	ldrb	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetMACConfig+0x28>
 8001f22:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f26:	e000      	b.n	8001f2a <ETH_SetMACConfig+0x2a>
 8001f28:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	7c5b      	ldrb	r3, [r3, #17]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <ETH_SetMACConfig+0x38>
 8001f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f36:	e000      	b.n	8001f3a <ETH_SetMACConfig+0x3a>
 8001f38:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f3a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7fdb      	ldrb	r3, [r3, #31]
 8001f46:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f48:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	7f92      	ldrb	r2, [r2, #30]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d102      	bne.n	8001f5e <ETH_SetMACConfig+0x5e>
 8001f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5c:	e000      	b.n	8001f60 <ETH_SetMACConfig+0x60>
 8001f5e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7f1b      	ldrb	r3, [r3, #28]
 8001f66:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f68:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetMACConfig+0x88>
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f86:	e000      	b.n	8001f8a <ETH_SetMACConfig+0x8a>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7bdb      	ldrb	r3, [r3, #15]
 8001f90:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f92:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fa0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f906 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	d101      	bne.n	8001fee <ETH_SetMACConfig+0xee>
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	e000      	b.n	8001ff0 <ETH_SetMACConfig+0xf0>
 8001fee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ff0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ff6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001ffe:	2a01      	cmp	r2, #1
 8002000:	d101      	bne.n	8002006 <ETH_SetMACConfig+0x106>
 8002002:	2208      	movs	r2, #8
 8002004:	e000      	b.n	8002008 <ETH_SetMACConfig+0x108>
 8002006:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002008:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002010:	2a01      	cmp	r2, #1
 8002012:	d101      	bne.n	8002018 <ETH_SetMACConfig+0x118>
 8002014:	2204      	movs	r2, #4
 8002016:	e000      	b.n	800201a <ETH_SetMACConfig+0x11a>
 8002018:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800201a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002022:	2a01      	cmp	r2, #1
 8002024:	d101      	bne.n	800202a <ETH_SetMACConfig+0x12a>
 8002026:	2202      	movs	r2, #2
 8002028:	e000      	b.n	800202c <ETH_SetMACConfig+0x12c>
 800202a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800202c:	4313      	orrs	r3, r2
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff f8c1 	bl	80011cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	619a      	str	r2, [r3, #24]
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	ff20810f 	.word	0xff20810f

08002060 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <ETH_SetDMAConfig+0x110>)
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	7b1b      	ldrb	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <ETH_SetDMAConfig+0x2c>
 8002086:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800208a:	e000      	b.n	800208e <ETH_SetDMAConfig+0x2e>
 800208c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	7b5b      	ldrb	r3, [r3, #13]
 8002092:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002094:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	7f52      	ldrb	r2, [r2, #29]
 800209a:	2a00      	cmp	r2, #0
 800209c:	d102      	bne.n	80020a4 <ETH_SetDMAConfig+0x44>
 800209e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020a2:	e000      	b.n	80020a6 <ETH_SetDMAConfig+0x46>
 80020a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	7b9b      	ldrb	r3, [r3, #14]
 80020ac:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020ae:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7f1b      	ldrb	r3, [r3, #28]
 80020ba:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7f9b      	ldrb	r3, [r3, #30]
 80020c2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020c4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020d4:	4313      	orrs	r3, r2
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e4:	461a      	mov	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f6:	2001      	movs	r0, #1
 80020f8:	f7ff f868 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	461a      	mov	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	791b      	ldrb	r3, [r3, #4]
 800210e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002114:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800211a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002120:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002128:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800212a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002132:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002138:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002142:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002146:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff f839 	bl	80011cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	f8de3f23 	.word	0xf8de3f23

08002174 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0a6      	sub	sp, #152	; 0x98
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002188:	2300      	movs	r3, #0
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021b0:	2300      	movs	r3, #0
 80021b2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80021dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80021e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021ec:	4619      	mov	r1, r3
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fe86 	bl	8001f00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002202:	2301      	movs	r3, #1
 8002204:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002228:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800222a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002230:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002234:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800223c:	2300      	movs	r3, #0
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002244:	f107 0308 	add.w	r3, r7, #8
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff08 	bl	8002060 <ETH_SetDMAConfig>
}
 8002250:	bf00      	nop
 8002252:	3798      	adds	r7, #152	; 0x98
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3305      	adds	r3, #5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	3204      	adds	r2, #4
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <ETH_MACAddressConfig+0x68>)
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3303      	adds	r3, #3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	061a      	lsls	r2, r3, #24
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3302      	adds	r3, #2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4313      	orrs	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <ETH_MACAddressConfig+0x6c>)
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40028040 	.word	0x40028040
 80022c4:	40028044 	.word	0x40028044

080022c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	e03e      	b.n	8002354 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68d9      	ldr	r1, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	3206      	adds	r2, #6
 8002308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d80c      	bhi.n	8002338 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d9      	ldr	r1, [r3, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	e004      	b.n	8002342 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d9bd      	bls.n	80022d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236c:	611a      	str	r2, [r3, #16]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e046      	b.n	8002416 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2200      	movs	r2, #0
 80023b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80023cc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	3212      	adds	r2, #18
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d80c      	bhi.n	8002406 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6919      	ldr	r1, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	461a      	mov	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	e004      	b.n	8002410 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3301      	adds	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d9b5      	bls.n	8002388 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	60da      	str	r2, [r3, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002454:	b480      	push	{r7}
 8002456:	b08d      	sub	sp, #52	; 0x34
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3318      	adds	r3, #24
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002496:	d007      	beq.n	80024a8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	3304      	adds	r3, #4
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0ff      	b.n	80026ac <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3301      	adds	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4b7d      	ldr	r3, [pc, #500]	; (80026b8 <ETH_Prepare_Tx_Descriptors+0x264>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	431a      	orrs	r2, r3
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800252e:	f3bf 8f5f 	dmb	sy
}
 8002532:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002540:	e082      	b.n	8002648 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e005      	b.n	800256e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	3301      	adds	r3, #1
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b03      	cmp	r3, #3
 8002578:	d902      	bls.n	8002580 <ETH_Prepare_Tx_Descriptors+0x12c>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	3b04      	subs	r3, #4
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800259e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a2:	d007      	beq.n	80025b4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	3304      	adds	r3, #4
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d029      	beq.n	8002608 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80025c2:	2300      	movs	r3, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	e019      	b.n	80025fc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80025c8:	f3bf 8f5f 	dmb	sy
}
 80025cc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	3301      	adds	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d902      	bls.n	80025ec <ETH_Prepare_Tx_Descriptors+0x198>
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	3b04      	subs	r3, #4
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	3301      	adds	r3, #1
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	429a      	cmp	r2, r3
 8002602:	d3e1      	bcc.n	80025c8 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	e051      	b.n	80026ac <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	3301      	adds	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002624:	4013      	ands	r3, r2
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	6852      	ldr	r2, [r2, #4]
 800262a:	431a      	orrs	r2, r3
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3301      	adds	r3, #1
 8002634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002636:	f3bf 8f5f 	dmb	sy
}
 800263a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f af78 	bne.w	8002542 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e005      	b.n	8002672 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002682:	6979      	ldr	r1, [r7, #20]
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	3304      	adds	r3, #4
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002692:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	4413      	add	r3, r2
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80026a6:	b662      	cpsie	i
}
 80026a8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3734      	adds	r7, #52	; 0x34
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	ffffe000 	.word	0xffffe000

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e175      	b.n	80029c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8164 	bne.w	80029c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x56>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80be 	beq.w	80029c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_GPIO_Init+0x324>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_GPIO_Init+0x324>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	6453      	str	r3, [r2, #68]	; 0x44
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_GPIO_Init+0x324>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800285e:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_GPIO_Init+0x328>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_GPIO_Init+0x32c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d037      	beq.n	80028fa <HAL_GPIO_Init+0x23e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a57      	ldr	r2, [pc, #348]	; (80029ec <HAL_GPIO_Init+0x330>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d031      	beq.n	80028f6 <HAL_GPIO_Init+0x23a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a56      	ldr	r2, [pc, #344]	; (80029f0 <HAL_GPIO_Init+0x334>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d02b      	beq.n	80028f2 <HAL_GPIO_Init+0x236>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a55      	ldr	r2, [pc, #340]	; (80029f4 <HAL_GPIO_Init+0x338>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d025      	beq.n	80028ee <HAL_GPIO_Init+0x232>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a54      	ldr	r2, [pc, #336]	; (80029f8 <HAL_GPIO_Init+0x33c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01f      	beq.n	80028ea <HAL_GPIO_Init+0x22e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a53      	ldr	r2, [pc, #332]	; (80029fc <HAL_GPIO_Init+0x340>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d019      	beq.n	80028e6 <HAL_GPIO_Init+0x22a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_GPIO_Init+0x344>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0x226>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a51      	ldr	r2, [pc, #324]	; (8002a04 <HAL_GPIO_Init+0x348>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d00d      	beq.n	80028de <HAL_GPIO_Init+0x222>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <HAL_GPIO_Init+0x34c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d007      	beq.n	80028da <HAL_GPIO_Init+0x21e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4f      	ldr	r2, [pc, #316]	; (8002a0c <HAL_GPIO_Init+0x350>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_GPIO_Init+0x21a>
 80028d2:	2309      	movs	r3, #9
 80028d4:	e012      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028d6:	230a      	movs	r3, #10
 80028d8:	e010      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028da:	2308      	movs	r3, #8
 80028dc:	e00e      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028de:	2307      	movs	r3, #7
 80028e0:	e00c      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028e2:	2306      	movs	r3, #6
 80028e4:	e00a      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028e6:	2305      	movs	r3, #5
 80028e8:	e008      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028ea:	2304      	movs	r3, #4
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e004      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_GPIO_Init+0x240>
 80028fa:	2300      	movs	r3, #0
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	f002 0203 	and.w	r2, r2, #3
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	4093      	lsls	r3, r2
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800290c:	4935      	ldr	r1, [pc, #212]	; (80029e4 <HAL_GPIO_Init+0x328>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_GPIO_Init+0x354>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_GPIO_Init+0x354>)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_GPIO_Init+0x354>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_GPIO_Init+0x354>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_GPIO_Init+0x354>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_GPIO_Init+0x354>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_GPIO_Init+0x354>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_GPIO_Init+0x354>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3301      	adds	r3, #1
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	f67f ae86 	bls.w	80026dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3724      	adds	r7, #36	; 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40020000 	.word	0x40020000
 80029ec:	40020400 	.word	0x40020400
 80029f0:	40020800 	.word	0x40020800
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40021400 	.word	0x40021400
 8002a00:	40021800 	.word	0x40021800
 8002a04:	40021c00 	.word	0x40021c00
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40022400 	.word	0x40022400
 8002a10:	40013c00 	.word	0x40013c00

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	619a      	str	r2, [r3, #24]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	041a      	lsls	r2, r3, #16
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	400b      	ands	r3, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a7c:	b08f      	sub	sp, #60	; 0x3c
 8002a7e:	af0a      	add	r7, sp, #40	; 0x28
 8002a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e116      	b.n	8002cba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fd ffbc 	bl	8000a24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 fe92 	bl	80047f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	603b      	str	r3, [r7, #0]
 8002ad6:	687e      	ldr	r6, [r7, #4]
 8002ad8:	466d      	mov	r5, sp
 8002ada:	f106 0410 	add.w	r4, r6, #16
 8002ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aee:	1d33      	adds	r3, r6, #4
 8002af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f001 fe26 	bl	8004744 <USB_CoreInit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0d7      	b.n	8002cba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fe80 	bl	8004816 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e04a      	b.n	8002bb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	333d      	adds	r3, #61	; 0x3d
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	333c      	adds	r3, #60	; 0x3c
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	b298      	uxth	r0, r3
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3344      	adds	r3, #68	; 0x44
 8002b58:	4602      	mov	r2, r0
 8002b5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3340      	adds	r3, #64	; 0x40
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3348      	adds	r3, #72	; 0x48
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334c      	adds	r3, #76	; 0x4c
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3354      	adds	r3, #84	; 0x54
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3af      	bcc.n	8002b1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e044      	b.n	8002c4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d3b5      	bcc.n	8002bc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	687e      	ldr	r6, [r7, #4]
 8002c5e:	466d      	mov	r5, sp
 8002c60:	f106 0410 	add.w	r4, r6, #16
 8002c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c74:	1d33      	adds	r3, r6, #4
 8002c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c78:	6838      	ldr	r0, [r7, #0]
 8002c7a:	f001 fe19 	bl	80048b0 <USB_DevInit>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e014      	b.n	8002cba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f80b 	bl	8002cc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 ffd7 	bl	8004c66 <USB_DevDisconnect>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_PCDEx_ActivateLPM+0x44>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	10000003 	.word	0x10000003

08002d0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e291      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8087 	beq.w	8002e5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d00c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5c:	4b93      	ldr	r3, [pc, #588]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d112      	bne.n	8002d8e <HAL_RCC_OscConfig+0x62>
 8002d68:	4b90      	ldr	r3, [pc, #576]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d74:	d10b      	bne.n	8002d8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d06c      	beq.n	8002e5c <HAL_RCC_OscConfig+0x130>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d168      	bne.n	8002e5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e26b      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d96:	d106      	bne.n	8002da6 <HAL_RCC_OscConfig+0x7a>
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a83      	ldr	r2, [pc, #524]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	e02e      	b.n	8002e04 <HAL_RCC_OscConfig+0xd8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x9c>
 8002dae:	4b7f      	ldr	r3, [pc, #508]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7e      	ldr	r2, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b7c      	ldr	r3, [pc, #496]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7b      	ldr	r2, [pc, #492]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e01d      	b.n	8002e04 <HAL_RCC_OscConfig+0xd8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0xd8>
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6b      	ldr	r2, [pc, #428]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d013      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f9d2 	bl	80011b4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe f9ce 	bl	80011b4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e21f      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe f9be 	bl	80011b4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe f9ba 	bl	80011b4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e20b      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	4b57      	ldr	r3, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x110>
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d069      	beq.n	8002f3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6a:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e76:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d11c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x190>
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x17a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e1df      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	493d      	ldr	r1, [pc, #244]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	e040      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d023      	beq.n	8002f0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec4:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f970 	bl	80011b4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f96c 	bl	80011b4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1bd      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4929      	ldr	r1, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
 8002f0a:	e018      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f94c 	bl	80011b4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe f948 	bl	80011b4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e199      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d038      	beq.n	8002fbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d019      	beq.n	8002f86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	4a15      	ldr	r2, [pc, #84]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7fe f929 	bl	80011b4 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f66:	f7fe f925 	bl	80011b4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e176      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x23a>
 8002f84:	e01a      	b.n	8002fbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe f90f 	bl	80011b4 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe f90b 	bl	80011b4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d903      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e15c      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
 8002fac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ee      	bne.n	8002f9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a4 	beq.w	8003112 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b85      	ldr	r3, [pc, #532]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ffe:	4b7f      	ldr	r3, [pc, #508]	; (80031fc <HAL_RCC_OscConfig+0x4d0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7e      	ldr	r2, [pc, #504]	; (80031fc <HAL_RCC_OscConfig+0x4d0>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe f8d3 	bl	80011b4 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe f8cf 	bl	80011b4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b64      	cmp	r3, #100	; 0x64
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e120      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003024:	4b75      	ldr	r3, [pc, #468]	; (80031fc <HAL_RCC_OscConfig+0x4d0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x31a>
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e02d      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x33c>
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a69      	ldr	r2, [pc, #420]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a66      	ldr	r2, [pc, #408]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e01c      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d10c      	bne.n	800308a <HAL_RCC_OscConfig+0x35e>
 8003070:	4b61      	ldr	r3, [pc, #388]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a60      	ldr	r2, [pc, #384]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	4b5e      	ldr	r3, [pc, #376]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a5d      	ldr	r2, [pc, #372]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e00b      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
 800308a:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a5a      	ldr	r2, [pc, #360]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	4a57      	ldr	r2, [pc, #348]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d015      	beq.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe f883 	bl	80011b4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe f87f 	bl	80011b4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0ce      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCC_OscConfig+0x386>
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe f86d 	bl	80011b4 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe f869 	bl	80011b4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ee      	bne.n	80030de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003106:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80a4 	beq.w	8003264 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d06b      	beq.n	8003200 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d149      	bne.n	80031c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe f83a 	bl	80011b4 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe f836 	bl	80011b4 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e087      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	4313      	orrs	r3, r2
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800318e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe f80a 	bl	80011b4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe f806 	bl	80011b4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e057      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x478>
 80031c2:	e04f      	b.n	8003264 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0b      	ldr	r2, [pc, #44]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80031ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd fff0 	bl	80011b4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fd ffec 	bl	80011b4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e03d      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_OscConfig+0x4cc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4ac>
 80031f6:	e035      	b.n	8003264 <HAL_RCC_OscConfig+0x538>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x544>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d028      	beq.n	8003260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d121      	bne.n	8003260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003236:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003238:	4293      	cmp	r3, r2
 800323a:	d111      	bne.n	8003260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0d0      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	4965      	ldr	r1, [pc, #404]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d040      	beq.n	8003398 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e073      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06b      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4936      	ldr	r1, [pc, #216]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fd ff24 	bl	80011b4 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fd ff20 	bl	80011b4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e053      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d210      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 020f 	bic.w	r2, r3, #15
 80033ae:	4922      	ldr	r1, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x1cc>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1d0>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1d4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd fe80 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023c00 	.word	0x40023c00
 800343c:	40023800 	.word	0x40023800
 8003440:	08013a2c 	.word	0x08013a2c
 8003444:	20000000 	.word	0x20000000
 8003448:	20000004 	.word	0x20000004

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b094      	sub	sp, #80	; 0x50
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	647b      	str	r3, [r7, #68]	; 0x44
 8003458:	2300      	movs	r3, #0
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345c:	2300      	movs	r3, #0
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4b79      	ldr	r3, [pc, #484]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d00d      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003470:	2b08      	cmp	r3, #8
 8003472:	f200 80e1 	bhi.w	8003638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x34>
 800347a:	2b04      	cmp	r3, #4
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e0db      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b73      	ldr	r3, [pc, #460]	; (8003650 <HAL_RCC_GetSysClockFreq+0x204>)
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003484:	e0db      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_GetSysClockFreq+0x208>)
 8003488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800348a:	e0d8      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800348c:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003496:	4b6d      	ldr	r3, [pc, #436]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b6a      	ldr	r3, [pc, #424]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	2200      	movs	r2, #0
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
 80034b6:	2300      	movs	r3, #0
 80034b8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	f04f 0000 	mov.w	r0, #0
 80034c6:	f04f 0100 	mov.w	r1, #0
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034d0:	0150      	lsls	r0, r2, #5
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4621      	mov	r1, r4
 80034d8:	1a51      	subs	r1, r2, r1
 80034da:	6139      	str	r1, [r7, #16]
 80034dc:	4629      	mov	r1, r5
 80034de:	eb63 0301 	sbc.w	r3, r3, r1
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034f0:	4659      	mov	r1, fp
 80034f2:	018b      	lsls	r3, r1, #6
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034fa:	4651      	mov	r1, sl
 80034fc:	018a      	lsls	r2, r1, #6
 80034fe:	4651      	mov	r1, sl
 8003500:	ebb2 0801 	subs.w	r8, r2, r1
 8003504:	4659      	mov	r1, fp
 8003506:	eb63 0901 	sbc.w	r9, r3, r1
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800351e:	4690      	mov	r8, r2
 8003520:	4699      	mov	r9, r3
 8003522:	4623      	mov	r3, r4
 8003524:	eb18 0303 	adds.w	r3, r8, r3
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	462b      	mov	r3, r5
 800352c:	eb49 0303 	adc.w	r3, r9, r3
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800353e:	4629      	mov	r1, r5
 8003540:	024b      	lsls	r3, r1, #9
 8003542:	4621      	mov	r1, r4
 8003544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003548:	4621      	mov	r1, r4
 800354a:	024a      	lsls	r2, r1, #9
 800354c:	4610      	mov	r0, r2
 800354e:	4619      	mov	r1, r3
 8003550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
 8003556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800355c:	f7fc fea8 	bl	80002b0 <__aeabi_uldivmod>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	4613      	mov	r3, r2
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003568:	e058      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	099b      	lsrs	r3, r3, #6
 8003570:	2200      	movs	r2, #0
 8003572:	4618      	mov	r0, r3
 8003574:	4611      	mov	r1, r2
 8003576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0159      	lsls	r1, r3, #5
 8003592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003596:	0150      	lsls	r0, r2, #5
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4641      	mov	r1, r8
 800359e:	ebb2 0a01 	subs.w	sl, r2, r1
 80035a2:	4649      	mov	r1, r9
 80035a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035bc:	ebb2 040a 	subs.w	r4, r2, sl
 80035c0:	eb63 050b 	sbc.w	r5, r3, fp
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	00eb      	lsls	r3, r5, #3
 80035ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d2:	00e2      	lsls	r2, r4, #3
 80035d4:	4614      	mov	r4, r2
 80035d6:	461d      	mov	r5, r3
 80035d8:	4643      	mov	r3, r8
 80035da:	18e3      	adds	r3, r4, r3
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	464b      	mov	r3, r9
 80035e0:	eb45 0303 	adc.w	r3, r5, r3
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035f2:	4629      	mov	r1, r5
 80035f4:	028b      	lsls	r3, r1, #10
 80035f6:	4621      	mov	r1, r4
 80035f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035fc:	4621      	mov	r1, r4
 80035fe:	028a      	lsls	r2, r1, #10
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003606:	2200      	movs	r2, #0
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	61fa      	str	r2, [r7, #28]
 800360c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003610:	f7fc fe4e 	bl	80002b0 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_GetSysClockFreq+0x200>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	3301      	adds	r3, #1
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800362c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800362e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003630:	fbb2 f3f3 	udiv	r3, r2, r3
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003636:	e002      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetSysClockFreq+0x204>)
 800363a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800363c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003640:	4618      	mov	r0, r3
 8003642:	3750      	adds	r7, #80	; 0x50
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	00f42400 	.word	0x00f42400
 8003654:	007a1200 	.word	0x007a1200

08003658 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000000 	.word	0x20000000

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	08013a3c 	.word	0x08013a3c

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800369c:	f7ff ffdc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0b5b      	lsrs	r3, r3, #13
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08013a3c 	.word	0x08013a3c

080036c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036e8:	4b69      	ldr	r3, [pc, #420]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a68      	ldr	r2, [pc, #416]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	4b66      	ldr	r3, [pc, #408]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	4964      	ldr	r1, [pc, #400]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800371a:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	4959      	ldr	r1, [pc, #356]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003738:	d101      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003756:	4b4e      	ldr	r3, [pc, #312]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	494a      	ldr	r1, [pc, #296]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003774:	d101      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 808b 	beq.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4a39      	ldr	r2, [pc, #228]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ae:	6413      	str	r3, [r2, #64]	; 0x40
 80037b0:	4b37      	ldr	r3, [pc, #220]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a34      	ldr	r2, [pc, #208]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fcf4 	bl	80011b4 <HAL_GetTick>
 80037cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d0:	f7fd fcf0 	bl	80011b4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e357      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d035      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	429a      	cmp	r2, r3
 800380a:	d02e      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800380c:	4b20      	ldr	r3, [pc, #128]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003814:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d114      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fcb8 	bl	80011b4 <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	e00a      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fd fcb4 	bl	80011b4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e319      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ee      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003876:	d111      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003886:	400b      	ands	r3, r1
 8003888:	4901      	ldr	r1, [pc, #4]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
 800388e:	e00b      	b.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003890:	40023800 	.word	0x40023800
 8003894:	40007000 	.word	0x40007000
 8003898:	0ffffcff 	.word	0x0ffffcff
 800389c:	4baa      	ldr	r3, [pc, #680]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4aa9      	ldr	r2, [pc, #676]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	4ba7      	ldr	r3, [pc, #668]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	49a4      	ldr	r1, [pc, #656]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038c6:	4ba0      	ldr	r3, [pc, #640]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038cc:	4a9e      	ldr	r2, [pc, #632]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038d6:	4b9c      	ldr	r3, [pc, #624]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	4999      	ldr	r1, [pc, #612]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003902:	4991      	ldr	r1, [pc, #580]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003916:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003924:	4988      	ldr	r1, [pc, #544]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003938:	4b83      	ldr	r3, [pc, #524]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003946:	4980      	ldr	r1, [pc, #512]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800395a:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4977      	ldr	r1, [pc, #476]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397c:	4b72      	ldr	r3, [pc, #456]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	496f      	ldr	r1, [pc, #444]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399e:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f023 020c 	bic.w	r2, r3, #12
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ac:	4966      	ldr	r1, [pc, #408]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	495e      	ldr	r1, [pc, #376]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e2:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	4955      	ldr	r1, [pc, #340]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a04:	4b50      	ldr	r3, [pc, #320]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	494d      	ldr	r1, [pc, #308]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	4944      	ldr	r1, [pc, #272]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a48:	4b3f      	ldr	r3, [pc, #252]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	493c      	ldr	r1, [pc, #240]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a78:	4933      	ldr	r1, [pc, #204]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a9a:	492b      	ldr	r1, [pc, #172]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003aae:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003abc:	4922      	ldr	r1, [pc, #136]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	4912      	ldr	r1, [pc, #72]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b20:	4909      	ldr	r1, [pc, #36]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d006      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80d9 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a01      	ldr	r2, [pc, #4]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fb31 	bl	80011b4 <HAL_GetTick>
 8003b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b56:	f7fd fb2d 	bl	80011b4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e194      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b68:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d021      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b88:	4b64      	ldr	r3, [pc, #400]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b96:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9c:	0e1b      	lsrs	r3, r3, #24
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	019a      	lsls	r2, r3, #6
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	041b      	lsls	r3, r3, #16
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	071b      	lsls	r3, r3, #28
 8003bbc:	4957      	ldr	r1, [pc, #348]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d02e      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bee:	d129      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bf0:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c04:	0f1b      	lsrs	r3, r3, #28
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	019a      	lsls	r2, r3, #6
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	061b      	lsls	r3, r3, #24
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	071b      	lsls	r3, r3, #28
 8003c24:	493d      	ldr	r1, [pc, #244]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c32:	f023 021f 	bic.w	r2, r3, #31
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	4937      	ldr	r1, [pc, #220]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c56:	0e1b      	lsrs	r3, r3, #24
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c64:	0f1b      	lsrs	r3, r3, #28
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	019a      	lsls	r2, r3, #6
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	071b      	lsls	r3, r3, #28
 8003c84:	4925      	ldr	r1, [pc, #148]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d011      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	019a      	lsls	r2, r3, #6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	071b      	lsls	r3, r3, #28
 8003cb4:	4919      	ldr	r1, [pc, #100]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fa74 	bl	80011b4 <HAL_GetTick>
 8003ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cd0:	f7fd fa70 	bl	80011b4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e0d7      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	f040 80cd 	bne.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fd fa57 	bl	80011b4 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d0a:	f7fd fa53 	bl	80011b4 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	d903      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0ba      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d20:	4b5e      	ldr	r3, [pc, #376]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2c:	d0ed      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02e      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d12a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d56:	4b51      	ldr	r3, [pc, #324]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d64:	4b4d      	ldr	r3, [pc, #308]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	0f1b      	lsrs	r3, r3, #28
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	019a      	lsls	r2, r3, #6
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	061b      	lsls	r3, r3, #24
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	4944      	ldr	r1, [pc, #272]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d92:	4b42      	ldr	r3, [pc, #264]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	493d      	ldr	r1, [pc, #244]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d022      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dc0:	d11d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	0e1b      	lsrs	r3, r3, #24
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	0f1b      	lsrs	r3, r3, #28
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	019a      	lsls	r2, r3, #6
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	061b      	lsls	r3, r3, #24
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	071b      	lsls	r3, r3, #28
 8003df6:	4929      	ldr	r1, [pc, #164]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d028      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e10:	0e1b      	lsrs	r3, r3, #24
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	019a      	lsls	r2, r3, #6
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	431a      	orrs	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	071b      	lsls	r3, r3, #28
 8003e3e:	4917      	ldr	r1, [pc, #92]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	4911      	ldr	r1, [pc, #68]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e68:	f7fd f9a4 	bl	80011b4 <HAL_GetTick>
 8003e6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e70:	f7fd f9a0 	bl	80011b4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	; 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e007      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8e:	d1ef      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800

08003ea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e040      	b.n	8003f34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fd4e 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f82c 	bl	8003f3c <UART_SetConfig>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e022      	b.n	8003f34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa84 	bl	8004404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb0b 	bl	8004548 <UART_CheckIdleState>
 8003f32:	4603      	mov	r3, r0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4ba6      	ldr	r3, [pc, #664]	; (8004200 <UART_SetConfig+0x2c4>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a94      	ldr	r2, [pc, #592]	; (8004204 <UART_SetConfig+0x2c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d120      	bne.n	8003ffa <UART_SetConfig+0xbe>
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <UART_SetConfig+0x2cc>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d816      	bhi.n	8003ff4 <UART_SetConfig+0xb8>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x90>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe9 	.word	0x08003fe9
 8003fd4:	08003fe3 	.word	0x08003fe3
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e150      	b.n	8004284 <UART_SetConfig+0x348>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e14d      	b.n	8004284 <UART_SetConfig+0x348>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e14a      	b.n	8004284 <UART_SetConfig+0x348>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e147      	b.n	8004284 <UART_SetConfig+0x348>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e144      	b.n	8004284 <UART_SetConfig+0x348>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a83      	ldr	r2, [pc, #524]	; (800420c <UART_SetConfig+0x2d0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d132      	bne.n	800406a <UART_SetConfig+0x12e>
 8004004:	4b80      	ldr	r3, [pc, #512]	; (8004208 <UART_SetConfig+0x2cc>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d828      	bhi.n	8004064 <UART_SetConfig+0x128>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0xdc>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800404d 	.word	0x0800404d
 800401c:	08004065 	.word	0x08004065
 8004020:	08004065 	.word	0x08004065
 8004024:	08004065 	.word	0x08004065
 8004028:	08004059 	.word	0x08004059
 800402c:	08004065 	.word	0x08004065
 8004030:	08004065 	.word	0x08004065
 8004034:	08004065 	.word	0x08004065
 8004038:	08004053 	.word	0x08004053
 800403c:	08004065 	.word	0x08004065
 8004040:	08004065 	.word	0x08004065
 8004044:	08004065 	.word	0x08004065
 8004048:	0800405f 	.word	0x0800405f
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e118      	b.n	8004284 <UART_SetConfig+0x348>
 8004052:	2302      	movs	r3, #2
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e115      	b.n	8004284 <UART_SetConfig+0x348>
 8004058:	2304      	movs	r3, #4
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e112      	b.n	8004284 <UART_SetConfig+0x348>
 800405e:	2308      	movs	r3, #8
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e10f      	b.n	8004284 <UART_SetConfig+0x348>
 8004064:	2310      	movs	r3, #16
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e10c      	b.n	8004284 <UART_SetConfig+0x348>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a68      	ldr	r2, [pc, #416]	; (8004210 <UART_SetConfig+0x2d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d120      	bne.n	80040b6 <UART_SetConfig+0x17a>
 8004074:	4b64      	ldr	r3, [pc, #400]	; (8004208 <UART_SetConfig+0x2cc>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d013      	beq.n	80040aa <UART_SetConfig+0x16e>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d814      	bhi.n	80040b0 <UART_SetConfig+0x174>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d009      	beq.n	800409e <UART_SetConfig+0x162>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d810      	bhi.n	80040b0 <UART_SetConfig+0x174>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <UART_SetConfig+0x15c>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d006      	beq.n	80040a4 <UART_SetConfig+0x168>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x174>
 8004098:	2300      	movs	r3, #0
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0f2      	b.n	8004284 <UART_SetConfig+0x348>
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e0ef      	b.n	8004284 <UART_SetConfig+0x348>
 80040a4:	2304      	movs	r3, #4
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e0ec      	b.n	8004284 <UART_SetConfig+0x348>
 80040aa:	2308      	movs	r3, #8
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e0e9      	b.n	8004284 <UART_SetConfig+0x348>
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e0e6      	b.n	8004284 <UART_SetConfig+0x348>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a56      	ldr	r2, [pc, #344]	; (8004214 <UART_SetConfig+0x2d8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d120      	bne.n	8004102 <UART_SetConfig+0x1c6>
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <UART_SetConfig+0x2cc>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040ca:	2bc0      	cmp	r3, #192	; 0xc0
 80040cc:	d013      	beq.n	80040f6 <UART_SetConfig+0x1ba>
 80040ce:	2bc0      	cmp	r3, #192	; 0xc0
 80040d0:	d814      	bhi.n	80040fc <UART_SetConfig+0x1c0>
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d009      	beq.n	80040ea <UART_SetConfig+0x1ae>
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d810      	bhi.n	80040fc <UART_SetConfig+0x1c0>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <UART_SetConfig+0x1a8>
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d006      	beq.n	80040f0 <UART_SetConfig+0x1b4>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x1c0>
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e0cc      	b.n	8004284 <UART_SetConfig+0x348>
 80040ea:	2302      	movs	r3, #2
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e0c9      	b.n	8004284 <UART_SetConfig+0x348>
 80040f0:	2304      	movs	r3, #4
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e0c6      	b.n	8004284 <UART_SetConfig+0x348>
 80040f6:	2308      	movs	r3, #8
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e0c3      	b.n	8004284 <UART_SetConfig+0x348>
 80040fc:	2310      	movs	r3, #16
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e0c0      	b.n	8004284 <UART_SetConfig+0x348>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a44      	ldr	r2, [pc, #272]	; (8004218 <UART_SetConfig+0x2dc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d125      	bne.n	8004158 <UART_SetConfig+0x21c>
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <UART_SetConfig+0x2cc>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d017      	beq.n	800414c <UART_SetConfig+0x210>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d817      	bhi.n	8004152 <UART_SetConfig+0x216>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d00b      	beq.n	8004140 <UART_SetConfig+0x204>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d811      	bhi.n	8004152 <UART_SetConfig+0x216>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <UART_SetConfig+0x1fe>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d006      	beq.n	8004146 <UART_SetConfig+0x20a>
 8004138:	e00b      	b.n	8004152 <UART_SetConfig+0x216>
 800413a:	2300      	movs	r3, #0
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e0a1      	b.n	8004284 <UART_SetConfig+0x348>
 8004140:	2302      	movs	r3, #2
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e09e      	b.n	8004284 <UART_SetConfig+0x348>
 8004146:	2304      	movs	r3, #4
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e09b      	b.n	8004284 <UART_SetConfig+0x348>
 800414c:	2308      	movs	r3, #8
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e098      	b.n	8004284 <UART_SetConfig+0x348>
 8004152:	2310      	movs	r3, #16
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e095      	b.n	8004284 <UART_SetConfig+0x348>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <UART_SetConfig+0x2e0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d125      	bne.n	80041ae <UART_SetConfig+0x272>
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <UART_SetConfig+0x2cc>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800416c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004170:	d017      	beq.n	80041a2 <UART_SetConfig+0x266>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004176:	d817      	bhi.n	80041a8 <UART_SetConfig+0x26c>
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417c:	d00b      	beq.n	8004196 <UART_SetConfig+0x25a>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d811      	bhi.n	80041a8 <UART_SetConfig+0x26c>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <UART_SetConfig+0x254>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x260>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x26c>
 8004190:	2301      	movs	r3, #1
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e076      	b.n	8004284 <UART_SetConfig+0x348>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e073      	b.n	8004284 <UART_SetConfig+0x348>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e070      	b.n	8004284 <UART_SetConfig+0x348>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e06d      	b.n	8004284 <UART_SetConfig+0x348>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e06a      	b.n	8004284 <UART_SetConfig+0x348>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <UART_SetConfig+0x2e4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d138      	bne.n	800422a <UART_SetConfig+0x2ee>
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <UART_SetConfig+0x2cc>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c6:	d017      	beq.n	80041f8 <UART_SetConfig+0x2bc>
 80041c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041cc:	d82a      	bhi.n	8004224 <UART_SetConfig+0x2e8>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d00b      	beq.n	80041ec <UART_SetConfig+0x2b0>
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d824      	bhi.n	8004224 <UART_SetConfig+0x2e8>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <UART_SetConfig+0x2aa>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d006      	beq.n	80041f2 <UART_SetConfig+0x2b6>
 80041e4:	e01e      	b.n	8004224 <UART_SetConfig+0x2e8>
 80041e6:	2300      	movs	r3, #0
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e04b      	b.n	8004284 <UART_SetConfig+0x348>
 80041ec:	2302      	movs	r3, #2
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e048      	b.n	8004284 <UART_SetConfig+0x348>
 80041f2:	2304      	movs	r3, #4
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e045      	b.n	8004284 <UART_SetConfig+0x348>
 80041f8:	2308      	movs	r3, #8
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e042      	b.n	8004284 <UART_SetConfig+0x348>
 80041fe:	bf00      	nop
 8004200:	efff69f3 	.word	0xefff69f3
 8004204:	40011000 	.word	0x40011000
 8004208:	40023800 	.word	0x40023800
 800420c:	40004400 	.word	0x40004400
 8004210:	40004800 	.word	0x40004800
 8004214:	40004c00 	.word	0x40004c00
 8004218:	40005000 	.word	0x40005000
 800421c:	40011400 	.word	0x40011400
 8004220:	40007800 	.word	0x40007800
 8004224:	2310      	movs	r3, #16
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e02c      	b.n	8004284 <UART_SetConfig+0x348>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a72      	ldr	r2, [pc, #456]	; (80043f8 <UART_SetConfig+0x4bc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d125      	bne.n	8004280 <UART_SetConfig+0x344>
 8004234:	4b71      	ldr	r3, [pc, #452]	; (80043fc <UART_SetConfig+0x4c0>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800423e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004242:	d017      	beq.n	8004274 <UART_SetConfig+0x338>
 8004244:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004248:	d817      	bhi.n	800427a <UART_SetConfig+0x33e>
 800424a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424e:	d00b      	beq.n	8004268 <UART_SetConfig+0x32c>
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d811      	bhi.n	800427a <UART_SetConfig+0x33e>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <UART_SetConfig+0x326>
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425e:	d006      	beq.n	800426e <UART_SetConfig+0x332>
 8004260:	e00b      	b.n	800427a <UART_SetConfig+0x33e>
 8004262:	2300      	movs	r3, #0
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e00d      	b.n	8004284 <UART_SetConfig+0x348>
 8004268:	2302      	movs	r3, #2
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e00a      	b.n	8004284 <UART_SetConfig+0x348>
 800426e:	2304      	movs	r3, #4
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e007      	b.n	8004284 <UART_SetConfig+0x348>
 8004274:	2308      	movs	r3, #8
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e004      	b.n	8004284 <UART_SetConfig+0x348>
 800427a:	2310      	movs	r3, #16
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e001      	b.n	8004284 <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d15b      	bne.n	8004346 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d828      	bhi.n	80042e6 <UART_SetConfig+0x3aa>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0x360>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042e7 	.word	0x080042e7
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7ff f9d6 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 80042c4:	61b8      	str	r0, [r7, #24]
        break;
 80042c6:	e013      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7ff f9e6 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 80042cc:	61b8      	str	r0, [r7, #24]
        break;
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <UART_SetConfig+0x4c4>)
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e00c      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7ff f8b9 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80042da:	61b8      	str	r0, [r7, #24]
        break;
 80042dc:	e008      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	61bb      	str	r3, [r7, #24]
        break;
 80042e4:	e004      	b.n	80042f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77bb      	strb	r3, [r7, #30]
        break;
 80042ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d074      	beq.n	80043e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d916      	bls.n	8004340 <UART_SetConfig+0x404>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d212      	bcs.n	8004340 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f023 030f 	bic.w	r3, r3, #15
 8004322:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	b29a      	uxth	r2, r3
 8004330:	89fb      	ldrh	r3, [r7, #14]
 8004332:	4313      	orrs	r3, r2
 8004334:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	89fa      	ldrh	r2, [r7, #14]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e04f      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	77bb      	strb	r3, [r7, #30]
 8004344:	e04c      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d828      	bhi.n	800439e <UART_SetConfig+0x462>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x418>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	08004381 	.word	0x08004381
 800435c:	08004389 	.word	0x08004389
 8004360:	0800439f 	.word	0x0800439f
 8004364:	0800438f 	.word	0x0800438f
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
 8004374:	08004397 	.word	0x08004397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7ff f97a 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e013      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7ff f98a 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e00f      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <UART_SetConfig+0x4c4>)
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e00c      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7ff f85d 	bl	800344c <HAL_RCC_GetSysClockFreq>
 8004392:	61b8      	str	r0, [r7, #24]
        break;
 8004394:	e008      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	61bb      	str	r3, [r7, #24]
        break;
 800439c:	e004      	b.n	80043a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77bb      	strb	r3, [r7, #30]
        break;
 80043a6:	bf00      	nop
    }

    if (pclk != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085a      	lsrs	r2, r3, #1
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d909      	bls.n	80043dc <UART_SetConfig+0x4a0>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d205      	bcs.n	80043dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e001      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40007c00 	.word	0x40007c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400

08004404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01a      	beq.n	800451a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004502:	d10a      	bne.n	800451a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004558:	f7fc fe2c 	bl	80011b4 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10e      	bne.n	800458a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f81b 	bl	80045b6 <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e011      	b.n	80045ae <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b09c      	sub	sp, #112	; 0x70
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c6:	e0a7      	b.n	8004718 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ce:	f000 80a3 	beq.w	8004718 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fc fdef 	bl	80011b4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80045e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d13f      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045fc:	667b      	str	r3, [r7, #100]	; 0x64
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004608:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800460c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e6      	bne.n	80045e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	663b      	str	r3, [r7, #96]	; 0x60
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800463a:	64ba      	str	r2, [r7, #72]	; 0x48
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e068      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	d050      	beq.n	8004718 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004684:	d148      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
 80046b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	613b      	str	r3, [r7, #16]
   return(result);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046e2:	623a      	str	r2, [r7, #32]
 80046e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	69f9      	ldr	r1, [r7, #28]
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e5      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e010      	b.n	800473a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	429a      	cmp	r2, r3
 8004734:	f43f af48 	beq.w	80045c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3770      	adds	r7, #112	; 0x70
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004744:	b084      	sub	sp, #16
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	f107 001c 	add.w	r0, r7, #28
 8004752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	d120      	bne.n	800479e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <USB_CoreInit+0xac>)
 800476e:	4013      	ands	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d105      	bne.n	8004792 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa96 	bl	8004cc4 <USB_CoreReset>
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e010      	b.n	80047c0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa8a 	bl	8004cc4 <USB_CoreReset>
 80047b0:	4603      	mov	r3, r0
 80047b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10b      	bne.n	80047de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f043 0206 	orr.w	r2, r3, #6
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047de:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047ea:	b004      	add	sp, #16
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	ffbdffbf 	.word	0xffbdffbf

080047f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f023 0201 	bic.w	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	460b      	mov	r3, r1
 8004820:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d115      	bne.n	8004864 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004844:	2001      	movs	r0, #1
 8004846:	f7fc fcc1 	bl	80011cc <HAL_Delay>
      ms++;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fa29 	bl	8004ca8 <USB_GetMode>
 8004856:	4603      	mov	r3, r0
 8004858:	2b01      	cmp	r3, #1
 800485a:	d01e      	beq.n	800489a <USB_SetCurrentMode+0x84>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b31      	cmp	r3, #49	; 0x31
 8004860:	d9f0      	bls.n	8004844 <USB_SetCurrentMode+0x2e>
 8004862:	e01a      	b.n	800489a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d115      	bne.n	8004896 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004876:	2001      	movs	r0, #1
 8004878:	f7fc fca8 	bl	80011cc <HAL_Delay>
      ms++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa10 	bl	8004ca8 <USB_GetMode>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <USB_SetCurrentMode+0x84>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b31      	cmp	r3, #49	; 0x31
 8004892:	d9f0      	bls.n	8004876 <USB_SetCurrentMode+0x60>
 8004894:	e001      	b.n	800489a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e005      	b.n	80048a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b32      	cmp	r3, #50	; 0x32
 800489e:	d101      	bne.n	80048a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048b0:	b084      	sub	sp, #16
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b086      	sub	sp, #24
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	e009      	b.n	80048e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3340      	adds	r3, #64	; 0x40
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	3301      	adds	r3, #1
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b0e      	cmp	r3, #14
 80048e8:	d9f2      	bls.n	80048d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11c      	bne.n	800492a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	e005      	b.n	8004936 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	4619      	mov	r1, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	461a      	mov	r2, r3
 8004952:	680b      	ldr	r3, [r1, #0]
 8004954:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004962:	2100      	movs	r1, #0
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f965 	bl	8004c34 <USB_SetDevSpeed>
 800496a:	e008      	b.n	800497e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800496c:	2101      	movs	r1, #1
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f960 	bl	8004c34 <USB_SetDevSpeed>
 8004974:	e003      	b.n	800497e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004976:	2103      	movs	r1, #3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f95b 	bl	8004c34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800497e:	2110      	movs	r1, #16
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8f3 	bl	8004b6c <USB_FlushTxFifo>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f91f 	bl	8004bd4 <USB_FlushRxFifo>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	461a      	mov	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	461a      	mov	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	e043      	b.n	8004a52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e0:	d118      	bne.n	8004a14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	461a      	mov	r2, r3
 80049f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	e013      	b.n	8004a26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e008      	b.n	8004a26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a32:	461a      	mov	r2, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3b7      	bcc.n	80049ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	e043      	b.n	8004ae8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a76:	d118      	bne.n	8004aaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e013      	b.n	8004abc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	e008      	b.n	8004abc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2300      	movs	r3, #0
 8004acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	461a      	mov	r2, r3
 8004adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ae0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3b7      	bcc.n	8004a60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f043 0210 	orr.w	r2, r3, #16
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <USB_DevInit+0x2b4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f043 0208 	orr.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <USB_DevInit+0x2b8>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b60:	b004      	add	sp, #16
 8004b62:	4770      	bx	lr
 8004b64:	803c3800 	.word	0x803c3800
 8004b68:	40000004 	.word	0x40000004

08004b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <USB_FlushTxFifo+0x64>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e01b      	b.n	8004bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	daf2      	bge.n	8004b7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	019b      	lsls	r3, r3, #6
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <USB_FlushTxFifo+0x64>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e006      	b.n	8004bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d0f0      	beq.n	8004ba4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	00030d40 	.word	0x00030d40

08004bd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <USB_FlushRxFifo+0x5c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e018      	b.n	8004c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	daf2      	bge.n	8004be0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2210      	movs	r2, #16
 8004c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <USB_FlushRxFifo+0x5c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e006      	b.n	8004c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d0f0      	beq.n	8004c04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	00030d40 	.word	0x00030d40

08004c34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c80:	f023 0303 	bic.w	r3, r3, #3
 8004c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c94:	f043 0302 	orr.w	r3, r3, #2
 8004c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <USB_CoreReset+0x64>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e01b      	b.n	8004d1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	daf2      	bge.n	8004cd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <USB_CoreReset+0x64>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e006      	b.n	8004d1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d0f0      	beq.n	8004cfa <USB_CoreReset+0x36>

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	00030d40 	.word	0x00030d40

08004d2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004d32:	4b8d      	ldr	r3, [pc, #564]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d34:	22c0      	movs	r2, #192	; 0xc0
 8004d36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004d38:	4b8b      	ldr	r3, [pc, #556]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d3a:	22a8      	movs	r2, #168	; 0xa8
 8004d3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004d3e:	4b8a      	ldr	r3, [pc, #552]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 230;
 8004d44:	4b88      	ldr	r3, [pc, #544]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d46:	22e6      	movs	r2, #230	; 0xe6
 8004d48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004d4c:	22ff      	movs	r2, #255	; 0xff
 8004d4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004d50:	4b86      	ldr	r3, [pc, #536]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004d52:	22ff      	movs	r2, #255	; 0xff
 8004d54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d5c:	4b83      	ldr	r3, [pc, #524]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004d62:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004d64:	22c0      	movs	r2, #192	; 0xc0
 8004d66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004d68:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004d6a:	22a8      	movs	r2, #168	; 0xa8
 8004d6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004d6e:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 255;
 8004d74:	4b7e      	ldr	r3, [pc, #504]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004d76:	22ff      	movs	r2, #255	; 0xff
 8004d78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004d7a:	f000 fd15 	bl	80057a8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	061a      	lsls	r2, r3, #24
 8004d84:	4b78      	ldr	r3, [pc, #480]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	4b76      	ldr	r3, [pc, #472]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d8e:	789b      	ldrb	r3, [r3, #2]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4313      	orrs	r3, r2
 8004d94:	4a74      	ldr	r2, [pc, #464]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d96:	78d2      	ldrb	r2, [r2, #3]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	061a      	lsls	r2, r3, #24
 8004d9c:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	0619      	lsls	r1, r3, #24
 8004da2:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	4319      	orrs	r1, r3
 8004daa:	4b6f      	ldr	r3, [pc, #444]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dac:	789b      	ldrb	r3, [r3, #2]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	430b      	orrs	r3, r1
 8004db2:	496d      	ldr	r1, [pc, #436]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004db4:	78c9      	ldrb	r1, [r1, #3]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b69      	ldr	r3, [pc, #420]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	0619      	lsls	r1, r3, #24
 8004dc6:	4b68      	ldr	r3, [pc, #416]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	4319      	orrs	r1, r3
 8004dce:	4b66      	ldr	r3, [pc, #408]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	4964      	ldr	r1, [pc, #400]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dd8:	78c9      	ldrb	r1, [r1, #3]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004de2:	431a      	orrs	r2, r3
 8004de4:	4b60      	ldr	r3, [pc, #384]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	0619      	lsls	r1, r3, #24
 8004dea:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	4319      	orrs	r1, r3
 8004df2:	4b5d      	ldr	r3, [pc, #372]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004df4:	789b      	ldrb	r3, [r3, #2]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	495b      	ldr	r1, [pc, #364]	; (8004f68 <MX_LWIP_Init+0x23c>)
 8004dfc:	78c9      	ldrb	r1, [r1, #3]
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	0e1b      	lsrs	r3, r3, #24
 8004e02:	4313      	orrs	r3, r2
 8004e04:	4a5b      	ldr	r2, [pc, #364]	; (8004f74 <MX_LWIP_Init+0x248>)
 8004e06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004e08:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	061a      	lsls	r2, r3, #24
 8004e0e:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	4b55      	ldr	r3, [pc, #340]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e18:	789b      	ldrb	r3, [r3, #2]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	4a53      	ldr	r2, [pc, #332]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e20:	78d2      	ldrb	r2, [r2, #3]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	061a      	lsls	r2, r3, #24
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	0619      	lsls	r1, r3, #24
 8004e2c:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	041b      	lsls	r3, r3, #16
 8004e32:	4319      	orrs	r1, r3
 8004e34:	4b4d      	ldr	r3, [pc, #308]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	494b      	ldr	r1, [pc, #300]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e3e:	78c9      	ldrb	r1, [r1, #3]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	4b48      	ldr	r3, [pc, #288]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	0619      	lsls	r1, r3, #24
 8004e50:	4b46      	ldr	r3, [pc, #280]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	4319      	orrs	r1, r3
 8004e58:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e5a:	789b      	ldrb	r3, [r3, #2]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	4942      	ldr	r1, [pc, #264]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e62:	78c9      	ldrb	r1, [r1, #3]
 8004e64:	430b      	orrs	r3, r1
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	4b3f      	ldr	r3, [pc, #252]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	0619      	lsls	r1, r3, #24
 8004e74:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	4319      	orrs	r1, r3
 8004e7c:	4b3b      	ldr	r3, [pc, #236]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e7e:	789b      	ldrb	r3, [r3, #2]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	430b      	orrs	r3, r1
 8004e84:	4939      	ldr	r1, [pc, #228]	; (8004f6c <MX_LWIP_Init+0x240>)
 8004e86:	78c9      	ldrb	r1, [r1, #3]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	4a3a      	ldr	r2, [pc, #232]	; (8004f78 <MX_LWIP_Init+0x24c>)
 8004e90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	061a      	lsls	r2, r3, #24
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	4b33      	ldr	r3, [pc, #204]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004ea2:	789b      	ldrb	r3, [r3, #2]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	4a31      	ldr	r2, [pc, #196]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004eaa:	78d2      	ldrb	r2, [r2, #3]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	061a      	lsls	r2, r3, #24
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	0619      	lsls	r1, r3, #24
 8004eb6:	4b2e      	ldr	r3, [pc, #184]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004eb8:	785b      	ldrb	r3, [r3, #1]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	4319      	orrs	r1, r3
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004ec0:	789b      	ldrb	r3, [r3, #2]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	492a      	ldr	r1, [pc, #168]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004ec8:	78c9      	ldrb	r1, [r1, #3]
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	4b26      	ldr	r3, [pc, #152]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	0619      	lsls	r1, r3, #24
 8004eda:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004edc:	785b      	ldrb	r3, [r3, #1]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	4319      	orrs	r1, r3
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004ee4:	789b      	ldrb	r3, [r3, #2]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	4921      	ldr	r1, [pc, #132]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004eec:	78c9      	ldrb	r1, [r1, #3]
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	0a1b      	lsrs	r3, r3, #8
 8004ef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	0619      	lsls	r1, r3, #24
 8004efe:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	4319      	orrs	r1, r3
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004f08:	789b      	ldrb	r3, [r3, #2]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	4918      	ldr	r1, [pc, #96]	; (8004f70 <MX_LWIP_Init+0x244>)
 8004f10:	78c9      	ldrb	r1, [r1, #3]
 8004f12:	430b      	orrs	r3, r1
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	4313      	orrs	r3, r2
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <MX_LWIP_Init+0x250>)
 8004f1a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <MX_LWIP_Init+0x254>)
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <MX_LWIP_Init+0x258>)
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	2300      	movs	r3, #0
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <MX_LWIP_Init+0x250>)
 8004f2a:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <MX_LWIP_Init+0x24c>)
 8004f2c:	4911      	ldr	r1, [pc, #68]	; (8004f74 <MX_LWIP_Init+0x248>)
 8004f2e:	4816      	ldr	r0, [pc, #88]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f30:	f001 f926 	bl	8006180 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004f34:	4814      	ldr	r0, [pc, #80]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f36:	f001 fad5 	bl	80064e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004f4c:	480e      	ldr	r0, [pc, #56]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f4e:	f001 fad9 	bl	8006504 <netif_set_up>
 8004f52:	e002      	b.n	8004f5a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004f54:	480c      	ldr	r0, [pc, #48]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f56:	f001 fb41 	bl	80065dc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004f5a:	490c      	ldr	r1, [pc, #48]	; (8004f8c <MX_LWIP_Init+0x260>)
 8004f5c:	480a      	ldr	r0, [pc, #40]	; (8004f88 <MX_LWIP_Init+0x25c>)
 8004f5e:	f001 fbd3 	bl	8006708 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200007c4 	.word	0x200007c4
 8004f6c:	200007c8 	.word	0x200007c8
 8004f70:	200007cc 	.word	0x200007cc
 8004f74:	200007b8 	.word	0x200007b8
 8004f78:	200007bc 	.word	0x200007bc
 8004f7c:	200007c0 	.word	0x200007c0
 8004f80:	0800f99d 	.word	0x0800f99d
 8004f84:	080052a5 	.word	0x080052a5
 8004f88:	20000784 	.word	0x20000784
 8004f8c:	08004f91 	.word	0x08004f91

08004f90 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <SCB_InvalidateDCache_by_Addr>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fba:	f3bf 8f4f 	dsb	sy
}
 8004fbe:	bf00      	nop
    while (op_size > 0) {
 8004fc0:	e00b      	b.n	8004fda <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004fc2:	4a0d      	ldr	r2, [pc, #52]	; (8004ff8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dcf0      	bgt.n	8004fc2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe0:	f3bf 8f4f 	dsb	sy
}
 8004fe4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fe6:	f3bf 8f6f 	isb	sy
}
 8004fea:	bf00      	nop
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <low_level_init+0x110>)
 800500a:	4a41      	ldr	r2, [pc, #260]	; (8005110 <low_level_init+0x114>)
 800500c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800500e:	2300      	movs	r3, #0
 8005010:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005016:	23e1      	movs	r3, #225	; 0xe1
 8005018:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800501a:	2300      	movs	r3, #0
 800501c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800501e:	2300      	movs	r3, #0
 8005020:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005022:	2300      	movs	r3, #0
 8005024:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005026:	4a39      	ldr	r2, [pc, #228]	; (800510c <low_level_init+0x110>)
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <low_level_init+0x110>)
 8005030:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005034:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005036:	4b35      	ldr	r3, [pc, #212]	; (800510c <low_level_init+0x110>)
 8005038:	4a36      	ldr	r2, [pc, #216]	; (8005114 <low_level_init+0x118>)
 800503a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <low_level_init+0x110>)
 800503e:	4a36      	ldr	r2, [pc, #216]	; (8005118 <low_level_init+0x11c>)
 8005040:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005042:	4b32      	ldr	r3, [pc, #200]	; (800510c <low_level_init+0x110>)
 8005044:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005048:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800504a:	4830      	ldr	r0, [pc, #192]	; (800510c <low_level_init+0x110>)
 800504c:	f7fc fa44 	bl	80014d8 <HAL_ETH_Init>
 8005050:	4603      	mov	r3, r0
 8005052:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005054:	2238      	movs	r2, #56	; 0x38
 8005056:	2100      	movs	r1, #0
 8005058:	4830      	ldr	r0, [pc, #192]	; (800511c <low_level_init+0x120>)
 800505a:	f00a fdd1 	bl	800fc00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <low_level_init+0x120>)
 8005060:	2221      	movs	r2, #33	; 0x21
 8005062:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005064:	4b2d      	ldr	r3, [pc, #180]	; (800511c <low_level_init+0x120>)
 8005066:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800506a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800506c:	4b2b      	ldr	r3, [pc, #172]	; (800511c <low_level_init+0x120>)
 800506e:	2200      	movs	r2, #0
 8005070:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005072:	482b      	ldr	r0, [pc, #172]	; (8005120 <low_level_init+0x124>)
 8005074:	f000 ff4c 	bl	8005f10 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2206      	movs	r2, #6
 800507c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005080:	4b22      	ldr	r3, [pc, #136]	; (800510c <low_level_init+0x110>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800508c:	4b1f      	ldr	r3, [pc, #124]	; (800510c <low_level_init+0x110>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	785a      	ldrb	r2, [r3, #1]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <low_level_init+0x110>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	789a      	ldrb	r2, [r3, #2]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80050a4:	4b19      	ldr	r3, [pc, #100]	; (800510c <low_level_init+0x110>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	78da      	ldrb	r2, [r3, #3]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050b0:	4b16      	ldr	r3, [pc, #88]	; (800510c <low_level_init+0x110>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	791a      	ldrb	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <low_level_init+0x110>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	795a      	ldrb	r2, [r3, #5]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050ce:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050d6:	f043 030a 	orr.w	r3, r3, #10
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80050e2:	4910      	ldr	r1, [pc, #64]	; (8005124 <low_level_init+0x128>)
 80050e4:	4810      	ldr	r0, [pc, #64]	; (8005128 <low_level_init+0x12c>)
 80050e6:	f7fb feb2 	bl	8000e4e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80050ea:	480f      	ldr	r0, [pc, #60]	; (8005128 <low_level_init+0x12c>)
 80050ec:	f7fb fee1 	bl	8000eb2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa2a 	bl	8005550 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80050fc:	e001      	b.n	8005102 <low_level_init+0x106>
    Error_Handler();
 80050fe:	f7fb fc08 	bl	8000912 <Error_Handler>
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	2000515c 	.word	0x2000515c
 8005110:	40028000 	.word	0x40028000
 8005114:	20000130 	.word	0x20000130
 8005118:	20000090 	.word	0x20000090
 800511c:	2000520c 	.word	0x2000520c
 8005120:	08013a44 	.word	0x08013a44
 8005124:	2000000c 	.word	0x2000000c
 8005128:	20005244 	.word	0x20005244

0800512c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b092      	sub	sp, #72	; 0x48
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005144:	f107 030c 	add.w	r3, r7, #12
 8005148:	2230      	movs	r2, #48	; 0x30
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f00a fd57 	bl	800fc00 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005152:	f107 030c 	add.w	r3, r7, #12
 8005156:	2230      	movs	r2, #48	; 0x30
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f00a fd50 	bl	800fc00 <memset>

  for(q = p; q != NULL; q = q->next)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	643b      	str	r3, [r7, #64]	; 0x40
 8005164:	e045      	b.n	80051f2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005168:	2b03      	cmp	r3, #3
 800516a:	d902      	bls.n	8005172 <low_level_output+0x46>
      return ERR_IF;
 800516c:	f06f 030b 	mvn.w	r3, #11
 8005170:	e055      	b.n	800521e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005174:	6859      	ldr	r1, [r3, #4]
 8005176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	3348      	adds	r3, #72	; 0x48
 8005182:	443b      	add	r3, r7
 8005184:	3b3c      	subs	r3, #60	; 0x3c
 8005186:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	895b      	ldrh	r3, [r3, #10]
 800518c:	4619      	mov	r1, r3
 800518e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3348      	adds	r3, #72	; 0x48
 800519a:	443b      	add	r3, r7
 800519c:	3b38      	subs	r3, #56	; 0x38
 800519e:	6019      	str	r1, [r3, #0]

    if(i>0)
 80051a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80051a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	f107 000c 	add.w	r0, r7, #12
 80051ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b0:	460b      	mov	r3, r1
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	440b      	add	r3, r1
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	18c1      	adds	r1, r0, r3
 80051ba:	4613      	mov	r3, r2
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	3348      	adds	r3, #72	; 0x48
 80051c4:	443b      	add	r3, r7
 80051c6:	3b34      	subs	r3, #52	; 0x34
 80051c8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80051ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80051d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051d4:	4613      	mov	r3, r2
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	3348      	adds	r3, #72	; 0x48
 80051de:	443b      	add	r3, r7
 80051e0:	3b34      	subs	r3, #52	; 0x34
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80051e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e8:	3301      	adds	r3, #1
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
 80051f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1b6      	bne.n	8005166 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	891b      	ldrh	r3, [r3, #8]
 80051fc:	461a      	mov	r2, r3
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <low_level_output+0xfc>)
 8005200:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <low_level_output+0xfc>)
 8005204:	f107 030c 	add.w	r3, r7, #12
 8005208:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <low_level_output+0xfc>)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005210:	2214      	movs	r2, #20
 8005212:	4905      	ldr	r1, [pc, #20]	; (8005228 <low_level_output+0xfc>)
 8005214:	4805      	ldr	r0, [pc, #20]	; (800522c <low_level_output+0x100>)
 8005216:	f7fc fa93 	bl	8001740 <HAL_ETH_Transmit>

  return errval;
 800521a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800521e:	4618      	mov	r0, r3
 8005220:	3748      	adds	r7, #72	; 0x48
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	2000520c 	.word	0x2000520c
 800522c:	2000515c 	.word	0x2000515c

08005230 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <low_level_input+0x2c>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005244:	f107 030c 	add.w	r3, r7, #12
 8005248:	4619      	mov	r1, r3
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <low_level_input+0x30>)
 800524c:	f7fc fb0c 	bl	8001868 <HAL_ETH_ReadData>
  }

  return p;
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20005158 	.word	0x20005158
 8005260:	2000515c 	.word	0x2000515c

08005264 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff ffdd 	bl	8005230 <low_level_input>
 8005276:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	4798      	blx	r3
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f001 fdba 	bl	8006e08 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ea      	bne.n	8005270 <ethernetif_input+0xc>
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <ethernetif_init+0x1c>
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <ethernetif_init+0x48>)
 80052b4:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 80052b8:	490d      	ldr	r1, [pc, #52]	; (80052f0 <ethernetif_init+0x4c>)
 80052ba:	480e      	ldr	r0, [pc, #56]	; (80052f4 <ethernetif_init+0x50>)
 80052bc:	f00a fca8 	bl	800fc10 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2273      	movs	r2, #115	; 0x73
 80052c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2274      	movs	r2, #116	; 0x74
 80052cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <ethernetif_init+0x54>)
 80052d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <ethernetif_init+0x58>)
 80052da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff fe8d 	bl	8004ffc <low_level_init>

  return ERR_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0801104c 	.word	0x0801104c
 80052f0:	08011068 	.word	0x08011068
 80052f4:	08011078 	.word	0x08011078
 80052f8:	0800dd35 	.word	0x0800dd35
 80052fc:	0800512d 	.word	0x0800512d

08005300 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	4807      	ldr	r0, [pc, #28]	; (800532c <pbuf_free_custom+0x2c>)
 8005310:	f000 fee0 	bl	80060d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <pbuf_free_custom+0x30>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <pbuf_free_custom+0x30>)
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
  }
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	08013a44 	.word	0x08013a44
 8005330:	20005158 	.word	0x20005158

08005334 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005338:	f7fb ff3c 	bl	80011b4 <HAL_GetTick>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
 800535a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a4e      	ldr	r2, [pc, #312]	; (800549c <HAL_ETH_MspInit+0x158>)
 8005362:	4293      	cmp	r3, r2
 8005364:	f040 8096 	bne.w	8005494 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005368:	4b4d      	ldr	r3, [pc, #308]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	4a4c      	ldr	r2, [pc, #304]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 800536e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005372:	6313      	str	r3, [r2, #48]	; 0x30
 8005374:	4b4a      	ldr	r3, [pc, #296]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537c:	623b      	str	r3, [r7, #32]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	4a46      	ldr	r2, [pc, #280]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 8005386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538a:	6313      	str	r3, [r2, #48]	; 0x30
 800538c:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	4a40      	ldr	r2, [pc, #256]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 800539e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a2:	6313      	str	r3, [r2, #48]	; 0x30
 80053a4:	4b3e      	ldr	r3, [pc, #248]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053b0:	4b3b      	ldr	r3, [pc, #236]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a3a      	ldr	r2, [pc, #232]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
 80053bc:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c8:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	4a34      	ldr	r2, [pc, #208]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	6313      	str	r3, [r2, #48]	; 0x30
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e0:	4b2f      	ldr	r3, [pc, #188]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	4a2e      	ldr	r2, [pc, #184]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053e6:	f043 0302 	orr.w	r3, r3, #2
 80053ea:	6313      	str	r3, [r2, #48]	; 0x30
 80053ec:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80053f8:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	4a28      	ldr	r2, [pc, #160]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 80053fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005402:	6313      	str	r3, [r2, #48]	; 0x30
 8005404:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <HAL_ETH_MspInit+0x15c>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005410:	2332      	movs	r3, #50	; 0x32
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005414:	2302      	movs	r3, #2
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800541c:	2303      	movs	r3, #3
 800541e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005420:	230b      	movs	r3, #11
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005428:	4619      	mov	r1, r3
 800542a:	481e      	ldr	r0, [pc, #120]	; (80054a4 <HAL_ETH_MspInit+0x160>)
 800542c:	f7fd f946 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005430:	2386      	movs	r3, #134	; 0x86
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005434:	2302      	movs	r3, #2
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543c:	2303      	movs	r3, #3
 800543e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005440:	230b      	movs	r3, #11
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005448:	4619      	mov	r1, r3
 800544a:	4817      	ldr	r0, [pc, #92]	; (80054a8 <HAL_ETH_MspInit+0x164>)
 800544c:	f7fd f936 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800545e:	2303      	movs	r3, #3
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005462:	230b      	movs	r3, #11
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546a:	4619      	mov	r1, r3
 800546c:	480f      	ldr	r0, [pc, #60]	; (80054ac <HAL_ETH_MspInit+0x168>)
 800546e:	f7fd f925 	bl	80026bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005472:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005480:	2303      	movs	r3, #3
 8005482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005484:	230b      	movs	r3, #11
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548c:	4619      	mov	r1, r3
 800548e:	4808      	ldr	r0, [pc, #32]	; (80054b0 <HAL_ETH_MspInit+0x16c>)
 8005490:	f7fd f914 	bl	80026bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005494:	bf00      	nop
 8005496:	3738      	adds	r7, #56	; 0x38
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40028000 	.word	0x40028000
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40020800 	.word	0x40020800
 80054a8:	40020000 	.word	0x40020000
 80054ac:	40020400 	.word	0x40020400
 80054b0:	40021800 	.word	0x40021800

080054b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80054b8:	4802      	ldr	r0, [pc, #8]	; (80054c4 <ETH_PHY_IO_Init+0x10>)
 80054ba:	f7fc fca5 	bl	8001e08 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	2000515c 	.word	0x2000515c

080054c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  return 0;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	68f9      	ldr	r1, [r7, #12]
 80054ea:	4807      	ldr	r0, [pc, #28]	; (8005508 <ETH_PHY_IO_ReadReg+0x30>)
 80054ec:	f7fc faf4 	bl	8001ad8 <HAL_ETH_ReadPHYRegister>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054fa:	e000      	b.n	80054fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000515c 	.word	0x2000515c

0800550c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	4807      	ldr	r0, [pc, #28]	; (800553c <ETH_PHY_IO_WriteReg+0x30>)
 8005520:	f7fc fb25 	bl	8001b6e <HAL_ETH_WritePHYRegister>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552e:	e000      	b.n	8005532 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	2000515c 	.word	0x2000515c

08005540 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005544:	f7fb fe36 	bl	80011b4 <HAL_GetTick>
 8005548:	4603      	mov	r3, r0
}
 800554a:	4618      	mov	r0, r3
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b0a0      	sub	sp, #128	; 0x80
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005558:	f107 030c 	add.w	r3, r7, #12
 800555c:	2264      	movs	r2, #100	; 0x64
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f00a fb4d 	bl	800fc00 <memset>
  int32_t PHYLinkState = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800556e:	2300      	movs	r3, #0
 8005570:	67bb      	str	r3, [r7, #120]	; 0x78
 8005572:	2300      	movs	r3, #0
 8005574:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005576:	483a      	ldr	r0, [pc, #232]	; (8005660 <ethernet_link_check_state+0x110>)
 8005578:	f7fb fd43 	bl	8001002 <LAN8742_GetLinkState>
 800557c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00c      	beq.n	80055aa <ethernet_link_check_state+0x5a>
 8005590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005592:	2b01      	cmp	r3, #1
 8005594:	dc09      	bgt.n	80055aa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005596:	4833      	ldr	r0, [pc, #204]	; (8005664 <ethernet_link_check_state+0x114>)
 8005598:	f7fc f879 	bl	800168e <HAL_ETH_Stop>
    netif_set_down(netif);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f81d 	bl	80065dc <netif_set_down>
    netif_set_link_down(netif);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 f880 	bl	80066a8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80055a8:	e055      	b.n	8005656 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d14e      	bne.n	8005656 <ethernet_link_check_state+0x106>
 80055b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	dd4b      	ble.n	8005656 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80055be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c0:	3b02      	subs	r3, #2
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d82a      	bhi.n	800561c <ethernet_link_check_state+0xcc>
 80055c6:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <ethernet_link_check_state+0x7c>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055dd 	.word	0x080055dd
 80055d0:	080055ef 	.word	0x080055ef
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
      duplex = ETH_FULLDUPLEX_MODE;
 80055dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80055e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055ec:	e017      	b.n	800561e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80055f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80055f8:	2301      	movs	r3, #1
 80055fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80055fc:	e00f      	b.n	800561e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80055fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005602:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005604:	2300      	movs	r3, #0
 8005606:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005608:	2301      	movs	r3, #1
 800560a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800560c:	e007      	b.n	800561e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800560e:	2300      	movs	r3, #0
 8005610:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005612:	2300      	movs	r3, #0
 8005614:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800561a:	e000      	b.n	800561e <ethernet_link_check_state+0xce>
      break;
 800561c:	bf00      	nop
    if(linkchanged)
 800561e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d018      	beq.n	8005656 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	4619      	mov	r1, r3
 800562a:	480e      	ldr	r0, [pc, #56]	; (8005664 <ethernet_link_check_state+0x114>)
 800562c:	f7fc fae8 	bl	8001c00 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8005634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005636:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005638:	f107 030c 	add.w	r3, r7, #12
 800563c:	4619      	mov	r1, r3
 800563e:	4809      	ldr	r0, [pc, #36]	; (8005664 <ethernet_link_check_state+0x114>)
 8005640:	f7fc fbc8 	bl	8001dd4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005644:	4807      	ldr	r0, [pc, #28]	; (8005664 <ethernet_link_check_state+0x114>)
 8005646:	f7fb ffc3 	bl	80015d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 ff5a 	bl	8006504 <netif_set_up>
      netif_set_link_up(netif);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fff5 	bl	8006640 <netif_set_link_up>
}
 8005656:	bf00      	nop
 8005658:	3780      	adds	r7, #128	; 0x80
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20005244 	.word	0x20005244
 8005664:	2000515c 	.word	0x2000515c

08005668 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005670:	4812      	ldr	r0, [pc, #72]	; (80056bc <HAL_ETH_RxAllocateCallback+0x54>)
 8005672:	f000 fcc1 	bl	8005ff8 <memp_malloc_pool>
 8005676:	60f8      	str	r0, [r7, #12]
  if (p)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d014      	beq.n	80056a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f103 0220 	add.w	r2, r3, #32
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800568c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005696:	9201      	str	r2, [sp, #4]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2241      	movs	r2, #65	; 0x41
 800569e:	2100      	movs	r1, #0
 80056a0:	2000      	movs	r0, #0
 80056a2:	f001 f9f7 	bl	8006a94 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80056a6:	e005      	b.n	80056b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	08013a44 	.word	0x08013a44
 80056c0:	08005301 	.word	0x08005301
 80056c4:	20005158 	.word	0x20005158

080056c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3b20      	subs	r3, #32
 80056e6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	2200      	movs	r2, #0
 80056f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e003      	b.n	8005712 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e009      	b.n	8005734 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	891a      	ldrh	r2, [r3, #8]
 8005724:	887b      	ldrh	r3, [r7, #2]
 8005726:	4413      	add	r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f2      	bne.n	8005720 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fc30 	bl	8004fa4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005744:	bf00      	nop
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	b21a      	sxth	r2, r3
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	b21b      	sxth	r3, r3
 8005764:	4313      	orrs	r3, r2
 8005766:	b21b      	sxth	r3, r3
 8005768:	b29b      	uxth	r3, r3
}
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	061a      	lsls	r2, r3, #24
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	0e1b      	lsrs	r3, r3, #24
 800579a:	4313      	orrs	r3, r2
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80057b2:	f000 f8d5 	bl	8005960 <mem_init>
  memp_init();
 80057b6:	f000 fbdb 	bl	8005f70 <memp_init>
  pbuf_init();
  netif_init();
 80057ba:	f000 fcd9 	bl	8006170 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80057be:	f007 f8f9 	bl	800c9b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80057c2:	f001 fe51 	bl	8007468 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80057c6:	f007 f86b 	bl	800c8a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <ptr_to_mem+0x20>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	4413      	add	r3, r2
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	200058d0 	.word	0x200058d0

080057f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <mem_to_ptr+0x20>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	b29b      	uxth	r3, r3
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	200058d0 	.word	0x200058d0

0800581c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005824:	4b45      	ldr	r3, [pc, #276]	; (800593c <plug_holes+0x120>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	429a      	cmp	r2, r3
 800582c:	d206      	bcs.n	800583c <plug_holes+0x20>
 800582e:	4b44      	ldr	r3, [pc, #272]	; (8005940 <plug_holes+0x124>)
 8005830:	f240 12df 	movw	r2, #479	; 0x1df
 8005834:	4943      	ldr	r1, [pc, #268]	; (8005944 <plug_holes+0x128>)
 8005836:	4844      	ldr	r0, [pc, #272]	; (8005948 <plug_holes+0x12c>)
 8005838:	f00a f9ea 	bl	800fc10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800583c:	4b43      	ldr	r3, [pc, #268]	; (800594c <plug_holes+0x130>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d306      	bcc.n	8005854 <plug_holes+0x38>
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <plug_holes+0x124>)
 8005848:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800584c:	4940      	ldr	r1, [pc, #256]	; (8005950 <plug_holes+0x134>)
 800584e:	483e      	ldr	r0, [pc, #248]	; (8005948 <plug_holes+0x12c>)
 8005850:	f00a f9de 	bl	800fc10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <plug_holes+0x4e>
 800585c:	4b38      	ldr	r3, [pc, #224]	; (8005940 <plug_holes+0x124>)
 800585e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005862:	493c      	ldr	r1, [pc, #240]	; (8005954 <plug_holes+0x138>)
 8005864:	4838      	ldr	r0, [pc, #224]	; (8005948 <plug_holes+0x12c>)
 8005866:	f00a f9d3 	bl	800fc10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005872:	d906      	bls.n	8005882 <plug_holes+0x66>
 8005874:	4b32      	ldr	r3, [pc, #200]	; (8005940 <plug_holes+0x124>)
 8005876:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800587a:	4937      	ldr	r1, [pc, #220]	; (8005958 <plug_holes+0x13c>)
 800587c:	4832      	ldr	r0, [pc, #200]	; (8005948 <plug_holes+0x12c>)
 800587e:	f00a f9c7 	bl	800fc10 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff ffa4 	bl	80057d4 <ptr_to_mem>
 800588c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d024      	beq.n	80058e0 <plug_holes+0xc4>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d120      	bne.n	80058e0 <plug_holes+0xc4>
 800589e:	4b2b      	ldr	r3, [pc, #172]	; (800594c <plug_holes+0x130>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d01b      	beq.n	80058e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80058a8:	4b2c      	ldr	r3, [pc, #176]	; (800595c <plug_holes+0x140>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d102      	bne.n	80058b8 <plug_holes+0x9c>
      lfree = mem;
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <plug_holes+0x140>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	881a      	ldrh	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058c8:	d00a      	beq.n	80058e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff80 	bl	80057d4 <ptr_to_mem>
 80058d4:	4604      	mov	r4, r0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff8e 	bl	80057f8 <mem_to_ptr>
 80058dc:	4603      	mov	r3, r0
 80058de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	885b      	ldrh	r3, [r3, #2]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff ff75 	bl	80057d4 <ptr_to_mem>
 80058ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d01f      	beq.n	8005934 <plug_holes+0x118>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	791b      	ldrb	r3, [r3, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11b      	bne.n	8005934 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80058fc:	4b17      	ldr	r3, [pc, #92]	; (800595c <plug_holes+0x140>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d102      	bne.n	800590c <plug_holes+0xf0>
      lfree = pmem;
 8005906:	4a15      	ldr	r2, [pc, #84]	; (800595c <plug_holes+0x140>)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	881a      	ldrh	r2, [r3, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800591c:	d00a      	beq.n	8005934 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff56 	bl	80057d4 <ptr_to_mem>
 8005928:	4604      	mov	r4, r0
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f7ff ff64 	bl	80057f8 <mem_to_ptr>
 8005930:	4603      	mov	r3, r0
 8005932:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}
 800593c:	200058d0 	.word	0x200058d0
 8005940:	080110a0 	.word	0x080110a0
 8005944:	080110d0 	.word	0x080110d0
 8005948:	080110e8 	.word	0x080110e8
 800594c:	200058d4 	.word	0x200058d4
 8005950:	08011110 	.word	0x08011110
 8005954:	0801112c 	.word	0x0801112c
 8005958:	08011148 	.word	0x08011148
 800595c:	200058d8 	.word	0x200058d8

08005960 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005966:	4b18      	ldr	r3, [pc, #96]	; (80059c8 <mem_init+0x68>)
 8005968:	3303      	adds	r3, #3
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	461a      	mov	r2, r3
 8005970:	4b16      	ldr	r3, [pc, #88]	; (80059cc <mem_init+0x6c>)
 8005972:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005974:	4b15      	ldr	r3, [pc, #84]	; (80059cc <mem_init+0x6c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005980:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800598e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005992:	f7ff ff1f 	bl	80057d4 <ptr_to_mem>
 8005996:	4603      	mov	r3, r0
 8005998:	4a0d      	ldr	r2, [pc, #52]	; (80059d0 <mem_init+0x70>)
 800599a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <mem_init+0x70>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <mem_init+0x70>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80059ac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80059ae:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <mem_init+0x70>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80059b6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <mem_init+0x6c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <mem_init+0x74>)
 80059be:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000527c 	.word	0x2000527c
 80059cc:	200058d0 	.word	0x200058d0
 80059d0:	200058d4 	.word	0x200058d4
 80059d4:	200058d8 	.word	0x200058d8

080059d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff09 	bl	80057f8 <mem_to_ptr>
 80059e6:	4603      	mov	r3, r0
 80059e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7ff fef0 	bl	80057d4 <ptr_to_mem>
 80059f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	885b      	ldrh	r3, [r3, #2]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff feea 	bl	80057d4 <ptr_to_mem>
 8005a00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a0a:	d818      	bhi.n	8005a3e <mem_link_valid+0x66>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	885b      	ldrh	r3, [r3, #2]
 8005a10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a14:	d813      	bhi.n	8005a3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005a1a:	8afa      	ldrh	r2, [r7, #22]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d004      	beq.n	8005a2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	8afa      	ldrh	r2, [r7, #22]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d109      	bne.n	8005a3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <mem_link_valid+0x74>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d006      	beq.n	8005a42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	885b      	ldrh	r3, [r3, #2]
 8005a38:	8afa      	ldrh	r2, [r7, #22]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d001      	beq.n	8005a42 <mem_link_valid+0x6a>
    return 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <mem_link_valid+0x6c>
  }
  return 1;
 8005a42:	2301      	movs	r3, #1
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200058d4 	.word	0x200058d4

08005a50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d04c      	beq.n	8005af8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <mem_free+0xb0>)
 8005a6a:	f240 2273 	movw	r2, #627	; 0x273
 8005a6e:	4925      	ldr	r1, [pc, #148]	; (8005b04 <mem_free+0xb4>)
 8005a70:	4825      	ldr	r0, [pc, #148]	; (8005b08 <mem_free+0xb8>)
 8005a72:	f00a f8cd 	bl	800fc10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a76:	e040      	b.n	8005afa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3b08      	subs	r3, #8
 8005a7c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <mem_free+0xbc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d306      	bcc.n	8005a96 <mem_free+0x46>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f103 020c 	add.w	r2, r3, #12
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <mem_free+0xc0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d907      	bls.n	8005aa6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <mem_free+0xb0>)
 8005a98:	f240 227f 	movw	r2, #639	; 0x27f
 8005a9c:	491d      	ldr	r1, [pc, #116]	; (8005b14 <mem_free+0xc4>)
 8005a9e:	481a      	ldr	r0, [pc, #104]	; (8005b08 <mem_free+0xb8>)
 8005aa0:	f00a f8b6 	bl	800fc10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005aa4:	e029      	b.n	8005afa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <mem_free+0xb0>)
 8005ab0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005ab4:	4918      	ldr	r1, [pc, #96]	; (8005b18 <mem_free+0xc8>)
 8005ab6:	4814      	ldr	r0, [pc, #80]	; (8005b08 <mem_free+0xb8>)
 8005ab8:	f00a f8aa 	bl	800fc10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005abc:	e01d      	b.n	8005afa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff ff8a 	bl	80059d8 <mem_link_valid>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <mem_free+0xb0>)
 8005acc:	f240 2295 	movw	r2, #661	; 0x295
 8005ad0:	4912      	ldr	r1, [pc, #72]	; (8005b1c <mem_free+0xcc>)
 8005ad2:	480d      	ldr	r0, [pc, #52]	; (8005b08 <mem_free+0xb8>)
 8005ad4:	f00a f89c 	bl	800fc10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ad8:	e00f      	b.n	8005afa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <mem_free+0xd0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d202      	bcs.n	8005af0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <mem_free+0xd0>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fe93 	bl	800581c <plug_holes>
 8005af6:	e000      	b.n	8005afa <mem_free+0xaa>
    return;
 8005af8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	080110a0 	.word	0x080110a0
 8005b04:	08011174 	.word	0x08011174
 8005b08:	080110e8 	.word	0x080110e8
 8005b0c:	200058d0 	.word	0x200058d0
 8005b10:	200058d4 	.word	0x200058d4
 8005b14:	08011198 	.word	0x08011198
 8005b18:	080111b4 	.word	0x080111b4
 8005b1c:	080111dc 	.word	0x080111dc
 8005b20:	200058d8 	.word	0x200058d8

08005b24 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	3303      	adds	r3, #3
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	2b0b      	cmp	r3, #11
 8005b40:	d801      	bhi.n	8005b46 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005b42:	230c      	movs	r3, #12
 8005b44:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005b46:	8bfb      	ldrh	r3, [r7, #30]
 8005b48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b4c:	d803      	bhi.n	8005b56 <mem_trim+0x32>
 8005b4e:	8bfa      	ldrh	r2, [r7, #30]
 8005b50:	887b      	ldrh	r3, [r7, #2]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d201      	bcs.n	8005b5a <mem_trim+0x36>
    return NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e0cc      	b.n	8005cf4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005b5a:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <mem_trim+0x1d8>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d304      	bcc.n	8005b6e <mem_trim+0x4a>
 8005b64:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <mem_trim+0x1dc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d306      	bcc.n	8005b7c <mem_trim+0x58>
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <mem_trim+0x1e0>)
 8005b70:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005b74:	4964      	ldr	r1, [pc, #400]	; (8005d08 <mem_trim+0x1e4>)
 8005b76:	4865      	ldr	r0, [pc, #404]	; (8005d0c <mem_trim+0x1e8>)
 8005b78:	f00a f84a 	bl	800fc10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005b7c:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <mem_trim+0x1d8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d304      	bcc.n	8005b90 <mem_trim+0x6c>
 8005b86:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <mem_trim+0x1dc>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d301      	bcc.n	8005b94 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	e0af      	b.n	8005cf4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3b08      	subs	r3, #8
 8005b98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f7ff fe2c 	bl	80057f8 <mem_to_ptr>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	8afb      	ldrh	r3, [r7, #22]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b08      	subs	r3, #8
 8005bb0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005bb2:	8bfa      	ldrh	r2, [r7, #30]
 8005bb4:	8abb      	ldrh	r3, [r7, #20]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d906      	bls.n	8005bc8 <mem_trim+0xa4>
 8005bba:	4b52      	ldr	r3, [pc, #328]	; (8005d04 <mem_trim+0x1e0>)
 8005bbc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005bc0:	4953      	ldr	r1, [pc, #332]	; (8005d10 <mem_trim+0x1ec>)
 8005bc2:	4852      	ldr	r0, [pc, #328]	; (8005d0c <mem_trim+0x1e8>)
 8005bc4:	f00a f824 	bl	800fc10 <iprintf>
  if (newsize > size) {
 8005bc8:	8bfa      	ldrh	r2, [r7, #30]
 8005bca:	8abb      	ldrh	r3, [r7, #20]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d901      	bls.n	8005bd4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e08f      	b.n	8005cf4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005bd4:	8bfa      	ldrh	r2, [r7, #30]
 8005bd6:	8abb      	ldrh	r3, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d101      	bne.n	8005be0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	e089      	b.n	8005cf4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fdf5 	bl	80057d4 <ptr_to_mem>
 8005bea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	791b      	ldrb	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d13f      	bne.n	8005c74 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bfc:	d106      	bne.n	8005c0c <mem_trim+0xe8>
 8005bfe:	4b41      	ldr	r3, [pc, #260]	; (8005d04 <mem_trim+0x1e0>)
 8005c00:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005c04:	4943      	ldr	r1, [pc, #268]	; (8005d14 <mem_trim+0x1f0>)
 8005c06:	4841      	ldr	r0, [pc, #260]	; (8005d0c <mem_trim+0x1e8>)
 8005c08:	f00a f802 	bl	800fc10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c12:	8afa      	ldrh	r2, [r7, #22]
 8005c14:	8bfb      	ldrh	r3, [r7, #30]
 8005c16:	4413      	add	r3, r2
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005c1e:	4b3e      	ldr	r3, [pc, #248]	; (8005d18 <mem_trim+0x1f4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d106      	bne.n	8005c36 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fdd2 	bl	80057d4 <ptr_to_mem>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <mem_trim+0x1f4>)
 8005c34:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fdcb 	bl	80057d4 <ptr_to_mem>
 8005c3e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2200      	movs	r2, #0
 8005c44:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	89ba      	ldrh	r2, [r7, #12]
 8005c4a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	8afa      	ldrh	r2, [r7, #22]
 8005c50:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	89fa      	ldrh	r2, [r7, #14]
 8005c56:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c60:	d047      	beq.n	8005cf2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fdb4 	bl	80057d4 <ptr_to_mem>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	89fb      	ldrh	r3, [r7, #14]
 8005c70:	8053      	strh	r3, [r2, #2]
 8005c72:	e03e      	b.n	8005cf2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c74:	8bfb      	ldrh	r3, [r7, #30]
 8005c76:	f103 0214 	add.w	r2, r3, #20
 8005c7a:	8abb      	ldrh	r3, [r7, #20]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d838      	bhi.n	8005cf2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005c80:	8afa      	ldrh	r2, [r7, #22]
 8005c82:	8bfb      	ldrh	r3, [r7, #30]
 8005c84:	4413      	add	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3308      	adds	r3, #8
 8005c8a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c94:	d106      	bne.n	8005ca4 <mem_trim+0x180>
 8005c96:	4b1b      	ldr	r3, [pc, #108]	; (8005d04 <mem_trim+0x1e0>)
 8005c98:	f240 3216 	movw	r2, #790	; 0x316
 8005c9c:	491d      	ldr	r1, [pc, #116]	; (8005d14 <mem_trim+0x1f0>)
 8005c9e:	481b      	ldr	r0, [pc, #108]	; (8005d0c <mem_trim+0x1e8>)
 8005ca0:	f009 ffb6 	bl	800fc10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fd94 	bl	80057d4 <ptr_to_mem>
 8005cac:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <mem_trim+0x1f4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d202      	bcs.n	8005cbe <mem_trim+0x19a>
      lfree = mem2;
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <mem_trim+0x1f4>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	89fa      	ldrh	r2, [r7, #14]
 8005cd6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ce0:	d007      	beq.n	8005cf2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fd74 	bl	80057d4 <ptr_to_mem>
 8005cec:	4602      	mov	r2, r0
 8005cee:	89fb      	ldrh	r3, [r7, #14]
 8005cf0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005cf2:	687b      	ldr	r3, [r7, #4]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200058d0 	.word	0x200058d0
 8005d00:	200058d4 	.word	0x200058d4
 8005d04:	080110a0 	.word	0x080110a0
 8005d08:	08011210 	.word	0x08011210
 8005d0c:	080110e8 	.word	0x080110e8
 8005d10:	08011228 	.word	0x08011228
 8005d14:	08011248 	.word	0x08011248
 8005d18:	200058d8 	.word	0x200058d8

08005d1c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <mem_malloc+0x14>
    return NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e0d9      	b.n	8005ee4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	3303      	adds	r3, #3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005d3c:	8bbb      	ldrh	r3, [r7, #28]
 8005d3e:	2b0b      	cmp	r3, #11
 8005d40:	d801      	bhi.n	8005d46 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005d42:	230c      	movs	r3, #12
 8005d44:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005d46:	8bbb      	ldrh	r3, [r7, #28]
 8005d48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d4c:	d803      	bhi.n	8005d56 <mem_malloc+0x3a>
 8005d4e:	8bba      	ldrh	r2, [r7, #28]
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d201      	bcs.n	8005d5a <mem_malloc+0x3e>
    return NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e0c4      	b.n	8005ee4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d5a:	4b64      	ldr	r3, [pc, #400]	; (8005eec <mem_malloc+0x1d0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fd4a 	bl	80057f8 <mem_to_ptr>
 8005d64:	4603      	mov	r3, r0
 8005d66:	83fb      	strh	r3, [r7, #30]
 8005d68:	e0b4      	b.n	8005ed4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005d6a:	8bfb      	ldrh	r3, [r7, #30]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fd31 	bl	80057d4 <ptr_to_mem>
 8005d72:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 80a4 	bne.w	8005ec6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	8bfb      	ldrh	r3, [r7, #30]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f1a3 0208 	sub.w	r2, r3, #8
 8005d8c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	f0c0 8099 	bcc.w	8005ec6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	8bfb      	ldrh	r3, [r7, #30]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f1a3 0208 	sub.w	r2, r3, #8
 8005da2:	8bbb      	ldrh	r3, [r7, #28]
 8005da4:	3314      	adds	r3, #20
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d333      	bcc.n	8005e12 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005daa:	8bfa      	ldrh	r2, [r7, #30]
 8005dac:	8bbb      	ldrh	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3308      	adds	r3, #8
 8005db4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005db6:	8a7b      	ldrh	r3, [r7, #18]
 8005db8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dbc:	d106      	bne.n	8005dcc <mem_malloc+0xb0>
 8005dbe:	4b4c      	ldr	r3, [pc, #304]	; (8005ef0 <mem_malloc+0x1d4>)
 8005dc0:	f240 3287 	movw	r2, #903	; 0x387
 8005dc4:	494b      	ldr	r1, [pc, #300]	; (8005ef4 <mem_malloc+0x1d8>)
 8005dc6:	484c      	ldr	r0, [pc, #304]	; (8005ef8 <mem_malloc+0x1dc>)
 8005dc8:	f009 ff22 	bl	800fc10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005dcc:	8a7b      	ldrh	r3, [r7, #18]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fd00 	bl	80057d4 <ptr_to_mem>
 8005dd4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8bfa      	ldrh	r2, [r7, #30]
 8005de8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	8a7a      	ldrh	r2, [r7, #18]
 8005dee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2201      	movs	r2, #1
 8005df4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dfe:	d00b      	beq.n	8005e18 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fce5 	bl	80057d4 <ptr_to_mem>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	8a7b      	ldrh	r3, [r7, #18]
 8005e0e:	8053      	strh	r3, [r2, #2]
 8005e10:	e002      	b.n	8005e18 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2201      	movs	r2, #1
 8005e16:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005e18:	4b34      	ldr	r3, [pc, #208]	; (8005eec <mem_malloc+0x1d0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d127      	bne.n	8005e72 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005e22:	4b32      	ldr	r3, [pc, #200]	; (8005eec <mem_malloc+0x1d0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005e28:	e005      	b.n	8005e36 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fcd0 	bl	80057d4 <ptr_to_mem>
 8005e34:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <mem_malloc+0x12c>
 8005e3e:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <mem_malloc+0x1e0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1f0      	bne.n	8005e2a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <mem_malloc+0x1d0>)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <mem_malloc+0x1d0>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <mem_malloc+0x1e0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d00b      	beq.n	8005e72 <mem_malloc+0x156>
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <mem_malloc+0x1d0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	791b      	ldrb	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <mem_malloc+0x156>
 8005e64:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <mem_malloc+0x1d4>)
 8005e66:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005e6a:	4925      	ldr	r1, [pc, #148]	; (8005f00 <mem_malloc+0x1e4>)
 8005e6c:	4822      	ldr	r0, [pc, #136]	; (8005ef8 <mem_malloc+0x1dc>)
 8005e6e:	f009 fecf 	bl	800fc10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005e72:	8bba      	ldrh	r2, [r7, #28]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	3308      	adds	r3, #8
 8005e7a:	4a20      	ldr	r2, [pc, #128]	; (8005efc <mem_malloc+0x1e0>)
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d906      	bls.n	8005e90 <mem_malloc+0x174>
 8005e82:	4b1b      	ldr	r3, [pc, #108]	; (8005ef0 <mem_malloc+0x1d4>)
 8005e84:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005e88:	491e      	ldr	r1, [pc, #120]	; (8005f04 <mem_malloc+0x1e8>)
 8005e8a:	481b      	ldr	r0, [pc, #108]	; (8005ef8 <mem_malloc+0x1dc>)
 8005e8c:	f009 fec0 	bl	800fc10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d006      	beq.n	8005ea8 <mem_malloc+0x18c>
 8005e9a:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <mem_malloc+0x1d4>)
 8005e9c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005ea0:	4919      	ldr	r1, [pc, #100]	; (8005f08 <mem_malloc+0x1ec>)
 8005ea2:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <mem_malloc+0x1dc>)
 8005ea4:	f009 feb4 	bl	800fc10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <mem_malloc+0x1a4>
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <mem_malloc+0x1d4>)
 8005eb4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005eb8:	4914      	ldr	r1, [pc, #80]	; (8005f0c <mem_malloc+0x1f0>)
 8005eba:	480f      	ldr	r0, [pc, #60]	; (8005ef8 <mem_malloc+0x1dc>)
 8005ebc:	f009 fea8 	bl	800fc10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	e00e      	b.n	8005ee4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005ec6:	8bfb      	ldrh	r3, [r7, #30]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fc83 	bl	80057d4 <ptr_to_mem>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ed4:	8bfa      	ldrh	r2, [r7, #30]
 8005ed6:	8bbb      	ldrh	r3, [r7, #28]
 8005ed8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005edc:	429a      	cmp	r2, r3
 8005ede:	f4ff af44 	bcc.w	8005d6a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200058d8 	.word	0x200058d8
 8005ef0:	080110a0 	.word	0x080110a0
 8005ef4:	08011248 	.word	0x08011248
 8005ef8:	080110e8 	.word	0x080110e8
 8005efc:	200058d4 	.word	0x200058d4
 8005f00:	0801125c 	.word	0x0801125c
 8005f04:	08011278 	.word	0x08011278
 8005f08:	080112a8 	.word	0x080112a8
 8005f0c:	080112d8 	.word	0x080112d8

08005f10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	3303      	adds	r3, #3
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e011      	b.n	8005f56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	885b      	ldrh	r3, [r3, #2]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	dbe7      	blt.n	8005f32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f76:	2300      	movs	r3, #0
 8005f78:	80fb      	strh	r3, [r7, #6]
 8005f7a:	e009      	b.n	8005f90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	4a08      	ldr	r2, [pc, #32]	; (8005fa0 <memp_init+0x30>)
 8005f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff ffc3 	bl	8005f10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	80fb      	strh	r3, [r7, #6]
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d9f2      	bls.n	8005f7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	08013abc 	.word	0x08013abc

08005fa4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d012      	beq.n	8005fe0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d006      	beq.n	8005fdc <do_memp_malloc_pool+0x38>
 8005fce:	4b07      	ldr	r3, [pc, #28]	; (8005fec <do_memp_malloc_pool+0x48>)
 8005fd0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005fd4:	4906      	ldr	r1, [pc, #24]	; (8005ff0 <do_memp_malloc_pool+0x4c>)
 8005fd6:	4807      	ldr	r0, [pc, #28]	; (8005ff4 <do_memp_malloc_pool+0x50>)
 8005fd8:	f009 fe1a 	bl	800fc10 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e000      	b.n	8005fe2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	080112fc 	.word	0x080112fc
 8005ff0:	0801132c 	.word	0x0801132c
 8005ff4:	08011350 	.word	0x08011350

08005ff8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <memp_malloc_pool+0x1c>
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <memp_malloc_pool+0x38>)
 8006008:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800600c:	4909      	ldr	r1, [pc, #36]	; (8006034 <memp_malloc_pool+0x3c>)
 800600e:	480a      	ldr	r0, [pc, #40]	; (8006038 <memp_malloc_pool+0x40>)
 8006010:	f009 fdfe 	bl	800fc10 <iprintf>
  if (desc == NULL) {
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <memp_malloc_pool+0x26>
    return NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	e003      	b.n	8006026 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ffc0 	bl	8005fa4 <do_memp_malloc_pool>
 8006024:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	080112fc 	.word	0x080112fc
 8006034:	08011378 	.word	0x08011378
 8006038:	08011350 	.word	0x08011350

0800603c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006046:	79fb      	ldrb	r3, [r7, #7]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d908      	bls.n	800605e <memp_malloc+0x22>
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <memp_malloc+0x3c>)
 800604e:	f240 1257 	movw	r2, #343	; 0x157
 8006052:	490a      	ldr	r1, [pc, #40]	; (800607c <memp_malloc+0x40>)
 8006054:	480a      	ldr	r0, [pc, #40]	; (8006080 <memp_malloc+0x44>)
 8006056:	f009 fddb 	bl	800fc10 <iprintf>
 800605a:	2300      	movs	r3, #0
 800605c:	e008      	b.n	8006070 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	4a08      	ldr	r2, [pc, #32]	; (8006084 <memp_malloc+0x48>)
 8006062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff9c 	bl	8005fa4 <do_memp_malloc_pool>
 800606c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	080112fc 	.word	0x080112fc
 800607c:	0801138c 	.word	0x0801138c
 8006080:	08011350 	.word	0x08011350
 8006084:	08013abc 	.word	0x08013abc

08006088 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	f003 0303 	and.w	r3, r3, #3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <do_memp_free_pool+0x22>
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <do_memp_free_pool+0x40>)
 800609e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80060a2:	490a      	ldr	r1, [pc, #40]	; (80060cc <do_memp_free_pool+0x44>)
 80060a4:	480a      	ldr	r0, [pc, #40]	; (80060d0 <do_memp_free_pool+0x48>)
 80060a6:	f009 fdb3 	bl	800fc10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	080112fc 	.word	0x080112fc
 80060cc:	080113ac 	.word	0x080113ac
 80060d0:	08011350 	.word	0x08011350

080060d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <memp_free_pool+0x1e>
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <memp_free_pool+0x3c>)
 80060e6:	f240 1295 	movw	r2, #405	; 0x195
 80060ea:	490a      	ldr	r1, [pc, #40]	; (8006114 <memp_free_pool+0x40>)
 80060ec:	480a      	ldr	r0, [pc, #40]	; (8006118 <memp_free_pool+0x44>)
 80060ee:	f009 fd8f 	bl	800fc10 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <memp_free_pool+0x34>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ffc1 	bl	8006088 <do_memp_free_pool>
 8006106:	e000      	b.n	800610a <memp_free_pool+0x36>
    return;
 8006108:	bf00      	nop
}
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	080112fc 	.word	0x080112fc
 8006114:	08011378 	.word	0x08011378
 8006118:	08011350 	.word	0x08011350

0800611c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b08      	cmp	r3, #8
 800612c:	d907      	bls.n	800613e <memp_free+0x22>
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <memp_free+0x44>)
 8006130:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006134:	490b      	ldr	r1, [pc, #44]	; (8006164 <memp_free+0x48>)
 8006136:	480c      	ldr	r0, [pc, #48]	; (8006168 <memp_free+0x4c>)
 8006138:	f009 fd6a 	bl	800fc10 <iprintf>
 800613c:	e00c      	b.n	8006158 <memp_free+0x3c>

  if (mem == NULL) {
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	4a09      	ldr	r2, [pc, #36]	; (800616c <memp_free+0x50>)
 8006148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff ff9a 	bl	8006088 <do_memp_free_pool>
 8006154:	e000      	b.n	8006158 <memp_free+0x3c>
    return;
 8006156:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	080112fc 	.word	0x080112fc
 8006164:	080113cc 	.word	0x080113cc
 8006168:	08011350 	.word	0x08011350
 800616c:	08013abc 	.word	0x08013abc

08006170 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <netif_add+0x26>
 8006194:	4b57      	ldr	r3, [pc, #348]	; (80062f4 <netif_add+0x174>)
 8006196:	f240 1227 	movw	r2, #295	; 0x127
 800619a:	4957      	ldr	r1, [pc, #348]	; (80062f8 <netif_add+0x178>)
 800619c:	4857      	ldr	r0, [pc, #348]	; (80062fc <netif_add+0x17c>)
 800619e:	f009 fd37 	bl	800fc10 <iprintf>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e0a2      	b.n	80062ec <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d108      	bne.n	80061be <netif_add+0x3e>
 80061ac:	4b51      	ldr	r3, [pc, #324]	; (80062f4 <netif_add+0x174>)
 80061ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80061b2:	4953      	ldr	r1, [pc, #332]	; (8006300 <netif_add+0x180>)
 80061b4:	4851      	ldr	r0, [pc, #324]	; (80062fc <netif_add+0x17c>)
 80061b6:	f009 fd2b 	bl	800fc10 <iprintf>
 80061ba:	2300      	movs	r3, #0
 80061bc:	e096      	b.n	80062ec <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80061c4:	4b4f      	ldr	r3, [pc, #316]	; (8006304 <netif_add+0x184>)
 80061c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80061ce:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <netif_add+0x184>)
 80061d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80061d8:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <netif_add+0x184>)
 80061da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a45      	ldr	r2, [pc, #276]	; (8006308 <netif_add+0x188>)
 80061f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800620e:	4b3f      	ldr	r3, [pc, #252]	; (800630c <netif_add+0x18c>)
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f913 	bl	8006450 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	4798      	blx	r3
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <netif_add+0xba>
    return NULL;
 8006236:	2300      	movs	r3, #0
 8006238:	e058      	b.n	80062ec <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006240:	2bff      	cmp	r3, #255	; 0xff
 8006242:	d103      	bne.n	800624c <netif_add+0xcc>
        netif->num = 0;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006250:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <netif_add+0x190>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e02b      	b.n	80062b0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d106      	bne.n	800626e <netif_add+0xee>
 8006260:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <netif_add+0x174>)
 8006262:	f240 128b 	movw	r2, #395	; 0x18b
 8006266:	492b      	ldr	r1, [pc, #172]	; (8006314 <netif_add+0x194>)
 8006268:	4824      	ldr	r0, [pc, #144]	; (80062fc <netif_add+0x17c>)
 800626a:	f009 fcd1 	bl	800fc10 <iprintf>
        num_netifs++;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	3301      	adds	r3, #1
 8006272:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2bff      	cmp	r3, #255	; 0xff
 8006278:	dd06      	ble.n	8006288 <netif_add+0x108>
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <netif_add+0x174>)
 800627c:	f240 128d 	movw	r2, #397	; 0x18d
 8006280:	4925      	ldr	r1, [pc, #148]	; (8006318 <netif_add+0x198>)
 8006282:	481e      	ldr	r0, [pc, #120]	; (80062fc <netif_add+0x17c>)
 8006284:	f009 fcc4 	bl	800fc10 <iprintf>
        if (netif2->num == netif->num) {
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006294:	429a      	cmp	r2, r3
 8006296:	d108      	bne.n	80062aa <netif_add+0x12a>
          netif->num++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800629e:	3301      	adds	r3, #1
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80062a8:	e005      	b.n	80062b6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1d0      	bne.n	8006258 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1be      	bne.n	800623a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062c2:	2bfe      	cmp	r3, #254	; 0xfe
 80062c4:	d103      	bne.n	80062ce <netif_add+0x14e>
    netif_num = 0;
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <netif_add+0x18c>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e006      	b.n	80062dc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062d4:	3301      	adds	r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <netif_add+0x18c>)
 80062da:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80062dc:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <netif_add+0x190>)
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <netif_add+0x190>)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80062ea:	68fb      	ldr	r3, [r7, #12]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	080113e8 	.word	0x080113e8
 80062f8:	0801147c 	.word	0x0801147c
 80062fc:	08011438 	.word	0x08011438
 8006300:	08011498 	.word	0x08011498
 8006304:	08013b20 	.word	0x08013b20
 8006308:	0800672b 	.word	0x0800672b
 800630c:	200087d0 	.word	0x200087d0
 8006310:	200087c8 	.word	0x200087c8
 8006314:	080114bc 	.word	0x080114bc
 8006318:	080114d0 	.word	0x080114d0

0800631c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 fbe5 	bl	8008af8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f007 f883 	bl	800d43c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <netif_do_set_ipaddr+0x20>
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <netif_do_set_ipaddr+0x88>)
 8006354:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006358:	491c      	ldr	r1, [pc, #112]	; (80063cc <netif_do_set_ipaddr+0x8c>)
 800635a:	481d      	ldr	r0, [pc, #116]	; (80063d0 <netif_do_set_ipaddr+0x90>)
 800635c:	f009 fc58 	bl	800fc10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <netif_do_set_ipaddr+0x34>
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <netif_do_set_ipaddr+0x88>)
 8006368:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800636c:	4917      	ldr	r1, [pc, #92]	; (80063cc <netif_do_set_ipaddr+0x8c>)
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <netif_do_set_ipaddr+0x90>)
 8006370:	f009 fc4e 	bl	800fc10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3304      	adds	r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d01c      	beq.n	80063bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3304      	adds	r3, #4
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006392:	f107 0314 	add.w	r3, r7, #20
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff ffbf 	bl	800631c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <netif_do_set_ipaddr+0x6a>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	e000      	b.n	80063ac <netif_do_set_ipaddr+0x6c>
 80063aa:	2300      	movs	r3, #0
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80063b0:	2101      	movs	r1, #1
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f8d2 	bl	800655c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	080113e8 	.word	0x080113e8
 80063cc:	08011500 	.word	0x08011500
 80063d0:	08011438 	.word	0x08011438

080063d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3308      	adds	r3, #8
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d00a      	beq.n	8006404 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <netif_do_set_netmask+0x26>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	e000      	b.n	80063fc <netif_do_set_netmask+0x28>
 80063fa:	2300      	movs	r3, #0
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	330c      	adds	r3, #12
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d00a      	beq.n	8006442 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <netif_do_set_gw+0x26>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	e000      	b.n	800643a <netif_do_set_gw+0x28>
 8006438:	2300      	movs	r3, #0
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800646c:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <netif_set_addr+0x90>)
 800646e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <netif_set_addr+0x90>)
 8006478:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006480:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <netif_set_addr+0x90>)
 8006482:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <netif_set_addr+0x42>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <netif_set_addr+0x46>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <netif_set_addr+0x48>
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  if (remove) {
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d006      	beq.n	80064ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	461a      	mov	r2, r3
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff ff49 	bl	8006340 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff ff8e 	bl	80063d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ffa8 	bl	8006412 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d106      	bne.n	80064d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	461a      	mov	r2, r3
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff ff35 	bl	8006340 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80064d6:	bf00      	nop
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	08013b20 	.word	0x08013b20

080064e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80064ec:	4a04      	ldr	r2, [pc, #16]	; (8006500 <netif_set_default+0x1c>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	200087cc 	.word	0x200087cc

08006504 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d107      	bne.n	8006522 <netif_set_up+0x1e>
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <netif_set_up+0x4c>)
 8006514:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006518:	490e      	ldr	r1, [pc, #56]	; (8006554 <netif_set_up+0x50>)
 800651a:	480f      	ldr	r0, [pc, #60]	; (8006558 <netif_set_up+0x54>)
 800651c:	f009 fb78 	bl	800fc10 <iprintf>
 8006520:	e013      	b.n	800654a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006542:	2103      	movs	r1, #3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f809 	bl	800655c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	080113e8 	.word	0x080113e8
 8006554:	08011570 	.word	0x08011570
 8006558:	08011438 	.word	0x08011438

0800655c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <netif_issue_reports+0x20>
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <netif_issue_reports+0x74>)
 8006570:	f240 326d 	movw	r2, #877	; 0x36d
 8006574:	4917      	ldr	r1, [pc, #92]	; (80065d4 <netif_issue_reports+0x78>)
 8006576:	4818      	ldr	r0, [pc, #96]	; (80065d8 <netif_issue_reports+0x7c>)
 8006578:	f009 fb4a 	bl	800fc10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01e      	beq.n	80065c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006590:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006594:	2b00      	cmp	r3, #0
 8006596:	d017      	beq.n	80065c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f007 fea5 	bl	800e310 <etharp_request>
 80065c6:	e000      	b.n	80065ca <netif_issue_reports+0x6e>
    return;
 80065c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	080113e8 	.word	0x080113e8
 80065d4:	0801158c 	.word	0x0801158c
 80065d8:	08011438 	.word	0x08011438

080065dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <netif_set_down+0x1e>
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <netif_set_down+0x58>)
 80065ec:	f240 329b 	movw	r2, #923	; 0x39b
 80065f0:	4911      	ldr	r1, [pc, #68]	; (8006638 <netif_set_down+0x5c>)
 80065f2:	4812      	ldr	r0, [pc, #72]	; (800663c <netif_set_down+0x60>)
 80065f4:	f009 fb0c 	bl	800fc10 <iprintf>
 80065f8:	e019      	b.n	800662e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d012      	beq.n	800662e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f007 fa2f 	bl	800da8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	080113e8 	.word	0x080113e8
 8006638:	080115b0 	.word	0x080115b0
 800663c:	08011438 	.word	0x08011438

08006640 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d107      	bne.n	800665e <netif_set_link_up+0x1e>
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <netif_set_link_up+0x5c>)
 8006650:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006654:	4912      	ldr	r1, [pc, #72]	; (80066a0 <netif_set_link_up+0x60>)
 8006656:	4813      	ldr	r0, [pc, #76]	; (80066a4 <netif_set_link_up+0x64>)
 8006658:	f009 fada 	bl	800fc10 <iprintf>
 800665c:	e01b      	b.n	8006696 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d114      	bne.n	8006696 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006672:	f043 0304 	orr.w	r3, r3, #4
 8006676:	b2da      	uxtb	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800667e:	2103      	movs	r1, #3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ff6b 	bl	800655c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <netif_set_link_up+0x56>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	080113e8 	.word	0x080113e8
 80066a0:	080115d0 	.word	0x080115d0
 80066a4:	08011438 	.word	0x08011438

080066a8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d107      	bne.n	80066c6 <netif_set_link_down+0x1e>
 80066b6:	4b11      	ldr	r3, [pc, #68]	; (80066fc <netif_set_link_down+0x54>)
 80066b8:	f240 4206 	movw	r2, #1030	; 0x406
 80066bc:	4910      	ldr	r1, [pc, #64]	; (8006700 <netif_set_link_down+0x58>)
 80066be:	4811      	ldr	r0, [pc, #68]	; (8006704 <netif_set_link_down+0x5c>)
 80066c0:	f009 faa6 	bl	800fc10 <iprintf>
 80066c4:	e017      	b.n	80066f6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066da:	f023 0304 	bic.w	r3, r3, #4
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <netif_set_link_down+0x4e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	080113e8 	.word	0x080113e8
 8006700:	080115f4 	.word	0x080115f4
 8006704:	08011438 	.word	0x08011438

08006708 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	61da      	str	r2, [r3, #28]
  }
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006736:	f06f 030b 	mvn.w	r3, #11
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d013      	beq.n	8006780 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <netif_get_by_index+0x48>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e00c      	b.n	800677a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006766:	3301      	adds	r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	79fa      	ldrb	r2, [r7, #7]
 800676c:	429a      	cmp	r2, r3
 800676e:	d101      	bne.n	8006774 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	e006      	b.n	8006782 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ef      	bne.n	8006760 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	200087c8 	.word	0x200087c8

08006794 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800679a:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <pbuf_free_ooseq+0x38>)
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <pbuf_free_ooseq+0x3c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	607b      	str	r3, [r7, #4]
 80067a6:	e00a      	b.n	80067be <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 f9df 	bl	8008b74 <tcp_free_ooseq>
      return;
 80067b6:	e005      	b.n	80067c4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	607b      	str	r3, [r7, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f1      	bne.n	80067a8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	200087d1 	.word	0x200087d1
 80067d0:	200087e0 	.word	0x200087e0

080067d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <pbuf_pool_is_empty+0x14>)
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80067de:	bf00      	nop
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	200087d1 	.word	0x200087d1

080067ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4611      	mov	r1, r2
 80067f8:	461a      	mov	r2, r3
 80067fa:	460b      	mov	r3, r1
 80067fc:	80fb      	strh	r3, [r7, #6]
 80067fe:	4613      	mov	r3, r2
 8006800:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	88ba      	ldrh	r2, [r7, #4]
 8006818:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800681a:	8b3b      	ldrh	r3, [r7, #24]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	7f3a      	ldrb	r2, [r7, #28]
 8006826:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	73da      	strb	r2, [r3, #15]
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af02      	add	r7, sp, #8
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
 800684a:	460b      	mov	r3, r1
 800684c:	80bb      	strh	r3, [r7, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800685c:	d07f      	beq.n	800695e <pbuf_alloc+0x11e>
 800685e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006862:	f300 80c8 	bgt.w	80069f6 <pbuf_alloc+0x1b6>
 8006866:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800686a:	d010      	beq.n	800688e <pbuf_alloc+0x4e>
 800686c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006870:	f300 80c1 	bgt.w	80069f6 <pbuf_alloc+0x1b6>
 8006874:	2b01      	cmp	r3, #1
 8006876:	d002      	beq.n	800687e <pbuf_alloc+0x3e>
 8006878:	2b41      	cmp	r3, #65	; 0x41
 800687a:	f040 80bc 	bne.w	80069f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800687e:	887a      	ldrh	r2, [r7, #2]
 8006880:	88bb      	ldrh	r3, [r7, #4]
 8006882:	4619      	mov	r1, r3
 8006884:	2000      	movs	r0, #0
 8006886:	f000 f8d1 	bl	8006a2c <pbuf_alloc_reference>
 800688a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800688c:	e0bd      	b.n	8006a0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006896:	88bb      	ldrh	r3, [r7, #4]
 8006898:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800689a:	2008      	movs	r0, #8
 800689c:	f7ff fbce 	bl	800603c <memp_malloc>
 80068a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80068a8:	f7ff ff94 	bl	80067d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80068b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068b4:	f000 faa8 	bl	8006e08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e0a7      	b.n	8006a0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80068bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068be:	3303      	adds	r3, #3
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	8b7a      	ldrh	r2, [r7, #26]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bf28      	it	cs
 80068d4:	4613      	movcs	r3, r2
 80068d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80068d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068da:	3310      	adds	r3, #16
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4413      	add	r3, r2
 80068e0:	3303      	adds	r3, #3
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	4618      	mov	r0, r3
 80068e8:	89f9      	ldrh	r1, [r7, #14]
 80068ea:	8b7a      	ldrh	r2, [r7, #26]
 80068ec:	2300      	movs	r3, #0
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	887b      	ldrh	r3, [r7, #2]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	460b      	mov	r3, r1
 80068f6:	4601      	mov	r1, r0
 80068f8:	6938      	ldr	r0, [r7, #16]
 80068fa:	f7ff ff77 	bl	80067ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <pbuf_alloc+0xd8>
 800690a:	4b42      	ldr	r3, [pc, #264]	; (8006a14 <pbuf_alloc+0x1d4>)
 800690c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006910:	4941      	ldr	r1, [pc, #260]	; (8006a18 <pbuf_alloc+0x1d8>)
 8006912:	4842      	ldr	r0, [pc, #264]	; (8006a1c <pbuf_alloc+0x1dc>)
 8006914:	f009 f97c 	bl	800fc10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800691a:	3303      	adds	r3, #3
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006924:	d106      	bne.n	8006934 <pbuf_alloc+0xf4>
 8006926:	4b3b      	ldr	r3, [pc, #236]	; (8006a14 <pbuf_alloc+0x1d4>)
 8006928:	f44f 7281 	mov.w	r2, #258	; 0x102
 800692c:	493c      	ldr	r1, [pc, #240]	; (8006a20 <pbuf_alloc+0x1e0>)
 800692e:	483b      	ldr	r0, [pc, #236]	; (8006a1c <pbuf_alloc+0x1dc>)
 8006930:	f009 f96e 	bl	800fc10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	e002      	b.n	8006946 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800694a:	8b7a      	ldrh	r2, [r7, #26]
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006956:	8b7b      	ldrh	r3, [r7, #26]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d19e      	bne.n	800689a <pbuf_alloc+0x5a>
      break;
 800695c:	e055      	b.n	8006a0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800695e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006960:	3303      	adds	r3, #3
 8006962:	b29b      	uxth	r3, r3
 8006964:	f023 0303 	bic.w	r3, r3, #3
 8006968:	b29a      	uxth	r2, r3
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	3303      	adds	r3, #3
 800696e:	b29b      	uxth	r3, r3
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	b29b      	uxth	r3, r3
 8006976:	4413      	add	r3, r2
 8006978:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800697a:	8b3b      	ldrh	r3, [r7, #24]
 800697c:	3310      	adds	r3, #16
 800697e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006980:	8b3a      	ldrh	r2, [r7, #24]
 8006982:	88bb      	ldrh	r3, [r7, #4]
 8006984:	3303      	adds	r3, #3
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	429a      	cmp	r2, r3
 800698c:	d306      	bcc.n	800699c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800698e:	8afa      	ldrh	r2, [r7, #22]
 8006990:	88bb      	ldrh	r3, [r7, #4]
 8006992:	3303      	adds	r3, #3
 8006994:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d201      	bcs.n	80069a0 <pbuf_alloc+0x160>
        return NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	e035      	b.n	8006a0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff f9ba 	bl	8005d1c <mem_malloc>
 80069a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <pbuf_alloc+0x174>
        return NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	e02b      	b.n	8006a0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80069b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069b6:	3310      	adds	r3, #16
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	4413      	add	r3, r2
 80069bc:	3303      	adds	r3, #3
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	4618      	mov	r0, r3
 80069c4:	88b9      	ldrh	r1, [r7, #4]
 80069c6:	88ba      	ldrh	r2, [r7, #4]
 80069c8:	2300      	movs	r3, #0
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	460b      	mov	r3, r1
 80069d2:	4601      	mov	r1, r0
 80069d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069d6:	f7ff ff09 	bl	80067ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d010      	beq.n	8006a08 <pbuf_alloc+0x1c8>
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <pbuf_alloc+0x1d4>)
 80069e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80069ec:	490d      	ldr	r1, [pc, #52]	; (8006a24 <pbuf_alloc+0x1e4>)
 80069ee:	480b      	ldr	r0, [pc, #44]	; (8006a1c <pbuf_alloc+0x1dc>)
 80069f0:	f009 f90e 	bl	800fc10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80069f4:	e008      	b.n	8006a08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <pbuf_alloc+0x1d4>)
 80069f8:	f240 1227 	movw	r2, #295	; 0x127
 80069fc:	490a      	ldr	r1, [pc, #40]	; (8006a28 <pbuf_alloc+0x1e8>)
 80069fe:	4807      	ldr	r0, [pc, #28]	; (8006a1c <pbuf_alloc+0x1dc>)
 8006a00:	f009 f906 	bl	800fc10 <iprintf>
      return NULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e001      	b.n	8006a0c <pbuf_alloc+0x1cc>
      break;
 8006a08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3728      	adds	r7, #40	; 0x28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	08011618 	.word	0x08011618
 8006a18:	08011648 	.word	0x08011648
 8006a1c:	08011678 	.word	0x08011678
 8006a20:	080116a0 	.word	0x080116a0
 8006a24:	080116d4 	.word	0x080116d4
 8006a28:	08011700 	.word	0x08011700

08006a2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	807b      	strh	r3, [r7, #2]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006a3c:	883b      	ldrh	r3, [r7, #0]
 8006a3e:	2b41      	cmp	r3, #65	; 0x41
 8006a40:	d009      	beq.n	8006a56 <pbuf_alloc_reference+0x2a>
 8006a42:	883b      	ldrh	r3, [r7, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d006      	beq.n	8006a56 <pbuf_alloc_reference+0x2a>
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <pbuf_alloc_reference+0x5c>)
 8006a4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006a4e:	490f      	ldr	r1, [pc, #60]	; (8006a8c <pbuf_alloc_reference+0x60>)
 8006a50:	480f      	ldr	r0, [pc, #60]	; (8006a90 <pbuf_alloc_reference+0x64>)
 8006a52:	f009 f8dd 	bl	800fc10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a56:	2007      	movs	r0, #7
 8006a58:	f7ff faf0 	bl	800603c <memp_malloc>
 8006a5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e00b      	b.n	8006a80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006a68:	8879      	ldrh	r1, [r7, #2]
 8006a6a:	887a      	ldrh	r2, [r7, #2]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	883b      	ldrh	r3, [r7, #0]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	460b      	mov	r3, r1
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff feb7 	bl	80067ec <pbuf_init_alloced_pbuf>
  return p;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	08011618 	.word	0x08011618
 8006a8c:	0801171c 	.word	0x0801171c
 8006a90:	08011678 	.word	0x08011678

08006a94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	81bb      	strh	r3, [r7, #12]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006aac:	8a7b      	ldrh	r3, [r7, #18]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	f023 0203 	bic.w	r2, r3, #3
 8006ab4:	89bb      	ldrh	r3, [r7, #12]
 8006ab6:	441a      	add	r2, r3
 8006ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d901      	bls.n	8006ac2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e018      	b.n	8006af4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006ac8:	8a7b      	ldrh	r3, [r7, #18]
 8006aca:	3303      	adds	r3, #3
 8006acc:	f023 0303 	bic.w	r3, r3, #3
 8006ad0:	6a3a      	ldr	r2, [r7, #32]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e001      	b.n	8006adc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	89b9      	ldrh	r1, [r7, #12]
 8006ae0:	89ba      	ldrh	r2, [r7, #12]
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	897b      	ldrh	r3, [r7, #10]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	460b      	mov	r3, r1
 8006aec:	6979      	ldr	r1, [r7, #20]
 8006aee:	f7ff fe7d 	bl	80067ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006af2:	687b      	ldr	r3, [r7, #4]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <pbuf_realloc+0x20>
 8006b0e:	4b3a      	ldr	r3, [pc, #232]	; (8006bf8 <pbuf_realloc+0xfc>)
 8006b10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006b14:	4939      	ldr	r1, [pc, #228]	; (8006bfc <pbuf_realloc+0x100>)
 8006b16:	483a      	ldr	r0, [pc, #232]	; (8006c00 <pbuf_realloc+0x104>)
 8006b18:	f009 f87a 	bl	800fc10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	891b      	ldrh	r3, [r3, #8]
 8006b20:	887a      	ldrh	r2, [r7, #2]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d263      	bcs.n	8006bee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	891a      	ldrh	r2, [r3, #8]
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	817b      	strh	r3, [r7, #10]
  q = p;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006b38:	e018      	b.n	8006b6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	895b      	ldrh	r3, [r3, #10]
 8006b3e:	897a      	ldrh	r2, [r7, #10]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	891a      	ldrh	r2, [r3, #8]
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <pbuf_realloc+0x70>
 8006b5e:	4b26      	ldr	r3, [pc, #152]	; (8006bf8 <pbuf_realloc+0xfc>)
 8006b60:	f240 12af 	movw	r2, #431	; 0x1af
 8006b64:	4927      	ldr	r1, [pc, #156]	; (8006c04 <pbuf_realloc+0x108>)
 8006b66:	4826      	ldr	r0, [pc, #152]	; (8006c00 <pbuf_realloc+0x104>)
 8006b68:	f009 f852 	bl	800fc10 <iprintf>
  while (rem_len > q->len) {
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	895b      	ldrh	r3, [r3, #10]
 8006b70:	897a      	ldrh	r2, [r7, #10]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8e1      	bhi.n	8006b3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	7b1b      	ldrb	r3, [r3, #12]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d121      	bne.n	8006bc6 <pbuf_realloc+0xca>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	895b      	ldrh	r3, [r3, #10]
 8006b86:	897a      	ldrh	r2, [r7, #10]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d01c      	beq.n	8006bc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	7b5b      	ldrb	r3, [r3, #13]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d116      	bne.n	8006bc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7fe ffba 	bl	8005b24 <mem_trim>
 8006bb0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <pbuf_realloc+0xca>
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <pbuf_realloc+0xfc>)
 8006bba:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006bbe:	4912      	ldr	r1, [pc, #72]	; (8006c08 <pbuf_realloc+0x10c>)
 8006bc0:	480f      	ldr	r0, [pc, #60]	; (8006c00 <pbuf_realloc+0x104>)
 8006bc2:	f009 f825 	bl	800fc10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	897a      	ldrh	r2, [r7, #10]
 8006bca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	895a      	ldrh	r2, [r3, #10]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f911 	bl	8006e08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e000      	b.n	8006bf0 <pbuf_realloc+0xf4>
    return;
 8006bee:	bf00      	nop

}
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08011618 	.word	0x08011618
 8006bfc:	08011730 	.word	0x08011730
 8006c00:	08011678 	.word	0x08011678
 8006c04:	08011748 	.word	0x08011748
 8006c08:	08011760 	.word	0x08011760

08006c0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d106      	bne.n	8006c2e <pbuf_add_header_impl+0x22>
 8006c20:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <pbuf_add_header_impl+0xc4>)
 8006c22:	f240 12df 	movw	r2, #479	; 0x1df
 8006c26:	492b      	ldr	r1, [pc, #172]	; (8006cd4 <pbuf_add_header_impl+0xc8>)
 8006c28:	482b      	ldr	r0, [pc, #172]	; (8006cd8 <pbuf_add_header_impl+0xcc>)
 8006c2a:	f008 fff1 	bl	800fc10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <pbuf_add_header_impl+0x30>
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3a:	d301      	bcc.n	8006c40 <pbuf_add_header_impl+0x34>
    return 1;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e043      	b.n	8006cc8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <pbuf_add_header_impl+0x3e>
    return 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e03e      	b.n	8006cc8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	891a      	ldrh	r2, [r3, #8]
 8006c52:	8a7b      	ldrh	r3, [r7, #18]
 8006c54:	4413      	add	r3, r2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	8a7a      	ldrh	r2, [r7, #18]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d901      	bls.n	8006c62 <pbuf_add_header_impl+0x56>
    return 1;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e032      	b.n	8006cc8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	7b1b      	ldrb	r3, [r3, #12]
 8006c66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006c68:	8a3b      	ldrh	r3, [r7, #16]
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00c      	beq.n	8006c8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	425b      	negs	r3, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3310      	adds	r3, #16
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d20d      	bcs.n	8006ca4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e01d      	b.n	8006cc8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d006      	beq.n	8006ca0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	425b      	negs	r3, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	e001      	b.n	8006ca4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e011      	b.n	8006cc8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	895a      	ldrh	r2, [r3, #10]
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	891a      	ldrh	r2, [r3, #8]
 8006cbc:	8a7b      	ldrh	r3, [r7, #18]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	811a      	strh	r2, [r3, #8]


  return 0;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	08011618 	.word	0x08011618
 8006cd4:	0801177c 	.word	0x0801177c
 8006cd8:	08011678 	.word	0x08011678

08006cdc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ff8e 	bl	8006c0c <pbuf_add_header_impl>
 8006cf0:	4603      	mov	r3, r0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d106      	bne.n	8006d1a <pbuf_remove_header+0x1e>
 8006d0c:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <pbuf_remove_header+0x94>)
 8006d0e:	f240 224b 	movw	r2, #587	; 0x24b
 8006d12:	4920      	ldr	r1, [pc, #128]	; (8006d94 <pbuf_remove_header+0x98>)
 8006d14:	4820      	ldr	r0, [pc, #128]	; (8006d98 <pbuf_remove_header+0x9c>)
 8006d16:	f008 ff7b 	bl	800fc10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <pbuf_remove_header+0x2c>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d26:	d301      	bcc.n	8006d2c <pbuf_remove_header+0x30>
    return 1;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e02c      	b.n	8006d86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <pbuf_remove_header+0x3a>
    return 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e027      	b.n	8006d86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	895b      	ldrh	r3, [r3, #10]
 8006d3e:	89fa      	ldrh	r2, [r7, #14]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d908      	bls.n	8006d56 <pbuf_remove_header+0x5a>
 8006d44:	4b12      	ldr	r3, [pc, #72]	; (8006d90 <pbuf_remove_header+0x94>)
 8006d46:	f240 2255 	movw	r2, #597	; 0x255
 8006d4a:	4914      	ldr	r1, [pc, #80]	; (8006d9c <pbuf_remove_header+0xa0>)
 8006d4c:	4812      	ldr	r0, [pc, #72]	; (8006d98 <pbuf_remove_header+0x9c>)
 8006d4e:	f008 ff5f 	bl	800fc10 <iprintf>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e017      	b.n	8006d86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	441a      	add	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	895a      	ldrh	r2, [r3, #10]
 8006d6c:	89fb      	ldrh	r3, [r7, #14]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	891a      	ldrh	r2, [r3, #8]
 8006d7a:	89fb      	ldrh	r3, [r7, #14]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	08011618 	.word	0x08011618
 8006d94:	0801177c 	.word	0x0801177c
 8006d98:	08011678 	.word	0x08011678
 8006d9c:	08011788 	.word	0x08011788

08006da0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	807b      	strh	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da08      	bge.n	8006dca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dbc:	425b      	negs	r3, r3
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff9b 	bl	8006cfc <pbuf_remove_header>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	e007      	b.n	8006dda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006dca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dce:	787a      	ldrb	r2, [r7, #1]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ff1a 	bl	8006c0c <pbuf_add_header_impl>
 8006dd8:	4603      	mov	r3, r0
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006df2:	2201      	movs	r2, #1
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ffd2 	bl	8006da0 <pbuf_header_impl>
 8006dfc:	4603      	mov	r3, r0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <pbuf_free+0x22>
 8006e1c:	4b38      	ldr	r3, [pc, #224]	; (8006f00 <pbuf_free+0xf8>)
 8006e1e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006e22:	4938      	ldr	r1, [pc, #224]	; (8006f04 <pbuf_free+0xfc>)
 8006e24:	4838      	ldr	r0, [pc, #224]	; (8006f08 <pbuf_free+0x100>)
 8006e26:	f008 fef3 	bl	800fc10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e063      	b.n	8006ef6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006e32:	e05c      	b.n	8006eee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7b9b      	ldrb	r3, [r3, #14]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <pbuf_free+0x42>
 8006e3c:	4b30      	ldr	r3, [pc, #192]	; (8006f00 <pbuf_free+0xf8>)
 8006e3e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006e42:	4932      	ldr	r1, [pc, #200]	; (8006f0c <pbuf_free+0x104>)
 8006e44:	4830      	ldr	r0, [pc, #192]	; (8006f08 <pbuf_free+0x100>)
 8006e46:	f008 fee3 	bl	800fc10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7b9b      	ldrb	r3, [r3, #14]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	739a      	strb	r2, [r3, #14]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7b9b      	ldrb	r3, [r3, #14]
 8006e5a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d143      	bne.n	8006eea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7b1b      	ldrb	r3, [r3, #12]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	7b5b      	ldrb	r3, [r3, #13]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d011      	beq.n	8006ea2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <pbuf_free+0x90>
 8006e8a:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <pbuf_free+0xf8>)
 8006e8c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006e90:	491f      	ldr	r1, [pc, #124]	; (8006f10 <pbuf_free+0x108>)
 8006e92:	481d      	ldr	r0, [pc, #116]	; (8006f08 <pbuf_free+0x100>)
 8006e94:	f008 febc 	bl	800fc10 <iprintf>
        pc->custom_free_function(p);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	e01d      	b.n	8006ede <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d104      	bne.n	8006eb2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	2008      	movs	r0, #8
 8006eac:	f7ff f936 	bl	800611c <memp_free>
 8006eb0:	e015      	b.n	8006ede <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d104      	bne.n	8006ec2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	2007      	movs	r0, #7
 8006ebc:	f7ff f92e 	bl	800611c <memp_free>
 8006ec0:	e00d      	b.n	8006ede <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <pbuf_free+0xc8>
          mem_free(p);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fe fdc1 	bl	8005a50 <mem_free>
 8006ece:	e006      	b.n	8006ede <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <pbuf_free+0xf8>)
 8006ed2:	f240 320f 	movw	r2, #783	; 0x30f
 8006ed6:	490f      	ldr	r1, [pc, #60]	; (8006f14 <pbuf_free+0x10c>)
 8006ed8:	480b      	ldr	r0, [pc, #44]	; (8006f08 <pbuf_free+0x100>)
 8006eda:	f008 fe99 	bl	800fc10 <iprintf>
        }
      }
      count++;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	e001      	b.n	8006eee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d19f      	bne.n	8006e34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	08011618 	.word	0x08011618
 8006f04:	0801177c 	.word	0x0801177c
 8006f08:	08011678 	.word	0x08011678
 8006f0c:	080117a8 	.word	0x080117a8
 8006f10:	080117c0 	.word	0x080117c0
 8006f14:	080117e4 	.word	0x080117e4

08006f18 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006f24:	e005      	b.n	8006f32 <pbuf_clen+0x1a>
    ++len;
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f6      	bne.n	8006f26 <pbuf_clen+0xe>
  }
  return len;
 8006f38:	89fb      	ldrh	r3, [r7, #14]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d010      	beq.n	8006f78 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7b9b      	ldrb	r3, [r3, #14]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7b9b      	ldrb	r3, [r3, #14]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <pbuf_ref+0x30>
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <pbuf_ref+0x38>)
 8006f6c:	f240 3242 	movw	r2, #834	; 0x342
 8006f70:	4904      	ldr	r1, [pc, #16]	; (8006f84 <pbuf_ref+0x3c>)
 8006f72:	4805      	ldr	r0, [pc, #20]	; (8006f88 <pbuf_ref+0x40>)
 8006f74:	f008 fe4c 	bl	800fc10 <iprintf>
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	08011618 	.word	0x08011618
 8006f84:	080117f8 	.word	0x080117f8
 8006f88:	08011678 	.word	0x08011678

08006f8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <pbuf_cat+0x16>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d107      	bne.n	8006fb2 <pbuf_cat+0x26>
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <pbuf_cat+0x98>)
 8006fa4:	f240 3259 	movw	r2, #857	; 0x359
 8006fa8:	491f      	ldr	r1, [pc, #124]	; (8007028 <pbuf_cat+0x9c>)
 8006faa:	4820      	ldr	r0, [pc, #128]	; (800702c <pbuf_cat+0xa0>)
 8006fac:	f008 fe30 	bl	800fc10 <iprintf>
 8006fb0:	e034      	b.n	800701c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e00a      	b.n	8006fce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	891a      	ldrh	r2, [r3, #8]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	891b      	ldrh	r3, [r3, #8]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	891a      	ldrh	r2, [r3, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	895b      	ldrh	r3, [r3, #10]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d006      	beq.n	8006ff0 <pbuf_cat+0x64>
 8006fe2:	4b10      	ldr	r3, [pc, #64]	; (8007024 <pbuf_cat+0x98>)
 8006fe4:	f240 3262 	movw	r2, #866	; 0x362
 8006fe8:	4911      	ldr	r1, [pc, #68]	; (8007030 <pbuf_cat+0xa4>)
 8006fea:	4810      	ldr	r0, [pc, #64]	; (800702c <pbuf_cat+0xa0>)
 8006fec:	f008 fe10 	bl	800fc10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d006      	beq.n	8007006 <pbuf_cat+0x7a>
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <pbuf_cat+0x98>)
 8006ffa:	f240 3263 	movw	r2, #867	; 0x363
 8006ffe:	490d      	ldr	r1, [pc, #52]	; (8007034 <pbuf_cat+0xa8>)
 8007000:	480a      	ldr	r0, [pc, #40]	; (800702c <pbuf_cat+0xa0>)
 8007002:	f008 fe05 	bl	800fc10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	891a      	ldrh	r2, [r3, #8]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	891b      	ldrh	r3, [r3, #8]
 800700e:	4413      	add	r3, r2
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08011618 	.word	0x08011618
 8007028:	0801180c 	.word	0x0801180c
 800702c:	08011678 	.word	0x08011678
 8007030:	08011844 	.word	0x08011844
 8007034:	08011874 	.word	0x08011874

08007038 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ffa1 	bl	8006f8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f7ff ff7c 	bl	8006f48 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007050:	bf00      	nop
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <pbuf_copy+0x2a>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <pbuf_copy+0x2a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	891a      	ldrh	r2, [r3, #8]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	891b      	ldrh	r3, [r3, #8]
 800707e:	429a      	cmp	r2, r3
 8007080:	d209      	bcs.n	8007096 <pbuf_copy+0x3e>
 8007082:	4b57      	ldr	r3, [pc, #348]	; (80071e0 <pbuf_copy+0x188>)
 8007084:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007088:	4956      	ldr	r1, [pc, #344]	; (80071e4 <pbuf_copy+0x18c>)
 800708a:	4857      	ldr	r0, [pc, #348]	; (80071e8 <pbuf_copy+0x190>)
 800708c:	f008 fdc0 	bl	800fc10 <iprintf>
 8007090:	f06f 030f 	mvn.w	r3, #15
 8007094:	e09f      	b.n	80071d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	895b      	ldrh	r3, [r3, #10]
 800709a:	461a      	mov	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	1ad2      	subs	r2, r2, r3
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	895b      	ldrh	r3, [r3, #10]
 80070a4:	4619      	mov	r1, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1acb      	subs	r3, r1, r3
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d306      	bcc.n	80070bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	895b      	ldrh	r3, [r3, #10]
 80070b2:	461a      	mov	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e005      	b.n	80070c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	895b      	ldrh	r3, [r3, #10]
 80070c0:	461a      	mov	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	18d0      	adds	r0, r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4619      	mov	r1, r3
 80070dc:	f008 fd68 	bl	800fbb0 <memcpy>
    offset_to += len;
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	895b      	ldrh	r3, [r3, #10]
 80070f4:	461a      	mov	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d906      	bls.n	800710a <pbuf_copy+0xb2>
 80070fc:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <pbuf_copy+0x188>)
 80070fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007102:	493a      	ldr	r1, [pc, #232]	; (80071ec <pbuf_copy+0x194>)
 8007104:	4838      	ldr	r0, [pc, #224]	; (80071e8 <pbuf_copy+0x190>)
 8007106:	f008 fd83 	bl	800fc10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	895b      	ldrh	r3, [r3, #10]
 800710e:	461a      	mov	r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4293      	cmp	r3, r2
 8007114:	d906      	bls.n	8007124 <pbuf_copy+0xcc>
 8007116:	4b32      	ldr	r3, [pc, #200]	; (80071e0 <pbuf_copy+0x188>)
 8007118:	f240 32da 	movw	r2, #986	; 0x3da
 800711c:	4934      	ldr	r1, [pc, #208]	; (80071f0 <pbuf_copy+0x198>)
 800711e:	4832      	ldr	r0, [pc, #200]	; (80071e8 <pbuf_copy+0x190>)
 8007120:	f008 fd76 	bl	800fc10 <iprintf>
    if (offset_from >= p_from->len) {
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	895b      	ldrh	r3, [r3, #10]
 8007128:	461a      	mov	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	4293      	cmp	r3, r2
 800712e:	d304      	bcc.n	800713a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	895b      	ldrh	r3, [r3, #10]
 800713e:	461a      	mov	r2, r3
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	4293      	cmp	r3, r2
 8007144:	d114      	bne.n	8007170 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10c      	bne.n	8007170 <pbuf_copy+0x118>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <pbuf_copy+0x118>
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <pbuf_copy+0x188>)
 800715e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007162:	4924      	ldr	r1, [pc, #144]	; (80071f4 <pbuf_copy+0x19c>)
 8007164:	4820      	ldr	r0, [pc, #128]	; (80071e8 <pbuf_copy+0x190>)
 8007166:	f008 fd53 	bl	800fc10 <iprintf>
 800716a:	f06f 030f 	mvn.w	r3, #15
 800716e:	e032      	b.n	80071d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d013      	beq.n	800719e <pbuf_copy+0x146>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	895a      	ldrh	r2, [r3, #10]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	891b      	ldrh	r3, [r3, #8]
 800717e:	429a      	cmp	r2, r3
 8007180:	d10d      	bne.n	800719e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <pbuf_copy+0x146>
 800718a:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <pbuf_copy+0x188>)
 800718c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007190:	4919      	ldr	r1, [pc, #100]	; (80071f8 <pbuf_copy+0x1a0>)
 8007192:	4815      	ldr	r0, [pc, #84]	; (80071e8 <pbuf_copy+0x190>)
 8007194:	f008 fd3c 	bl	800fc10 <iprintf>
 8007198:	f06f 0305 	mvn.w	r3, #5
 800719c:	e01b      	b.n	80071d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <pbuf_copy+0x174>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	895a      	ldrh	r2, [r3, #10]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	891b      	ldrh	r3, [r3, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d10d      	bne.n	80071cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <pbuf_copy+0x174>
 80071b8:	4b09      	ldr	r3, [pc, #36]	; (80071e0 <pbuf_copy+0x188>)
 80071ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80071be:	490e      	ldr	r1, [pc, #56]	; (80071f8 <pbuf_copy+0x1a0>)
 80071c0:	4809      	ldr	r0, [pc, #36]	; (80071e8 <pbuf_copy+0x190>)
 80071c2:	f008 fd25 	bl	800fc10 <iprintf>
 80071c6:	f06f 0305 	mvn.w	r3, #5
 80071ca:	e004      	b.n	80071d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f af61 	bne.w	8007096 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	08011618 	.word	0x08011618
 80071e4:	080118c0 	.word	0x080118c0
 80071e8:	08011678 	.word	0x08011678
 80071ec:	080118f0 	.word	0x080118f0
 80071f0:	08011908 	.word	0x08011908
 80071f4:	08011924 	.word	0x08011924
 80071f8:	08011934 	.word	0x08011934

080071fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4611      	mov	r1, r2
 8007208:	461a      	mov	r2, r3
 800720a:	460b      	mov	r3, r1
 800720c:	80fb      	strh	r3, [r7, #6]
 800720e:	4613      	mov	r3, r2
 8007210:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d108      	bne.n	8007232 <pbuf_copy_partial+0x36>
 8007220:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <pbuf_copy_partial+0xd4>)
 8007222:	f240 420a 	movw	r2, #1034	; 0x40a
 8007226:	492b      	ldr	r1, [pc, #172]	; (80072d4 <pbuf_copy_partial+0xd8>)
 8007228:	482b      	ldr	r0, [pc, #172]	; (80072d8 <pbuf_copy_partial+0xdc>)
 800722a:	f008 fcf1 	bl	800fc10 <iprintf>
 800722e:	2300      	movs	r3, #0
 8007230:	e04a      	b.n	80072c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d108      	bne.n	800724a <pbuf_copy_partial+0x4e>
 8007238:	4b25      	ldr	r3, [pc, #148]	; (80072d0 <pbuf_copy_partial+0xd4>)
 800723a:	f240 420b 	movw	r2, #1035	; 0x40b
 800723e:	4927      	ldr	r1, [pc, #156]	; (80072dc <pbuf_copy_partial+0xe0>)
 8007240:	4825      	ldr	r0, [pc, #148]	; (80072d8 <pbuf_copy_partial+0xdc>)
 8007242:	f008 fce5 	bl	800fc10 <iprintf>
 8007246:	2300      	movs	r3, #0
 8007248:	e03e      	b.n	80072c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e034      	b.n	80072ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007250:	88bb      	ldrh	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <pbuf_copy_partial+0x70>
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	895b      	ldrh	r3, [r3, #10]
 800725a:	88ba      	ldrh	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d305      	bcc.n	800726c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	895b      	ldrh	r3, [r3, #10]
 8007264:	88ba      	ldrh	r2, [r7, #4]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	80bb      	strh	r3, [r7, #4]
 800726a:	e023      	b.n	80072b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	895a      	ldrh	r2, [r3, #10]
 8007270:	88bb      	ldrh	r3, [r7, #4]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007276:	8b3a      	ldrh	r2, [r7, #24]
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	429a      	cmp	r2, r3
 800727c:	d901      	bls.n	8007282 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007282:	8b7b      	ldrh	r3, [r7, #26]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	18d0      	adds	r0, r2, r3
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	88bb      	ldrh	r3, [r7, #4]
 800728e:	4413      	add	r3, r2
 8007290:	8b3a      	ldrh	r2, [r7, #24]
 8007292:	4619      	mov	r1, r3
 8007294:	f008 fc8c 	bl	800fbb0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007298:	8afa      	ldrh	r2, [r7, #22]
 800729a:	8b3b      	ldrh	r3, [r7, #24]
 800729c:	4413      	add	r3, r2
 800729e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80072a0:	8b7a      	ldrh	r2, [r7, #26]
 80072a2:	8b3b      	ldrh	r3, [r7, #24]
 80072a4:	4413      	add	r3, r2
 80072a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80072a8:	88fa      	ldrh	r2, [r7, #6]
 80072aa:	8b3b      	ldrh	r3, [r7, #24]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <pbuf_copy_partial+0xca>
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1c4      	bne.n	8007250 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80072c6:	8afb      	ldrh	r3, [r7, #22]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	08011618 	.word	0x08011618
 80072d4:	08011960 	.word	0x08011960
 80072d8:	08011678 	.word	0x08011678
 80072dc:	08011980 	.word	0x08011980

080072e0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <pbuf_take+0x30>
 80072fc:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <pbuf_take+0x108>)
 80072fe:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007302:	493a      	ldr	r1, [pc, #232]	; (80073ec <pbuf_take+0x10c>)
 8007304:	483a      	ldr	r0, [pc, #232]	; (80073f0 <pbuf_take+0x110>)
 8007306:	f008 fc83 	bl	800fc10 <iprintf>
 800730a:	f06f 030f 	mvn.w	r3, #15
 800730e:	e067      	b.n	80073e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <pbuf_take+0x4a>
 8007316:	4b34      	ldr	r3, [pc, #208]	; (80073e8 <pbuf_take+0x108>)
 8007318:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800731c:	4935      	ldr	r1, [pc, #212]	; (80073f4 <pbuf_take+0x114>)
 800731e:	4834      	ldr	r0, [pc, #208]	; (80073f0 <pbuf_take+0x110>)
 8007320:	f008 fc76 	bl	800fc10 <iprintf>
 8007324:	f06f 030f 	mvn.w	r3, #15
 8007328:	e05a      	b.n	80073e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	891b      	ldrh	r3, [r3, #8]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	429a      	cmp	r2, r3
 8007332:	d909      	bls.n	8007348 <pbuf_take+0x68>
 8007334:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <pbuf_take+0x108>)
 8007336:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800733a:	492f      	ldr	r1, [pc, #188]	; (80073f8 <pbuf_take+0x118>)
 800733c:	482c      	ldr	r0, [pc, #176]	; (80073f0 <pbuf_take+0x110>)
 800733e:	f008 fc67 	bl	800fc10 <iprintf>
 8007342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007346:	e04b      	b.n	80073e0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <pbuf_take+0x7e>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <pbuf_take+0x7e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	891b      	ldrh	r3, [r3, #8]
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	429a      	cmp	r2, r3
 800735c:	d902      	bls.n	8007364 <pbuf_take+0x84>
    return ERR_ARG;
 800735e:	f06f 030f 	mvn.w	r3, #15
 8007362:	e03d      	b.n	80073e0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e028      	b.n	80073bc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <pbuf_take+0x9e>
 8007370:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <pbuf_take+0x108>)
 8007372:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007376:	4921      	ldr	r1, [pc, #132]	; (80073fc <pbuf_take+0x11c>)
 8007378:	481d      	ldr	r0, [pc, #116]	; (80073f0 <pbuf_take+0x110>)
 800737a:	f008 fc49 	bl	800fc10 <iprintf>
    buf_copy_len = total_copy_len;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	895b      	ldrh	r3, [r3, #10]
 8007386:	461a      	mov	r2, r3
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	4293      	cmp	r3, r2
 800738c:	d902      	bls.n	8007394 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	895b      	ldrh	r3, [r3, #10]
 8007392:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	6858      	ldr	r0, [r3, #4]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4619      	mov	r1, r3
 80073a2:	f008 fc05 	bl	800fbb0 <memcpy>
    total_copy_len -= buf_copy_len;
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	4413      	add	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1d3      	bne.n	800736a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d103      	bne.n	80073d0 <pbuf_take+0xf0>
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d006      	beq.n	80073de <pbuf_take+0xfe>
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <pbuf_take+0x108>)
 80073d2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80073d6:	490a      	ldr	r1, [pc, #40]	; (8007400 <pbuf_take+0x120>)
 80073d8:	4805      	ldr	r0, [pc, #20]	; (80073f0 <pbuf_take+0x110>)
 80073da:	f008 fc19 	bl	800fc10 <iprintf>
  return ERR_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	08011618 	.word	0x08011618
 80073ec:	080119f0 	.word	0x080119f0
 80073f0:	08011678 	.word	0x08011678
 80073f4:	08011a08 	.word	0x08011a08
 80073f8:	08011a24 	.word	0x08011a24
 80073fc:	08011a44 	.word	0x08011a44
 8007400:	08011a5c 	.word	0x08011a5c

08007404 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	603a      	str	r2, [r7, #0]
 800740e:	71fb      	strb	r3, [r7, #7]
 8007410:	460b      	mov	r3, r1
 8007412:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	8919      	ldrh	r1, [r3, #8]
 8007418:	88ba      	ldrh	r2, [r7, #4]
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fa0f 	bl	8006840 <pbuf_alloc>
 8007422:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <pbuf_clone+0x2a>
    return NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	e011      	b.n	8007452 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7ff fe11 	bl	8007058 <pbuf_copy>
 8007436:	4603      	mov	r3, r0
 8007438:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800743a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d006      	beq.n	8007450 <pbuf_clone+0x4c>
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <pbuf_clone+0x58>)
 8007444:	f240 5224 	movw	r2, #1316	; 0x524
 8007448:	4905      	ldr	r1, [pc, #20]	; (8007460 <pbuf_clone+0x5c>)
 800744a:	4806      	ldr	r0, [pc, #24]	; (8007464 <pbuf_clone+0x60>)
 800744c:	f008 fbe0 	bl	800fc10 <iprintf>
  return q;
 8007450:	68fb      	ldr	r3, [r7, #12]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	08011618 	.word	0x08011618
 8007460:	08011a8c 	.word	0x08011a8c
 8007464:	08011678 	.word	0x08011678

08007468 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800746c:	f008 fbe8 	bl	800fc40 <rand>
 8007470:	4603      	mov	r3, r0
 8007472:	b29b      	uxth	r3, r3
 8007474:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007478:	b29b      	uxth	r3, r3
 800747a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800747e:	b29a      	uxth	r2, r3
 8007480:	4b01      	ldr	r3, [pc, #4]	; (8007488 <tcp_init+0x20>)
 8007482:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000020 	.word	0x20000020

0800748c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7d1b      	ldrb	r3, [r3, #20]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d105      	bne.n	80074a8 <tcp_free+0x1c>
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <tcp_free+0x2c>)
 800749e:	22d4      	movs	r2, #212	; 0xd4
 80074a0:	4906      	ldr	r1, [pc, #24]	; (80074bc <tcp_free+0x30>)
 80074a2:	4807      	ldr	r0, [pc, #28]	; (80074c0 <tcp_free+0x34>)
 80074a4:	f008 fbb4 	bl	800fc10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	2001      	movs	r0, #1
 80074ac:	f7fe fe36 	bl	800611c <memp_free>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	08011b18 	.word	0x08011b18
 80074bc:	08011b48 	.word	0x08011b48
 80074c0:	08011b5c 	.word	0x08011b5c

080074c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7d1b      	ldrb	r3, [r3, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d105      	bne.n	80074e0 <tcp_free_listen+0x1c>
 80074d4:	4b06      	ldr	r3, [pc, #24]	; (80074f0 <tcp_free_listen+0x2c>)
 80074d6:	22df      	movs	r2, #223	; 0xdf
 80074d8:	4906      	ldr	r1, [pc, #24]	; (80074f4 <tcp_free_listen+0x30>)
 80074da:	4807      	ldr	r0, [pc, #28]	; (80074f8 <tcp_free_listen+0x34>)
 80074dc:	f008 fb98 	bl	800fc10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	2002      	movs	r0, #2
 80074e4:	f7fe fe1a 	bl	800611c <memp_free>
}
 80074e8:	bf00      	nop
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	08011b18 	.word	0x08011b18
 80074f4:	08011b84 	.word	0x08011b84
 80074f8:	08011b5c 	.word	0x08011b5c

080074fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007500:	f000 fea2 	bl	8008248 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <tcp_tmr+0x28>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <tcp_tmr+0x28>)
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <tcp_tmr+0x28>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800751c:	f000 fb54 	bl	8007bc8 <tcp_slowtmr>
  }
}
 8007520:	bf00      	nop
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200087e9 	.word	0x200087e9

08007528 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <tcp_remove_listener+0x1c>
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <tcp_remove_listener+0x48>)
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	490d      	ldr	r1, [pc, #52]	; (8007574 <tcp_remove_listener+0x4c>)
 800753e:	480e      	ldr	r0, [pc, #56]	; (8007578 <tcp_remove_listener+0x50>)
 8007540:	f008 fb66 	bl	800fc10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e00a      	b.n	8007560 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d102      	bne.n	800755a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1f1      	bne.n	800754a <tcp_remove_listener+0x22>
    }
  }
}
 8007566:	bf00      	nop
 8007568:	bf00      	nop
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08011b18 	.word	0x08011b18
 8007574:	08011ba0 	.word	0x08011ba0
 8007578:	08011b5c 	.word	0x08011b5c

0800757c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <tcp_listen_closed+0x1c>
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <tcp_listen_closed+0x60>)
 800758c:	f240 1211 	movw	r2, #273	; 0x111
 8007590:	4913      	ldr	r1, [pc, #76]	; (80075e0 <tcp_listen_closed+0x64>)
 8007592:	4814      	ldr	r0, [pc, #80]	; (80075e4 <tcp_listen_closed+0x68>)
 8007594:	f008 fb3c 	bl	800fc10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	7d1b      	ldrb	r3, [r3, #20]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d006      	beq.n	80075ae <tcp_listen_closed+0x32>
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <tcp_listen_closed+0x60>)
 80075a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80075a6:	4910      	ldr	r1, [pc, #64]	; (80075e8 <tcp_listen_closed+0x6c>)
 80075a8:	480e      	ldr	r0, [pc, #56]	; (80075e4 <tcp_listen_closed+0x68>)
 80075aa:	f008 fb31 	bl	800fc10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075ae:	2301      	movs	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	e00b      	b.n	80075cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <tcp_listen_closed+0x70>)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ffb1 	bl	8007528 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3301      	adds	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d9f0      	bls.n	80075b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	08011b18 	.word	0x08011b18
 80075e0:	08011bc8 	.word	0x08011bc8
 80075e4:	08011b5c 	.word	0x08011b5c
 80075e8:	08011bd4 	.word	0x08011bd4
 80075ec:	08013af8 	.word	0x08013af8

080075f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80075f0:	b5b0      	push	{r4, r5, r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <tcp_close_shutdown+0x20>
 8007602:	4b63      	ldr	r3, [pc, #396]	; (8007790 <tcp_close_shutdown+0x1a0>)
 8007604:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007608:	4962      	ldr	r1, [pc, #392]	; (8007794 <tcp_close_shutdown+0x1a4>)
 800760a:	4863      	ldr	r0, [pc, #396]	; (8007798 <tcp_close_shutdown+0x1a8>)
 800760c:	f008 fb00 	bl	800fc10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d066      	beq.n	80076e4 <tcp_close_shutdown+0xf4>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7d1b      	ldrb	r3, [r3, #20]
 800761a:	2b04      	cmp	r3, #4
 800761c:	d003      	beq.n	8007626 <tcp_close_shutdown+0x36>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7d1b      	ldrb	r3, [r3, #20]
 8007622:	2b07      	cmp	r3, #7
 8007624:	d15e      	bne.n	80076e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762a:	2b00      	cmp	r3, #0
 800762c:	d104      	bne.n	8007638 <tcp_close_shutdown+0x48>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007632:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007636:	d055      	beq.n	80076e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	8b5b      	ldrh	r3, [r3, #26]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	d106      	bne.n	8007652 <tcp_close_shutdown+0x62>
 8007644:	4b52      	ldr	r3, [pc, #328]	; (8007790 <tcp_close_shutdown+0x1a0>)
 8007646:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800764a:	4954      	ldr	r1, [pc, #336]	; (800779c <tcp_close_shutdown+0x1ac>)
 800764c:	4852      	ldr	r0, [pc, #328]	; (8007798 <tcp_close_shutdown+0x1a8>)
 800764e:	f008 fadf 	bl	800fc10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800765a:	687d      	ldr	r5, [r7, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	8ad2      	ldrh	r2, [r2, #22]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	8b09      	ldrh	r1, [r1, #24]
 8007668:	9102      	str	r1, [sp, #8]
 800766a:	9201      	str	r2, [sp, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	462b      	mov	r3, r5
 8007670:	4622      	mov	r2, r4
 8007672:	4601      	mov	r1, r0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f004 fe91 	bl	800c39c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f8c6 	bl	800880c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007680:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <tcp_close_shutdown+0x1b0>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d105      	bne.n	8007696 <tcp_close_shutdown+0xa6>
 800768a:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <tcp_close_shutdown+0x1b0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4a43      	ldr	r2, [pc, #268]	; (80077a0 <tcp_close_shutdown+0x1b0>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	e013      	b.n	80076be <tcp_close_shutdown+0xce>
 8007696:	4b42      	ldr	r3, [pc, #264]	; (80077a0 <tcp_close_shutdown+0x1b0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e00c      	b.n	80076b8 <tcp_close_shutdown+0xc8>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d104      	bne.n	80076b2 <tcp_close_shutdown+0xc2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e005      	b.n	80076be <tcp_close_shutdown+0xce>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1ef      	bne.n	800769e <tcp_close_shutdown+0xae>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	60da      	str	r2, [r3, #12]
 80076c4:	4b37      	ldr	r3, [pc, #220]	; (80077a4 <tcp_close_shutdown+0x1b4>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80076ca:	4b37      	ldr	r3, [pc, #220]	; (80077a8 <tcp_close_shutdown+0x1b8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d102      	bne.n	80076da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80076d4:	f003 fd5e 	bl	800b194 <tcp_trigger_input_pcb_close>
 80076d8:	e002      	b.n	80076e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fed6 	bl	800748c <tcp_free>
      }
      return ERR_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e050      	b.n	8007786 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	7d1b      	ldrb	r3, [r3, #20]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d03b      	beq.n	8007764 <tcp_close_shutdown+0x174>
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	dc44      	bgt.n	800777a <tcp_close_shutdown+0x18a>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <tcp_close_shutdown+0x10a>
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d02a      	beq.n	800774e <tcp_close_shutdown+0x15e>
 80076f8:	e03f      	b.n	800777a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8adb      	ldrh	r3, [r3, #22]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d021      	beq.n	8007746 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007702:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <tcp_close_shutdown+0x1bc>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	429a      	cmp	r2, r3
 800770a:	d105      	bne.n	8007718 <tcp_close_shutdown+0x128>
 800770c:	4b27      	ldr	r3, [pc, #156]	; (80077ac <tcp_close_shutdown+0x1bc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	4a26      	ldr	r2, [pc, #152]	; (80077ac <tcp_close_shutdown+0x1bc>)
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e013      	b.n	8007740 <tcp_close_shutdown+0x150>
 8007718:	4b24      	ldr	r3, [pc, #144]	; (80077ac <tcp_close_shutdown+0x1bc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	e00c      	b.n	800773a <tcp_close_shutdown+0x14a>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d104      	bne.n	8007734 <tcp_close_shutdown+0x144>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e005      	b.n	8007740 <tcp_close_shutdown+0x150>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	60bb      	str	r3, [r7, #8]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1ef      	bne.n	8007720 <tcp_close_shutdown+0x130>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fea0 	bl	800748c <tcp_free>
      break;
 800774c:	e01a      	b.n	8007784 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff ff14 	bl	800757c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4816      	ldr	r0, [pc, #88]	; (80077b0 <tcp_close_shutdown+0x1c0>)
 8007758:	f001 f8a8 	bl	80088ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff feb1 	bl	80074c4 <tcp_free_listen>
      break;
 8007762:	e00f      	b.n	8007784 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007764:	6879      	ldr	r1, [r7, #4]
 8007766:	480e      	ldr	r0, [pc, #56]	; (80077a0 <tcp_close_shutdown+0x1b0>)
 8007768:	f001 f8a0 	bl	80088ac <tcp_pcb_remove>
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <tcp_close_shutdown+0x1b4>)
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff fe8a 	bl	800748c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007778:	e004      	b.n	8007784 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f81a 	bl	80077b4 <tcp_close_shutdown_fin>
 8007780:	4603      	mov	r3, r0
 8007782:	e000      	b.n	8007786 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bdb0      	pop	{r4, r5, r7, pc}
 800778e:	bf00      	nop
 8007790:	08011b18 	.word	0x08011b18
 8007794:	08011bec 	.word	0x08011bec
 8007798:	08011b5c 	.word	0x08011b5c
 800779c:	08011c0c 	.word	0x08011c0c
 80077a0:	200087e0 	.word	0x200087e0
 80077a4:	200087e8 	.word	0x200087e8
 80077a8:	20008820 	.word	0x20008820
 80077ac:	200087d8 	.word	0x200087d8
 80077b0:	200087dc 	.word	0x200087dc

080077b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d106      	bne.n	80077d0 <tcp_close_shutdown_fin+0x1c>
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <tcp_close_shutdown_fin+0xc8>)
 80077c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80077c8:	492d      	ldr	r1, [pc, #180]	; (8007880 <tcp_close_shutdown_fin+0xcc>)
 80077ca:	482e      	ldr	r0, [pc, #184]	; (8007884 <tcp_close_shutdown_fin+0xd0>)
 80077cc:	f008 fa20 	bl	800fc10 <iprintf>

  switch (pcb->state) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7d1b      	ldrb	r3, [r3, #20]
 80077d4:	2b07      	cmp	r3, #7
 80077d6:	d020      	beq.n	800781a <tcp_close_shutdown_fin+0x66>
 80077d8:	2b07      	cmp	r3, #7
 80077da:	dc2b      	bgt.n	8007834 <tcp_close_shutdown_fin+0x80>
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d002      	beq.n	80077e6 <tcp_close_shutdown_fin+0x32>
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d00d      	beq.n	8007800 <tcp_close_shutdown_fin+0x4c>
 80077e4:	e026      	b.n	8007834 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f003 fee6 	bl	800b5b8 <tcp_send_fin>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80077f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11f      	bne.n	8007838 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2205      	movs	r2, #5
 80077fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80077fe:	e01b      	b.n	8007838 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f003 fed9 	bl	800b5b8 <tcp_send_fin>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800780a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d114      	bne.n	800783c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007818:	e010      	b.n	800783c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f003 fecc 	bl	800b5b8 <tcp_send_fin>
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2209      	movs	r2, #9
 8007830:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007832:	e005      	b.n	8007840 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	e01c      	b.n	8007872 <tcp_close_shutdown_fin+0xbe>
      break;
 8007838:	bf00      	nop
 800783a:	e002      	b.n	8007842 <tcp_close_shutdown_fin+0x8e>
      break;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <tcp_close_shutdown_fin+0x8e>
      break;
 8007840:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f003 fff2 	bl	800b834 <tcp_output>
 8007850:	e00d      	b.n	800786e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800785a:	d108      	bne.n	800786e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8b5b      	ldrh	r3, [r3, #26]
 8007860:	f043 0308 	orr.w	r3, r3, #8
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e001      	b.n	8007872 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	08011b18 	.word	0x08011b18
 8007880:	08011bc8 	.word	0x08011bc8
 8007884:	08011b5c 	.word	0x08011b5c

08007888 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <tcp_close+0x22>
 8007896:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <tcp_close+0x4c>)
 8007898:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800789c:	490e      	ldr	r1, [pc, #56]	; (80078d8 <tcp_close+0x50>)
 800789e:	480f      	ldr	r0, [pc, #60]	; (80078dc <tcp_close+0x54>)
 80078a0:	f008 f9b6 	bl	800fc10 <iprintf>
 80078a4:	f06f 030f 	mvn.w	r3, #15
 80078a8:	e00f      	b.n	80078ca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7d1b      	ldrb	r3, [r3, #20]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d006      	beq.n	80078c0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8b5b      	ldrh	r3, [r3, #26]
 80078b6:	f043 0310 	orr.w	r3, r3, #16
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80078c0:	2101      	movs	r1, #1
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fe94 	bl	80075f0 <tcp_close_shutdown>
 80078c8:	4603      	mov	r3, r0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	08011b18 	.word	0x08011b18
 80078d8:	08011c28 	.word	0x08011c28
 80078dc:	08011b5c 	.word	0x08011b5c

080078e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	; 0x38
 80078e4:	af04      	add	r7, sp, #16
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <tcp_abandon+0x20>
 80078f0:	4b52      	ldr	r3, [pc, #328]	; (8007a3c <tcp_abandon+0x15c>)
 80078f2:	f240 223d 	movw	r2, #573	; 0x23d
 80078f6:	4952      	ldr	r1, [pc, #328]	; (8007a40 <tcp_abandon+0x160>)
 80078f8:	4852      	ldr	r0, [pc, #328]	; (8007a44 <tcp_abandon+0x164>)
 80078fa:	f008 f989 	bl	800fc10 <iprintf>
 80078fe:	e099      	b.n	8007a34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	7d1b      	ldrb	r3, [r3, #20]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <tcp_abandon+0x36>
 8007908:	4b4c      	ldr	r3, [pc, #304]	; (8007a3c <tcp_abandon+0x15c>)
 800790a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800790e:	494e      	ldr	r1, [pc, #312]	; (8007a48 <tcp_abandon+0x168>)
 8007910:	484c      	ldr	r0, [pc, #304]	; (8007a44 <tcp_abandon+0x164>)
 8007912:	f008 f97d 	bl	800fc10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7d1b      	ldrb	r3, [r3, #20]
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d107      	bne.n	800792e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	484a      	ldr	r0, [pc, #296]	; (8007a4c <tcp_abandon+0x16c>)
 8007922:	f000 ffc3 	bl	80088ac <tcp_pcb_remove>
    tcp_free(pcb);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff fdb0 	bl	800748c <tcp_free>
 800792c:	e082      	b.n	8007a34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007948:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7d1b      	ldrb	r3, [r3, #20]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d126      	bne.n	80079a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	8adb      	ldrh	r3, [r3, #22]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d02e      	beq.n	80079be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007960:	4b3b      	ldr	r3, [pc, #236]	; (8007a50 <tcp_abandon+0x170>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	429a      	cmp	r2, r3
 8007968:	d105      	bne.n	8007976 <tcp_abandon+0x96>
 800796a:	4b39      	ldr	r3, [pc, #228]	; (8007a50 <tcp_abandon+0x170>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	4a37      	ldr	r2, [pc, #220]	; (8007a50 <tcp_abandon+0x170>)
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	e013      	b.n	800799e <tcp_abandon+0xbe>
 8007976:	4b36      	ldr	r3, [pc, #216]	; (8007a50 <tcp_abandon+0x170>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	e00c      	b.n	8007998 <tcp_abandon+0xb8>
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d104      	bne.n	8007992 <tcp_abandon+0xb2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	60da      	str	r2, [r3, #12]
 8007990:	e005      	b.n	800799e <tcp_abandon+0xbe>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1ef      	bne.n	800797e <tcp_abandon+0x9e>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]
 80079a4:	e00b      	b.n	80079be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8adb      	ldrh	r3, [r3, #22]
 80079ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4828      	ldr	r0, [pc, #160]	; (8007a54 <tcp_abandon+0x174>)
 80079b4:	f000 ff7a 	bl	80088ac <tcp_pcb_remove>
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <tcp_abandon+0x178>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fd1c 	bl	8008408 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fd13 	bl	8008408 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fd0a 	bl	8008408 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00e      	beq.n	8007a18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	8b12      	ldrh	r2, [r2, #24]
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007a08:	9201      	str	r2, [sp, #4]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f004 fcc2 	bl	800c39c <tcp_rst>
    }
    last_state = pcb->state;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7d1b      	ldrb	r3, [r3, #20]
 8007a1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fd34 	bl	800748c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <tcp_abandon+0x154>
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f06f 010c 	mvn.w	r1, #12
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	4798      	blx	r3
  }
}
 8007a34:	3728      	adds	r7, #40	; 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08011b18 	.word	0x08011b18
 8007a40:	08011c5c 	.word	0x08011c5c
 8007a44:	08011b5c 	.word	0x08011b5c
 8007a48:	08011c78 	.word	0x08011c78
 8007a4c:	200087e4 	.word	0x200087e4
 8007a50:	200087d8 	.word	0x200087d8
 8007a54:	200087e0 	.word	0x200087e0
 8007a58:	200087e8 	.word	0x200087e8

08007a5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007a64:	2101      	movs	r1, #1
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff3a 	bl	80078e0 <tcp_abandon>
}
 8007a6c:	bf00      	nop
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <tcp_update_rcv_ann_wnd+0x1c>
 8007a82:	4b25      	ldr	r3, [pc, #148]	; (8007b18 <tcp_update_rcv_ann_wnd+0xa4>)
 8007a84:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007a88:	4924      	ldr	r1, [pc, #144]	; (8007b1c <tcp_update_rcv_ann_wnd+0xa8>)
 8007a8a:	4825      	ldr	r0, [pc, #148]	; (8007b20 <tcp_update_rcv_ann_wnd+0xac>)
 8007a8c:	f008 f8c0 	bl	800fc10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007a98:	4413      	add	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007aa4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007aa8:	bf28      	it	cs
 8007aaa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	db08      	blt.n	8007acc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	e020      	b.n	8007b0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd03      	ble.n	8007ae2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ae0:	e014      	b.n	8007b0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af4:	d306      	bcc.n	8007b04 <tcp_update_rcv_ann_wnd+0x90>
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <tcp_update_rcv_ann_wnd+0xa4>)
 8007af8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007afc:	4909      	ldr	r1, [pc, #36]	; (8007b24 <tcp_update_rcv_ann_wnd+0xb0>)
 8007afe:	4808      	ldr	r0, [pc, #32]	; (8007b20 <tcp_update_rcv_ann_wnd+0xac>)
 8007b00:	f008 f886 	bl	800fc10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007b0c:	2300      	movs	r3, #0
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	08011b18 	.word	0x08011b18
 8007b1c:	08011d74 	.word	0x08011d74
 8007b20:	08011b5c 	.word	0x08011b5c
 8007b24:	08011d98 	.word	0x08011d98

08007b28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <tcp_recved+0x22>
 8007b3a:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <tcp_recved+0x90>)
 8007b3c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007b40:	491e      	ldr	r1, [pc, #120]	; (8007bbc <tcp_recved+0x94>)
 8007b42:	481f      	ldr	r0, [pc, #124]	; (8007bc0 <tcp_recved+0x98>)
 8007b44:	f008 f864 	bl	800fc10 <iprintf>
 8007b48:	e032      	b.n	8007bb0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d106      	bne.n	8007b60 <tcp_recved+0x38>
 8007b52:	4b19      	ldr	r3, [pc, #100]	; (8007bb8 <tcp_recved+0x90>)
 8007b54:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007b58:	491a      	ldr	r1, [pc, #104]	; (8007bc4 <tcp_recved+0x9c>)
 8007b5a:	4819      	ldr	r0, [pc, #100]	; (8007bc0 <tcp_recved+0x98>)
 8007b5c:	f008 f858 	bl	800fc10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007b64:	887b      	ldrh	r3, [r7, #2]
 8007b66:	4413      	add	r3, r2
 8007b68:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007b70:	d804      	bhi.n	8007b7c <tcp_recved+0x54>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b76:	89fa      	ldrh	r2, [r7, #14]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d204      	bcs.n	8007b86 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007b82:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b84:	e002      	b.n	8007b8c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	89fa      	ldrh	r2, [r7, #14]
 8007b8a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ff71 	bl	8007a74 <tcp_update_rcv_ann_wnd>
 8007b92:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007b9a:	d309      	bcc.n	8007bb0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8b5b      	ldrh	r3, [r3, #26]
 8007ba0:	f043 0302 	orr.w	r3, r3, #2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f003 fe42 	bl	800b834 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08011b18 	.word	0x08011b18
 8007bbc:	08011db4 	.word	0x08011db4
 8007bc0:	08011b5c 	.word	0x08011b5c
 8007bc4:	08011dcc 	.word	0x08011dcc

08007bc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007bc8:	b5b0      	push	{r4, r5, r7, lr}
 8007bca:	b090      	sub	sp, #64	; 0x40
 8007bcc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007bd4:	4b94      	ldr	r3, [pc, #592]	; (8007e28 <tcp_slowtmr+0x260>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	4a93      	ldr	r2, [pc, #588]	; (8007e28 <tcp_slowtmr+0x260>)
 8007bdc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007bde:	4b93      	ldr	r3, [pc, #588]	; (8007e2c <tcp_slowtmr+0x264>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	4b91      	ldr	r3, [pc, #580]	; (8007e2c <tcp_slowtmr+0x264>)
 8007be8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007bee:	4b90      	ldr	r3, [pc, #576]	; (8007e30 <tcp_slowtmr+0x268>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007bf4:	e29d      	b.n	8008132 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	7d1b      	ldrb	r3, [r3, #20]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <tcp_slowtmr+0x44>
 8007bfe:	4b8d      	ldr	r3, [pc, #564]	; (8007e34 <tcp_slowtmr+0x26c>)
 8007c00:	f240 42be 	movw	r2, #1214	; 0x4be
 8007c04:	498c      	ldr	r1, [pc, #560]	; (8007e38 <tcp_slowtmr+0x270>)
 8007c06:	488d      	ldr	r0, [pc, #564]	; (8007e3c <tcp_slowtmr+0x274>)
 8007c08:	f008 f802 	bl	800fc10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	7d1b      	ldrb	r3, [r3, #20]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <tcp_slowtmr+0x5a>
 8007c14:	4b87      	ldr	r3, [pc, #540]	; (8007e34 <tcp_slowtmr+0x26c>)
 8007c16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007c1a:	4989      	ldr	r1, [pc, #548]	; (8007e40 <tcp_slowtmr+0x278>)
 8007c1c:	4887      	ldr	r0, [pc, #540]	; (8007e3c <tcp_slowtmr+0x274>)
 8007c1e:	f007 fff7 	bl	800fc10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	7d1b      	ldrb	r3, [r3, #20]
 8007c26:	2b0a      	cmp	r3, #10
 8007c28:	d106      	bne.n	8007c38 <tcp_slowtmr+0x70>
 8007c2a:	4b82      	ldr	r3, [pc, #520]	; (8007e34 <tcp_slowtmr+0x26c>)
 8007c2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007c30:	4984      	ldr	r1, [pc, #528]	; (8007e44 <tcp_slowtmr+0x27c>)
 8007c32:	4882      	ldr	r0, [pc, #520]	; (8007e3c <tcp_slowtmr+0x274>)
 8007c34:	f007 ffec 	bl	800fc10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	7f9a      	ldrb	r2, [r3, #30]
 8007c3c:	4b7b      	ldr	r3, [pc, #492]	; (8007e2c <tcp_slowtmr+0x264>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d105      	bne.n	8007c50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007c4e:	e270      	b.n	8008132 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007c50:	4b76      	ldr	r3, [pc, #472]	; (8007e2c <tcp_slowtmr+0x264>)
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	7d1b      	ldrb	r3, [r3, #20]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d10a      	bne.n	8007c82 <tcp_slowtmr+0xba>
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	d905      	bls.n	8007c82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c80:	e11e      	b.n	8007ec0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c88:	2b0b      	cmp	r3, #11
 8007c8a:	d905      	bls.n	8007c98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	3301      	adds	r3, #1
 8007c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c96:	e113      	b.n	8007ec0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d075      	beq.n	8007d8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <tcp_slowtmr+0xf0>
 8007caa:	4b62      	ldr	r3, [pc, #392]	; (8007e34 <tcp_slowtmr+0x26c>)
 8007cac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007cb0:	4965      	ldr	r1, [pc, #404]	; (8007e48 <tcp_slowtmr+0x280>)
 8007cb2:	4862      	ldr	r0, [pc, #392]	; (8007e3c <tcp_slowtmr+0x274>)
 8007cb4:	f007 ffac 	bl	800fc10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <tcp_slowtmr+0x106>
 8007cc0:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <tcp_slowtmr+0x26c>)
 8007cc2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007cc6:	4961      	ldr	r1, [pc, #388]	; (8007e4c <tcp_slowtmr+0x284>)
 8007cc8:	485c      	ldr	r0, [pc, #368]	; (8007e3c <tcp_slowtmr+0x274>)
 8007cca:	f007 ffa1 	bl	800fc10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007cd4:	2b0b      	cmp	r3, #11
 8007cd6:	d905      	bls.n	8007ce4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ce2:	e0ed      	b.n	8007ec0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007cea:	3b01      	subs	r3, #1
 8007cec:	4a58      	ldr	r2, [pc, #352]	; (8007e50 <tcp_slowtmr+0x288>)
 8007cee:	5cd3      	ldrb	r3, [r2, r3]
 8007cf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007cf8:	7c7a      	ldrb	r2, [r7, #17]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d907      	bls.n	8007d0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007d04:	3301      	adds	r3, #1
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007d14:	7c7a      	ldrb	r2, [r7, #17]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f200 80d2 	bhi.w	8007ec0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d108      	bne.n	8007d3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d2c:	f004 fc2a 	bl	800c584 <tcp_zero_window_probe>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d014      	beq.n	8007d60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007d36:	2300      	movs	r3, #0
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	e011      	b.n	8007d60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d42:	4619      	mov	r1, r3
 8007d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d46:	f003 faef 	bl	800b328 <tcp_split_unsent_seg>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d107      	bne.n	8007d60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d52:	f003 fd6f 	bl	800b834 <tcp_output>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80ac 	beq.w	8007ec0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d76:	2b06      	cmp	r3, #6
 8007d78:	f200 80a2 	bhi.w	8007ec0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007d8c:	e098      	b.n	8007ec0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	db0f      	blt.n	8007db8 <tcp_slowtmr+0x1f0>
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007d9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d008      	beq.n	8007db8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3301      	adds	r3, #1
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	b21a      	sxth	r2, r3
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	db7b      	blt.n	8007ec0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dca:	f004 f825 	bl	800be18 <tcp_rexmit_rto_prepare>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <tcp_slowtmr+0x21c>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d171      	bne.n	8007ec0 <tcp_slowtmr+0x2f8>
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d06d      	beq.n	8007ec0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	7d1b      	ldrb	r3, [r3, #20]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d03a      	beq.n	8007e62 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007df2:	2b0c      	cmp	r3, #12
 8007df4:	bf28      	it	cs
 8007df6:	230c      	movcs	r3, #12
 8007df8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007e00:	10db      	asrs	r3, r3, #3
 8007e02:	b21b      	sxth	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007e0c:	4413      	add	r3, r2
 8007e0e:	7efa      	ldrb	r2, [r7, #27]
 8007e10:	4910      	ldr	r1, [pc, #64]	; (8007e54 <tcp_slowtmr+0x28c>)
 8007e12:	5c8a      	ldrb	r2, [r1, r2]
 8007e14:	4093      	lsls	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	dc1a      	bgt.n	8007e58 <tcp_slowtmr+0x290>
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	b21a      	sxth	r2, r3
 8007e26:	e019      	b.n	8007e5c <tcp_slowtmr+0x294>
 8007e28:	200087d4 	.word	0x200087d4
 8007e2c:	200087ea 	.word	0x200087ea
 8007e30:	200087e0 	.word	0x200087e0
 8007e34:	08011b18 	.word	0x08011b18
 8007e38:	08011e5c 	.word	0x08011e5c
 8007e3c:	08011b5c 	.word	0x08011b5c
 8007e40:	08011e88 	.word	0x08011e88
 8007e44:	08011eb4 	.word	0x08011eb4
 8007e48:	08011ee4 	.word	0x08011ee4
 8007e4c:	08011f18 	.word	0x08011f18
 8007e50:	08013af0 	.word	0x08013af0
 8007e54:	08013ae0 	.word	0x08013ae0
 8007e58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2200      	movs	r2, #0
 8007e66:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bf28      	it	cs
 8007e78:	4613      	movcs	r3, r2
 8007e7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007e7c:	8a7b      	ldrh	r3, [r7, #18]
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d206      	bcs.n	8007ea8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ebc:	f004 f81c 	bl	800bef8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	7d1b      	ldrb	r3, [r3, #20]
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d111      	bne.n	8007eec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	8b5b      	ldrh	r3, [r3, #26]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00b      	beq.n	8007eec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ed4:	4b9c      	ldr	r3, [pc, #624]	; (8008148 <tcp_slowtmr+0x580>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b28      	cmp	r3, #40	; 0x28
 8007ee0:	d904      	bls.n	8007eec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	7a5b      	ldrb	r3, [r3, #9]
 8007ef0:	f003 0308 	and.w	r3, r3, #8
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d04a      	beq.n	8007f8e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d003      	beq.n	8007f08 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	d142      	bne.n	8007f8e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f08:	4b8f      	ldr	r3, [pc, #572]	; (8008148 <tcp_slowtmr+0x580>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007f18:	4b8c      	ldr	r3, [pc, #560]	; (800814c <tcp_slowtmr+0x584>)
 8007f1a:	440b      	add	r3, r1
 8007f1c:	498c      	ldr	r1, [pc, #560]	; (8008150 <tcp_slowtmr+0x588>)
 8007f1e:	fba1 1303 	umull	r1, r3, r1, r3
 8007f22:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d90a      	bls.n	8007f3e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007f32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f36:	3301      	adds	r3, #1
 8007f38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f3c:	e027      	b.n	8007f8e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f3e:	4b82      	ldr	r3, [pc, #520]	; (8008148 <tcp_slowtmr+0x580>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007f54:	4618      	mov	r0, r3
 8007f56:	4b7f      	ldr	r3, [pc, #508]	; (8008154 <tcp_slowtmr+0x58c>)
 8007f58:	fb00 f303 	mul.w	r3, r0, r3
 8007f5c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007f5e:	497c      	ldr	r1, [pc, #496]	; (8008150 <tcp_slowtmr+0x588>)
 8007f60:	fba1 1303 	umull	r1, r3, r1, r3
 8007f64:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d911      	bls.n	8007f8e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6c:	f004 faca 	bl	800c504 <tcp_keepalive>
 8007f70:	4603      	mov	r3, r0
 8007f72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007f76:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d107      	bne.n	8007f8e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007f84:	3301      	adds	r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007f96:	4b6c      	ldr	r3, [pc, #432]	; (8008148 <tcp_slowtmr+0x580>)
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	460b      	mov	r3, r1
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	440b      	add	r3, r1
 8007fae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d302      	bcc.n	8007fba <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fb6:	f000 fddd 	bl	8008b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	7d1b      	ldrb	r3, [r3, #20]
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d10b      	bne.n	8007fda <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007fc2:	4b61      	ldr	r3, [pc, #388]	; (8008148 <tcp_slowtmr+0x580>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b28      	cmp	r3, #40	; 0x28
 8007fce:	d904      	bls.n	8007fda <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	7d1b      	ldrb	r3, [r3, #20]
 8007fde:	2b09      	cmp	r3, #9
 8007fe0:	d10b      	bne.n	8007ffa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007fe2:	4b59      	ldr	r3, [pc, #356]	; (8008148 <tcp_slowtmr+0x580>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2bf0      	cmp	r3, #240	; 0xf0
 8007fee:	d904      	bls.n	8007ffa <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d060      	beq.n	80080c4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008008:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800800a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800800c:	f000 fbfe 	bl	800880c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	2b00      	cmp	r3, #0
 8008014:	d010      	beq.n	8008038 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008016:	4b50      	ldr	r3, [pc, #320]	; (8008158 <tcp_slowtmr+0x590>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800801c:	429a      	cmp	r2, r3
 800801e:	d106      	bne.n	800802e <tcp_slowtmr+0x466>
 8008020:	4b4e      	ldr	r3, [pc, #312]	; (800815c <tcp_slowtmr+0x594>)
 8008022:	f240 526d 	movw	r2, #1389	; 0x56d
 8008026:	494e      	ldr	r1, [pc, #312]	; (8008160 <tcp_slowtmr+0x598>)
 8008028:	484e      	ldr	r0, [pc, #312]	; (8008164 <tcp_slowtmr+0x59c>)
 800802a:	f007 fdf1 	bl	800fc10 <iprintf>
        prev->next = pcb->next;
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	60da      	str	r2, [r3, #12]
 8008036:	e00f      	b.n	8008058 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008038:	4b47      	ldr	r3, [pc, #284]	; (8008158 <tcp_slowtmr+0x590>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803e:	429a      	cmp	r2, r3
 8008040:	d006      	beq.n	8008050 <tcp_slowtmr+0x488>
 8008042:	4b46      	ldr	r3, [pc, #280]	; (800815c <tcp_slowtmr+0x594>)
 8008044:	f240 5271 	movw	r2, #1393	; 0x571
 8008048:	4947      	ldr	r1, [pc, #284]	; (8008168 <tcp_slowtmr+0x5a0>)
 800804a:	4846      	ldr	r0, [pc, #280]	; (8008164 <tcp_slowtmr+0x59c>)
 800804c:	f007 fde0 	bl	800fc10 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	4a40      	ldr	r2, [pc, #256]	; (8008158 <tcp_slowtmr+0x590>)
 8008056:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800805c:	2b00      	cmp	r3, #0
 800805e:	d013      	beq.n	8008088 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008066:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008068:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	3304      	adds	r3, #4
 800806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008070:	8ad2      	ldrh	r2, [r2, #22]
 8008072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008074:	8b09      	ldrh	r1, [r1, #24]
 8008076:	9102      	str	r1, [sp, #8]
 8008078:	9201      	str	r2, [sp, #4]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	462b      	mov	r3, r5
 800807e:	4622      	mov	r2, r4
 8008080:	4601      	mov	r1, r0
 8008082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008084:	f004 f98a 	bl	800c39c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	7d1b      	ldrb	r3, [r3, #20]
 8008092:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800809e:	6838      	ldr	r0, [r7, #0]
 80080a0:	f7ff f9f4 	bl	800748c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80080a4:	4b31      	ldr	r3, [pc, #196]	; (800816c <tcp_slowtmr+0x5a4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d004      	beq.n	80080ba <tcp_slowtmr+0x4f2>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f06f 010c 	mvn.w	r1, #12
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80080ba:	4b2c      	ldr	r3, [pc, #176]	; (800816c <tcp_slowtmr+0x5a4>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d037      	beq.n	8008132 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80080c2:	e592      	b.n	8007bea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	7f1b      	ldrb	r3, [r3, #28]
 80080d2:	3301      	adds	r3, #1
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	7f1a      	ldrb	r2, [r3, #28]
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	7f5b      	ldrb	r3, [r3, #29]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d325      	bcc.n	8008132 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	2200      	movs	r2, #0
 80080ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80080ec:	4b1f      	ldr	r3, [pc, #124]	; (800816c <tcp_slowtmr+0x5a4>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <tcp_slowtmr+0x54c>
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008104:	6912      	ldr	r2, [r2, #16]
 8008106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008112:	e002      	b.n	800811a <tcp_slowtmr+0x552>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800811a:	4b14      	ldr	r3, [pc, #80]	; (800816c <tcp_slowtmr+0x5a4>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d000      	beq.n	8008124 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008122:	e562      	b.n	8007bea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008124:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800812c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812e:	f003 fb81 	bl	800b834 <tcp_output>
  while (pcb != NULL) {
 8008132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f ad5e 	bne.w	8007bf6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <tcp_slowtmr+0x5a8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008144:	e069      	b.n	800821a <tcp_slowtmr+0x652>
 8008146:	bf00      	nop
 8008148:	200087d4 	.word	0x200087d4
 800814c:	000a4cb8 	.word	0x000a4cb8
 8008150:	10624dd3 	.word	0x10624dd3
 8008154:	000124f8 	.word	0x000124f8
 8008158:	200087e0 	.word	0x200087e0
 800815c:	08011b18 	.word	0x08011b18
 8008160:	08011f50 	.word	0x08011f50
 8008164:	08011b5c 	.word	0x08011b5c
 8008168:	08011f7c 	.word	0x08011f7c
 800816c:	200087e8 	.word	0x200087e8
 8008170:	200087e4 	.word	0x200087e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	7d1b      	ldrb	r3, [r3, #20]
 8008178:	2b0a      	cmp	r3, #10
 800817a:	d006      	beq.n	800818a <tcp_slowtmr+0x5c2>
 800817c:	4b2b      	ldr	r3, [pc, #172]	; (800822c <tcp_slowtmr+0x664>)
 800817e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008182:	492b      	ldr	r1, [pc, #172]	; (8008230 <tcp_slowtmr+0x668>)
 8008184:	482b      	ldr	r0, [pc, #172]	; (8008234 <tcp_slowtmr+0x66c>)
 8008186:	f007 fd43 	bl	800fc10 <iprintf>
    pcb_remove = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008190:	4b29      	ldr	r3, [pc, #164]	; (8008238 <tcp_slowtmr+0x670>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2bf0      	cmp	r3, #240	; 0xf0
 800819c:	d904      	bls.n	80081a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800819e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a2:	3301      	adds	r3, #1
 80081a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80081a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02f      	beq.n	8008210 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80081b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081b2:	f000 fb2b 	bl	800880c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d010      	beq.n	80081de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80081bc:	4b1f      	ldr	r3, [pc, #124]	; (800823c <tcp_slowtmr+0x674>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d106      	bne.n	80081d4 <tcp_slowtmr+0x60c>
 80081c6:	4b19      	ldr	r3, [pc, #100]	; (800822c <tcp_slowtmr+0x664>)
 80081c8:	f240 52af 	movw	r2, #1455	; 0x5af
 80081cc:	491c      	ldr	r1, [pc, #112]	; (8008240 <tcp_slowtmr+0x678>)
 80081ce:	4819      	ldr	r0, [pc, #100]	; (8008234 <tcp_slowtmr+0x66c>)
 80081d0:	f007 fd1e 	bl	800fc10 <iprintf>
        prev->next = pcb->next;
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	60da      	str	r2, [r3, #12]
 80081dc:	e00f      	b.n	80081fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80081de:	4b17      	ldr	r3, [pc, #92]	; (800823c <tcp_slowtmr+0x674>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d006      	beq.n	80081f6 <tcp_slowtmr+0x62e>
 80081e8:	4b10      	ldr	r3, [pc, #64]	; (800822c <tcp_slowtmr+0x664>)
 80081ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80081ee:	4915      	ldr	r1, [pc, #84]	; (8008244 <tcp_slowtmr+0x67c>)
 80081f0:	4810      	ldr	r0, [pc, #64]	; (8008234 <tcp_slowtmr+0x66c>)
 80081f2:	f007 fd0d 	bl	800fc10 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	4a10      	ldr	r2, [pc, #64]	; (800823c <tcp_slowtmr+0x674>)
 80081fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008208:	69f8      	ldr	r0, [r7, #28]
 800820a:	f7ff f93f 	bl	800748c <tcp_free>
 800820e:	e004      	b.n	800821a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1a9      	bne.n	8008174 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3730      	adds	r7, #48	; 0x30
 8008226:	46bd      	mov	sp, r7
 8008228:	bdb0      	pop	{r4, r5, r7, pc}
 800822a:	bf00      	nop
 800822c:	08011b18 	.word	0x08011b18
 8008230:	08011fa8 	.word	0x08011fa8
 8008234:	08011b5c 	.word	0x08011b5c
 8008238:	200087d4 	.word	0x200087d4
 800823c:	200087e4 	.word	0x200087e4
 8008240:	08011fd8 	.word	0x08011fd8
 8008244:	08012000 	.word	0x08012000

08008248 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800824e:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <tcp_fasttmr+0xbc>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	3301      	adds	r3, #1
 8008254:	b2da      	uxtb	r2, r3
 8008256:	4b2b      	ldr	r3, [pc, #172]	; (8008304 <tcp_fasttmr+0xbc>)
 8008258:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800825a:	4b2b      	ldr	r3, [pc, #172]	; (8008308 <tcp_fasttmr+0xc0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008260:	e048      	b.n	80082f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7f9a      	ldrb	r2, [r3, #30]
 8008266:	4b27      	ldr	r3, [pc, #156]	; (8008304 <tcp_fasttmr+0xbc>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d03f      	beq.n	80082ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800826e:	4b25      	ldr	r3, [pc, #148]	; (8008304 <tcp_fasttmr+0xbc>)
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8b5b      	ldrh	r3, [r3, #26]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d010      	beq.n	80082a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8b5b      	ldrh	r3, [r3, #26]
 8008286:	f043 0302 	orr.w	r3, r3, #2
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f003 facf 	bl	800b834 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	8b5b      	ldrh	r3, [r3, #26]
 800829a:	f023 0303 	bic.w	r3, r3, #3
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8b5b      	ldrh	r3, [r3, #26]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8b5b      	ldrh	r3, [r3, #26]
 80082b4:	f023 0308 	bic.w	r3, r3, #8
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fa78 	bl	80077b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80082d2:	4b0e      	ldr	r3, [pc, #56]	; (800830c <tcp_fasttmr+0xc4>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f819 	bl	8008310 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80082de:	4b0b      	ldr	r3, [pc, #44]	; (800830c <tcp_fasttmr+0xc4>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d000      	beq.n	80082e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80082e6:	e7b8      	b.n	800825a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	e002      	b.n	80082f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1b3      	bne.n	8008262 <tcp_fasttmr+0x1a>
    }
  }
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	200087ea 	.word	0x200087ea
 8008308:	200087e0 	.word	0x200087e0
 800830c:	200087e8 	.word	0x200087e8

08008310 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008310:	b590      	push	{r4, r7, lr}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <tcp_process_refused_data+0x22>
 800831e:	4b37      	ldr	r3, [pc, #220]	; (80083fc <tcp_process_refused_data+0xec>)
 8008320:	f240 6209 	movw	r2, #1545	; 0x609
 8008324:	4936      	ldr	r1, [pc, #216]	; (8008400 <tcp_process_refused_data+0xf0>)
 8008326:	4837      	ldr	r0, [pc, #220]	; (8008404 <tcp_process_refused_data+0xf4>)
 8008328:	f007 fc72 	bl	800fc10 <iprintf>
 800832c:	f06f 030f 	mvn.w	r3, #15
 8008330:	e060      	b.n	80083f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008336:	7b5b      	ldrb	r3, [r3, #13]
 8008338:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800833e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <tcp_process_refused_data+0x58>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6918      	ldr	r0, [r3, #16]
 800835a:	2300      	movs	r3, #0
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	47a0      	blx	r4
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
 8008366:	e007      	b.n	8008378 <tcp_process_refused_data+0x68>
 8008368:	2300      	movs	r3, #0
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	2000      	movs	r0, #0
 8008370:	f000 f8a4 	bl	80084bc <tcp_recv_null>
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d12a      	bne.n	80083d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d033      	beq.n	80083f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008392:	d005      	beq.n	80083a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008398:	3301      	adds	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <tcp_process_refused_data+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6918      	ldr	r0, [r3, #16]
 80083b4:	2300      	movs	r3, #0
 80083b6:	2200      	movs	r2, #0
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	47a0      	blx	r4
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e001      	b.n	80083c6 <tcp_process_refused_data+0xb6>
 80083c2:	2300      	movs	r3, #0
 80083c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80083c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ca:	f113 0f0d 	cmn.w	r3, #13
 80083ce:	d110      	bne.n	80083f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80083d0:	f06f 030c 	mvn.w	r3, #12
 80083d4:	e00e      	b.n	80083f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80083d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083da:	f113 0f0d 	cmn.w	r3, #13
 80083de:	d102      	bne.n	80083e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80083e0:	f06f 030c 	mvn.w	r3, #12
 80083e4:	e006      	b.n	80083f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80083ec:	f06f 0304 	mvn.w	r3, #4
 80083f0:	e000      	b.n	80083f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}
 80083fc:	08011b18 	.word	0x08011b18
 8008400:	08012028 	.word	0x08012028
 8008404:	08011b5c 	.word	0x08011b5c

08008408 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008410:	e007      	b.n	8008422 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f80a 	bl	8008432 <tcp_seg_free>
    seg = next;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1f4      	bne.n	8008412 <tcp_segs_free+0xa>
  }
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00c      	beq.n	800845a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fcdb 	bl	8006e08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	2003      	movs	r0, #3
 8008456:	f7fd fe61 	bl	800611c <memp_free>
  }
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <tcp_seg_copy+0x1c>
 8008472:	4b0f      	ldr	r3, [pc, #60]	; (80084b0 <tcp_seg_copy+0x4c>)
 8008474:	f240 6282 	movw	r2, #1666	; 0x682
 8008478:	490e      	ldr	r1, [pc, #56]	; (80084b4 <tcp_seg_copy+0x50>)
 800847a:	480f      	ldr	r0, [pc, #60]	; (80084b8 <tcp_seg_copy+0x54>)
 800847c:	f007 fbc8 	bl	800fc10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008480:	2003      	movs	r0, #3
 8008482:	f7fd fddb 	bl	800603c <memp_malloc>
 8008486:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <tcp_seg_copy+0x2e>
    return NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	e00a      	b.n	80084a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008492:	2210      	movs	r2, #16
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f007 fb8a 	bl	800fbb0 <memcpy>
  pbuf_ref(cseg->p);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fd51 	bl	8006f48 <pbuf_ref>
  return cseg;
 80084a6:	68fb      	ldr	r3, [r7, #12]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	08011b18 	.word	0x08011b18
 80084b4:	0801206c 	.word	0x0801206c
 80084b8:	08011b5c 	.word	0x08011b5c

080084bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <tcp_recv_null+0x28>
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <tcp_recv_null+0x60>)
 80084d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80084d6:	4912      	ldr	r1, [pc, #72]	; (8008520 <tcp_recv_null+0x64>)
 80084d8:	4812      	ldr	r0, [pc, #72]	; (8008524 <tcp_recv_null+0x68>)
 80084da:	f007 fb99 	bl	800fc10 <iprintf>
 80084de:	f06f 030f 	mvn.w	r3, #15
 80084e2:	e016      	b.n	8008512 <tcp_recv_null+0x56>

  if (p != NULL) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	891b      	ldrh	r3, [r3, #8]
 80084ee:	4619      	mov	r1, r3
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f7ff fb19 	bl	8007b28 <tcp_recved>
    pbuf_free(p);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fe fc86 	bl	8006e08 <pbuf_free>
 80084fc:	e008      	b.n	8008510 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80084fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008506:	68b8      	ldr	r0, [r7, #8]
 8008508:	f7ff f9be 	bl	8007888 <tcp_close>
 800850c:	4603      	mov	r3, r0
 800850e:	e000      	b.n	8008512 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	08011b18 	.word	0x08011b18
 8008520:	08012088 	.word	0x08012088
 8008524:	08011b5c 	.word	0x08011b5c

08008528 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008536:	2b00      	cmp	r3, #0
 8008538:	db01      	blt.n	800853e <tcp_kill_prio+0x16>
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	e000      	b.n	8008540 <tcp_kill_prio+0x18>
 800853e:	237f      	movs	r3, #127	; 0x7f
 8008540:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008542:	7afb      	ldrb	r3, [r7, #11]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d034      	beq.n	80085b2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	3b01      	subs	r3, #1
 800854c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008556:	4b19      	ldr	r3, [pc, #100]	; (80085bc <tcp_kill_prio+0x94>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	e01f      	b.n	800859e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	7d5b      	ldrb	r3, [r3, #21]
 8008562:	7afa      	ldrb	r2, [r7, #11]
 8008564:	429a      	cmp	r2, r3
 8008566:	d80c      	bhi.n	8008582 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800856c:	7afa      	ldrb	r2, [r7, #11]
 800856e:	429a      	cmp	r2, r3
 8008570:	d112      	bne.n	8008598 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008572:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <tcp_kill_prio+0x98>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d80a      	bhi.n	8008598 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008582:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <tcp_kill_prio+0x98>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	7d5b      	ldrb	r3, [r3, #21]
 8008596:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1dc      	bne.n	800855e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80085aa:	6938      	ldr	r0, [r7, #16]
 80085ac:	f7ff fa56 	bl	8007a5c <tcp_abort>
 80085b0:	e000      	b.n	80085b4 <tcp_kill_prio+0x8c>
    return;
 80085b2:	bf00      	nop
  }
}
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200087e0 	.word	0x200087e0
 80085c0:	200087d4 	.word	0x200087d4

080085c4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80085ce:	79fb      	ldrb	r3, [r7, #7]
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d009      	beq.n	80085e8 <tcp_kill_state+0x24>
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d006      	beq.n	80085e8 <tcp_kill_state+0x24>
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <tcp_kill_state+0x80>)
 80085dc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80085e0:	4919      	ldr	r1, [pc, #100]	; (8008648 <tcp_kill_state+0x84>)
 80085e2:	481a      	ldr	r0, [pc, #104]	; (800864c <tcp_kill_state+0x88>)
 80085e4:	f007 fb14 	bl	800fc10 <iprintf>

  inactivity = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <tcp_kill_state+0x8c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e017      	b.n	8008628 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	7d1b      	ldrb	r3, [r3, #20]
 80085fc:	79fa      	ldrb	r2, [r7, #7]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d10f      	bne.n	8008622 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008602:	4b14      	ldr	r3, [pc, #80]	; (8008654 <tcp_kill_state+0x90>)
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	429a      	cmp	r2, r3
 8008610:	d807      	bhi.n	8008622 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008612:	4b10      	ldr	r3, [pc, #64]	; (8008654 <tcp_kill_state+0x90>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e4      	bne.n	80085f8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008634:	2100      	movs	r1, #0
 8008636:	6938      	ldr	r0, [r7, #16]
 8008638:	f7ff f952 	bl	80078e0 <tcp_abandon>
  }
}
 800863c:	bf00      	nop
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	08011b18 	.word	0x08011b18
 8008648:	080120a4 	.word	0x080120a4
 800864c:	08011b5c 	.word	0x08011b5c
 8008650:	200087e0 	.word	0x200087e0
 8008654:	200087d4 	.word	0x200087d4

08008658 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <tcp_kill_timewait+0x58>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	e012      	b.n	8008694 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800866e:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <tcp_kill_timewait+0x5c>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d807      	bhi.n	800868e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <tcp_kill_timewait+0x5c>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e9      	bne.n	800866e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f7ff f9db 	bl	8007a5c <tcp_abort>
  }
}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	200087e4 	.word	0x200087e4
 80086b4:	200087d4 	.word	0x200087d4

080086b8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <tcp_handle_closepend+0x48>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80086c4:	e014      	b.n	80086f0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8b5b      	ldrh	r3, [r3, #26]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d009      	beq.n	80086ec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8b5b      	ldrh	r3, [r3, #26]
 80086dc:	f023 0308 	bic.w	r3, r3, #8
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff f864 	bl	80077b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e7      	bne.n	80086c6 <tcp_handle_closepend+0xe>
  }
}
 80086f6:	bf00      	nop
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200087e0 	.word	0x200087e0

08008704 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800870e:	2001      	movs	r0, #1
 8008710:	f7fd fc94 	bl	800603c <memp_malloc>
 8008714:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d126      	bne.n	800876a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800871c:	f7ff ffcc 	bl	80086b8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008720:	f7ff ff9a 	bl	8008658 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008724:	2001      	movs	r0, #1
 8008726:	f7fd fc89 	bl	800603c <memp_malloc>
 800872a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d11b      	bne.n	800876a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008732:	2009      	movs	r0, #9
 8008734:	f7ff ff46 	bl	80085c4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008738:	2001      	movs	r0, #1
 800873a:	f7fd fc7f 	bl	800603c <memp_malloc>
 800873e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d111      	bne.n	800876a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008746:	2008      	movs	r0, #8
 8008748:	f7ff ff3c 	bl	80085c4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800874c:	2001      	movs	r0, #1
 800874e:	f7fd fc75 	bl	800603c <memp_malloc>
 8008752:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d107      	bne.n	800876a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800875a:	79fb      	ldrb	r3, [r7, #7]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fee3 	bl	8008528 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008762:	2001      	movs	r0, #1
 8008764:	f7fd fc6a 	bl	800603c <memp_malloc>
 8008768:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d03f      	beq.n	80087f0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008770:	229c      	movs	r2, #156	; 0x9c
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f007 fa43 	bl	800fc00 <memset>
    pcb->prio = prio;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	79fa      	ldrb	r2, [r7, #7]
 800877e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008786:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008790:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	22ff      	movs	r2, #255	; 0xff
 800879e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80087a6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2206      	movs	r2, #6
 80087ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2206      	movs	r2, #6
 80087b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087bc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80087c6:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <tcp_alloc+0xf8>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <tcp_alloc+0xfc>)
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80087dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4a08      	ldr	r2, [pc, #32]	; (8008804 <tcp_alloc+0x100>)
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a07      	ldr	r2, [pc, #28]	; (8008808 <tcp_alloc+0x104>)
 80087ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80087f0:	68fb      	ldr	r3, [r7, #12]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200087d4 	.word	0x200087d4
 8008800:	200087ea 	.word	0x200087ea
 8008804:	080084bd 	.word	0x080084bd
 8008808:	006ddd00 	.word	0x006ddd00

0800880c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d107      	bne.n	800882a <tcp_pcb_purge+0x1e>
 800881a:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <tcp_pcb_purge+0x94>)
 800881c:	f640 0251 	movw	r2, #2129	; 0x851
 8008820:	4920      	ldr	r1, [pc, #128]	; (80088a4 <tcp_pcb_purge+0x98>)
 8008822:	4821      	ldr	r0, [pc, #132]	; (80088a8 <tcp_pcb_purge+0x9c>)
 8008824:	f007 f9f4 	bl	800fc10 <iprintf>
 8008828:	e037      	b.n	800889a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7d1b      	ldrb	r3, [r3, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d033      	beq.n	800889a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d02f      	beq.n	800889a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800883e:	2b01      	cmp	r3, #1
 8008840:	d02b      	beq.n	800889a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fada 	bl	8006e08 <pbuf_free>
      pcb->refused_data = NULL;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f986 	bl	8008b74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fdc7 	bl	8008408 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff fdc2 	bl	8008408 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	66da      	str	r2, [r3, #108]	; 0x6c
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	08011b18 	.word	0x08011b18
 80088a4:	08012164 	.word	0x08012164
 80088a8:	08011b5c 	.word	0x08011b5c

080088ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <tcp_pcb_remove+0x1e>
 80088bc:	4b3e      	ldr	r3, [pc, #248]	; (80089b8 <tcp_pcb_remove+0x10c>)
 80088be:	f640 0283 	movw	r2, #2179	; 0x883
 80088c2:	493e      	ldr	r1, [pc, #248]	; (80089bc <tcp_pcb_remove+0x110>)
 80088c4:	483e      	ldr	r0, [pc, #248]	; (80089c0 <tcp_pcb_remove+0x114>)
 80088c6:	f007 f9a3 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <tcp_pcb_remove+0x32>
 80088d0:	4b39      	ldr	r3, [pc, #228]	; (80089b8 <tcp_pcb_remove+0x10c>)
 80088d2:	f640 0284 	movw	r2, #2180	; 0x884
 80088d6:	493b      	ldr	r1, [pc, #236]	; (80089c4 <tcp_pcb_remove+0x118>)
 80088d8:	4839      	ldr	r0, [pc, #228]	; (80089c0 <tcp_pcb_remove+0x114>)
 80088da:	f007 f999 	bl	800fc10 <iprintf>

  TCP_RMV(pcblist, pcb);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d105      	bne.n	80088f4 <tcp_pcb_remove+0x48>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
 80088f2:	e013      	b.n	800891c <tcp_pcb_remove+0x70>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e00c      	b.n	8008916 <tcp_pcb_remove+0x6a>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d104      	bne.n	8008910 <tcp_pcb_remove+0x64>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68da      	ldr	r2, [r3, #12]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	e005      	b.n	800891c <tcp_pcb_remove+0x70>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1ef      	bne.n	80088fc <tcp_pcb_remove+0x50>
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2200      	movs	r2, #0
 8008920:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008922:	6838      	ldr	r0, [r7, #0]
 8008924:	f7ff ff72 	bl	800880c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	7d1b      	ldrb	r3, [r3, #20]
 800892c:	2b0a      	cmp	r3, #10
 800892e:	d013      	beq.n	8008958 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008934:	2b01      	cmp	r3, #1
 8008936:	d00f      	beq.n	8008958 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	8b5b      	ldrh	r3, [r3, #26]
 800893c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	8b5b      	ldrh	r3, [r3, #26]
 8008948:	f043 0302 	orr.w	r3, r3, #2
 800894c:	b29a      	uxth	r2, r3
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008952:	6838      	ldr	r0, [r7, #0]
 8008954:	f002 ff6e 	bl	800b834 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	7d1b      	ldrb	r3, [r3, #20]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d020      	beq.n	80089a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d006      	beq.n	8008976 <tcp_pcb_remove+0xca>
 8008968:	4b13      	ldr	r3, [pc, #76]	; (80089b8 <tcp_pcb_remove+0x10c>)
 800896a:	f640 0293 	movw	r2, #2195	; 0x893
 800896e:	4916      	ldr	r1, [pc, #88]	; (80089c8 <tcp_pcb_remove+0x11c>)
 8008970:	4813      	ldr	r0, [pc, #76]	; (80089c0 <tcp_pcb_remove+0x114>)
 8008972:	f007 f94d 	bl	800fc10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897a:	2b00      	cmp	r3, #0
 800897c:	d006      	beq.n	800898c <tcp_pcb_remove+0xe0>
 800897e:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <tcp_pcb_remove+0x10c>)
 8008980:	f640 0294 	movw	r2, #2196	; 0x894
 8008984:	4911      	ldr	r1, [pc, #68]	; (80089cc <tcp_pcb_remove+0x120>)
 8008986:	480e      	ldr	r0, [pc, #56]	; (80089c0 <tcp_pcb_remove+0x114>)
 8008988:	f007 f942 	bl	800fc10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <tcp_pcb_remove+0xf6>
 8008994:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <tcp_pcb_remove+0x10c>)
 8008996:	f640 0296 	movw	r2, #2198	; 0x896
 800899a:	490d      	ldr	r1, [pc, #52]	; (80089d0 <tcp_pcb_remove+0x124>)
 800899c:	4808      	ldr	r0, [pc, #32]	; (80089c0 <tcp_pcb_remove+0x114>)
 800899e:	f007 f937 	bl	800fc10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	08011b18 	.word	0x08011b18
 80089bc:	08012180 	.word	0x08012180
 80089c0:	08011b5c 	.word	0x08011b5c
 80089c4:	0801219c 	.word	0x0801219c
 80089c8:	080121bc 	.word	0x080121bc
 80089cc:	080121d4 	.word	0x080121d4
 80089d0:	080121f0 	.word	0x080121f0

080089d4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <tcp_next_iss+0x1c>
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <tcp_next_iss+0x38>)
 80089e4:	f640 02af 	movw	r2, #2223	; 0x8af
 80089e8:	4909      	ldr	r1, [pc, #36]	; (8008a10 <tcp_next_iss+0x3c>)
 80089ea:	480a      	ldr	r0, [pc, #40]	; (8008a14 <tcp_next_iss+0x40>)
 80089ec:	f007 f910 	bl	800fc10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <tcp_next_iss+0x44>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <tcp_next_iss+0x48>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4413      	add	r3, r2
 80089fa:	4a07      	ldr	r2, [pc, #28]	; (8008a18 <tcp_next_iss+0x44>)
 80089fc:	6013      	str	r3, [r2, #0]
  return iss;
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <tcp_next_iss+0x44>)
 8008a00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08011b18 	.word	0x08011b18
 8008a10:	08012208 	.word	0x08012208
 8008a14:	08011b5c 	.word	0x08011b5c
 8008a18:	20000024 	.word	0x20000024
 8008a1c:	200087d4 	.word	0x200087d4

08008a20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <tcp_eff_send_mss_netif+0x22>
 8008a34:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <tcp_eff_send_mss_netif+0x68>)
 8008a36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008a3a:	4914      	ldr	r1, [pc, #80]	; (8008a8c <tcp_eff_send_mss_netif+0x6c>)
 8008a3c:	4814      	ldr	r0, [pc, #80]	; (8008a90 <tcp_eff_send_mss_netif+0x70>)
 8008a3e:	f007 f8e7 	bl	800fc10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008a48:	89fb      	ldrh	r3, [r7, #14]
 8008a4a:	e019      	b.n	8008a80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008a52:	8afb      	ldrh	r3, [r7, #22]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d012      	beq.n	8008a7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008a58:	2328      	movs	r3, #40	; 0x28
 8008a5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008a5c:	8afa      	ldrh	r2, [r7, #22]
 8008a5e:	8abb      	ldrh	r3, [r7, #20]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d904      	bls.n	8008a6e <tcp_eff_send_mss_netif+0x4e>
 8008a64:	8afa      	ldrh	r2, [r7, #22]
 8008a66:	8abb      	ldrh	r3, [r7, #20]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	e000      	b.n	8008a70 <tcp_eff_send_mss_netif+0x50>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008a72:	8a7a      	ldrh	r2, [r7, #18]
 8008a74:	89fb      	ldrh	r3, [r7, #14]
 8008a76:	4293      	cmp	r3, r2
 8008a78:	bf28      	it	cs
 8008a7a:	4613      	movcs	r3, r2
 8008a7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	08011b18 	.word	0x08011b18
 8008a8c:	08012224 	.word	0x08012224
 8008a90:	08011b5c 	.word	0x08011b5c

08008a94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d119      	bne.n	8008adc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008aa8:	4b10      	ldr	r3, [pc, #64]	; (8008aec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008aaa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008aae:	4910      	ldr	r1, [pc, #64]	; (8008af0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008ab0:	4810      	ldr	r0, [pc, #64]	; (8008af4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008ab2:	f007 f8ad 	bl	800fc10 <iprintf>

  while (pcb != NULL) {
 8008ab6:	e011      	b.n	8008adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d108      	bne.n	8008ad6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7fe ffc6 	bl	8007a5c <tcp_abort>
      pcb = next;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e002      	b.n	8008adc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1ea      	bne.n	8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	08011b18 	.word	0x08011b18
 8008af0:	0801224c 	.word	0x0801224c
 8008af4:	08011b5c 	.word	0x08011b5c

08008af8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d02a      	beq.n	8008b5e <tcp_netif_ip_addr_changed+0x66>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d026      	beq.n	8008b5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008b10:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <tcp_netif_ip_addr_changed+0x70>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff ffbc 	bl	8008a94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008b1c:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <tcp_netif_ip_addr_changed+0x74>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff ffb6 	bl	8008a94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d017      	beq.n	8008b5e <tcp_netif_ip_addr_changed+0x66>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d013      	beq.n	8008b5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b36:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <tcp_netif_ip_addr_changed+0x78>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	e00c      	b.n	8008b58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d103      	bne.n	8008b52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1ef      	bne.n	8008b3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	200087e0 	.word	0x200087e0
 8008b6c:	200087d8 	.word	0x200087d8
 8008b70:	200087dc 	.word	0x200087dc

08008b74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff fc3d 	bl	8008408 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b08d      	sub	sp, #52	; 0x34
 8008ba0:	af04      	add	r7, sp, #16
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <tcp_input+0x1c>
 8008bac:	4b9b      	ldr	r3, [pc, #620]	; (8008e1c <tcp_input+0x280>)
 8008bae:	2283      	movs	r2, #131	; 0x83
 8008bb0:	499b      	ldr	r1, [pc, #620]	; (8008e20 <tcp_input+0x284>)
 8008bb2:	489c      	ldr	r0, [pc, #624]	; (8008e24 <tcp_input+0x288>)
 8008bb4:	f007 f82c 	bl	800fc10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4a9a      	ldr	r2, [pc, #616]	; (8008e28 <tcp_input+0x28c>)
 8008bbe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	895b      	ldrh	r3, [r3, #10]
 8008bc4:	2b13      	cmp	r3, #19
 8008bc6:	f240 83d1 	bls.w	800936c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008bca:	4b98      	ldr	r3, [pc, #608]	; (8008e2c <tcp_input+0x290>)
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	4a97      	ldr	r2, [pc, #604]	; (8008e2c <tcp_input+0x290>)
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f005 ffd1 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 83c7 	bne.w	8009370 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008be2:	4b92      	ldr	r3, [pc, #584]	; (8008e2c <tcp_input+0x290>)
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008bea:	2be0      	cmp	r3, #224	; 0xe0
 8008bec:	f000 83c0 	beq.w	8009370 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008bf0:	4b8d      	ldr	r3, [pc, #564]	; (8008e28 <tcp_input+0x28c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	899b      	ldrh	r3, [r3, #12]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fc fda7 	bl	800574c <lwip_htons>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	0b1b      	lsrs	r3, r3, #12
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008c0a:	7cbb      	ldrb	r3, [r7, #18]
 8008c0c:	2b13      	cmp	r3, #19
 8008c0e:	f240 83b1 	bls.w	8009374 <tcp_input+0x7d8>
 8008c12:	7cbb      	ldrb	r3, [r7, #18]
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	891b      	ldrh	r3, [r3, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	f200 83aa 	bhi.w	8009374 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008c20:	7cbb      	ldrb	r3, [r7, #18]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b14      	subs	r3, #20
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	4b81      	ldr	r3, [pc, #516]	; (8008e30 <tcp_input+0x294>)
 8008c2a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008c2c:	4b81      	ldr	r3, [pc, #516]	; (8008e34 <tcp_input+0x298>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	895a      	ldrh	r2, [r3, #10]
 8008c36:	7cbb      	ldrb	r3, [r7, #18]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d309      	bcc.n	8008c52 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008c3e:	4b7c      	ldr	r3, [pc, #496]	; (8008e30 <tcp_input+0x294>)
 8008c40:	881a      	ldrh	r2, [r3, #0]
 8008c42:	4b7d      	ldr	r3, [pc, #500]	; (8008e38 <tcp_input+0x29c>)
 8008c44:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008c46:	7cbb      	ldrb	r3, [r7, #18]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fe f856 	bl	8006cfc <pbuf_remove_header>
 8008c50:	e04e      	b.n	8008cf0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <tcp_input+0xca>
 8008c5a:	4b70      	ldr	r3, [pc, #448]	; (8008e1c <tcp_input+0x280>)
 8008c5c:	22c2      	movs	r2, #194	; 0xc2
 8008c5e:	4977      	ldr	r1, [pc, #476]	; (8008e3c <tcp_input+0x2a0>)
 8008c60:	4870      	ldr	r0, [pc, #448]	; (8008e24 <tcp_input+0x288>)
 8008c62:	f006 ffd5 	bl	800fc10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008c66:	2114      	movs	r1, #20
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe f847 	bl	8006cfc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	895a      	ldrh	r2, [r3, #10]
 8008c72:	4b71      	ldr	r3, [pc, #452]	; (8008e38 <tcp_input+0x29c>)
 8008c74:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008c76:	4b6e      	ldr	r3, [pc, #440]	; (8008e30 <tcp_input+0x294>)
 8008c78:	881a      	ldrh	r2, [r3, #0]
 8008c7a:	4b6f      	ldr	r3, [pc, #444]	; (8008e38 <tcp_input+0x29c>)
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008c82:	4b6d      	ldr	r3, [pc, #436]	; (8008e38 <tcp_input+0x29c>)
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fe f837 	bl	8006cfc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	895b      	ldrh	r3, [r3, #10]
 8008c94:	8a3a      	ldrh	r2, [r7, #16]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	f200 836e 	bhi.w	8009378 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4a64      	ldr	r2, [pc, #400]	; (8008e34 <tcp_input+0x298>)
 8008ca4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	8a3a      	ldrh	r2, [r7, #16]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe f824 	bl	8006cfc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	891a      	ldrh	r2, [r3, #8]
 8008cb8:	8a3b      	ldrh	r3, [r7, #16]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	895b      	ldrh	r3, [r3, #10]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <tcp_input+0x13a>
 8008cca:	4b54      	ldr	r3, [pc, #336]	; (8008e1c <tcp_input+0x280>)
 8008ccc:	22df      	movs	r2, #223	; 0xdf
 8008cce:	495c      	ldr	r1, [pc, #368]	; (8008e40 <tcp_input+0x2a4>)
 8008cd0:	4854      	ldr	r0, [pc, #336]	; (8008e24 <tcp_input+0x288>)
 8008cd2:	f006 ff9d 	bl	800fc10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	891a      	ldrh	r2, [r3, #8]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	891b      	ldrh	r3, [r3, #8]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d005      	beq.n	8008cf0 <tcp_input+0x154>
 8008ce4:	4b4d      	ldr	r3, [pc, #308]	; (8008e1c <tcp_input+0x280>)
 8008ce6:	22e0      	movs	r2, #224	; 0xe0
 8008ce8:	4956      	ldr	r1, [pc, #344]	; (8008e44 <tcp_input+0x2a8>)
 8008cea:	484e      	ldr	r0, [pc, #312]	; (8008e24 <tcp_input+0x288>)
 8008cec:	f006 ff90 	bl	800fc10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008cf0:	4b4d      	ldr	r3, [pc, #308]	; (8008e28 <tcp_input+0x28c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	4a4b      	ldr	r2, [pc, #300]	; (8008e28 <tcp_input+0x28c>)
 8008cfa:	6814      	ldr	r4, [r2, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fc fd25 	bl	800574c <lwip_htons>
 8008d02:	4603      	mov	r3, r0
 8008d04:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008d06:	4b48      	ldr	r3, [pc, #288]	; (8008e28 <tcp_input+0x28c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	885b      	ldrh	r3, [r3, #2]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	4a46      	ldr	r2, [pc, #280]	; (8008e28 <tcp_input+0x28c>)
 8008d10:	6814      	ldr	r4, [r2, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fc fd1a 	bl	800574c <lwip_htons>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008d1c:	4b42      	ldr	r3, [pc, #264]	; (8008e28 <tcp_input+0x28c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	4a41      	ldr	r2, [pc, #260]	; (8008e28 <tcp_input+0x28c>)
 8008d24:	6814      	ldr	r4, [r2, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fc fd25 	bl	8005776 <lwip_htonl>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	6063      	str	r3, [r4, #4]
 8008d30:	6863      	ldr	r3, [r4, #4]
 8008d32:	4a45      	ldr	r2, [pc, #276]	; (8008e48 <tcp_input+0x2ac>)
 8008d34:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d36:	4b3c      	ldr	r3, [pc, #240]	; (8008e28 <tcp_input+0x28c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	4a3a      	ldr	r2, [pc, #232]	; (8008e28 <tcp_input+0x28c>)
 8008d3e:	6814      	ldr	r4, [r2, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fc fd18 	bl	8005776 <lwip_htonl>
 8008d46:	4603      	mov	r3, r0
 8008d48:	60a3      	str	r3, [r4, #8]
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	4a3f      	ldr	r2, [pc, #252]	; (8008e4c <tcp_input+0x2b0>)
 8008d4e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <tcp_input+0x28c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	89db      	ldrh	r3, [r3, #14]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4a33      	ldr	r2, [pc, #204]	; (8008e28 <tcp_input+0x28c>)
 8008d5a:	6814      	ldr	r4, [r2, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fc fcf5 	bl	800574c <lwip_htons>
 8008d62:	4603      	mov	r3, r0
 8008d64:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008d66:	4b30      	ldr	r3, [pc, #192]	; (8008e28 <tcp_input+0x28c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	899b      	ldrh	r3, [r3, #12]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fc fcec 	bl	800574c <lwip_htons>
 8008d74:	4603      	mov	r3, r0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d7c:	b2da      	uxtb	r2, r3
 8008d7e:	4b34      	ldr	r3, [pc, #208]	; (8008e50 <tcp_input+0x2b4>)
 8008d80:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	891a      	ldrh	r2, [r3, #8]
 8008d86:	4b33      	ldr	r3, [pc, #204]	; (8008e54 <tcp_input+0x2b8>)
 8008d88:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008d8a:	4b31      	ldr	r3, [pc, #196]	; (8008e50 <tcp_input+0x2b4>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00c      	beq.n	8008db0 <tcp_input+0x214>
    tcplen++;
 8008d96:	4b2f      	ldr	r3, [pc, #188]	; (8008e54 <tcp_input+0x2b8>)
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	4b2d      	ldr	r3, [pc, #180]	; (8008e54 <tcp_input+0x2b8>)
 8008da0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	891a      	ldrh	r2, [r3, #8]
 8008da6:	4b2b      	ldr	r3, [pc, #172]	; (8008e54 <tcp_input+0x2b8>)
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	f200 82e6 	bhi.w	800937c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db4:	4b28      	ldr	r3, [pc, #160]	; (8008e58 <tcp_input+0x2bc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	e09d      	b.n	8008ef8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	7d1b      	ldrb	r3, [r3, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <tcp_input+0x234>
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <tcp_input+0x280>)
 8008dc6:	22fb      	movs	r2, #251	; 0xfb
 8008dc8:	4924      	ldr	r1, [pc, #144]	; (8008e5c <tcp_input+0x2c0>)
 8008dca:	4816      	ldr	r0, [pc, #88]	; (8008e24 <tcp_input+0x288>)
 8008dcc:	f006 ff20 	bl	800fc10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	7d1b      	ldrb	r3, [r3, #20]
 8008dd4:	2b0a      	cmp	r3, #10
 8008dd6:	d105      	bne.n	8008de4 <tcp_input+0x248>
 8008dd8:	4b10      	ldr	r3, [pc, #64]	; (8008e1c <tcp_input+0x280>)
 8008dda:	22fc      	movs	r2, #252	; 0xfc
 8008ddc:	4920      	ldr	r1, [pc, #128]	; (8008e60 <tcp_input+0x2c4>)
 8008dde:	4811      	ldr	r0, [pc, #68]	; (8008e24 <tcp_input+0x288>)
 8008de0:	f006 ff16 	bl	800fc10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d105      	bne.n	8008df8 <tcp_input+0x25c>
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <tcp_input+0x280>)
 8008dee:	22fd      	movs	r2, #253	; 0xfd
 8008df0:	491c      	ldr	r1, [pc, #112]	; (8008e64 <tcp_input+0x2c8>)
 8008df2:	480c      	ldr	r0, [pc, #48]	; (8008e24 <tcp_input+0x288>)
 8008df4:	f006 ff0c 	bl	800fc10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	7a1b      	ldrb	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d033      	beq.n	8008e68 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	7a1a      	ldrb	r2, [r3, #8]
 8008e04:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <tcp_input+0x290>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d029      	beq.n	8008e68 <tcp_input+0x2cc>
      prev = pcb;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	61bb      	str	r3, [r7, #24]
      continue;
 8008e18:	e06b      	b.n	8008ef2 <tcp_input+0x356>
 8008e1a:	bf00      	nop
 8008e1c:	08012280 	.word	0x08012280
 8008e20:	080122b4 	.word	0x080122b4
 8008e24:	080122cc 	.word	0x080122cc
 8008e28:	200087fc 	.word	0x200087fc
 8008e2c:	20005264 	.word	0x20005264
 8008e30:	20008800 	.word	0x20008800
 8008e34:	20008804 	.word	0x20008804
 8008e38:	20008802 	.word	0x20008802
 8008e3c:	080122f4 	.word	0x080122f4
 8008e40:	08012304 	.word	0x08012304
 8008e44:	08012310 	.word	0x08012310
 8008e48:	2000880c 	.word	0x2000880c
 8008e4c:	20008810 	.word	0x20008810
 8008e50:	20008818 	.word	0x20008818
 8008e54:	20008816 	.word	0x20008816
 8008e58:	200087e0 	.word	0x200087e0
 8008e5c:	08012330 	.word	0x08012330
 8008e60:	08012358 	.word	0x08012358
 8008e64:	08012384 	.word	0x08012384
    }

    if (pcb->remote_port == tcphdr->src &&
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	8b1a      	ldrh	r2, [r3, #24]
 8008e6c:	4b72      	ldr	r3, [pc, #456]	; (8009038 <tcp_input+0x49c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d13a      	bne.n	8008eee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	8ada      	ldrh	r2, [r3, #22]
 8008e7c:	4b6e      	ldr	r3, [pc, #440]	; (8009038 <tcp_input+0x49c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	885b      	ldrh	r3, [r3, #2]
 8008e82:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d132      	bne.n	8008eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b6b      	ldr	r3, [pc, #428]	; (800903c <tcp_input+0x4a0>)
 8008e8e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d12c      	bne.n	8008eee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b68      	ldr	r3, [pc, #416]	; (800903c <tcp_input+0x4a0>)
 8008e9a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d126      	bne.n	8008eee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d106      	bne.n	8008eb8 <tcp_input+0x31c>
 8008eaa:	4b65      	ldr	r3, [pc, #404]	; (8009040 <tcp_input+0x4a4>)
 8008eac:	f240 120d 	movw	r2, #269	; 0x10d
 8008eb0:	4964      	ldr	r1, [pc, #400]	; (8009044 <tcp_input+0x4a8>)
 8008eb2:	4865      	ldr	r0, [pc, #404]	; (8009048 <tcp_input+0x4ac>)
 8008eb4:	f006 feac 	bl	800fc10 <iprintf>
      if (prev != NULL) {
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <tcp_input+0x338>
        prev->next = pcb->next;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008ec6:	4b61      	ldr	r3, [pc, #388]	; (800904c <tcp_input+0x4b0>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008ece:	4a5f      	ldr	r2, [pc, #380]	; (800904c <tcp_input+0x4b0>)
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d111      	bne.n	8008f02 <tcp_input+0x366>
 8008ede:	4b58      	ldr	r3, [pc, #352]	; (8009040 <tcp_input+0x4a4>)
 8008ee0:	f240 1215 	movw	r2, #277	; 0x115
 8008ee4:	495a      	ldr	r1, [pc, #360]	; (8009050 <tcp_input+0x4b4>)
 8008ee6:	4858      	ldr	r0, [pc, #352]	; (8009048 <tcp_input+0x4ac>)
 8008ee8:	f006 fe92 	bl	800fc10 <iprintf>
      break;
 8008eec:	e009      	b.n	8008f02 <tcp_input+0x366>
    }
    prev = pcb;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	61fb      	str	r3, [r7, #28]
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f47f af5e 	bne.w	8008dbc <tcp_input+0x220>
 8008f00:	e000      	b.n	8008f04 <tcp_input+0x368>
      break;
 8008f02:	bf00      	nop
  }

  if (pcb == NULL) {
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 80aa 	bne.w	8009060 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f0c:	4b51      	ldr	r3, [pc, #324]	; (8009054 <tcp_input+0x4b8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	e03f      	b.n	8008f94 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	7d1b      	ldrb	r3, [r3, #20]
 8008f18:	2b0a      	cmp	r3, #10
 8008f1a:	d006      	beq.n	8008f2a <tcp_input+0x38e>
 8008f1c:	4b48      	ldr	r3, [pc, #288]	; (8009040 <tcp_input+0x4a4>)
 8008f1e:	f240 121f 	movw	r2, #287	; 0x11f
 8008f22:	494d      	ldr	r1, [pc, #308]	; (8009058 <tcp_input+0x4bc>)
 8008f24:	4848      	ldr	r0, [pc, #288]	; (8009048 <tcp_input+0x4ac>)
 8008f26:	f006 fe73 	bl	800fc10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	7a1b      	ldrb	r3, [r3, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d009      	beq.n	8008f46 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	7a1a      	ldrb	r2, [r3, #8]
 8008f36:	4b41      	ldr	r3, [pc, #260]	; (800903c <tcp_input+0x4a0>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f3e:	3301      	adds	r3, #1
 8008f40:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d122      	bne.n	8008f8c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	8b1a      	ldrh	r2, [r3, #24]
 8008f4a:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <tcp_input+0x49c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d11b      	bne.n	8008f8e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	8ada      	ldrh	r2, [r3, #22]
 8008f5a:	4b37      	ldr	r3, [pc, #220]	; (8009038 <tcp_input+0x49c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	885b      	ldrh	r3, [r3, #2]
 8008f60:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d113      	bne.n	8008f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	4b34      	ldr	r3, [pc, #208]	; (800903c <tcp_input+0x4a0>)
 8008f6c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d10d      	bne.n	8008f8e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	4b31      	ldr	r3, [pc, #196]	; (800903c <tcp_input+0x4a0>)
 8008f78:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d107      	bne.n	8008f8e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008f7e:	69f8      	ldr	r0, [r7, #28]
 8008f80:	f000 fb56 	bl	8009630 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7fd ff3f 	bl	8006e08 <pbuf_free>
        return;
 8008f8a:	e1fd      	b.n	8009388 <tcp_input+0x7ec>
        continue;
 8008f8c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1bc      	bne.n	8008f14 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f9e:	4b2f      	ldr	r3, [pc, #188]	; (800905c <tcp_input+0x4c0>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	e02a      	b.n	8008ffc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	7a1b      	ldrb	r3, [r3, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00c      	beq.n	8008fc8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	7a1a      	ldrb	r2, [r3, #8]
 8008fb2:	4b22      	ldr	r3, [pc, #136]	; (800903c <tcp_input+0x4a0>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fba:	3301      	adds	r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d002      	beq.n	8008fc8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	61bb      	str	r3, [r7, #24]
        continue;
 8008fc6:	e016      	b.n	8008ff6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	8ada      	ldrh	r2, [r3, #22]
 8008fcc:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <tcp_input+0x49c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d10c      	bne.n	8008ff2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <tcp_input+0x4a0>)
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d00f      	beq.n	8009004 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <tcp_input+0x46a>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d009      	beq.n	8009006 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1d1      	bne.n	8008fa6 <tcp_input+0x40a>
 8009002:	e000      	b.n	8009006 <tcp_input+0x46a>
            break;
 8009004:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d029      	beq.n	8009060 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800901a:	4b10      	ldr	r3, [pc, #64]	; (800905c <tcp_input+0x4c0>)
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009022:	4a0e      	ldr	r2, [pc, #56]	; (800905c <tcp_input+0x4c0>)
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009028:	6978      	ldr	r0, [r7, #20]
 800902a:	f000 fa03 	bl	8009434 <tcp_listen_input>
      }
      pbuf_free(p);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fd feea 	bl	8006e08 <pbuf_free>
      return;
 8009034:	e1a8      	b.n	8009388 <tcp_input+0x7ec>
 8009036:	bf00      	nop
 8009038:	200087fc 	.word	0x200087fc
 800903c:	20005264 	.word	0x20005264
 8009040:	08012280 	.word	0x08012280
 8009044:	080123ac 	.word	0x080123ac
 8009048:	080122cc 	.word	0x080122cc
 800904c:	200087e0 	.word	0x200087e0
 8009050:	080123d8 	.word	0x080123d8
 8009054:	200087e4 	.word	0x200087e4
 8009058:	08012404 	.word	0x08012404
 800905c:	200087dc 	.word	0x200087dc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8158 	beq.w	8009318 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009068:	4b95      	ldr	r3, [pc, #596]	; (80092c0 <tcp_input+0x724>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	891a      	ldrh	r2, [r3, #8]
 8009072:	4b93      	ldr	r3, [pc, #588]	; (80092c0 <tcp_input+0x724>)
 8009074:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009076:	4a92      	ldr	r2, [pc, #584]	; (80092c0 <tcp_input+0x724>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800907c:	4b91      	ldr	r3, [pc, #580]	; (80092c4 <tcp_input+0x728>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a8f      	ldr	r2, [pc, #572]	; (80092c0 <tcp_input+0x724>)
 8009082:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009084:	4b90      	ldr	r3, [pc, #576]	; (80092c8 <tcp_input+0x72c>)
 8009086:	2200      	movs	r2, #0
 8009088:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800908a:	4b90      	ldr	r3, [pc, #576]	; (80092cc <tcp_input+0x730>)
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009090:	4b8f      	ldr	r3, [pc, #572]	; (80092d0 <tcp_input+0x734>)
 8009092:	2200      	movs	r2, #0
 8009094:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009096:	4b8f      	ldr	r3, [pc, #572]	; (80092d4 <tcp_input+0x738>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d006      	beq.n	80090b0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7b5b      	ldrb	r3, [r3, #13]
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d017      	beq.n	80090e8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80090b8:	69f8      	ldr	r0, [r7, #28]
 80090ba:	f7ff f929 	bl	8008310 <tcp_process_refused_data>
 80090be:	4603      	mov	r3, r0
 80090c0:	f113 0f0d 	cmn.w	r3, #13
 80090c4:	d007      	beq.n	80090d6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80090ce:	4b82      	ldr	r3, [pc, #520]	; (80092d8 <tcp_input+0x73c>)
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d008      	beq.n	80090e8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 80e3 	bne.w	80092a6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80090e0:	69f8      	ldr	r0, [r7, #28]
 80090e2:	f003 f9ad 	bl	800c440 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80090e6:	e0de      	b.n	80092a6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80090e8:	4a7c      	ldr	r2, [pc, #496]	; (80092dc <tcp_input+0x740>)
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80090ee:	69f8      	ldr	r0, [r7, #28]
 80090f0:	f000 fb18 	bl	8009724 <tcp_process>
 80090f4:	4603      	mov	r3, r0
 80090f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80090f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090fc:	f113 0f0d 	cmn.w	r3, #13
 8009100:	f000 80d3 	beq.w	80092aa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009104:	4b71      	ldr	r3, [pc, #452]	; (80092cc <tcp_input+0x730>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d015      	beq.n	800913c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009116:	2b00      	cmp	r3, #0
 8009118:	d008      	beq.n	800912c <tcp_input+0x590>
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	6912      	ldr	r2, [r2, #16]
 8009124:	f06f 010d 	mvn.w	r1, #13
 8009128:	4610      	mov	r0, r2
 800912a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800912c:	69f9      	ldr	r1, [r7, #28]
 800912e:	486c      	ldr	r0, [pc, #432]	; (80092e0 <tcp_input+0x744>)
 8009130:	f7ff fbbc 	bl	80088ac <tcp_pcb_remove>
        tcp_free(pcb);
 8009134:	69f8      	ldr	r0, [r7, #28]
 8009136:	f7fe f9a9 	bl	800748c <tcp_free>
 800913a:	e0da      	b.n	80092f2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009140:	4b63      	ldr	r3, [pc, #396]	; (80092d0 <tcp_input+0x734>)
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d01d      	beq.n	8009184 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <tcp_input+0x734>)
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <tcp_input+0x5d2>
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	6910      	ldr	r0, [r2, #16]
 8009162:	89fa      	ldrh	r2, [r7, #14]
 8009164:	69f9      	ldr	r1, [r7, #28]
 8009166:	4798      	blx	r3
 8009168:	4603      	mov	r3, r0
 800916a:	74fb      	strb	r3, [r7, #19]
 800916c:	e001      	b.n	8009172 <tcp_input+0x5d6>
 800916e:	2300      	movs	r3, #0
 8009170:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009172:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009176:	f113 0f0d 	cmn.w	r3, #13
 800917a:	f000 8098 	beq.w	80092ae <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800917e:	4b54      	ldr	r3, [pc, #336]	; (80092d0 <tcp_input+0x734>)
 8009180:	2200      	movs	r2, #0
 8009182:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009184:	69f8      	ldr	r0, [r7, #28]
 8009186:	f000 f915 	bl	80093b4 <tcp_input_delayed_close>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8090 	bne.w	80092b2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009192:	4b4d      	ldr	r3, [pc, #308]	; (80092c8 <tcp_input+0x72c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d041      	beq.n	800921e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <tcp_input+0x614>
 80091a2:	4b50      	ldr	r3, [pc, #320]	; (80092e4 <tcp_input+0x748>)
 80091a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80091a8:	494f      	ldr	r1, [pc, #316]	; (80092e8 <tcp_input+0x74c>)
 80091aa:	4850      	ldr	r0, [pc, #320]	; (80092ec <tcp_input+0x750>)
 80091ac:	f006 fd30 	bl	800fc10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	8b5b      	ldrh	r3, [r3, #26]
 80091b4:	f003 0310 	and.w	r3, r3, #16
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80091bc:	4b42      	ldr	r3, [pc, #264]	; (80092c8 <tcp_input+0x72c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fe21 	bl	8006e08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80091c6:	69f8      	ldr	r0, [r7, #28]
 80091c8:	f7fe fc48 	bl	8007a5c <tcp_abort>
            goto aborted;
 80091cc:	e091      	b.n	80092f2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00c      	beq.n	80091f2 <tcp_input+0x656>
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	6918      	ldr	r0, [r3, #16]
 80091e2:	4b39      	ldr	r3, [pc, #228]	; (80092c8 <tcp_input+0x72c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	2300      	movs	r3, #0
 80091e8:	69f9      	ldr	r1, [r7, #28]
 80091ea:	47a0      	blx	r4
 80091ec:	4603      	mov	r3, r0
 80091ee:	74fb      	strb	r3, [r7, #19]
 80091f0:	e008      	b.n	8009204 <tcp_input+0x668>
 80091f2:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <tcp_input+0x72c>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	2300      	movs	r3, #0
 80091f8:	69f9      	ldr	r1, [r7, #28]
 80091fa:	2000      	movs	r0, #0
 80091fc:	f7ff f95e 	bl	80084bc <tcp_recv_null>
 8009200:	4603      	mov	r3, r0
 8009202:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009204:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009208:	f113 0f0d 	cmn.w	r3, #13
 800920c:	d053      	beq.n	80092b6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800920e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009216:	4b2c      	ldr	r3, [pc, #176]	; (80092c8 <tcp_input+0x72c>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800921e:	4b2b      	ldr	r3, [pc, #172]	; (80092cc <tcp_input+0x730>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d030      	beq.n	800928c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009236:	7b5a      	ldrb	r2, [r3, #13]
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800923c:	f042 0220 	orr.w	r2, r2, #32
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	735a      	strb	r2, [r3, #13]
 8009244:	e022      	b.n	800928c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800924e:	d005      	beq.n	800925c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009254:	3301      	adds	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <tcp_input+0x6e2>
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	6918      	ldr	r0, [r3, #16]
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	69f9      	ldr	r1, [r7, #28]
 8009276:	47a0      	blx	r4
 8009278:	4603      	mov	r3, r0
 800927a:	74fb      	strb	r3, [r7, #19]
 800927c:	e001      	b.n	8009282 <tcp_input+0x6e6>
 800927e:	2300      	movs	r3, #0
 8009280:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009286:	f113 0f0d 	cmn.w	r3, #13
 800928a:	d016      	beq.n	80092ba <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800928c:	4b13      	ldr	r3, [pc, #76]	; (80092dc <tcp_input+0x740>)
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009292:	69f8      	ldr	r0, [r7, #28]
 8009294:	f000 f88e 	bl	80093b4 <tcp_input_delayed_close>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d128      	bne.n	80092f0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800929e:	69f8      	ldr	r0, [r7, #28]
 80092a0:	f002 fac8 	bl	800b834 <tcp_output>
 80092a4:	e025      	b.n	80092f2 <tcp_input+0x756>
        goto aborted;
 80092a6:	bf00      	nop
 80092a8:	e023      	b.n	80092f2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80092aa:	bf00      	nop
 80092ac:	e021      	b.n	80092f2 <tcp_input+0x756>
              goto aborted;
 80092ae:	bf00      	nop
 80092b0:	e01f      	b.n	80092f2 <tcp_input+0x756>
          goto aborted;
 80092b2:	bf00      	nop
 80092b4:	e01d      	b.n	80092f2 <tcp_input+0x756>
            goto aborted;
 80092b6:	bf00      	nop
 80092b8:	e01b      	b.n	80092f2 <tcp_input+0x756>
              goto aborted;
 80092ba:	bf00      	nop
 80092bc:	e019      	b.n	80092f2 <tcp_input+0x756>
 80092be:	bf00      	nop
 80092c0:	200087ec 	.word	0x200087ec
 80092c4:	200087fc 	.word	0x200087fc
 80092c8:	2000881c 	.word	0x2000881c
 80092cc:	20008819 	.word	0x20008819
 80092d0:	20008814 	.word	0x20008814
 80092d4:	20008818 	.word	0x20008818
 80092d8:	20008816 	.word	0x20008816
 80092dc:	20008820 	.word	0x20008820
 80092e0:	200087e0 	.word	0x200087e0
 80092e4:	08012280 	.word	0x08012280
 80092e8:	08012434 	.word	0x08012434
 80092ec:	080122cc 	.word	0x080122cc
          goto aborted;
 80092f0:	bf00      	nop
    tcp_input_pcb = NULL;
 80092f2:	4b27      	ldr	r3, [pc, #156]	; (8009390 <tcp_input+0x7f4>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80092f8:	4b26      	ldr	r3, [pc, #152]	; (8009394 <tcp_input+0x7f8>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80092fe:	4b26      	ldr	r3, [pc, #152]	; (8009398 <tcp_input+0x7fc>)
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d03f      	beq.n	8009386 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009306:	4b24      	ldr	r3, [pc, #144]	; (8009398 <tcp_input+0x7fc>)
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	4618      	mov	r0, r3
 800930c:	f7fd fd7c 	bl	8006e08 <pbuf_free>
      inseg.p = NULL;
 8009310:	4b21      	ldr	r3, [pc, #132]	; (8009398 <tcp_input+0x7fc>)
 8009312:	2200      	movs	r2, #0
 8009314:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009316:	e036      	b.n	8009386 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009318:	4b20      	ldr	r3, [pc, #128]	; (800939c <tcp_input+0x800>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	899b      	ldrh	r3, [r3, #12]
 800931e:	b29b      	uxth	r3, r3
 8009320:	4618      	mov	r0, r3
 8009322:	f7fc fa13 	bl	800574c <lwip_htons>
 8009326:	4603      	mov	r3, r0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	d118      	bne.n	8009364 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009332:	4b1b      	ldr	r3, [pc, #108]	; (80093a0 <tcp_input+0x804>)
 8009334:	6819      	ldr	r1, [r3, #0]
 8009336:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <tcp_input+0x808>)
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <tcp_input+0x80c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009342:	4b16      	ldr	r3, [pc, #88]	; (800939c <tcp_input+0x800>)
 8009344:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009346:	885b      	ldrh	r3, [r3, #2]
 8009348:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800934a:	4a14      	ldr	r2, [pc, #80]	; (800939c <tcp_input+0x800>)
 800934c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800934e:	8812      	ldrh	r2, [r2, #0]
 8009350:	b292      	uxth	r2, r2
 8009352:	9202      	str	r2, [sp, #8]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <tcp_input+0x810>)
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <tcp_input+0x814>)
 800935c:	4602      	mov	r2, r0
 800935e:	2000      	movs	r0, #0
 8009360:	f003 f81c 	bl	800c39c <tcp_rst>
    pbuf_free(p);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7fd fd4f 	bl	8006e08 <pbuf_free>
  return;
 800936a:	e00c      	b.n	8009386 <tcp_input+0x7ea>
    goto dropped;
 800936c:	bf00      	nop
 800936e:	e006      	b.n	800937e <tcp_input+0x7e2>
    goto dropped;
 8009370:	bf00      	nop
 8009372:	e004      	b.n	800937e <tcp_input+0x7e2>
    goto dropped;
 8009374:	bf00      	nop
 8009376:	e002      	b.n	800937e <tcp_input+0x7e2>
      goto dropped;
 8009378:	bf00      	nop
 800937a:	e000      	b.n	800937e <tcp_input+0x7e2>
      goto dropped;
 800937c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fd fd42 	bl	8006e08 <pbuf_free>
 8009384:	e000      	b.n	8009388 <tcp_input+0x7ec>
  return;
 8009386:	bf00      	nop
}
 8009388:	3724      	adds	r7, #36	; 0x24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd90      	pop	{r4, r7, pc}
 800938e:	bf00      	nop
 8009390:	20008820 	.word	0x20008820
 8009394:	2000881c 	.word	0x2000881c
 8009398:	200087ec 	.word	0x200087ec
 800939c:	200087fc 	.word	0x200087fc
 80093a0:	20008810 	.word	0x20008810
 80093a4:	20008816 	.word	0x20008816
 80093a8:	2000880c 	.word	0x2000880c
 80093ac:	20005274 	.word	0x20005274
 80093b0:	20005278 	.word	0x20005278

080093b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <tcp_input_delayed_close+0x1c>
 80093c2:	4b17      	ldr	r3, [pc, #92]	; (8009420 <tcp_input_delayed_close+0x6c>)
 80093c4:	f240 225a 	movw	r2, #602	; 0x25a
 80093c8:	4916      	ldr	r1, [pc, #88]	; (8009424 <tcp_input_delayed_close+0x70>)
 80093ca:	4817      	ldr	r0, [pc, #92]	; (8009428 <tcp_input_delayed_close+0x74>)
 80093cc:	f006 fc20 	bl	800fc10 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80093d0:	4b16      	ldr	r3, [pc, #88]	; (800942c <tcp_input_delayed_close+0x78>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f003 0310 	and.w	r3, r3, #16
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01c      	beq.n	8009416 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8b5b      	ldrh	r3, [r3, #26]
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10d      	bne.n	8009404 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d008      	beq.n	8009404 <tcp_input_delayed_close+0x50>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6912      	ldr	r2, [r2, #16]
 80093fc:	f06f 010e 	mvn.w	r1, #14
 8009400:	4610      	mov	r0, r2
 8009402:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	480a      	ldr	r0, [pc, #40]	; (8009430 <tcp_input_delayed_close+0x7c>)
 8009408:	f7ff fa50 	bl	80088ac <tcp_pcb_remove>
    tcp_free(pcb);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7fe f83d 	bl	800748c <tcp_free>
    return 1;
 8009412:	2301      	movs	r3, #1
 8009414:	e000      	b.n	8009418 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	08012280 	.word	0x08012280
 8009424:	08012450 	.word	0x08012450
 8009428:	080122cc 	.word	0x080122cc
 800942c:	20008819 	.word	0x20008819
 8009430:	200087e0 	.word	0x200087e0

08009434 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b08b      	sub	sp, #44	; 0x2c
 8009438:	af04      	add	r7, sp, #16
 800943a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800943c:	4b6f      	ldr	r3, [pc, #444]	; (80095fc <tcp_listen_input+0x1c8>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	f040 80d2 	bne.w	80095ee <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d106      	bne.n	800945e <tcp_listen_input+0x2a>
 8009450:	4b6b      	ldr	r3, [pc, #428]	; (8009600 <tcp_listen_input+0x1cc>)
 8009452:	f240 2281 	movw	r2, #641	; 0x281
 8009456:	496b      	ldr	r1, [pc, #428]	; (8009604 <tcp_listen_input+0x1d0>)
 8009458:	486b      	ldr	r0, [pc, #428]	; (8009608 <tcp_listen_input+0x1d4>)
 800945a:	f006 fbd9 	bl	800fc10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800945e:	4b67      	ldr	r3, [pc, #412]	; (80095fc <tcp_listen_input+0x1c8>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	f003 0310 	and.w	r3, r3, #16
 8009466:	2b00      	cmp	r3, #0
 8009468:	d019      	beq.n	800949e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800946a:	4b68      	ldr	r3, [pc, #416]	; (800960c <tcp_listen_input+0x1d8>)
 800946c:	6819      	ldr	r1, [r3, #0]
 800946e:	4b68      	ldr	r3, [pc, #416]	; (8009610 <tcp_listen_input+0x1dc>)
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	4b67      	ldr	r3, [pc, #412]	; (8009614 <tcp_listen_input+0x1e0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800947a:	4b67      	ldr	r3, [pc, #412]	; (8009618 <tcp_listen_input+0x1e4>)
 800947c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800947e:	885b      	ldrh	r3, [r3, #2]
 8009480:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009482:	4a65      	ldr	r2, [pc, #404]	; (8009618 <tcp_listen_input+0x1e4>)
 8009484:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009486:	8812      	ldrh	r2, [r2, #0]
 8009488:	b292      	uxth	r2, r2
 800948a:	9202      	str	r2, [sp, #8]
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	4b63      	ldr	r3, [pc, #396]	; (800961c <tcp_listen_input+0x1e8>)
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	4b63      	ldr	r3, [pc, #396]	; (8009620 <tcp_listen_input+0x1ec>)
 8009494:	4602      	mov	r2, r0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 ff80 	bl	800c39c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800949c:	e0a9      	b.n	80095f2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800949e:	4b57      	ldr	r3, [pc, #348]	; (80095fc <tcp_listen_input+0x1c8>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80a3 	beq.w	80095f2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7d5b      	ldrb	r3, [r3, #21]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff f927 	bl	8008704 <tcp_alloc>
 80094b6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d111      	bne.n	80094e2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <tcp_listen_input+0xa8>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	6910      	ldr	r0, [r2, #16]
 80094ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094d2:	2100      	movs	r1, #0
 80094d4:	4798      	blx	r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	73bb      	strb	r3, [r7, #14]
      return;
 80094da:	e08b      	b.n	80095f4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80094dc:	23f0      	movs	r3, #240	; 0xf0
 80094de:	73bb      	strb	r3, [r7, #14]
      return;
 80094e0:	e088      	b.n	80095f4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80094e2:	4b50      	ldr	r3, [pc, #320]	; (8009624 <tcp_listen_input+0x1f0>)
 80094e4:	695a      	ldr	r2, [r3, #20]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80094ea:	4b4e      	ldr	r3, [pc, #312]	; (8009624 <tcp_listen_input+0x1f0>)
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8ada      	ldrh	r2, [r3, #22]
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80094fa:	4b47      	ldr	r3, [pc, #284]	; (8009618 <tcp_listen_input+0x1e4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29a      	uxth	r2, r3
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2203      	movs	r2, #3
 800950a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800950c:	4b41      	ldr	r3, [pc, #260]	; (8009614 <tcp_listen_input+0x1e0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800951e:	6978      	ldr	r0, [r7, #20]
 8009520:	f7ff fa58 	bl	80089d4 <tcp_next_iss>
 8009524:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800953e:	4b35      	ldr	r3, [pc, #212]	; (8009614 <tcp_listen_input+0x1e0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1e5a      	subs	r2, r3, #1
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691a      	ldr	r2, [r3, #16]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7a5b      	ldrb	r3, [r3, #9]
 800955a:	f003 030c 	and.w	r3, r3, #12
 800955e:	b2da      	uxtb	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7a1a      	ldrb	r2, [r3, #8]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800956c:	4b2e      	ldr	r3, [pc, #184]	; (8009628 <tcp_listen_input+0x1f4>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	60da      	str	r2, [r3, #12]
 8009574:	4a2c      	ldr	r2, [pc, #176]	; (8009628 <tcp_listen_input+0x1f4>)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	f003 f8d1 	bl	800c720 <tcp_timer_needed>
 800957e:	4b2b      	ldr	r3, [pc, #172]	; (800962c <tcp_listen_input+0x1f8>)
 8009580:	2201      	movs	r2, #1
 8009582:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009584:	6978      	ldr	r0, [r7, #20]
 8009586:	f001 fd8f 	bl	800b0a8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800958a:	4b23      	ldr	r3, [pc, #140]	; (8009618 <tcp_listen_input+0x1e4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	89db      	ldrh	r3, [r3, #14]
 8009590:	b29a      	uxth	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f005 f84f 	bl	800e650 <ip4_route>
 80095b2:	4601      	mov	r1, r0
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3304      	adds	r3, #4
 80095b8:	461a      	mov	r2, r3
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff fa30 	bl	8008a20 <tcp_eff_send_mss_netif>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80095c8:	2112      	movs	r1, #18
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f002 f844 	bl	800b658 <tcp_enqueue_flags>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80095d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d004      	beq.n	80095e6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80095dc:	2100      	movs	r1, #0
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	f7fe f97e 	bl	80078e0 <tcp_abandon>
      return;
 80095e4:	e006      	b.n	80095f4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f002 f924 	bl	800b834 <tcp_output>
  return;
 80095ec:	e001      	b.n	80095f2 <tcp_listen_input+0x1be>
    return;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <tcp_listen_input+0x1c0>
  return;
 80095f2:	bf00      	nop
}
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd90      	pop	{r4, r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20008818 	.word	0x20008818
 8009600:	08012280 	.word	0x08012280
 8009604:	08012478 	.word	0x08012478
 8009608:	080122cc 	.word	0x080122cc
 800960c:	20008810 	.word	0x20008810
 8009610:	20008816 	.word	0x20008816
 8009614:	2000880c 	.word	0x2000880c
 8009618:	200087fc 	.word	0x200087fc
 800961c:	20005274 	.word	0x20005274
 8009620:	20005278 	.word	0x20005278
 8009624:	20005264 	.word	0x20005264
 8009628:	200087e0 	.word	0x200087e0
 800962c:	200087e8 	.word	0x200087e8

08009630 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af04      	add	r7, sp, #16
 8009636:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009638:	4b2f      	ldr	r3, [pc, #188]	; (80096f8 <tcp_timewait_input+0xc8>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d153      	bne.n	80096ec <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <tcp_timewait_input+0x28>
 800964a:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <tcp_timewait_input+0xcc>)
 800964c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009650:	492b      	ldr	r1, [pc, #172]	; (8009700 <tcp_timewait_input+0xd0>)
 8009652:	482c      	ldr	r0, [pc, #176]	; (8009704 <tcp_timewait_input+0xd4>)
 8009654:	f006 fadc 	bl	800fc10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009658:	4b27      	ldr	r3, [pc, #156]	; (80096f8 <tcp_timewait_input+0xc8>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02a      	beq.n	80096ba <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <tcp_timewait_input+0xd8>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	db2d      	blt.n	80096ce <tcp_timewait_input+0x9e>
 8009672:	4b25      	ldr	r3, [pc, #148]	; (8009708 <tcp_timewait_input+0xd8>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800967e:	440b      	add	r3, r1
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	dc23      	bgt.n	80096ce <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009686:	4b21      	ldr	r3, [pc, #132]	; (800970c <tcp_timewait_input+0xdc>)
 8009688:	6819      	ldr	r1, [r3, #0]
 800968a:	4b21      	ldr	r3, [pc, #132]	; (8009710 <tcp_timewait_input+0xe0>)
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	4b1d      	ldr	r3, [pc, #116]	; (8009708 <tcp_timewait_input+0xd8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009696:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <tcp_timewait_input+0xe4>)
 8009698:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800969a:	885b      	ldrh	r3, [r3, #2]
 800969c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800969e:	4a1d      	ldr	r2, [pc, #116]	; (8009714 <tcp_timewait_input+0xe4>)
 80096a0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096a2:	8812      	ldrh	r2, [r2, #0]
 80096a4:	b292      	uxth	r2, r2
 80096a6:	9202      	str	r2, [sp, #8]
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	4b1b      	ldr	r3, [pc, #108]	; (8009718 <tcp_timewait_input+0xe8>)
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4b1b      	ldr	r3, [pc, #108]	; (800971c <tcp_timewait_input+0xec>)
 80096b0:	4602      	mov	r2, r0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f002 fe72 	bl	800c39c <tcp_rst>
      return;
 80096b8:	e01b      	b.n	80096f2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <tcp_timewait_input+0xc8>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80096c6:	4b16      	ldr	r3, [pc, #88]	; (8009720 <tcp_timewait_input+0xf0>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <tcp_timewait_input+0xe0>)
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00c      	beq.n	80096f0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	8b5b      	ldrh	r3, [r3, #26]
 80096da:	f043 0302 	orr.w	r3, r3, #2
 80096de:	b29a      	uxth	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 f8a5 	bl	800b834 <tcp_output>
  }
  return;
 80096ea:	e001      	b.n	80096f0 <tcp_timewait_input+0xc0>
    return;
 80096ec:	bf00      	nop
 80096ee:	e000      	b.n	80096f2 <tcp_timewait_input+0xc2>
  return;
 80096f0:	bf00      	nop
}
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20008818 	.word	0x20008818
 80096fc:	08012280 	.word	0x08012280
 8009700:	08012498 	.word	0x08012498
 8009704:	080122cc 	.word	0x080122cc
 8009708:	2000880c 	.word	0x2000880c
 800970c:	20008810 	.word	0x20008810
 8009710:	20008816 	.word	0x20008816
 8009714:	200087fc 	.word	0x200087fc
 8009718:	20005274 	.word	0x20005274
 800971c:	20005278 	.word	0x20005278
 8009720:	200087d4 	.word	0x200087d4

08009724 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b08d      	sub	sp, #52	; 0x34
 8009728:	af04      	add	r7, sp, #16
 800972a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <tcp_process+0x24>
 800973a:	4b9d      	ldr	r3, [pc, #628]	; (80099b0 <tcp_process+0x28c>)
 800973c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009740:	499c      	ldr	r1, [pc, #624]	; (80099b4 <tcp_process+0x290>)
 8009742:	489d      	ldr	r0, [pc, #628]	; (80099b8 <tcp_process+0x294>)
 8009744:	f006 fa64 	bl	800fc10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009748:	4b9c      	ldr	r3, [pc, #624]	; (80099bc <tcp_process+0x298>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d04e      	beq.n	80097f2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	7d1b      	ldrb	r3, [r3, #20]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d108      	bne.n	800976e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009760:	4b97      	ldr	r3, [pc, #604]	; (80099c0 <tcp_process+0x29c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d123      	bne.n	80097b0 <tcp_process+0x8c>
        acceptable = 1;
 8009768:	2301      	movs	r3, #1
 800976a:	76fb      	strb	r3, [r7, #27]
 800976c:	e020      	b.n	80097b0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009772:	4b94      	ldr	r3, [pc, #592]	; (80099c4 <tcp_process+0x2a0>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	429a      	cmp	r2, r3
 8009778:	d102      	bne.n	8009780 <tcp_process+0x5c>
        acceptable = 1;
 800977a:	2301      	movs	r3, #1
 800977c:	76fb      	strb	r3, [r7, #27]
 800977e:	e017      	b.n	80097b0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009780:	4b90      	ldr	r3, [pc, #576]	; (80099c4 <tcp_process+0x2a0>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	db10      	blt.n	80097b0 <tcp_process+0x8c>
 800978e:	4b8d      	ldr	r3, [pc, #564]	; (80099c4 <tcp_process+0x2a0>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800979a:	440b      	add	r3, r1
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dc06      	bgt.n	80097b0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	8b5b      	ldrh	r3, [r3, #26]
 80097a6:	f043 0302 	orr.w	r3, r3, #2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80097b0:	7efb      	ldrb	r3, [r7, #27]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d01b      	beq.n	80097ee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7d1b      	ldrb	r3, [r3, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <tcp_process+0xa8>
 80097be:	4b7c      	ldr	r3, [pc, #496]	; (80099b0 <tcp_process+0x28c>)
 80097c0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80097c4:	4980      	ldr	r1, [pc, #512]	; (80099c8 <tcp_process+0x2a4>)
 80097c6:	487c      	ldr	r0, [pc, #496]	; (80099b8 <tcp_process+0x294>)
 80097c8:	f006 fa22 	bl	800fc10 <iprintf>
      recv_flags |= TF_RESET;
 80097cc:	4b7f      	ldr	r3, [pc, #508]	; (80099cc <tcp_process+0x2a8>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	f043 0308 	orr.w	r3, r3, #8
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	4b7d      	ldr	r3, [pc, #500]	; (80099cc <tcp_process+0x2a8>)
 80097d8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	8b5b      	ldrh	r3, [r3, #26]
 80097de:	f023 0301 	bic.w	r3, r3, #1
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80097e8:	f06f 030d 	mvn.w	r3, #13
 80097ec:	e37a      	b.n	8009ee4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	e378      	b.n	8009ee4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80097f2:	4b72      	ldr	r3, [pc, #456]	; (80099bc <tcp_process+0x298>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d010      	beq.n	8009820 <tcp_process+0xfc>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7d1b      	ldrb	r3, [r3, #20]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d00c      	beq.n	8009820 <tcp_process+0xfc>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7d1b      	ldrb	r3, [r3, #20]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d008      	beq.n	8009820 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	8b5b      	ldrh	r3, [r3, #26]
 8009812:	f043 0302 	orr.w	r3, r3, #2
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e361      	b.n	8009ee4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	8b5b      	ldrh	r3, [r3, #26]
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800982c:	4b68      	ldr	r3, [pc, #416]	; (80099d0 <tcp_process+0x2ac>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fc2f 	bl	800b0a8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7d1b      	ldrb	r3, [r3, #20]
 800984e:	3b02      	subs	r3, #2
 8009850:	2b07      	cmp	r3, #7
 8009852:	f200 8337 	bhi.w	8009ec4 <tcp_process+0x7a0>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <tcp_process+0x138>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	0800987d 	.word	0x0800987d
 8009860:	08009aad 	.word	0x08009aad
 8009864:	08009c25 	.word	0x08009c25
 8009868:	08009c4f 	.word	0x08009c4f
 800986c:	08009d73 	.word	0x08009d73
 8009870:	08009c25 	.word	0x08009c25
 8009874:	08009dff 	.word	0x08009dff
 8009878:	08009e8f 	.word	0x08009e8f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800987c:	4b4f      	ldr	r3, [pc, #316]	; (80099bc <tcp_process+0x298>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 80e4 	beq.w	8009a52 <tcp_process+0x32e>
 800988a:	4b4c      	ldr	r3, [pc, #304]	; (80099bc <tcp_process+0x298>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80dd 	beq.w	8009a52 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	4b48      	ldr	r3, [pc, #288]	; (80099c0 <tcp_process+0x29c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	f040 80d5 	bne.w	8009a52 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80098a8:	4b46      	ldr	r3, [pc, #280]	; (80099c4 <tcp_process+0x2a0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80098ba:	4b41      	ldr	r3, [pc, #260]	; (80099c0 <tcp_process+0x29c>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80098c2:	4b44      	ldr	r3, [pc, #272]	; (80099d4 <tcp_process+0x2b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	89db      	ldrh	r3, [r3, #14]
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098dc:	4b39      	ldr	r3, [pc, #228]	; (80099c4 <tcp_process+0x2a0>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	1e5a      	subs	r2, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2204      	movs	r2, #4
 80098ea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4618      	mov	r0, r3
 80098f6:	f004 feab 	bl	800e650 <ip4_route>
 80098fa:	4601      	mov	r1, r0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3304      	adds	r3, #4
 8009900:	461a      	mov	r2, r3
 8009902:	4620      	mov	r0, r4
 8009904:	f7ff f88c 	bl	8008a20 <tcp_eff_send_mss_netif>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009914:	009a      	lsls	r2, r3, #2
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009920:	428b      	cmp	r3, r1
 8009922:	bf38      	it	cc
 8009924:	460b      	movcc	r3, r1
 8009926:	429a      	cmp	r2, r3
 8009928:	d204      	bcs.n	8009934 <tcp_process+0x210>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	b29b      	uxth	r3, r3
 8009932:	e00d      	b.n	8009950 <tcp_process+0x22c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	f241 121c 	movw	r2, #4380	; 0x111c
 800993e:	4293      	cmp	r3, r2
 8009940:	d904      	bls.n	800994c <tcp_process+0x228>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	b29b      	uxth	r3, r3
 800994a:	e001      	b.n	8009950 <tcp_process+0x22c>
 800994c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <tcp_process+0x24a>
 8009960:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <tcp_process+0x28c>)
 8009962:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009966:	491c      	ldr	r1, [pc, #112]	; (80099d8 <tcp_process+0x2b4>)
 8009968:	4813      	ldr	r0, [pc, #76]	; (80099b8 <tcp_process+0x294>)
 800996a:	f006 f951 	bl	800fc10 <iprintf>
        --pcb->snd_queuelen;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d12a      	bne.n	80099e0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800998e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <tcp_process+0x280>
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <tcp_process+0x28c>)
 8009998:	f44f 725d 	mov.w	r2, #884	; 0x374
 800999c:	490f      	ldr	r1, [pc, #60]	; (80099dc <tcp_process+0x2b8>)
 800999e:	4806      	ldr	r0, [pc, #24]	; (80099b8 <tcp_process+0x294>)
 80099a0:	f006 f936 	bl	800fc10 <iprintf>
          pcb->unsent = rseg->next;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80099ac:	e01c      	b.n	80099e8 <tcp_process+0x2c4>
 80099ae:	bf00      	nop
 80099b0:	08012280 	.word	0x08012280
 80099b4:	080124b8 	.word	0x080124b8
 80099b8:	080122cc 	.word	0x080122cc
 80099bc:	20008818 	.word	0x20008818
 80099c0:	20008810 	.word	0x20008810
 80099c4:	2000880c 	.word	0x2000880c
 80099c8:	080124d4 	.word	0x080124d4
 80099cc:	20008819 	.word	0x20008819
 80099d0:	200087d4 	.word	0x200087d4
 80099d4:	200087fc 	.word	0x200087fc
 80099d8:	080124f4 	.word	0x080124f4
 80099dc:	0801250c 	.word	0x0801250c
        } else {
          pcb->unacked = rseg->next;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80099e8:	69f8      	ldr	r0, [r7, #28]
 80099ea:	f7fe fd22 	bl	8008432 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099fc:	861a      	strh	r2, [r3, #48]	; 0x30
 80099fe:	e006      	b.n	8009a0e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00a      	beq.n	8009a2e <tcp_process+0x30a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	6910      	ldr	r0, [r2, #16]
 8009a22:	2200      	movs	r2, #0
 8009a24:	6879      	ldr	r1, [r7, #4]
 8009a26:	4798      	blx	r3
 8009a28:	4603      	mov	r3, r0
 8009a2a:	76bb      	strb	r3, [r7, #26]
 8009a2c:	e001      	b.n	8009a32 <tcp_process+0x30e>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009a32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a36:	f113 0f0d 	cmn.w	r3, #13
 8009a3a:	d102      	bne.n	8009a42 <tcp_process+0x31e>
          return ERR_ABRT;
 8009a3c:	f06f 030c 	mvn.w	r3, #12
 8009a40:	e250      	b.n	8009ee4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8b5b      	ldrh	r3, [r3, #26]
 8009a46:	f043 0302 	orr.w	r3, r3, #2
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009a50:	e23a      	b.n	8009ec8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009a52:	4b98      	ldr	r3, [pc, #608]	; (8009cb4 <tcp_process+0x590>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	f003 0310 	and.w	r3, r3, #16
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 8234 	beq.w	8009ec8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a60:	4b95      	ldr	r3, [pc, #596]	; (8009cb8 <tcp_process+0x594>)
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	4b95      	ldr	r3, [pc, #596]	; (8009cbc <tcp_process+0x598>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4b95      	ldr	r3, [pc, #596]	; (8009cc0 <tcp_process+0x59c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a70:	4b94      	ldr	r3, [pc, #592]	; (8009cc4 <tcp_process+0x5a0>)
 8009a72:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a74:	885b      	ldrh	r3, [r3, #2]
 8009a76:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a78:	4a92      	ldr	r2, [pc, #584]	; (8009cc4 <tcp_process+0x5a0>)
 8009a7a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a7c:	8812      	ldrh	r2, [r2, #0]
 8009a7e:	b292      	uxth	r2, r2
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	4b90      	ldr	r3, [pc, #576]	; (8009cc8 <tcp_process+0x5a4>)
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4b90      	ldr	r3, [pc, #576]	; (8009ccc <tcp_process+0x5a8>)
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f002 fc85 	bl	800c39c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	f200 8215 	bhi.w	8009ec8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f002 fa4f 	bl	800bf48 <tcp_rexmit_rto>
      break;
 8009aaa:	e20d      	b.n	8009ec8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009aac:	4b81      	ldr	r3, [pc, #516]	; (8009cb4 <tcp_process+0x590>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 0310 	and.w	r3, r3, #16
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80a1 	beq.w	8009bfc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009aba:	4b7f      	ldr	r3, [pc, #508]	; (8009cb8 <tcp_process+0x594>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	db7e      	blt.n	8009bc8 <tcp_process+0x4a4>
 8009aca:	4b7b      	ldr	r3, [pc, #492]	; (8009cb8 <tcp_process+0x594>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dc77      	bgt.n	8009bc8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2204      	movs	r2, #4
 8009adc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009ae6:	23fa      	movs	r3, #250	; 0xfa
 8009ae8:	76bb      	strb	r3, [r7, #26]
 8009aea:	e01d      	b.n	8009b28 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <tcp_process+0x3e0>
 8009af6:	4b76      	ldr	r3, [pc, #472]	; (8009cd0 <tcp_process+0x5ac>)
 8009af8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009afc:	4975      	ldr	r1, [pc, #468]	; (8009cd4 <tcp_process+0x5b0>)
 8009afe:	4876      	ldr	r0, [pc, #472]	; (8009cd8 <tcp_process+0x5b4>)
 8009b00:	f006 f886 	bl	800fc10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <tcp_process+0x400>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6910      	ldr	r0, [r2, #16]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	76bb      	strb	r3, [r7, #26]
 8009b22:	e001      	b.n	8009b28 <tcp_process+0x404>
 8009b24:	23f0      	movs	r3, #240	; 0xf0
 8009b26:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009b28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009b30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b34:	f113 0f0d 	cmn.w	r3, #13
 8009b38:	d002      	beq.n	8009b40 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7fd ff8e 	bl	8007a5c <tcp_abort>
            }
            return ERR_ABRT;
 8009b40:	f06f 030c 	mvn.w	r3, #12
 8009b44:	e1ce      	b.n	8009ee4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fae0 	bl	800a10c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009b4c:	4b63      	ldr	r3, [pc, #396]	; (8009cdc <tcp_process+0x5b8>)
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <tcp_process+0x43c>
            recv_acked--;
 8009b54:	4b61      	ldr	r3, [pc, #388]	; (8009cdc <tcp_process+0x5b8>)
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	4b5f      	ldr	r3, [pc, #380]	; (8009cdc <tcp_process+0x5b8>)
 8009b5e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b64:	009a      	lsls	r2, r3, #2
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b70:	428b      	cmp	r3, r1
 8009b72:	bf38      	it	cc
 8009b74:	460b      	movcc	r3, r1
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d204      	bcs.n	8009b84 <tcp_process+0x460>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	e00d      	b.n	8009ba0 <tcp_process+0x47c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d904      	bls.n	8009b9c <tcp_process+0x478>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	e001      	b.n	8009ba0 <tcp_process+0x47c>
 8009b9c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009ba6:	4b4e      	ldr	r3, [pc, #312]	; (8009ce0 <tcp_process+0x5bc>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d037      	beq.n	8009c22 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	8b5b      	ldrh	r3, [r3, #26]
 8009bb6:	f043 0302 	orr.w	r3, r3, #2
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2207      	movs	r2, #7
 8009bc4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009bc6:	e02c      	b.n	8009c22 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bc8:	4b3b      	ldr	r3, [pc, #236]	; (8009cb8 <tcp_process+0x594>)
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	4b3b      	ldr	r3, [pc, #236]	; (8009cbc <tcp_process+0x598>)
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4b3b      	ldr	r3, [pc, #236]	; (8009cc0 <tcp_process+0x59c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bd8:	4b3a      	ldr	r3, [pc, #232]	; (8009cc4 <tcp_process+0x5a0>)
 8009bda:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009be0:	4a38      	ldr	r2, [pc, #224]	; (8009cc4 <tcp_process+0x5a0>)
 8009be2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009be4:	8812      	ldrh	r2, [r2, #0]
 8009be6:	b292      	uxth	r2, r2
 8009be8:	9202      	str	r2, [sp, #8]
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	4b36      	ldr	r3, [pc, #216]	; (8009cc8 <tcp_process+0x5a4>)
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <tcp_process+0x5a8>)
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f002 fbd1 	bl	800c39c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009bfa:	e167      	b.n	8009ecc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009bfc:	4b2d      	ldr	r3, [pc, #180]	; (8009cb4 <tcp_process+0x590>)
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8161 	beq.w	8009ecc <tcp_process+0x7a8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	1e5a      	subs	r2, r3, #1
 8009c10:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <tcp_process+0x59c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	f040 8159 	bne.w	8009ecc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f002 f9b6 	bl	800bf8c <tcp_rexmit>
      break;
 8009c20:	e154      	b.n	8009ecc <tcp_process+0x7a8>
 8009c22:	e153      	b.n	8009ecc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa71 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009c2a:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <tcp_process+0x5bc>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 814c 	beq.w	8009ed0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8b5b      	ldrh	r3, [r3, #26]
 8009c3c:	f043 0302 	orr.w	r3, r3, #2
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2207      	movs	r2, #7
 8009c4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c4c:	e140      	b.n	8009ed0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa5c 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c54:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <tcp_process+0x5bc>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 0320 	and.w	r3, r3, #32
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d071      	beq.n	8009d44 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c60:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <tcp_process+0x590>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d060      	beq.n	8009d2e <tcp_process+0x60a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <tcp_process+0x594>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d15a      	bne.n	8009d2e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d156      	bne.n	8009d2e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	8b5b      	ldrh	r3, [r3, #26]
 8009c84:	f043 0302 	orr.w	r3, r3, #2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fe fdbc 	bl	800880c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009c94:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <tcp_process+0x5c0>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d105      	bne.n	8009caa <tcp_process+0x586>
 8009c9e:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <tcp_process+0x5c0>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	4a0f      	ldr	r2, [pc, #60]	; (8009ce4 <tcp_process+0x5c0>)
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e02e      	b.n	8009d08 <tcp_process+0x5e4>
 8009caa:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <tcp_process+0x5c0>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	e027      	b.n	8009d02 <tcp_process+0x5de>
 8009cb2:	bf00      	nop
 8009cb4:	20008818 	.word	0x20008818
 8009cb8:	20008810 	.word	0x20008810
 8009cbc:	20008816 	.word	0x20008816
 8009cc0:	2000880c 	.word	0x2000880c
 8009cc4:	200087fc 	.word	0x200087fc
 8009cc8:	20005274 	.word	0x20005274
 8009ccc:	20005278 	.word	0x20005278
 8009cd0:	08012280 	.word	0x08012280
 8009cd4:	08012520 	.word	0x08012520
 8009cd8:	080122cc 	.word	0x080122cc
 8009cdc:	20008814 	.word	0x20008814
 8009ce0:	20008819 	.word	0x20008819
 8009ce4:	200087e0 	.word	0x200087e0
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d104      	bne.n	8009cfc <tcp_process+0x5d8>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	60da      	str	r2, [r3, #12]
 8009cfa:	e005      	b.n	8009d08 <tcp_process+0x5e4>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1ef      	bne.n	8009ce8 <tcp_process+0x5c4>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	60da      	str	r2, [r3, #12]
 8009d0e:	4b77      	ldr	r3, [pc, #476]	; (8009eec <tcp_process+0x7c8>)
 8009d10:	2201      	movs	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	220a      	movs	r2, #10
 8009d18:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009d1a:	4b75      	ldr	r3, [pc, #468]	; (8009ef0 <tcp_process+0x7cc>)
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	4a73      	ldr	r2, [pc, #460]	; (8009ef0 <tcp_process+0x7cc>)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6013      	str	r3, [r2, #0]
 8009d28:	f002 fcfa 	bl	800c720 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009d2c:	e0d2      	b.n	8009ed4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	8b5b      	ldrh	r3, [r3, #26]
 8009d32:	f043 0302 	orr.w	r3, r3, #2
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2208      	movs	r2, #8
 8009d40:	751a      	strb	r2, [r3, #20]
      break;
 8009d42:	e0c7      	b.n	8009ed4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d44:	4b6b      	ldr	r3, [pc, #428]	; (8009ef4 <tcp_process+0x7d0>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80c1 	beq.w	8009ed4 <tcp_process+0x7b0>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d56:	4b68      	ldr	r3, [pc, #416]	; (8009ef8 <tcp_process+0x7d4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	f040 80ba 	bne.w	8009ed4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 80b5 	bne.w	8009ed4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2206      	movs	r2, #6
 8009d6e:	751a      	strb	r2, [r3, #20]
      break;
 8009d70:	e0b0      	b.n	8009ed4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9ca 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d78:	4b60      	ldr	r3, [pc, #384]	; (8009efc <tcp_process+0x7d8>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80a9 	beq.w	8009ed8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8b5b      	ldrh	r3, [r3, #26]
 8009d8a:	f043 0302 	orr.w	r3, r3, #2
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7fe fd39 	bl	800880c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d9a:	4b59      	ldr	r3, [pc, #356]	; (8009f00 <tcp_process+0x7dc>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d105      	bne.n	8009db0 <tcp_process+0x68c>
 8009da4:	4b56      	ldr	r3, [pc, #344]	; (8009f00 <tcp_process+0x7dc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	4a55      	ldr	r2, [pc, #340]	; (8009f00 <tcp_process+0x7dc>)
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	e013      	b.n	8009dd8 <tcp_process+0x6b4>
 8009db0:	4b53      	ldr	r3, [pc, #332]	; (8009f00 <tcp_process+0x7dc>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	613b      	str	r3, [r7, #16]
 8009db6:	e00c      	b.n	8009dd2 <tcp_process+0x6ae>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d104      	bne.n	8009dcc <tcp_process+0x6a8>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	e005      	b.n	8009dd8 <tcp_process+0x6b4>
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1ef      	bne.n	8009db8 <tcp_process+0x694>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	60da      	str	r2, [r3, #12]
 8009dde:	4b43      	ldr	r3, [pc, #268]	; (8009eec <tcp_process+0x7c8>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	220a      	movs	r2, #10
 8009de8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009dea:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <tcp_process+0x7cc>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]
 8009df2:	4a3f      	ldr	r2, [pc, #252]	; (8009ef0 <tcp_process+0x7cc>)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	f002 fc92 	bl	800c720 <tcp_timer_needed>
      }
      break;
 8009dfc:	e06c      	b.n	8009ed8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f984 	bl	800a10c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e04:	4b3b      	ldr	r3, [pc, #236]	; (8009ef4 <tcp_process+0x7d0>)
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d065      	beq.n	8009edc <tcp_process+0x7b8>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e14:	4b38      	ldr	r3, [pc, #224]	; (8009ef8 <tcp_process+0x7d4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d15f      	bne.n	8009edc <tcp_process+0x7b8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d15b      	bne.n	8009edc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fe fcf1 	bl	800880c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009e2a:	4b35      	ldr	r3, [pc, #212]	; (8009f00 <tcp_process+0x7dc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d105      	bne.n	8009e40 <tcp_process+0x71c>
 8009e34:	4b32      	ldr	r3, [pc, #200]	; (8009f00 <tcp_process+0x7dc>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	4a31      	ldr	r2, [pc, #196]	; (8009f00 <tcp_process+0x7dc>)
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e013      	b.n	8009e68 <tcp_process+0x744>
 8009e40:	4b2f      	ldr	r3, [pc, #188]	; (8009f00 <tcp_process+0x7dc>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e00c      	b.n	8009e62 <tcp_process+0x73e>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d104      	bne.n	8009e5c <tcp_process+0x738>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e005      	b.n	8009e68 <tcp_process+0x744>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1ef      	bne.n	8009e48 <tcp_process+0x724>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	4b1f      	ldr	r3, [pc, #124]	; (8009eec <tcp_process+0x7c8>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	220a      	movs	r2, #10
 8009e78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e7a:	4b1d      	ldr	r3, [pc, #116]	; (8009ef0 <tcp_process+0x7cc>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60da      	str	r2, [r3, #12]
 8009e82:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <tcp_process+0x7cc>)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	f002 fc4a 	bl	800c720 <tcp_timer_needed>
      }
      break;
 8009e8c:	e026      	b.n	8009edc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f93c 	bl	800a10c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e94:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <tcp_process+0x7d0>)
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d01f      	beq.n	8009ee0 <tcp_process+0x7bc>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ea4:	4b14      	ldr	r3, [pc, #80]	; (8009ef8 <tcp_process+0x7d4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d119      	bne.n	8009ee0 <tcp_process+0x7bc>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d115      	bne.n	8009ee0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009eb4:	4b11      	ldr	r3, [pc, #68]	; (8009efc <tcp_process+0x7d8>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f043 0310 	orr.w	r3, r3, #16
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <tcp_process+0x7d8>)
 8009ec0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ec2:	e00d      	b.n	8009ee0 <tcp_process+0x7bc>
    default:
      break;
 8009ec4:	bf00      	nop
 8009ec6:	e00c      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ec8:	bf00      	nop
 8009eca:	e00a      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ecc:	bf00      	nop
 8009ece:	e008      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ed0:	bf00      	nop
 8009ed2:	e006      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ed4:	bf00      	nop
 8009ed6:	e004      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ed8:	bf00      	nop
 8009eda:	e002      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009edc:	bf00      	nop
 8009ede:	e000      	b.n	8009ee2 <tcp_process+0x7be>
      break;
 8009ee0:	bf00      	nop
  }
  return ERR_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3724      	adds	r7, #36	; 0x24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd90      	pop	{r4, r7, pc}
 8009eec:	200087e8 	.word	0x200087e8
 8009ef0:	200087e4 	.word	0x200087e4
 8009ef4:	20008818 	.word	0x20008818
 8009ef8:	20008810 	.word	0x20008810
 8009efc:	20008819 	.word	0x20008819
 8009f00:	200087e0 	.word	0x200087e0

08009f04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <tcp_oos_insert_segment+0x1e>
 8009f14:	4b3b      	ldr	r3, [pc, #236]	; (800a004 <tcp_oos_insert_segment+0x100>)
 8009f16:	f240 421f 	movw	r2, #1055	; 0x41f
 8009f1a:	493b      	ldr	r1, [pc, #236]	; (800a008 <tcp_oos_insert_segment+0x104>)
 8009f1c:	483b      	ldr	r0, [pc, #236]	; (800a00c <tcp_oos_insert_segment+0x108>)
 8009f1e:	f005 fe77 	bl	800fc10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	899b      	ldrh	r3, [r3, #12]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fb fc0e 	bl	800574c <lwip_htons>
 8009f30:	4603      	mov	r3, r0
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d028      	beq.n	8009f8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009f3c:	6838      	ldr	r0, [r7, #0]
 8009f3e:	f7fe fa63 	bl	8008408 <tcp_segs_free>
    next = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	603b      	str	r3, [r7, #0]
 8009f46:	e056      	b.n	8009ff6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	899b      	ldrh	r3, [r3, #12]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fb fbfb 	bl	800574c <lwip_htons>
 8009f56:	4603      	mov	r3, r0
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00d      	beq.n	8009f7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	899b      	ldrh	r3, [r3, #12]
 8009f68:	b29c      	uxth	r4, r3
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	f7fb fbee 	bl	800574c <lwip_htons>
 8009f70:	4603      	mov	r3, r0
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	4322      	orrs	r2, r4
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7fe fa52 	bl	8008432 <tcp_seg_free>
    while (next &&
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00e      	beq.n	8009fb2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	891b      	ldrh	r3, [r3, #8]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <tcp_oos_insert_segment+0x10c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	8909      	ldrh	r1, [r1, #8]
 8009faa:	440b      	add	r3, r1
 8009fac:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	daca      	bge.n	8009f48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01e      	beq.n	8009ff6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	891b      	ldrh	r3, [r3, #8]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b14      	ldr	r3, [pc, #80]	; (800a010 <tcp_oos_insert_segment+0x10c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	441a      	add	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	dd12      	ble.n	8009ff6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <tcp_oos_insert_segment+0x10c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	891b      	ldrh	r3, [r3, #8]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f7fc fd83 	bl	8006afc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	601a      	str	r2, [r3, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	bd90      	pop	{r4, r7, pc}
 800a004:	08012280 	.word	0x08012280
 800a008:	08012540 	.word	0x08012540
 800a00c:	080122cc 	.word	0x080122cc
 800a010:	2000880c 	.word	0x2000880c

0800a014 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a014:	b5b0      	push	{r4, r5, r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a022:	e03e      	b.n	800a0a2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4618      	mov	r0, r3
 800a034:	f7fc ff70 	bl	8006f18 <pbuf_clen>
 800a038:	4603      	mov	r3, r0
 800a03a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a042:	8a7a      	ldrh	r2, [r7, #18]
 800a044:	429a      	cmp	r2, r3
 800a046:	d906      	bls.n	800a056 <tcp_free_acked_segments+0x42>
 800a048:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <tcp_free_acked_segments+0xe0>)
 800a04a:	f240 4257 	movw	r2, #1111	; 0x457
 800a04e:	492a      	ldr	r1, [pc, #168]	; (800a0f8 <tcp_free_acked_segments+0xe4>)
 800a050:	482a      	ldr	r0, [pc, #168]	; (800a0fc <tcp_free_acked_segments+0xe8>)
 800a052:	f005 fddd 	bl	800fc10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a05c:	8a7b      	ldrh	r3, [r7, #18]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	891a      	ldrh	r2, [r3, #8]
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <tcp_free_acked_segments+0xec>)
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	4413      	add	r3, r2
 800a072:	b29a      	uxth	r2, r3
 800a074:	4b22      	ldr	r3, [pc, #136]	; (800a100 <tcp_free_acked_segments+0xec>)
 800a076:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a078:	6978      	ldr	r0, [r7, #20]
 800a07a:	f7fe f9da 	bl	8008432 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00c      	beq.n	800a0a2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <tcp_free_acked_segments+0x8e>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d106      	bne.n	800a0a2 <tcp_free_acked_segments+0x8e>
 800a094:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <tcp_free_acked_segments+0xe0>)
 800a096:	f240 4261 	movw	r2, #1121	; 0x461
 800a09a:	491a      	ldr	r1, [pc, #104]	; (800a104 <tcp_free_acked_segments+0xf0>)
 800a09c:	4817      	ldr	r0, [pc, #92]	; (800a0fc <tcp_free_acked_segments+0xe8>)
 800a09e:	f005 fdb7 	bl	800fc10 <iprintf>
  while (seg_list != NULL &&
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d020      	beq.n	800a0ea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fb fb61 	bl	8005776 <lwip_htonl>
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	891b      	ldrh	r3, [r3, #8]
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	899b      	ldrh	r3, [r3, #12]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fb fb41 	bl	800574c <lwip_htons>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <tcp_free_acked_segments+0xc6>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <tcp_free_acked_segments+0xc8>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	442b      	add	r3, r5
 800a0de:	18e2      	adds	r2, r4, r3
 800a0e0:	4b09      	ldr	r3, [pc, #36]	; (800a108 <tcp_free_acked_segments+0xf4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dd9c      	ble.n	800a024 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a0ea:	68bb      	ldr	r3, [r7, #8]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f4:	08012280 	.word	0x08012280
 800a0f8:	08012568 	.word	0x08012568
 800a0fc:	080122cc 	.word	0x080122cc
 800a100:	20008814 	.word	0x20008814
 800a104:	08012590 	.word	0x08012590
 800a108:	20008810 	.word	0x20008810

0800a10c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a10c:	b5b0      	push	{r4, r5, r7, lr}
 800a10e:	b094      	sub	sp, #80	; 0x50
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d106      	bne.n	800a12c <tcp_receive+0x20>
 800a11e:	4b91      	ldr	r3, [pc, #580]	; (800a364 <tcp_receive+0x258>)
 800a120:	f240 427b 	movw	r2, #1147	; 0x47b
 800a124:	4990      	ldr	r1, [pc, #576]	; (800a368 <tcp_receive+0x25c>)
 800a126:	4891      	ldr	r0, [pc, #580]	; (800a36c <tcp_receive+0x260>)
 800a128:	f005 fd72 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7d1b      	ldrb	r3, [r3, #20]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d806      	bhi.n	800a142 <tcp_receive+0x36>
 800a134:	4b8b      	ldr	r3, [pc, #556]	; (800a364 <tcp_receive+0x258>)
 800a136:	f240 427c 	movw	r2, #1148	; 0x47c
 800a13a:	498d      	ldr	r1, [pc, #564]	; (800a370 <tcp_receive+0x264>)
 800a13c:	488b      	ldr	r0, [pc, #556]	; (800a36c <tcp_receive+0x260>)
 800a13e:	f005 fd67 	bl	800fc10 <iprintf>

  if (flags & TCP_ACK) {
 800a142:	4b8c      	ldr	r3, [pc, #560]	; (800a374 <tcp_receive+0x268>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	f003 0310 	and.w	r3, r3, #16
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f000 8264 	beq.w	800a618 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a156:	461a      	mov	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15c:	4413      	add	r3, r2
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a164:	4b84      	ldr	r3, [pc, #528]	; (800a378 <tcp_receive+0x26c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	db1b      	blt.n	800a1a6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a172:	4b81      	ldr	r3, [pc, #516]	; (800a378 <tcp_receive+0x26c>)
 800a174:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a176:	429a      	cmp	r2, r3
 800a178:	d106      	bne.n	800a188 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a17e:	4b7f      	ldr	r3, [pc, #508]	; (800a37c <tcp_receive+0x270>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	db0e      	blt.n	800a1a6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a18c:	4b7b      	ldr	r3, [pc, #492]	; (800a37c <tcp_receive+0x270>)
 800a18e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a190:	429a      	cmp	r2, r3
 800a192:	d125      	bne.n	800a1e0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a194:	4b7a      	ldr	r3, [pc, #488]	; (800a380 <tcp_receive+0x274>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	89db      	ldrh	r3, [r3, #14]
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d91c      	bls.n	800a1e0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a1a6:	4b76      	ldr	r3, [pc, #472]	; (800a380 <tcp_receive+0x274>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	89db      	ldrh	r3, [r3, #14]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d205      	bcs.n	800a1d0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a1d0:	4b69      	ldr	r3, [pc, #420]	; (800a378 <tcp_receive+0x26c>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a1d8:	4b68      	ldr	r3, [pc, #416]	; (800a37c <tcp_receive+0x270>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a1e0:	4b66      	ldr	r3, [pc, #408]	; (800a37c <tcp_receive+0x270>)
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dc58      	bgt.n	800a2a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a1ee:	4b65      	ldr	r3, [pc, #404]	; (800a384 <tcp_receive+0x278>)
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d14b      	bne.n	800a28e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a200:	4413      	add	r3, r2
 800a202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a204:	429a      	cmp	r2, r3
 800a206:	d142      	bne.n	800a28e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a20e:	2b00      	cmp	r3, #0
 800a210:	db3d      	blt.n	800a28e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a216:	4b59      	ldr	r3, [pc, #356]	; (800a37c <tcp_receive+0x270>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d137      	bne.n	800a28e <tcp_receive+0x182>
              found_dupack = 1;
 800a21e:	2301      	movs	r3, #1
 800a220:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a228:	2bff      	cmp	r3, #255	; 0xff
 800a22a:	d007      	beq.n	800a23c <tcp_receive+0x130>
                ++pcb->dupacks;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a232:	3301      	adds	r3, #1
 800a234:	b2da      	uxtb	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a242:	2b03      	cmp	r3, #3
 800a244:	d91b      	bls.n	800a27e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a250:	4413      	add	r3, r2
 800a252:	b29a      	uxth	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d30a      	bcc.n	800a274 <tcp_receive+0x168>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a268:	4413      	add	r3, r2
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a272:	e004      	b.n	800a27e <tcp_receive+0x172>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a27a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a284:	2b02      	cmp	r3, #2
 800a286:	d902      	bls.n	800a28e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 feeb 	bl	800c064 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a290:	2b00      	cmp	r3, #0
 800a292:	f040 8161 	bne.w	800a558 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a29e:	e15b      	b.n	800a558 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a2a0:	4b36      	ldr	r3, [pc, #216]	; (800a37c <tcp_receive+0x270>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f2c0 814e 	blt.w	800a54e <tcp_receive+0x442>
 800a2b2:	4b32      	ldr	r3, [pc, #200]	; (800a37c <tcp_receive+0x270>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f300 8146 	bgt.w	800a54e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8b5b      	ldrh	r3, [r3, #26]
 800a2c6:	f003 0304 	and.w	r3, r3, #4
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d010      	beq.n	800a2f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	8b5b      	ldrh	r3, [r3, #26]
 800a2d2:	f023 0304 	bic.w	r3, r3, #4
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2fe:	10db      	asrs	r3, r3, #3
 800a300:	b21b      	sxth	r3, r3
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4413      	add	r3, r2
 800a30e:	b29b      	uxth	r3, r3
 800a310:	b21a      	sxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a318:	4b18      	ldr	r3, [pc, #96]	; (800a37c <tcp_receive+0x270>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	b29b      	uxth	r3, r3
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <tcp_receive+0x270>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7d1b      	ldrb	r3, [r3, #20]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	f240 8097 	bls.w	800a470 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a34e:	429a      	cmp	r2, r3
 800a350:	d245      	bcs.n	800a3de <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	8b5b      	ldrh	r3, [r3, #26]
 800a356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <tcp_receive+0x27c>
 800a35e:	2301      	movs	r3, #1
 800a360:	e013      	b.n	800a38a <tcp_receive+0x27e>
 800a362:	bf00      	nop
 800a364:	08012280 	.word	0x08012280
 800a368:	080125b0 	.word	0x080125b0
 800a36c:	080122cc 	.word	0x080122cc
 800a370:	080125cc 	.word	0x080125cc
 800a374:	20008818 	.word	0x20008818
 800a378:	2000880c 	.word	0x2000880c
 800a37c:	20008810 	.word	0x20008810
 800a380:	200087fc 	.word	0x200087fc
 800a384:	20008816 	.word	0x20008816
 800a388:	2302      	movs	r3, #2
 800a38a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a38e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a398:	fb12 f303 	smulbb	r3, r2, r3
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	bf28      	it	cs
 800a3a4:	4613      	movcs	r3, r2
 800a3a6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3b0:	4413      	add	r3, r2
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d309      	bcc.n	800a3d2 <tcp_receive+0x2c6>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a3c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3c6:	4413      	add	r3, r2
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3d0:	e04e      	b.n	800a470 <tcp_receive+0x364>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3dc:	e048      	b.n	800a470 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3e6:	4413      	add	r3, r2
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d309      	bcc.n	800a408 <tcp_receive+0x2fc>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3fc:	4413      	add	r3, r2
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a406:	e004      	b.n	800a412 <tcp_receive+0x306>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a41e:	429a      	cmp	r2, r3
 800a420:	d326      	bcc.n	800a470 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29a      	uxth	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a442:	4413      	add	r3, r2
 800a444:	b29a      	uxth	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d30a      	bcc.n	800a466 <tcp_receive+0x35a>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a45a:	4413      	add	r3, r2
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a464:	e004      	b.n	800a470 <tcp_receive+0x364>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a46c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a478:	4a98      	ldr	r2, [pc, #608]	; (800a6dc <tcp_receive+0x5d0>)
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fdca 	bl	800a014 <tcp_free_acked_segments>
 800a480:	4602      	mov	r2, r0
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48e:	4a94      	ldr	r2, [pc, #592]	; (800a6e0 <tcp_receive+0x5d4>)
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff fdbf 	bl	800a014 <tcp_free_acked_segments>
 800a496:	4602      	mov	r2, r0
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d104      	bne.n	800a4ae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4aa:	861a      	strh	r2, [r3, #48]	; 0x30
 800a4ac:	e002      	b.n	800a4b4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d103      	bne.n	800a4ca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a4d0:	4b84      	ldr	r3, [pc, #528]	; (800a6e4 <tcp_receive+0x5d8>)
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8b5b      	ldrh	r3, [r3, #26]
 800a4e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d035      	beq.n	800a556 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d118      	bne.n	800a524 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	f7fb f935 	bl	8005776 <lwip_htonl>
 800a50c:	4603      	mov	r3, r0
 800a50e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a510:	2b00      	cmp	r3, #0
 800a512:	dc20      	bgt.n	800a556 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8b5b      	ldrh	r3, [r3, #26]
 800a518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a522:	e018      	b.n	800a556 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	4618      	mov	r0, r3
 800a532:	f7fb f920 	bl	8005776 <lwip_htonl>
 800a536:	4603      	mov	r3, r0
 800a538:	1ae3      	subs	r3, r4, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	dc0b      	bgt.n	800a556 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8b5b      	ldrh	r3, [r3, #26]
 800a542:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a54c:	e003      	b.n	800a556 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 ff76 	bl	800c440 <tcp_send_empty_ack>
 800a554:	e000      	b.n	800a558 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a556:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d05b      	beq.n	800a618 <tcp_receive+0x50c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a564:	4b60      	ldr	r3, [pc, #384]	; (800a6e8 <tcp_receive+0x5dc>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	da54      	bge.n	800a618 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a56e:	4b5f      	ldr	r3, [pc, #380]	; (800a6ec <tcp_receive+0x5e0>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	b29a      	uxth	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	b29b      	uxth	r3, r3
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a582:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a58c:	10db      	asrs	r3, r3, #3
 800a58e:	b21b      	sxth	r3, r3
 800a590:	b29b      	uxth	r3, r3
 800a592:	1ad3      	subs	r3, r2, r3
 800a594:	b29b      	uxth	r3, r3
 800a596:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5a6:	4413      	add	r3, r2
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	b21a      	sxth	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a5b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	da05      	bge.n	800a5c4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a5b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5bc:	425b      	negs	r3, r3
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a5c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5ce:	109b      	asrs	r3, r3, #2
 800a5d0:	b21b      	sxth	r3, r3
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5e8:	4413      	add	r3, r2
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	b21a      	sxth	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5f8:	10db      	asrs	r3, r3, #3
 800a5fa:	b21b      	sxth	r3, r3
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a604:	b29b      	uxth	r3, r3
 800a606:	4413      	add	r3, r2
 800a608:	b29b      	uxth	r3, r3
 800a60a:	b21a      	sxth	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a618:	4b35      	ldr	r3, [pc, #212]	; (800a6f0 <tcp_receive+0x5e4>)
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 84e2 	beq.w	800afe6 <tcp_receive+0xeda>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	7d1b      	ldrb	r3, [r3, #20]
 800a626:	2b06      	cmp	r3, #6
 800a628:	f200 84dd 	bhi.w	800afe6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a630:	4b30      	ldr	r3, [pc, #192]	; (800a6f4 <tcp_receive+0x5e8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f2c0 808f 	blt.w	800a75c <tcp_receive+0x650>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a642:	4b2b      	ldr	r3, [pc, #172]	; (800a6f0 <tcp_receive+0x5e4>)
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	4619      	mov	r1, r3
 800a648:	4b2a      	ldr	r3, [pc, #168]	; (800a6f4 <tcp_receive+0x5e8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	440b      	add	r3, r1
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	3301      	adds	r3, #1
 800a652:	2b00      	cmp	r3, #0
 800a654:	f300 8082 	bgt.w	800a75c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a658:	4b27      	ldr	r3, [pc, #156]	; (800a6f8 <tcp_receive+0x5ec>)
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <tcp_receive+0x5e8>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a66a:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <tcp_receive+0x5ec>)
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d106      	bne.n	800a680 <tcp_receive+0x574>
 800a672:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <tcp_receive+0x5f0>)
 800a674:	f240 5294 	movw	r2, #1428	; 0x594
 800a678:	4921      	ldr	r1, [pc, #132]	; (800a700 <tcp_receive+0x5f4>)
 800a67a:	4822      	ldr	r0, [pc, #136]	; (800a704 <tcp_receive+0x5f8>)
 800a67c:	f005 fac8 	bl	800fc10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a686:	4293      	cmp	r3, r2
 800a688:	d906      	bls.n	800a698 <tcp_receive+0x58c>
 800a68a:	4b1c      	ldr	r3, [pc, #112]	; (800a6fc <tcp_receive+0x5f0>)
 800a68c:	f240 5295 	movw	r2, #1429	; 0x595
 800a690:	491d      	ldr	r1, [pc, #116]	; (800a708 <tcp_receive+0x5fc>)
 800a692:	481c      	ldr	r0, [pc, #112]	; (800a704 <tcp_receive+0x5f8>)
 800a694:	f005 fabc 	bl	800fc10 <iprintf>
      off = (u16_t)off32;
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a69e:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <tcp_receive+0x5ec>)
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	891b      	ldrh	r3, [r3, #8]
 800a6a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d906      	bls.n	800a6ba <tcp_receive+0x5ae>
 800a6ac:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <tcp_receive+0x5f0>)
 800a6ae:	f240 5297 	movw	r2, #1431	; 0x597
 800a6b2:	4916      	ldr	r1, [pc, #88]	; (800a70c <tcp_receive+0x600>)
 800a6b4:	4813      	ldr	r0, [pc, #76]	; (800a704 <tcp_receive+0x5f8>)
 800a6b6:	f005 faab 	bl	800fc10 <iprintf>
      inseg.len -= off;
 800a6ba:	4b0f      	ldr	r3, [pc, #60]	; (800a6f8 <tcp_receive+0x5ec>)
 800a6bc:	891a      	ldrh	r2, [r3, #8]
 800a6be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <tcp_receive+0x5ec>)
 800a6c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <tcp_receive+0x5ec>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	891a      	ldrh	r2, [r3, #8]
 800a6d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a6d8:	e02a      	b.n	800a730 <tcp_receive+0x624>
 800a6da:	bf00      	nop
 800a6dc:	080125e8 	.word	0x080125e8
 800a6e0:	080125f0 	.word	0x080125f0
 800a6e4:	20008814 	.word	0x20008814
 800a6e8:	20008810 	.word	0x20008810
 800a6ec:	200087d4 	.word	0x200087d4
 800a6f0:	20008816 	.word	0x20008816
 800a6f4:	2000880c 	.word	0x2000880c
 800a6f8:	200087ec 	.word	0x200087ec
 800a6fc:	08012280 	.word	0x08012280
 800a700:	080125f8 	.word	0x080125f8
 800a704:	080122cc 	.word	0x080122cc
 800a708:	08012608 	.word	0x08012608
 800a70c:	08012618 	.word	0x08012618
        off -= p->len;
 800a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a712:	895b      	ldrh	r3, [r3, #10]
 800a714:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a71e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a720:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a722:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a726:	2200      	movs	r2, #0
 800a728:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a732:	895b      	ldrh	r3, [r3, #10]
 800a734:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a738:	429a      	cmp	r2, r3
 800a73a:	d8e9      	bhi.n	800a710 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a73c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a740:	4619      	mov	r1, r3
 800a742:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a744:	f7fc fada 	bl	8006cfc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	4a91      	ldr	r2, [pc, #580]	; (800a994 <tcp_receive+0x888>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	4b91      	ldr	r3, [pc, #580]	; (800a998 <tcp_receive+0x88c>)
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	4a8f      	ldr	r2, [pc, #572]	; (800a994 <tcp_receive+0x888>)
 800a756:	6812      	ldr	r2, [r2, #0]
 800a758:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a75a:	e00d      	b.n	800a778 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a75c:	4b8d      	ldr	r3, [pc, #564]	; (800a994 <tcp_receive+0x888>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	da06      	bge.n	800a778 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	8b5b      	ldrh	r3, [r3, #26]
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a778:	4b86      	ldr	r3, [pc, #536]	; (800a994 <tcp_receive+0x888>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	f2c0 842a 	blt.w	800afdc <tcp_receive+0xed0>
 800a788:	4b82      	ldr	r3, [pc, #520]	; (800a994 <tcp_receive+0x888>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a794:	440b      	add	r3, r1
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	3301      	adds	r3, #1
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f300 841e 	bgt.w	800afdc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a4:	4b7b      	ldr	r3, [pc, #492]	; (800a994 <tcp_receive+0x888>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	f040 829a 	bne.w	800ace2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a7ae:	4b7a      	ldr	r3, [pc, #488]	; (800a998 <tcp_receive+0x88c>)
 800a7b0:	891c      	ldrh	r4, [r3, #8]
 800a7b2:	4b79      	ldr	r3, [pc, #484]	; (800a998 <tcp_receive+0x88c>)
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	899b      	ldrh	r3, [r3, #12]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fa ffc6 	bl	800574c <lwip_htons>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <tcp_receive+0x6c4>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e000      	b.n	800a7d2 <tcp_receive+0x6c6>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4423      	add	r3, r4
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	4b71      	ldr	r3, [pc, #452]	; (800a99c <tcp_receive+0x890>)
 800a7d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7de:	4b6f      	ldr	r3, [pc, #444]	; (800a99c <tcp_receive+0x890>)
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d275      	bcs.n	800a8d2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7e6:	4b6c      	ldr	r3, [pc, #432]	; (800a998 <tcp_receive+0x88c>)
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	899b      	ldrh	r3, [r3, #12]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fa ffac 	bl	800574c <lwip_htons>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d01f      	beq.n	800a840 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a800:	4b65      	ldr	r3, [pc, #404]	; (800a998 <tcp_receive+0x88c>)
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	899b      	ldrh	r3, [r3, #12]
 800a806:	b29b      	uxth	r3, r3
 800a808:	b21b      	sxth	r3, r3
 800a80a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a80e:	b21c      	sxth	r4, r3
 800a810:	4b61      	ldr	r3, [pc, #388]	; (800a998 <tcp_receive+0x88c>)
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	899b      	ldrh	r3, [r3, #12]
 800a816:	b29b      	uxth	r3, r3
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fa ff97 	bl	800574c <lwip_htons>
 800a81e:	4603      	mov	r3, r0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	b29b      	uxth	r3, r3
 800a824:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fa ff8e 	bl	800574c <lwip_htons>
 800a830:	4603      	mov	r3, r0
 800a832:	b21b      	sxth	r3, r3
 800a834:	4323      	orrs	r3, r4
 800a836:	b21a      	sxth	r2, r3
 800a838:	4b57      	ldr	r3, [pc, #348]	; (800a998 <tcp_receive+0x88c>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	b292      	uxth	r2, r2
 800a83e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a844:	4b54      	ldr	r3, [pc, #336]	; (800a998 <tcp_receive+0x88c>)
 800a846:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a848:	4b53      	ldr	r3, [pc, #332]	; (800a998 <tcp_receive+0x88c>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	899b      	ldrh	r3, [r3, #12]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	4618      	mov	r0, r3
 800a852:	f7fa ff7b 	bl	800574c <lwip_htons>
 800a856:	4603      	mov	r3, r0
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <tcp_receive+0x762>
            inseg.len -= 1;
 800a862:	4b4d      	ldr	r3, [pc, #308]	; (800a998 <tcp_receive+0x88c>)
 800a864:	891b      	ldrh	r3, [r3, #8]
 800a866:	3b01      	subs	r3, #1
 800a868:	b29a      	uxth	r2, r3
 800a86a:	4b4b      	ldr	r3, [pc, #300]	; (800a998 <tcp_receive+0x88c>)
 800a86c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a86e:	4b4a      	ldr	r3, [pc, #296]	; (800a998 <tcp_receive+0x88c>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	4a49      	ldr	r2, [pc, #292]	; (800a998 <tcp_receive+0x88c>)
 800a874:	8912      	ldrh	r2, [r2, #8]
 800a876:	4611      	mov	r1, r2
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fc f93f 	bl	8006afc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a87e:	4b46      	ldr	r3, [pc, #280]	; (800a998 <tcp_receive+0x88c>)
 800a880:	891c      	ldrh	r4, [r3, #8]
 800a882:	4b45      	ldr	r3, [pc, #276]	; (800a998 <tcp_receive+0x88c>)
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	899b      	ldrh	r3, [r3, #12]
 800a888:	b29b      	uxth	r3, r3
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fa ff5e 	bl	800574c <lwip_htons>
 800a890:	4603      	mov	r3, r0
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <tcp_receive+0x794>
 800a89c:	2301      	movs	r3, #1
 800a89e:	e000      	b.n	800a8a2 <tcp_receive+0x796>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4423      	add	r3, r4
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	4b3d      	ldr	r3, [pc, #244]	; (800a99c <tcp_receive+0x890>)
 800a8a8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a8aa:	4b3c      	ldr	r3, [pc, #240]	; (800a99c <tcp_receive+0x890>)
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4b38      	ldr	r3, [pc, #224]	; (800a994 <tcp_receive+0x888>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	441a      	add	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8be:	440b      	add	r3, r1
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d006      	beq.n	800a8d2 <tcp_receive+0x7c6>
 800a8c4:	4b36      	ldr	r3, [pc, #216]	; (800a9a0 <tcp_receive+0x894>)
 800a8c6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a8ca:	4936      	ldr	r1, [pc, #216]	; (800a9a4 <tcp_receive+0x898>)
 800a8cc:	4836      	ldr	r0, [pc, #216]	; (800a9a8 <tcp_receive+0x89c>)
 800a8ce:	f005 f99f 	bl	800fc10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 80e7 	beq.w	800aaaa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8dc:	4b2e      	ldr	r3, [pc, #184]	; (800a998 <tcp_receive+0x88c>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fa ff31 	bl	800574c <lwip_htons>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d010      	beq.n	800a918 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a8f6:	e00a      	b.n	800a90e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8fc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7fd fd92 	bl	8008432 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1f0      	bne.n	800a8f8 <tcp_receive+0x7ec>
 800a916:	e0c8      	b.n	800aaaa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a91e:	e052      	b.n	800a9c6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	899b      	ldrh	r3, [r3, #12]
 800a926:	b29b      	uxth	r3, r3
 800a928:	4618      	mov	r0, r3
 800a92a:	f7fa ff0f 	bl	800574c <lwip_htons>
 800a92e:	4603      	mov	r3, r0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d03d      	beq.n	800a9b6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a93a:	4b17      	ldr	r3, [pc, #92]	; (800a998 <tcp_receive+0x88c>)
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	899b      	ldrh	r3, [r3, #12]
 800a940:	b29b      	uxth	r3, r3
 800a942:	4618      	mov	r0, r3
 800a944:	f7fa ff02 	bl	800574c <lwip_htons>
 800a948:	4603      	mov	r3, r0
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a950:	2b00      	cmp	r3, #0
 800a952:	d130      	bne.n	800a9b6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a954:	4b10      	ldr	r3, [pc, #64]	; (800a998 <tcp_receive+0x88c>)
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	899b      	ldrh	r3, [r3, #12]
 800a95a:	b29c      	uxth	r4, r3
 800a95c:	2001      	movs	r0, #1
 800a95e:	f7fa fef5 	bl	800574c <lwip_htons>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <tcp_receive+0x88c>)
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	4322      	orrs	r2, r4
 800a96c:	b292      	uxth	r2, r2
 800a96e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a970:	4b09      	ldr	r3, [pc, #36]	; (800a998 <tcp_receive+0x88c>)
 800a972:	891c      	ldrh	r4, [r3, #8]
 800a974:	4b08      	ldr	r3, [pc, #32]	; (800a998 <tcp_receive+0x88c>)
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	899b      	ldrh	r3, [r3, #12]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fa fee5 	bl	800574c <lwip_htons>
 800a982:	4603      	mov	r3, r0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00e      	beq.n	800a9ac <tcp_receive+0x8a0>
 800a98e:	2301      	movs	r3, #1
 800a990:	e00d      	b.n	800a9ae <tcp_receive+0x8a2>
 800a992:	bf00      	nop
 800a994:	2000880c 	.word	0x2000880c
 800a998:	200087ec 	.word	0x200087ec
 800a99c:	20008816 	.word	0x20008816
 800a9a0:	08012280 	.word	0x08012280
 800a9a4:	08012628 	.word	0x08012628
 800a9a8:	080122cc 	.word	0x080122cc
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4423      	add	r3, r4
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	4b98      	ldr	r3, [pc, #608]	; (800ac14 <tcp_receive+0xb08>)
 800a9b4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a9c0:	6938      	ldr	r0, [r7, #16]
 800a9c2:	f7fd fd36 	bl	8008432 <tcp_seg_free>
            while (next &&
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d00e      	beq.n	800a9ea <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a9cc:	4b91      	ldr	r3, [pc, #580]	; (800ac14 <tcp_receive+0xb08>)
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	4b91      	ldr	r3, [pc, #580]	; (800ac18 <tcp_receive+0xb0c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	441a      	add	r2, r3
 800a9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9e0:	8909      	ldrh	r1, [r1, #8]
 800a9e2:	440b      	add	r3, r1
 800a9e4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da9a      	bge.n	800a920 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d059      	beq.n	800aaa4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a9f0:	4b88      	ldr	r3, [pc, #544]	; (800ac14 <tcp_receive+0xb08>)
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	4b88      	ldr	r3, [pc, #544]	; (800ac18 <tcp_receive+0xb0c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	441a      	add	r2, r3
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	1ad3      	subs	r3, r2, r3
            if (next &&
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd4d      	ble.n	800aaa4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	4b81      	ldr	r3, [pc, #516]	; (800ac18 <tcp_receive+0xb0c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	4b80      	ldr	r3, [pc, #512]	; (800ac1c <tcp_receive+0xb10>)
 800aa1c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa1e:	4b7f      	ldr	r3, [pc, #508]	; (800ac1c <tcp_receive+0xb10>)
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	899b      	ldrh	r3, [r3, #12]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fa fe90 	bl	800574c <lwip_htons>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <tcp_receive+0x938>
                inseg.len -= 1;
 800aa38:	4b78      	ldr	r3, [pc, #480]	; (800ac1c <tcp_receive+0xb10>)
 800aa3a:	891b      	ldrh	r3, [r3, #8]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	4b76      	ldr	r3, [pc, #472]	; (800ac1c <tcp_receive+0xb10>)
 800aa42:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aa44:	4b75      	ldr	r3, [pc, #468]	; (800ac1c <tcp_receive+0xb10>)
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4a74      	ldr	r2, [pc, #464]	; (800ac1c <tcp_receive+0xb10>)
 800aa4a:	8912      	ldrh	r2, [r2, #8]
 800aa4c:	4611      	mov	r1, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fc f854 	bl	8006afc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa54:	4b71      	ldr	r3, [pc, #452]	; (800ac1c <tcp_receive+0xb10>)
 800aa56:	891c      	ldrh	r4, [r3, #8]
 800aa58:	4b70      	ldr	r3, [pc, #448]	; (800ac1c <tcp_receive+0xb10>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	899b      	ldrh	r3, [r3, #12]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fa fe73 	bl	800574c <lwip_htons>
 800aa66:	4603      	mov	r3, r0
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <tcp_receive+0x96a>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e000      	b.n	800aa78 <tcp_receive+0x96c>
 800aa76:	2300      	movs	r3, #0
 800aa78:	4423      	add	r3, r4
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b65      	ldr	r3, [pc, #404]	; (800ac14 <tcp_receive+0xb08>)
 800aa7e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa80:	4b64      	ldr	r3, [pc, #400]	; (800ac14 <tcp_receive+0xb08>)
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b64      	ldr	r3, [pc, #400]	; (800ac18 <tcp_receive+0xb0c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	441a      	add	r2, r3
 800aa8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d006      	beq.n	800aaa4 <tcp_receive+0x998>
 800aa96:	4b62      	ldr	r3, [pc, #392]	; (800ac20 <tcp_receive+0xb14>)
 800aa98:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800aa9c:	4961      	ldr	r1, [pc, #388]	; (800ac24 <tcp_receive+0xb18>)
 800aa9e:	4862      	ldr	r0, [pc, #392]	; (800ac28 <tcp_receive+0xb1c>)
 800aaa0:	f005 f8b6 	bl	800fc10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aaa8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aaaa:	4b5a      	ldr	r3, [pc, #360]	; (800ac14 <tcp_receive+0xb08>)
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	4b59      	ldr	r3, [pc, #356]	; (800ac18 <tcp_receive+0xb0c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	441a      	add	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aabe:	4b55      	ldr	r3, [pc, #340]	; (800ac14 <tcp_receive+0xb08>)
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d206      	bcs.n	800aad4 <tcp_receive+0x9c8>
 800aac6:	4b56      	ldr	r3, [pc, #344]	; (800ac20 <tcp_receive+0xb14>)
 800aac8:	f240 6207 	movw	r2, #1543	; 0x607
 800aacc:	4957      	ldr	r1, [pc, #348]	; (800ac2c <tcp_receive+0xb20>)
 800aace:	4856      	ldr	r0, [pc, #344]	; (800ac28 <tcp_receive+0xb1c>)
 800aad0:	f005 f89e 	bl	800fc10 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aad8:	4b4e      	ldr	r3, [pc, #312]	; (800ac14 <tcp_receive+0xb08>)
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	b29a      	uxth	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7fc ffc5 	bl	8007a74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aaea:	4b4c      	ldr	r3, [pc, #304]	; (800ac1c <tcp_receive+0xb10>)
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	891b      	ldrh	r3, [r3, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d006      	beq.n	800ab02 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aaf4:	4b49      	ldr	r3, [pc, #292]	; (800ac1c <tcp_receive+0xb10>)
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	4a4d      	ldr	r2, [pc, #308]	; (800ac30 <tcp_receive+0xb24>)
 800aafa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aafc:	4b47      	ldr	r3, [pc, #284]	; (800ac1c <tcp_receive+0xb10>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab02:	4b46      	ldr	r3, [pc, #280]	; (800ac1c <tcp_receive+0xb10>)
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	899b      	ldrh	r3, [r3, #12]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fa fe1e 	bl	800574c <lwip_htons>
 800ab10:	4603      	mov	r3, r0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 80b8 	beq.w	800ac8e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ab1e:	4b45      	ldr	r3, [pc, #276]	; (800ac34 <tcp_receive+0xb28>)
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	f043 0320 	orr.w	r3, r3, #32
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	4b42      	ldr	r3, [pc, #264]	; (800ac34 <tcp_receive+0xb28>)
 800ab2a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ab2c:	e0af      	b.n	800ac8e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab32:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	4a36      	ldr	r2, [pc, #216]	; (800ac18 <tcp_receive+0xb0c>)
 800ab3e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	891b      	ldrh	r3, [r3, #8]
 800ab44:	461c      	mov	r4, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	899b      	ldrh	r3, [r3, #12]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fa fdfc 	bl	800574c <lwip_htons>
 800ab54:	4603      	mov	r3, r0
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f003 0303 	and.w	r3, r3, #3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <tcp_receive+0xa58>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <tcp_receive+0xa5a>
 800ab64:	2300      	movs	r3, #0
 800ab66:	191a      	adds	r2, r3, r4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	441a      	add	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab76:	461c      	mov	r4, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	891b      	ldrh	r3, [r3, #8]
 800ab7c:	461d      	mov	r5, r3
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	899b      	ldrh	r3, [r3, #12]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fa fde0 	bl	800574c <lwip_htons>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 0303 	and.w	r3, r3, #3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <tcp_receive+0xa90>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <tcp_receive+0xa92>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	442b      	add	r3, r5
 800aba0:	429c      	cmp	r4, r3
 800aba2:	d206      	bcs.n	800abb2 <tcp_receive+0xaa6>
 800aba4:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <tcp_receive+0xb14>)
 800aba6:	f240 622b 	movw	r2, #1579	; 0x62b
 800abaa:	4923      	ldr	r1, [pc, #140]	; (800ac38 <tcp_receive+0xb2c>)
 800abac:	481e      	ldr	r0, [pc, #120]	; (800ac28 <tcp_receive+0xb1c>)
 800abae:	f005 f82f 	bl	800fc10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	891b      	ldrh	r3, [r3, #8]
 800abb6:	461c      	mov	r4, r3
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	68db      	ldr	r3, [r3, #12]
 800abbc:	899b      	ldrh	r3, [r3, #12]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fa fdc3 	bl	800574c <lwip_htons>
 800abc6:	4603      	mov	r3, r0
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <tcp_receive+0xaca>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <tcp_receive+0xacc>
 800abd6:	2300      	movs	r3, #0
 800abd8:	1919      	adds	r1, r3, r4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abde:	b28b      	uxth	r3, r1
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f7fc ff43 	bl	8007a74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	891b      	ldrh	r3, [r3, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d028      	beq.n	800ac4a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800abf8:	4b0d      	ldr	r3, [pc, #52]	; (800ac30 <tcp_receive+0xb24>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01d      	beq.n	800ac3c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ac00:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <tcp_receive+0xb24>)
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7fc f9be 	bl	8006f8c <pbuf_cat>
 800ac10:	e018      	b.n	800ac44 <tcp_receive+0xb38>
 800ac12:	bf00      	nop
 800ac14:	20008816 	.word	0x20008816
 800ac18:	2000880c 	.word	0x2000880c
 800ac1c:	200087ec 	.word	0x200087ec
 800ac20:	08012280 	.word	0x08012280
 800ac24:	08012660 	.word	0x08012660
 800ac28:	080122cc 	.word	0x080122cc
 800ac2c:	0801269c 	.word	0x0801269c
 800ac30:	2000881c 	.word	0x2000881c
 800ac34:	20008819 	.word	0x20008819
 800ac38:	080126bc 	.word	0x080126bc
            } else {
              recv_data = cseg->p;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4a70      	ldr	r2, [pc, #448]	; (800ae04 <tcp_receive+0xcf8>)
 800ac42:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2200      	movs	r2, #0
 800ac48:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	899b      	ldrh	r3, [r3, #12]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fa fd7a 	bl	800574c <lwip_htons>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00d      	beq.n	800ac80 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ac64:	4b68      	ldr	r3, [pc, #416]	; (800ae08 <tcp_receive+0xcfc>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f043 0320 	orr.w	r3, r3, #32
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	4b66      	ldr	r3, [pc, #408]	; (800ae08 <tcp_receive+0xcfc>)
 800ac70:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	7d1b      	ldrb	r3, [r3, #20]
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d102      	bne.n	800ac80 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2207      	movs	r2, #7
 800ac7e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	f7fd fbd2 	bl	8008432 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d008      	beq.n	800aca8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aca2:	429a      	cmp	r2, r3
 800aca4:	f43f af43 	beq.w	800ab2e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8b5b      	ldrh	r3, [r3, #26]
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00e      	beq.n	800acd2 <tcp_receive+0xbc6>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8b5b      	ldrh	r3, [r3, #26]
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	835a      	strh	r2, [r3, #26]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8b5b      	ldrh	r3, [r3, #26]
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	b29a      	uxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800acd0:	e188      	b.n	800afe4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	8b5b      	ldrh	r3, [r3, #26]
 800acd6:	f043 0301 	orr.w	r3, r3, #1
 800acda:	b29a      	uxth	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ace0:	e180      	b.n	800afe4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800acea:	4848      	ldr	r0, [pc, #288]	; (800ae0c <tcp_receive+0xd00>)
 800acec:	f7fd fbba 	bl	8008464 <tcp_seg_copy>
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	675a      	str	r2, [r3, #116]	; 0x74
 800acf6:	e16d      	b.n	800afd4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad02:	e157      	b.n	800afb4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	4b41      	ldr	r3, [pc, #260]	; (800ae10 <tcp_receive+0xd04>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d11d      	bne.n	800ad4e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ad12:	4b3e      	ldr	r3, [pc, #248]	; (800ae0c <tcp_receive+0xd00>)
 800ad14:	891a      	ldrh	r2, [r3, #8]
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	891b      	ldrh	r3, [r3, #8]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	f240 814f 	bls.w	800afbe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad20:	483a      	ldr	r0, [pc, #232]	; (800ae0c <tcp_receive+0xd00>)
 800ad22:	f7fd fb9f 	bl	8008464 <tcp_seg_copy>
 800ad26:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 8149 	beq.w	800afc2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <tcp_receive+0xc32>
                    prev->next = cseg;
 800ad36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	e002      	b.n	800ad44 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ad44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad46:	6978      	ldr	r0, [r7, #20]
 800ad48:	f7ff f8dc 	bl	8009f04 <tcp_oos_insert_segment>
                }
                break;
 800ad4c:	e139      	b.n	800afc2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d117      	bne.n	800ad84 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad54:	4b2e      	ldr	r3, [pc, #184]	; (800ae10 <tcp_receive+0xd04>)
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	da57      	bge.n	800ae14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad64:	4829      	ldr	r0, [pc, #164]	; (800ae0c <tcp_receive+0xd00>)
 800ad66:	f7fd fb7d 	bl	8008464 <tcp_seg_copy>
 800ad6a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 8129 	beq.w	800afc6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ad7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad7c:	69b8      	ldr	r0, [r7, #24]
 800ad7e:	f7ff f8c1 	bl	8009f04 <tcp_oos_insert_segment>
                  }
                  break;
 800ad82:	e120      	b.n	800afc6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad84:	4b22      	ldr	r3, [pc, #136]	; (800ae10 <tcp_receive+0xd04>)
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	db3e      	blt.n	800ae14 <tcp_receive+0xd08>
 800ad96:	4b1e      	ldr	r3, [pc, #120]	; (800ae10 <tcp_receive+0xd04>)
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	3301      	adds	r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc35      	bgt.n	800ae14 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ada8:	4818      	ldr	r0, [pc, #96]	; (800ae0c <tcp_receive+0xd00>)
 800adaa:	f7fd fb5b 	bl	8008464 <tcp_seg_copy>
 800adae:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 8109 	beq.w	800afca <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adc0:	8912      	ldrh	r2, [r2, #8]
 800adc2:	441a      	add	r2, r3
 800adc4:	4b12      	ldr	r3, [pc, #72]	; (800ae10 <tcp_receive+0xd04>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd12      	ble.n	800adf4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800adce:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <tcp_receive+0xd04>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	b29a      	uxth	r2, r3
 800add4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	b29b      	uxth	r3, r3
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	b29a      	uxth	r2, r3
 800ade0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ade4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adea:	891b      	ldrh	r3, [r3, #8]
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f7fb fe84 	bl	8006afc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800adfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adfc:	69f8      	ldr	r0, [r7, #28]
 800adfe:	f7ff f881 	bl	8009f04 <tcp_oos_insert_segment>
                  }
                  break;
 800ae02:	e0e2      	b.n	800afca <tcp_receive+0xebe>
 800ae04:	2000881c 	.word	0x2000881c
 800ae08:	20008819 	.word	0x20008819
 800ae0c:	200087ec 	.word	0x200087ec
 800ae10:	2000880c 	.word	0x2000880c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f040 80c6 	bne.w	800afae <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ae22:	4b80      	ldr	r3, [pc, #512]	; (800b024 <tcp_receive+0xf18>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f340 80bd 	ble.w	800afae <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	899b      	ldrh	r3, [r3, #12]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fa fc85 	bl	800574c <lwip_htons>
 800ae42:	4603      	mov	r3, r0
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f003 0301 	and.w	r3, r3, #1
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f040 80bf 	bne.w	800afce <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ae50:	4875      	ldr	r0, [pc, #468]	; (800b028 <tcp_receive+0xf1c>)
 800ae52:	f7fd fb07 	bl	8008464 <tcp_seg_copy>
 800ae56:	4602      	mov	r2, r0
 800ae58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80b6 	beq.w	800afd2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae6e:	8912      	ldrh	r2, [r2, #8]
 800ae70:	441a      	add	r2, r3
 800ae72:	4b6c      	ldr	r3, [pc, #432]	; (800b024 <tcp_receive+0xf18>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd12      	ble.n	800aea2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ae7c:	4b69      	ldr	r3, [pc, #420]	; (800b024 <tcp_receive+0xf18>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ae92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae98:	891b      	ldrh	r3, [r3, #8]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	f7fb fe2d 	bl	8006afc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aea2:	4b62      	ldr	r3, [pc, #392]	; (800b02c <tcp_receive+0xf20>)
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	4b5e      	ldr	r3, [pc, #376]	; (800b024 <tcp_receive+0xf18>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aeb6:	440b      	add	r3, r1
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f340 8089 	ble.w	800afd2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	899b      	ldrh	r3, [r3, #12]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fa fc3e 	bl	800574c <lwip_htons>
 800aed0:	4603      	mov	r3, r0
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d022      	beq.n	800af22 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	899b      	ldrh	r3, [r3, #12]
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	b21b      	sxth	r3, r3
 800aee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aeec:	b21c      	sxth	r4, r3
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	899b      	ldrh	r3, [r3, #12]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fa fc27 	bl	800574c <lwip_htons>
 800aefe:	4603      	mov	r3, r0
 800af00:	b2db      	uxtb	r3, r3
 800af02:	b29b      	uxth	r3, r3
 800af04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fa fc1e 	bl	800574c <lwip_htons>
 800af10:	4603      	mov	r3, r0
 800af12:	b21b      	sxth	r3, r3
 800af14:	4323      	orrs	r3, r4
 800af16:	b21a      	sxth	r2, r3
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	b292      	uxth	r2, r2
 800af20:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	b29a      	uxth	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af2c:	4413      	add	r3, r2
 800af2e:	b299      	uxth	r1, r3
 800af30:	4b3c      	ldr	r3, [pc, #240]	; (800b024 <tcp_receive+0xf18>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	b29a      	uxth	r2, r3
 800af36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	1a8a      	subs	r2, r1, r2
 800af3c:	b292      	uxth	r2, r2
 800af3e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	891b      	ldrh	r3, [r3, #8]
 800af4c:	4619      	mov	r1, r3
 800af4e:	4610      	mov	r0, r2
 800af50:	f7fb fdd4 	bl	8006afc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	891c      	ldrh	r4, [r3, #8]
 800af5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	899b      	ldrh	r3, [r3, #12]
 800af62:	b29b      	uxth	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	f7fa fbf1 	bl	800574c <lwip_htons>
 800af6a:	4603      	mov	r3, r0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <tcp_receive+0xe6e>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <tcp_receive+0xe70>
 800af7a:	2300      	movs	r3, #0
 800af7c:	4423      	add	r3, r4
 800af7e:	b29a      	uxth	r2, r3
 800af80:	4b2a      	ldr	r3, [pc, #168]	; (800b02c <tcp_receive+0xf20>)
 800af82:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af84:	4b29      	ldr	r3, [pc, #164]	; (800b02c <tcp_receive+0xf20>)
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	4b26      	ldr	r3, [pc, #152]	; (800b024 <tcp_receive+0xf18>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	441a      	add	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af98:	440b      	add	r3, r1
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d019      	beq.n	800afd2 <tcp_receive+0xec6>
 800af9e:	4b24      	ldr	r3, [pc, #144]	; (800b030 <tcp_receive+0xf24>)
 800afa0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800afa4:	4923      	ldr	r1, [pc, #140]	; (800b034 <tcp_receive+0xf28>)
 800afa6:	4824      	ldr	r0, [pc, #144]	; (800b038 <tcp_receive+0xf2c>)
 800afa8:	f004 fe32 	bl	800fc10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800afac:	e011      	b.n	800afd2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f47f aea4 	bne.w	800ad04 <tcp_receive+0xbf8>
 800afbc:	e00a      	b.n	800afd4 <tcp_receive+0xec8>
                break;
 800afbe:	bf00      	nop
 800afc0:	e008      	b.n	800afd4 <tcp_receive+0xec8>
                break;
 800afc2:	bf00      	nop
 800afc4:	e006      	b.n	800afd4 <tcp_receive+0xec8>
                  break;
 800afc6:	bf00      	nop
 800afc8:	e004      	b.n	800afd4 <tcp_receive+0xec8>
                  break;
 800afca:	bf00      	nop
 800afcc:	e002      	b.n	800afd4 <tcp_receive+0xec8>
                  break;
 800afce:	bf00      	nop
 800afd0:	e000      	b.n	800afd4 <tcp_receive+0xec8>
                break;
 800afd2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fa33 	bl	800c440 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800afda:	e003      	b.n	800afe4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fa2f 	bl	800c440 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afe2:	e01a      	b.n	800b01a <tcp_receive+0xf0e>
 800afe4:	e019      	b.n	800b01a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afe6:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <tcp_receive+0xf18>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	db0a      	blt.n	800b00a <tcp_receive+0xefe>
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <tcp_receive+0xf18>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b000:	440b      	add	r3, r1
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	3301      	adds	r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	dd07      	ble.n	800b01a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	8b5b      	ldrh	r3, [r3, #26]
 800b00e:	f043 0302 	orr.w	r3, r3, #2
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b018:	e7ff      	b.n	800b01a <tcp_receive+0xf0e>
 800b01a:	bf00      	nop
 800b01c:	3750      	adds	r7, #80	; 0x50
 800b01e:	46bd      	mov	sp, r7
 800b020:	bdb0      	pop	{r4, r5, r7, pc}
 800b022:	bf00      	nop
 800b024:	2000880c 	.word	0x2000880c
 800b028:	200087ec 	.word	0x200087ec
 800b02c:	20008816 	.word	0x20008816
 800b030:	08012280 	.word	0x08012280
 800b034:	08012628 	.word	0x08012628
 800b038:	080122cc 	.word	0x080122cc

0800b03c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <tcp_get_next_optbyte+0x5c>)
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	b291      	uxth	r1, r2
 800b04a:	4a13      	ldr	r2, [pc, #76]	; (800b098 <tcp_get_next_optbyte+0x5c>)
 800b04c:	8011      	strh	r1, [r2, #0]
 800b04e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b050:	4b12      	ldr	r3, [pc, #72]	; (800b09c <tcp_get_next_optbyte+0x60>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <tcp_get_next_optbyte+0x26>
 800b058:	4b11      	ldr	r3, [pc, #68]	; (800b0a0 <tcp_get_next_optbyte+0x64>)
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	88fa      	ldrh	r2, [r7, #6]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d208      	bcs.n	800b074 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b062:	4b10      	ldr	r3, [pc, #64]	; (800b0a4 <tcp_get_next_optbyte+0x68>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3314      	adds	r3, #20
 800b068:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b06a:	88fb      	ldrh	r3, [r7, #6]
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	4413      	add	r3, r2
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	e00b      	b.n	800b08c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	b2da      	uxtb	r2, r3
 800b078:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <tcp_get_next_optbyte+0x64>)
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b082:	4b06      	ldr	r3, [pc, #24]	; (800b09c <tcp_get_next_optbyte+0x60>)
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	797b      	ldrb	r3, [r7, #5]
 800b088:	4413      	add	r3, r2
 800b08a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20008808 	.word	0x20008808
 800b09c:	20008804 	.word	0x20008804
 800b0a0:	20008802 	.word	0x20008802
 800b0a4:	200087fc 	.word	0x200087fc

0800b0a8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <tcp_parseopt+0x1c>
 800b0b6:	4b32      	ldr	r3, [pc, #200]	; (800b180 <tcp_parseopt+0xd8>)
 800b0b8:	f240 727d 	movw	r2, #1917	; 0x77d
 800b0bc:	4931      	ldr	r1, [pc, #196]	; (800b184 <tcp_parseopt+0xdc>)
 800b0be:	4832      	ldr	r0, [pc, #200]	; (800b188 <tcp_parseopt+0xe0>)
 800b0c0:	f004 fda6 	bl	800fc10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b0c4:	4b31      	ldr	r3, [pc, #196]	; (800b18c <tcp_parseopt+0xe4>)
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d055      	beq.n	800b178 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b0cc:	4b30      	ldr	r3, [pc, #192]	; (800b190 <tcp_parseopt+0xe8>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	801a      	strh	r2, [r3, #0]
 800b0d2:	e045      	b.n	800b160 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b0d4:	f7ff ffb2 	bl	800b03c <tcp_get_next_optbyte>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d006      	beq.n	800b0f0 <tcp_parseopt+0x48>
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	dc2b      	bgt.n	800b13e <tcp_parseopt+0x96>
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d041      	beq.n	800b16e <tcp_parseopt+0xc6>
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d127      	bne.n	800b13e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b0ee:	e037      	b.n	800b160 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b0f0:	f7ff ffa4 	bl	800b03c <tcp_get_next_optbyte>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d13b      	bne.n	800b172 <tcp_parseopt+0xca>
 800b0fa:	4b25      	ldr	r3, [pc, #148]	; (800b190 <tcp_parseopt+0xe8>)
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	3301      	adds	r3, #1
 800b100:	4a22      	ldr	r2, [pc, #136]	; (800b18c <tcp_parseopt+0xe4>)
 800b102:	8812      	ldrh	r2, [r2, #0]
 800b104:	4293      	cmp	r3, r2
 800b106:	da34      	bge.n	800b172 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b108:	f7ff ff98 	bl	800b03c <tcp_get_next_optbyte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	b29b      	uxth	r3, r3
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b114:	f7ff ff92 	bl	800b03c <tcp_get_next_optbyte>
 800b118:	4603      	mov	r3, r0
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	89bb      	ldrh	r3, [r7, #12]
 800b11e:	4313      	orrs	r3, r2
 800b120:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b122:	89bb      	ldrh	r3, [r7, #12]
 800b124:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b128:	d804      	bhi.n	800b134 <tcp_parseopt+0x8c>
 800b12a:	89bb      	ldrh	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <tcp_parseopt+0x8c>
 800b130:	89ba      	ldrh	r2, [r7, #12]
 800b132:	e001      	b.n	800b138 <tcp_parseopt+0x90>
 800b134:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b13c:	e010      	b.n	800b160 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b13e:	f7ff ff7d 	bl	800b03c <tcp_get_next_optbyte>
 800b142:	4603      	mov	r3, r0
 800b144:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d914      	bls.n	800b176 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b14c:	7afb      	ldrb	r3, [r7, #11]
 800b14e:	b29a      	uxth	r2, r3
 800b150:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <tcp_parseopt+0xe8>)
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	4413      	add	r3, r2
 800b156:	b29b      	uxth	r3, r3
 800b158:	3b02      	subs	r3, #2
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <tcp_parseopt+0xe8>)
 800b15e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b160:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <tcp_parseopt+0xe8>)
 800b162:	881a      	ldrh	r2, [r3, #0]
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <tcp_parseopt+0xe4>)
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d3b3      	bcc.n	800b0d4 <tcp_parseopt+0x2c>
 800b16c:	e004      	b.n	800b178 <tcp_parseopt+0xd0>
          return;
 800b16e:	bf00      	nop
 800b170:	e002      	b.n	800b178 <tcp_parseopt+0xd0>
            return;
 800b172:	bf00      	nop
 800b174:	e000      	b.n	800b178 <tcp_parseopt+0xd0>
            return;
 800b176:	bf00      	nop
      }
    }
  }
}
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	08012280 	.word	0x08012280
 800b184:	080126e4 	.word	0x080126e4
 800b188:	080122cc 	.word	0x080122cc
 800b18c:	20008800 	.word	0x20008800
 800b190:	20008808 	.word	0x20008808

0800b194 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b194:	b480      	push	{r7}
 800b196:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b198:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <tcp_trigger_input_pcb_close+0x1c>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	f043 0310 	orr.w	r3, r3, #16
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <tcp_trigger_input_pcb_close+0x1c>)
 800b1a4:	701a      	strb	r2, [r3, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	20008819 	.word	0x20008819

0800b1b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00a      	beq.n	800b1dc <tcp_route+0x28>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	7a1b      	ldrb	r3, [r3, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d006      	beq.n	800b1dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	7a1b      	ldrb	r3, [r3, #8]
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fb fab8 	bl	8006748 <netif_get_by_index>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	e003      	b.n	800b1e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f003 fa37 	bl	800e650 <ip4_route>
 800b1e2:	4603      	mov	r3, r0
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b1ec:	b590      	push	{r4, r7, lr}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d105      	bne.n	800b20e <tcp_create_segment+0x22>
 800b202:	4b44      	ldr	r3, [pc, #272]	; (800b314 <tcp_create_segment+0x128>)
 800b204:	22a3      	movs	r2, #163	; 0xa3
 800b206:	4944      	ldr	r1, [pc, #272]	; (800b318 <tcp_create_segment+0x12c>)
 800b208:	4844      	ldr	r0, [pc, #272]	; (800b31c <tcp_create_segment+0x130>)
 800b20a:	f004 fd01 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <tcp_create_segment+0x34>
 800b214:	4b3f      	ldr	r3, [pc, #252]	; (800b314 <tcp_create_segment+0x128>)
 800b216:	22a4      	movs	r2, #164	; 0xa4
 800b218:	4941      	ldr	r1, [pc, #260]	; (800b320 <tcp_create_segment+0x134>)
 800b21a:	4840      	ldr	r0, [pc, #256]	; (800b31c <tcp_create_segment+0x130>)
 800b21c:	f004 fcf8 	bl	800fc10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b220:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b22e:	2003      	movs	r0, #3
 800b230:	f7fa ff04 	bl	800603c <memp_malloc>
 800b234:	6138      	str	r0, [r7, #16]
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b23c:	68b8      	ldr	r0, [r7, #8]
 800b23e:	f7fb fde3 	bl	8006e08 <pbuf_free>
    return NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	e061      	b.n	800b30a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b24c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	891a      	ldrh	r2, [r3, #8]
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	b29b      	uxth	r3, r3
 800b262:	429a      	cmp	r2, r3
 800b264:	d205      	bcs.n	800b272 <tcp_create_segment+0x86>
 800b266:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <tcp_create_segment+0x128>)
 800b268:	22b0      	movs	r2, #176	; 0xb0
 800b26a:	492e      	ldr	r1, [pc, #184]	; (800b324 <tcp_create_segment+0x138>)
 800b26c:	482b      	ldr	r0, [pc, #172]	; (800b31c <tcp_create_segment+0x130>)
 800b26e:	f004 fccf 	bl	800fc10 <iprintf>
  seg->len = p->tot_len - optlen;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	891a      	ldrh	r2, [r3, #8]
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	b29b      	uxth	r3, r3
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b282:	2114      	movs	r1, #20
 800b284:	68b8      	ldr	r0, [r7, #8]
 800b286:	f7fb fd29 	bl	8006cdc <pbuf_add_header>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b290:	6938      	ldr	r0, [r7, #16]
 800b292:	f7fd f8ce 	bl	8008432 <tcp_seg_free>
    return NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	e037      	b.n	800b30a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8ada      	ldrh	r2, [r3, #22]
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	68dc      	ldr	r4, [r3, #12]
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f7fa fa4d 	bl	800574c <lwip_htons>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8b1a      	ldrh	r2, [r3, #24]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	68dc      	ldr	r4, [r3, #12]
 800b2be:	4610      	mov	r0, r2
 800b2c0:	f7fa fa44 	bl	800574c <lwip_htons>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	68dc      	ldr	r4, [r3, #12]
 800b2cc:	6838      	ldr	r0, [r7, #0]
 800b2ce:	f7fa fa52 	bl	8005776 <lwip_htonl>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	089b      	lsrs	r3, r3, #2
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3305      	adds	r3, #5
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	031b      	lsls	r3, r3, #12
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	68dc      	ldr	r4, [r3, #12]
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	f7fa fa2a 	bl	800574c <lwip_htons>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	749a      	strb	r2, [r3, #18]
 800b304:	2200      	movs	r2, #0
 800b306:	74da      	strb	r2, [r3, #19]
  return seg;
 800b308:	693b      	ldr	r3, [r7, #16]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd90      	pop	{r4, r7, pc}
 800b312:	bf00      	nop
 800b314:	08012700 	.word	0x08012700
 800b318:	08012734 	.word	0x08012734
 800b31c:	08012754 	.word	0x08012754
 800b320:	0801277c 	.word	0x0801277c
 800b324:	080127a0 	.word	0x080127a0

0800b328 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b328:	b590      	push	{r4, r7, lr}
 800b32a:	b08b      	sub	sp, #44	; 0x2c
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	460b      	mov	r3, r1
 800b332:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
 800b338:	2300      	movs	r3, #0
 800b33a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <tcp_split_unsent_seg+0x2c>
 800b346:	4b95      	ldr	r3, [pc, #596]	; (800b59c <tcp_split_unsent_seg+0x274>)
 800b348:	f240 324b 	movw	r2, #843	; 0x34b
 800b34c:	4994      	ldr	r1, [pc, #592]	; (800b5a0 <tcp_split_unsent_seg+0x278>)
 800b34e:	4895      	ldr	r0, [pc, #596]	; (800b5a4 <tcp_split_unsent_seg+0x27c>)
 800b350:	f004 fc5e 	bl	800fc10 <iprintf>

  useg = pcb->unsent;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b358:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b364:	e116      	b.n	800b594 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b366:	887b      	ldrh	r3, [r7, #2]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d109      	bne.n	800b380 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b36c:	4b8b      	ldr	r3, [pc, #556]	; (800b59c <tcp_split_unsent_seg+0x274>)
 800b36e:	f240 3253 	movw	r2, #851	; 0x353
 800b372:	498d      	ldr	r1, [pc, #564]	; (800b5a8 <tcp_split_unsent_seg+0x280>)
 800b374:	488b      	ldr	r0, [pc, #556]	; (800b5a4 <tcp_split_unsent_seg+0x27c>)
 800b376:	f004 fc4b 	bl	800fc10 <iprintf>
    return ERR_VAL;
 800b37a:	f06f 0305 	mvn.w	r3, #5
 800b37e:	e109      	b.n	800b594 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	891b      	ldrh	r3, [r3, #8]
 800b384:	887a      	ldrh	r2, [r7, #2]
 800b386:	429a      	cmp	r2, r3
 800b388:	d301      	bcc.n	800b38e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	e102      	b.n	800b594 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b392:	887a      	ldrh	r2, [r7, #2]
 800b394:	429a      	cmp	r2, r3
 800b396:	d906      	bls.n	800b3a6 <tcp_split_unsent_seg+0x7e>
 800b398:	4b80      	ldr	r3, [pc, #512]	; (800b59c <tcp_split_unsent_seg+0x274>)
 800b39a:	f240 325b 	movw	r2, #859	; 0x35b
 800b39e:	4983      	ldr	r1, [pc, #524]	; (800b5ac <tcp_split_unsent_seg+0x284>)
 800b3a0:	4880      	ldr	r0, [pc, #512]	; (800b5a4 <tcp_split_unsent_seg+0x27c>)
 800b3a2:	f004 fc35 	bl	800fc10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	891b      	ldrh	r3, [r3, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <tcp_split_unsent_seg+0x94>
 800b3ae:	4b7b      	ldr	r3, [pc, #492]	; (800b59c <tcp_split_unsent_seg+0x274>)
 800b3b0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b3b4:	497e      	ldr	r1, [pc, #504]	; (800b5b0 <tcp_split_unsent_seg+0x288>)
 800b3b6:	487b      	ldr	r0, [pc, #492]	; (800b5a4 <tcp_split_unsent_seg+0x27c>)
 800b3b8:	f004 fc2a 	bl	800fc10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	7a9b      	ldrb	r3, [r3, #10]
 800b3c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	891a      	ldrh	r2, [r3, #8]
 800b3d2:	887b      	ldrh	r3, [r7, #2]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	89bb      	ldrh	r3, [r7, #12]
 800b3de:	4413      	add	r3, r2
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	2036      	movs	r0, #54	; 0x36
 800b3ea:	f7fb fa29 	bl	8006840 <pbuf_alloc>
 800b3ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 80b7 	beq.w	800b566 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	891a      	ldrh	r2, [r3, #8]
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	891b      	ldrh	r3, [r3, #8]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	b29a      	uxth	r2, r3
 800b406:	887b      	ldrh	r3, [r7, #2]
 800b408:	4413      	add	r3, r2
 800b40a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	6858      	ldr	r0, [r3, #4]
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	7bbb      	ldrb	r3, [r7, #14]
 800b416:	18d1      	adds	r1, r2, r3
 800b418:	897b      	ldrh	r3, [r7, #10]
 800b41a:	89ba      	ldrh	r2, [r7, #12]
 800b41c:	f7fb feee 	bl	80071fc <pbuf_copy_partial>
 800b420:	4603      	mov	r3, r0
 800b422:	461a      	mov	r2, r3
 800b424:	89bb      	ldrh	r3, [r7, #12]
 800b426:	4293      	cmp	r3, r2
 800b428:	f040 809f 	bne.w	800b56a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	899b      	ldrh	r3, [r3, #12]
 800b432:	b29b      	uxth	r3, r3
 800b434:	4618      	mov	r0, r3
 800b436:	f7fa f989 	bl	800574c <lwip_htons>
 800b43a:	4603      	mov	r3, r0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b442:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b444:	2300      	movs	r3, #0
 800b446:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b448:	7efb      	ldrb	r3, [r7, #27]
 800b44a:	f003 0308 	and.w	r3, r3, #8
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b452:	7efb      	ldrb	r3, [r7, #27]
 800b454:	f023 0308 	bic.w	r3, r3, #8
 800b458:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b45a:	7ebb      	ldrb	r3, [r7, #26]
 800b45c:	f043 0308 	orr.w	r3, r3, #8
 800b460:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b462:	7efb      	ldrb	r3, [r7, #27]
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d007      	beq.n	800b47c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b46c:	7efb      	ldrb	r3, [r7, #27]
 800b46e:	f023 0301 	bic.w	r3, r3, #1
 800b472:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b474:	7ebb      	ldrb	r3, [r7, #26]
 800b476:	f043 0301 	orr.w	r3, r3, #1
 800b47a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	4618      	mov	r0, r3
 800b484:	f7fa f977 	bl	8005776 <lwip_htonl>
 800b488:	4602      	mov	r2, r0
 800b48a:	887b      	ldrh	r3, [r7, #2]
 800b48c:	18d1      	adds	r1, r2, r3
 800b48e:	7eba      	ldrb	r2, [r7, #26]
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	460b      	mov	r3, r1
 800b496:	6939      	ldr	r1, [r7, #16]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff fea7 	bl	800b1ec <tcp_create_segment>
 800b49e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d063      	beq.n	800b56e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7fb fd34 	bl	8006f18 <pbuf_clen>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	6858      	ldr	r0, [r3, #4]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	891a      	ldrh	r2, [r3, #8]
 800b4ce:	89bb      	ldrh	r3, [r7, #12]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f7fb fb11 	bl	8006afc <pbuf_realloc>
  useg->len -= remainder;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	891a      	ldrh	r2, [r3, #8]
 800b4de:	89bb      	ldrh	r3, [r7, #12]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	899b      	ldrh	r3, [r3, #12]
 800b4ee:	b29c      	uxth	r4, r3
 800b4f0:	7efb      	ldrb	r3, [r7, #27]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7fa f929 	bl	800574c <lwip_htons>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	4322      	orrs	r2, r4
 800b504:	b292      	uxth	r2, r2
 800b506:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fb fd03 	bl	8006f18 <pbuf_clen>
 800b512:	4603      	mov	r3, r0
 800b514:	461a      	mov	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b51c:	4413      	add	r3, r2
 800b51e:	b29a      	uxth	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb fcf4 	bl	8006f18 <pbuf_clen>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b53a:	4413      	add	r3, r2
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	69fa      	ldr	r2, [r7, #28]
 800b550:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d103      	bne.n	800b562 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	e016      	b.n	800b594 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b56e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d006      	beq.n	800b584 <tcp_split_unsent_seg+0x25c>
 800b576:	4b09      	ldr	r3, [pc, #36]	; (800b59c <tcp_split_unsent_seg+0x274>)
 800b578:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b57c:	490d      	ldr	r1, [pc, #52]	; (800b5b4 <tcp_split_unsent_seg+0x28c>)
 800b57e:	4809      	ldr	r0, [pc, #36]	; (800b5a4 <tcp_split_unsent_seg+0x27c>)
 800b580:	f004 fb46 	bl	800fc10 <iprintf>
  if (p != NULL) {
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b58a:	6938      	ldr	r0, [r7, #16]
 800b58c:	f7fb fc3c 	bl	8006e08 <pbuf_free>
  }

  return ERR_MEM;
 800b590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b594:	4618      	mov	r0, r3
 800b596:	3724      	adds	r7, #36	; 0x24
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd90      	pop	{r4, r7, pc}
 800b59c:	08012700 	.word	0x08012700
 800b5a0:	08012a94 	.word	0x08012a94
 800b5a4:	08012754 	.word	0x08012754
 800b5a8:	08012ab8 	.word	0x08012ab8
 800b5ac:	08012adc 	.word	0x08012adc
 800b5b0:	08012aec 	.word	0x08012aec
 800b5b4:	08012afc 	.word	0x08012afc

0800b5b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d106      	bne.n	800b5d4 <tcp_send_fin+0x1c>
 800b5c6:	4b21      	ldr	r3, [pc, #132]	; (800b64c <tcp_send_fin+0x94>)
 800b5c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5cc:	4920      	ldr	r1, [pc, #128]	; (800b650 <tcp_send_fin+0x98>)
 800b5ce:	4821      	ldr	r0, [pc, #132]	; (800b654 <tcp_send_fin+0x9c>)
 800b5d0:	f004 fb1e 	bl	800fc10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02e      	beq.n	800b63a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	e002      	b.n	800b5ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f8      	bne.n	800b5e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	899b      	ldrh	r3, [r3, #12]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fa f8a6 	bl	800574c <lwip_htons>
 800b600:	4603      	mov	r3, r0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0307 	and.w	r3, r3, #7
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d116      	bne.n	800b63a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	899b      	ldrh	r3, [r3, #12]
 800b612:	b29c      	uxth	r4, r3
 800b614:	2001      	movs	r0, #1
 800b616:	f7fa f899 	bl	800574c <lwip_htons>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461a      	mov	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	4322      	orrs	r2, r4
 800b624:	b292      	uxth	r2, r2
 800b626:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8b5b      	ldrh	r3, [r3, #26]
 800b62c:	f043 0320 	orr.w	r3, r3, #32
 800b630:	b29a      	uxth	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	e004      	b.n	800b644 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b63a:	2101      	movs	r1, #1
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f80b 	bl	800b658 <tcp_enqueue_flags>
 800b642:	4603      	mov	r3, r0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd90      	pop	{r4, r7, pc}
 800b64c:	08012700 	.word	0x08012700
 800b650:	08012b08 	.word	0x08012b08
 800b654:	08012754 	.word	0x08012754

0800b658 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <tcp_enqueue_flags+0x2c>
 800b676:	4b67      	ldr	r3, [pc, #412]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b678:	f240 4211 	movw	r2, #1041	; 0x411
 800b67c:	4966      	ldr	r1, [pc, #408]	; (800b818 <tcp_enqueue_flags+0x1c0>)
 800b67e:	4867      	ldr	r0, [pc, #412]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b680:	f004 fac6 	bl	800fc10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d106      	bne.n	800b698 <tcp_enqueue_flags+0x40>
 800b68a:	4b62      	ldr	r3, [pc, #392]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b68c:	f240 4213 	movw	r2, #1043	; 0x413
 800b690:	4963      	ldr	r1, [pc, #396]	; (800b820 <tcp_enqueue_flags+0x1c8>)
 800b692:	4862      	ldr	r0, [pc, #392]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b694:	f004 fabc 	bl	800fc10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b698:	78fb      	ldrb	r3, [r7, #3]
 800b69a:	f003 0302 	and.w	r3, r3, #2
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b6a6:	7ffb      	ldrb	r3, [r7, #31]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	2036      	movs	r0, #54	; 0x36
 800b6be:	f7fb f8bf 	bl	8006840 <pbuf_alloc>
 800b6c2:	6138      	str	r0, [r7, #16]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	8b5b      	ldrh	r3, [r3, #26]
 800b6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6dc:	e095      	b.n	800b80a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	895a      	ldrh	r2, [r3, #10]
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d206      	bcs.n	800b6f8 <tcp_enqueue_flags+0xa0>
 800b6ea:	4b4a      	ldr	r3, [pc, #296]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b6ec:	f240 4239 	movw	r2, #1081	; 0x439
 800b6f0:	494c      	ldr	r1, [pc, #304]	; (800b824 <tcp_enqueue_flags+0x1cc>)
 800b6f2:	484a      	ldr	r0, [pc, #296]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b6f4:	f004 fa8c 	bl	800fc10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b6fc:	78fa      	ldrb	r2, [r7, #3]
 800b6fe:	7ffb      	ldrb	r3, [r7, #31]
 800b700:	9300      	str	r3, [sp, #0]
 800b702:	460b      	mov	r3, r1
 800b704:	6939      	ldr	r1, [r7, #16]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff fd70 	bl	800b1ec <tcp_create_segment>
 800b70c:	60f8      	str	r0, [r7, #12]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d109      	bne.n	800b728 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	8b5b      	ldrh	r3, [r3, #26]
 800b718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b726:	e070      	b.n	800b80a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	f003 0303 	and.w	r3, r3, #3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <tcp_enqueue_flags+0xea>
 800b734:	4b37      	ldr	r3, [pc, #220]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b736:	f240 4242 	movw	r2, #1090	; 0x442
 800b73a:	493b      	ldr	r1, [pc, #236]	; (800b828 <tcp_enqueue_flags+0x1d0>)
 800b73c:	4837      	ldr	r0, [pc, #220]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b73e:	f004 fa67 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	891b      	ldrh	r3, [r3, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d006      	beq.n	800b758 <tcp_enqueue_flags+0x100>
 800b74a:	4b32      	ldr	r3, [pc, #200]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b74c:	f240 4243 	movw	r2, #1091	; 0x443
 800b750:	4936      	ldr	r1, [pc, #216]	; (800b82c <tcp_enqueue_flags+0x1d4>)
 800b752:	4832      	ldr	r0, [pc, #200]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b754:	f004 fa5c 	bl	800fc10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	66da      	str	r2, [r3, #108]	; 0x6c
 800b766:	e00d      	b.n	800b784 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	e002      	b.n	800b776 <tcp_enqueue_flags+0x11e>
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f8      	bne.n	800b770 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b78c:	78fb      	ldrb	r3, [r7, #3]
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d104      	bne.n	800b7a0 <tcp_enqueue_flags+0x148>
 800b796:	78fb      	ldrb	r3, [r7, #3]
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d004      	beq.n	800b7aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b7aa:	78fb      	ldrb	r3, [r7, #3]
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	8b5b      	ldrh	r3, [r3, #26]
 800b7b8:	f043 0320 	orr.w	r3, r3, #32
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fb fba6 	bl	8006f18 <pbuf_clen>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7d6:	4413      	add	r3, r2
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00e      	beq.n	800b808 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <tcp_enqueue_flags+0x1b0>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <tcp_enqueue_flags+0x1b0>
 800b7fa:	4b06      	ldr	r3, [pc, #24]	; (800b814 <tcp_enqueue_flags+0x1bc>)
 800b7fc:	f240 4265 	movw	r2, #1125	; 0x465
 800b800:	490b      	ldr	r1, [pc, #44]	; (800b830 <tcp_enqueue_flags+0x1d8>)
 800b802:	4806      	ldr	r0, [pc, #24]	; (800b81c <tcp_enqueue_flags+0x1c4>)
 800b804:	f004 fa04 	bl	800fc10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	08012700 	.word	0x08012700
 800b818:	08012b24 	.word	0x08012b24
 800b81c:	08012754 	.word	0x08012754
 800b820:	08012b7c 	.word	0x08012b7c
 800b824:	08012b9c 	.word	0x08012b9c
 800b828:	08012bd8 	.word	0x08012bd8
 800b82c:	08012bf0 	.word	0x08012bf0
 800b830:	08012c1c 	.word	0x08012c1c

0800b834 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b834:	b5b0      	push	{r4, r5, r7, lr}
 800b836:	b08a      	sub	sp, #40	; 0x28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <tcp_output+0x1c>
 800b842:	4b8a      	ldr	r3, [pc, #552]	; (800ba6c <tcp_output+0x238>)
 800b844:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b848:	4989      	ldr	r1, [pc, #548]	; (800ba70 <tcp_output+0x23c>)
 800b84a:	488a      	ldr	r0, [pc, #552]	; (800ba74 <tcp_output+0x240>)
 800b84c:	f004 f9e0 	bl	800fc10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	7d1b      	ldrb	r3, [r3, #20]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d106      	bne.n	800b866 <tcp_output+0x32>
 800b858:	4b84      	ldr	r3, [pc, #528]	; (800ba6c <tcp_output+0x238>)
 800b85a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b85e:	4986      	ldr	r1, [pc, #536]	; (800ba78 <tcp_output+0x244>)
 800b860:	4884      	ldr	r0, [pc, #528]	; (800ba74 <tcp_output+0x240>)
 800b862:	f004 f9d5 	bl	800fc10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b866:	4b85      	ldr	r3, [pc, #532]	; (800ba7c <tcp_output+0x248>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d101      	bne.n	800b874 <tcp_output+0x40>
    return ERR_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	e1ce      	b.n	800bc12 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b880:	4293      	cmp	r3, r2
 800b882:	bf28      	it	cs
 800b884:	4613      	movcs	r3, r2
 800b886:	b29b      	uxth	r3, r3
 800b888:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10b      	bne.n	800b8ae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	8b5b      	ldrh	r3, [r3, #26]
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 81aa 	beq.w	800bbf8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fdcb 	bl	800c440 <tcp_send_empty_ack>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	e1b1      	b.n	800bc12 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff fc7c 	bl	800b1b4 <tcp_route>
 800b8bc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d102      	bne.n	800b8ca <tcp_output+0x96>
    return ERR_RTE;
 800b8c4:	f06f 0303 	mvn.w	r3, #3
 800b8c8:	e1a3      	b.n	800bc12 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <tcp_output+0xa4>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d111      	bne.n	800b8fc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <tcp_output+0xb0>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	e000      	b.n	800b8e6 <tcp_output+0xb2>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <tcp_output+0xc0>
      return ERR_RTE;
 800b8ee:	f06f 0303 	mvn.w	r3, #3
 800b8f2:	e18e      	b.n	800bc12 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4618      	mov	r0, r3
 800b904:	f7f9 ff37 	bl	8005776 <lwip_htonl>
 800b908:	4602      	mov	r2, r0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	8912      	ldrh	r2, [r2, #8]
 800b914:	4413      	add	r3, r2
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d227      	bcs.n	800b96c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b922:	461a      	mov	r2, r3
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	4293      	cmp	r3, r2
 800b928:	d114      	bne.n	800b954 <tcp_output+0x120>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d110      	bne.n	800b954 <tcp_output+0x120>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10b      	bne.n	800b954 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8b5b      	ldrh	r3, [r3, #26]
 800b958:	f003 0302 	and.w	r3, r3, #2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 814d 	beq.w	800bbfc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fd6c 	bl	800c440 <tcp_send_empty_ack>
 800b968:	4603      	mov	r3, r0
 800b96a:	e152      	b.n	800bc12 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b978:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 811c 	beq.w	800bbba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b982:	e002      	b.n	800b98a <tcp_output+0x156>
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	623b      	str	r3, [r7, #32]
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f8      	bne.n	800b984 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b992:	e112      	b.n	800bbba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	899b      	ldrh	r3, [r3, #12]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7f9 fed5 	bl	800574c <lwip_htons>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f003 0304 	and.w	r3, r3, #4
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <tcp_output+0x188>
 800b9ae:	4b2f      	ldr	r3, [pc, #188]	; (800ba6c <tcp_output+0x238>)
 800b9b0:	f240 5236 	movw	r2, #1334	; 0x536
 800b9b4:	4932      	ldr	r1, [pc, #200]	; (800ba80 <tcp_output+0x24c>)
 800b9b6:	482f      	ldr	r0, [pc, #188]	; (800ba74 <tcp_output+0x240>)
 800b9b8:	f004 f92a 	bl	800fc10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01f      	beq.n	800ba04 <tcp_output+0x1d0>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	8b5b      	ldrh	r3, [r3, #26]
 800b9c8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d119      	bne.n	800ba04 <tcp_output+0x1d0>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00b      	beq.n	800b9f0 <tcp_output+0x1bc>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d110      	bne.n	800ba04 <tcp_output+0x1d0>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e6:	891a      	ldrh	r2, [r3, #8]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d209      	bcs.n	800ba04 <tcp_output+0x1d0>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <tcp_output+0x1d0>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba00:	2b08      	cmp	r3, #8
 800ba02:	d901      	bls.n	800ba08 <tcp_output+0x1d4>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <tcp_output+0x1d6>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d106      	bne.n	800ba1c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8b5b      	ldrh	r3, [r3, #26]
 800ba12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80e4 	beq.w	800bbe4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7d1b      	ldrb	r3, [r3, #20]
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d00d      	beq.n	800ba40 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	899b      	ldrh	r3, [r3, #12]
 800ba2a:	b29c      	uxth	r4, r3
 800ba2c:	2010      	movs	r0, #16
 800ba2e:	f7f9 fe8d 	bl	800574c <lwip_htons>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461a      	mov	r2, r3
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	4322      	orrs	r2, r4
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	6879      	ldr	r1, [r7, #4]
 800ba44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba46:	f000 f909 	bl	800bc5c <tcp_output_segment>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ba4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d016      	beq.n	800ba84 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	8b5b      	ldrh	r3, [r3, #26]
 800ba5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	835a      	strh	r2, [r3, #26]
      return err;
 800ba64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba68:	e0d3      	b.n	800bc12 <tcp_output+0x3de>
 800ba6a:	bf00      	nop
 800ba6c:	08012700 	.word	0x08012700
 800ba70:	08012c44 	.word	0x08012c44
 800ba74:	08012754 	.word	0x08012754
 800ba78:	08012c5c 	.word	0x08012c5c
 800ba7c:	20008820 	.word	0x20008820
 800ba80:	08012c84 	.word	0x08012c84
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7d1b      	ldrb	r3, [r3, #20]
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d006      	beq.n	800baa2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	8b5b      	ldrh	r3, [r3, #26]
 800ba98:	f023 0303 	bic.w	r3, r3, #3
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f9 fe64 	bl	8005776 <lwip_htonl>
 800baae:	4604      	mov	r4, r0
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	891b      	ldrh	r3, [r3, #8]
 800bab4:	461d      	mov	r5, r3
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	899b      	ldrh	r3, [r3, #12]
 800babc:	b29b      	uxth	r3, r3
 800babe:	4618      	mov	r0, r3
 800bac0:	f7f9 fe44 	bl	800574c <lwip_htons>
 800bac4:	4603      	mov	r3, r0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0303 	and.w	r3, r3, #3
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <tcp_output+0x2a0>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <tcp_output+0x2a2>
 800bad4:	2300      	movs	r3, #0
 800bad6:	442b      	add	r3, r5
 800bad8:	4423      	add	r3, r4
 800bada:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da02      	bge.n	800baee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	461c      	mov	r4, r3
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	899b      	ldrh	r3, [r3, #12]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7f9 fe25 	bl	800574c <lwip_htons>
 800bb02:	4603      	mov	r3, r0
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <tcp_output+0x2de>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <tcp_output+0x2e0>
 800bb12:	2300      	movs	r3, #0
 800bb14:	4423      	add	r3, r4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d049      	beq.n	800bbae <tcp_output+0x37a>
      seg->next = NULL;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d105      	bne.n	800bb34 <tcp_output+0x300>
        pcb->unacked = seg;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	623b      	str	r3, [r7, #32]
 800bb32:	e03f      	b.n	800bbb4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7f9 fe1b 	bl	8005776 <lwip_htonl>
 800bb40:	4604      	mov	r4, r0
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7f9 fe14 	bl	8005776 <lwip_htonl>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	1ae3      	subs	r3, r4, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	da24      	bge.n	800bba0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3370      	adds	r3, #112	; 0x70
 800bb5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb5c:	e002      	b.n	800bb64 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d011      	beq.n	800bb90 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7f9 fdfe 	bl	8005776 <lwip_htonl>
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7f9 fdf7 	bl	8005776 <lwip_htonl>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dbe6      	blt.n	800bb5e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e009      	b.n	800bbb4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	623b      	str	r3, [r7, #32]
 800bbac:	e002      	b.n	800bbb4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbb0:	f7fc fc3f 	bl	8008432 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d012      	beq.n	800bbe6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7f9 fdd5 	bl	8005776 <lwip_htonl>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbd6:	8912      	ldrh	r2, [r2, #8]
 800bbd8:	4413      	add	r3, r2
  while (seg != NULL &&
 800bbda:	69ba      	ldr	r2, [r7, #24]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	f4bf aed9 	bcs.w	800b994 <tcp_output+0x160>
 800bbe2:	e000      	b.n	800bbe6 <tcp_output+0x3b2>
      break;
 800bbe4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d108      	bne.n	800bc00 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bbf6:	e004      	b.n	800bc02 <tcp_output+0x3ce>
    goto output_done;
 800bbf8:	bf00      	nop
 800bbfa:	e002      	b.n	800bc02 <tcp_output+0x3ce>
    goto output_done;
 800bbfc:	bf00      	nop
 800bbfe:	e000      	b.n	800bc02 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc00:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	8b5b      	ldrh	r3, [r3, #26]
 800bc06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3728      	adds	r7, #40	; 0x28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1a:	bf00      	nop

0800bc1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <tcp_output_segment_busy+0x1c>
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <tcp_output_segment_busy+0x34>)
 800bc2c:	f240 529a 	movw	r2, #1434	; 0x59a
 800bc30:	4908      	ldr	r1, [pc, #32]	; (800bc54 <tcp_output_segment_busy+0x38>)
 800bc32:	4809      	ldr	r0, [pc, #36]	; (800bc58 <tcp_output_segment_busy+0x3c>)
 800bc34:	f003 ffec 	bl	800fc10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	7b9b      	ldrb	r3, [r3, #14]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d001      	beq.n	800bc46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e000      	b.n	800bc48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	08012700 	.word	0x08012700
 800bc54:	08012c9c 	.word	0x08012c9c
 800bc58:	08012754 	.word	0x08012754

0800bc5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bc5c:	b5b0      	push	{r4, r5, r7, lr}
 800bc5e:	b08c      	sub	sp, #48	; 0x30
 800bc60:	af04      	add	r7, sp, #16
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <tcp_output_segment+0x20>
 800bc6e:	4b63      	ldr	r3, [pc, #396]	; (800bdfc <tcp_output_segment+0x1a0>)
 800bc70:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bc74:	4962      	ldr	r1, [pc, #392]	; (800be00 <tcp_output_segment+0x1a4>)
 800bc76:	4863      	ldr	r0, [pc, #396]	; (800be04 <tcp_output_segment+0x1a8>)
 800bc78:	f003 ffca 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d106      	bne.n	800bc90 <tcp_output_segment+0x34>
 800bc82:	4b5e      	ldr	r3, [pc, #376]	; (800bdfc <tcp_output_segment+0x1a0>)
 800bc84:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc88:	495f      	ldr	r1, [pc, #380]	; (800be08 <tcp_output_segment+0x1ac>)
 800bc8a:	485e      	ldr	r0, [pc, #376]	; (800be04 <tcp_output_segment+0x1a8>)
 800bc8c:	f003 ffc0 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <tcp_output_segment+0x48>
 800bc96:	4b59      	ldr	r3, [pc, #356]	; (800bdfc <tcp_output_segment+0x1a0>)
 800bc98:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bc9c:	495b      	ldr	r1, [pc, #364]	; (800be0c <tcp_output_segment+0x1b0>)
 800bc9e:	4859      	ldr	r0, [pc, #356]	; (800be04 <tcp_output_segment+0x1a8>)
 800bca0:	f003 ffb6 	bl	800fc10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7ff ffb9 	bl	800bc1c <tcp_output_segment_busy>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e09f      	b.n	800bdf4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	68dc      	ldr	r4, [r3, #12]
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	f7f9 fd5a 	bl	8005776 <lwip_htonl>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	68dc      	ldr	r4, [r3, #12]
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f7f9 fd3c 	bl	800574c <lwip_htons>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bce0:	441a      	add	r2, r3
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	3314      	adds	r3, #20
 800bcec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	7a9b      	ldrb	r3, [r3, #10]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d015      	beq.n	800bd26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bd06:	f7fc fe8b 	bl	8008a20 <tcp_eff_send_mss_netif>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bd0e:	8b7b      	ldrh	r3, [r7, #26]
 800bd10:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7f9 fd2e 	bl	8005776 <lwip_htonl>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	3304      	adds	r3, #4
 800bd24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da02      	bge.n	800bd36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2200      	movs	r2, #0
 800bd34:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d10c      	bne.n	800bd58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bd3e:	4b34      	ldr	r3, [pc, #208]	; (800be10 <tcp_output_segment+0x1b4>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7f9 fd12 	bl	8005776 <lwip_htonl>
 800bd52:	4602      	mov	r2, r0
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	8959      	ldrh	r1, [r3, #10]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	8b3a      	ldrh	r2, [r7, #24]
 800bd72:	1a8a      	subs	r2, r1, r2
 800bd74:	b292      	uxth	r2, r2
 800bd76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	8919      	ldrh	r1, [r3, #8]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	8b3a      	ldrh	r2, [r7, #24]
 800bd84:	1a8a      	subs	r2, r1, r2
 800bd86:	b292      	uxth	r2, r2
 800bd88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	68d2      	ldr	r2, [r2, #12]
 800bd92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	741a      	strb	r2, [r3, #16]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	f103 0214 	add.w	r2, r3, #20
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	7a9b      	ldrb	r3, [r3, #10]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	4413      	add	r3, r2
 800bdb4:	69fa      	ldr	r2, [r7, #28]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d006      	beq.n	800bdc8 <tcp_output_segment+0x16c>
 800bdba:	4b10      	ldr	r3, [pc, #64]	; (800bdfc <tcp_output_segment+0x1a0>)
 800bdbc:	f240 621c 	movw	r2, #1564	; 0x61c
 800bdc0:	4914      	ldr	r1, [pc, #80]	; (800be14 <tcp_output_segment+0x1b8>)
 800bdc2:	4810      	ldr	r0, [pc, #64]	; (800be04 <tcp_output_segment+0x1a8>)
 800bdc4:	f003 ff24 	bl	800fc10 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6858      	ldr	r0, [r3, #4]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	1d1c      	adds	r4, r3, #4
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	7add      	ldrb	r5, [r3, #11]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	7a9b      	ldrb	r3, [r3, #10]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	9202      	str	r2, [sp, #8]
 800bdde:	2206      	movs	r2, #6
 800bde0:	9201      	str	r2, [sp, #4]
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	462b      	mov	r3, r5
 800bde6:	4622      	mov	r2, r4
 800bde8:	f002 fdf0 	bl	800e9cc <ip4_output_if>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bdf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfc:	08012700 	.word	0x08012700
 800be00:	08012cc4 	.word	0x08012cc4
 800be04:	08012754 	.word	0x08012754
 800be08:	08012ce4 	.word	0x08012ce4
 800be0c:	08012d04 	.word	0x08012d04
 800be10:	200087d4 	.word	0x200087d4
 800be14:	08012d28 	.word	0x08012d28

0800be18 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be18:	b5b0      	push	{r4, r5, r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <tcp_rexmit_rto_prepare+0x1c>
 800be26:	4b31      	ldr	r3, [pc, #196]	; (800beec <tcp_rexmit_rto_prepare+0xd4>)
 800be28:	f240 6263 	movw	r2, #1635	; 0x663
 800be2c:	4930      	ldr	r1, [pc, #192]	; (800bef0 <tcp_rexmit_rto_prepare+0xd8>)
 800be2e:	4831      	ldr	r0, [pc, #196]	; (800bef4 <tcp_rexmit_rto_prepare+0xdc>)
 800be30:	f003 feee 	bl	800fc10 <iprintf>

  if (pcb->unacked == NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800be3c:	f06f 0305 	mvn.w	r3, #5
 800be40:	e050      	b.n	800bee4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e00b      	b.n	800be62 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f7ff fee6 	bl	800bc1c <tcp_output_segment_busy>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800be56:	f06f 0305 	mvn.w	r3, #5
 800be5a:	e043      	b.n	800bee4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1ef      	bne.n	800be4a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f7ff fed6 	bl	800bc1c <tcp_output_segment_busy>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800be76:	f06f 0305 	mvn.w	r3, #5
 800be7a:	e033      	b.n	800bee4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	8b5b      	ldrh	r3, [r3, #26]
 800be96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f9 fc65 	bl	8005776 <lwip_htonl>
 800beac:	4604      	mov	r4, r0
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	891b      	ldrh	r3, [r3, #8]
 800beb2:	461d      	mov	r5, r3
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	899b      	ldrh	r3, [r3, #12]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f9 fc45 	bl	800574c <lwip_htons>
 800bec2:	4603      	mov	r3, r0
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <tcp_rexmit_rto_prepare+0xba>
 800bece:	2301      	movs	r3, #1
 800bed0:	e000      	b.n	800bed4 <tcp_rexmit_rto_prepare+0xbc>
 800bed2:	2300      	movs	r3, #0
 800bed4:	442b      	add	r3, r5
 800bed6:	18e2      	adds	r2, r4, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bdb0      	pop	{r4, r5, r7, pc}
 800beec:	08012700 	.word	0x08012700
 800bef0:	08012d3c 	.word	0x08012d3c
 800bef4:	08012754 	.word	0x08012754

0800bef8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <tcp_rexmit_rto_commit+0x1c>
 800bf06:	4b0d      	ldr	r3, [pc, #52]	; (800bf3c <tcp_rexmit_rto_commit+0x44>)
 800bf08:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf0c:	490c      	ldr	r1, [pc, #48]	; (800bf40 <tcp_rexmit_rto_commit+0x48>)
 800bf0e:	480d      	ldr	r0, [pc, #52]	; (800bf44 <tcp_rexmit_rto_commit+0x4c>)
 800bf10:	f003 fe7e 	bl	800fc10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf1a:	2bff      	cmp	r3, #255	; 0xff
 800bf1c:	d007      	beq.n	800bf2e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf24:	3301      	adds	r3, #1
 800bf26:	b2da      	uxtb	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f7ff fc80 	bl	800b834 <tcp_output>
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	08012700 	.word	0x08012700
 800bf40:	08012d60 	.word	0x08012d60
 800bf44:	08012754 	.word	0x08012754

0800bf48 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <tcp_rexmit_rto+0x1c>
 800bf56:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <tcp_rexmit_rto+0x38>)
 800bf58:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bf5c:	4909      	ldr	r1, [pc, #36]	; (800bf84 <tcp_rexmit_rto+0x3c>)
 800bf5e:	480a      	ldr	r0, [pc, #40]	; (800bf88 <tcp_rexmit_rto+0x40>)
 800bf60:	f003 fe56 	bl	800fc10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff ff57 	bl	800be18 <tcp_rexmit_rto_prepare>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ffc1 	bl	800bef8 <tcp_rexmit_rto_commit>
  }
}
 800bf76:	bf00      	nop
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	08012700 	.word	0x08012700
 800bf84:	08012d84 	.word	0x08012d84
 800bf88:	08012754 	.word	0x08012754

0800bf8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf8c:	b590      	push	{r4, r7, lr}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d106      	bne.n	800bfa8 <tcp_rexmit+0x1c>
 800bf9a:	4b2f      	ldr	r3, [pc, #188]	; (800c058 <tcp_rexmit+0xcc>)
 800bf9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bfa0:	492e      	ldr	r1, [pc, #184]	; (800c05c <tcp_rexmit+0xd0>)
 800bfa2:	482f      	ldr	r0, [pc, #188]	; (800c060 <tcp_rexmit+0xd4>)
 800bfa4:	f003 fe34 	bl	800fc10 <iprintf>

  if (pcb->unacked == NULL) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d102      	bne.n	800bfb6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bfb0:	f06f 0305 	mvn.w	r3, #5
 800bfb4:	e04c      	b.n	800c050 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bfbc:	68b8      	ldr	r0, [r7, #8]
 800bfbe:	f7ff fe2d 	bl	800bc1c <tcp_output_segment_busy>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bfc8:	f06f 0305 	mvn.w	r3, #5
 800bfcc:	e040      	b.n	800c050 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	336c      	adds	r3, #108	; 0x6c
 800bfda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfdc:	e002      	b.n	800bfe4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d011      	beq.n	800c010 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7f9 fbbe 	bl	8005776 <lwip_htonl>
 800bffa:	4604      	mov	r4, r0
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	4618      	mov	r0, r3
 800c004:	f7f9 fbb7 	bl	8005776 <lwip_htonl>
 800c008:	4603      	mov	r3, r0
 800c00a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dbe6      	blt.n	800bfde <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c034:	2bff      	cmp	r3, #255	; 0xff
 800c036:	d007      	beq.n	800c048 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c03e:	3301      	adds	r3, #1
 800c040:	b2da      	uxtb	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	bd90      	pop	{r4, r7, pc}
 800c058:	08012700 	.word	0x08012700
 800c05c:	08012da0 	.word	0x08012da0
 800c060:	08012754 	.word	0x08012754

0800c064 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d106      	bne.n	800c080 <tcp_rexmit_fast+0x1c>
 800c072:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <tcp_rexmit_fast+0xb8>)
 800c074:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c078:	4929      	ldr	r1, [pc, #164]	; (800c120 <tcp_rexmit_fast+0xbc>)
 800c07a:	482a      	ldr	r0, [pc, #168]	; (800c124 <tcp_rexmit_fast+0xc0>)
 800c07c:	f003 fdc8 	bl	800fc10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c084:	2b00      	cmp	r3, #0
 800c086:	d045      	beq.n	800c114 <tcp_rexmit_fast+0xb0>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	8b5b      	ldrh	r3, [r3, #26]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d13f      	bne.n	800c114 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ff79 	bl	800bf8c <tcp_rexmit>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d139      	bne.n	800c114 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	bf28      	it	cs
 800c0b0:	4613      	movcs	r3, r2
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	da00      	bge.n	800c0ba <tcp_rexmit_fast+0x56>
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	105b      	asrs	r3, r3, #1
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d206      	bcs.n	800c0e4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	0049      	lsls	r1, r1, #1
 800c0f2:	440b      	add	r3, r1
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8b5b      	ldrh	r3, [r3, #26]
 800c104:	f043 0304 	orr.w	r3, r3, #4
 800c108:	b29a      	uxth	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	08012700 	.word	0x08012700
 800c120:	08012db8 	.word	0x08012db8
 800c124:	08012754 	.word	0x08012754

0800c128 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	607b      	str	r3, [r7, #4]
 800c132:	460b      	mov	r3, r1
 800c134:	817b      	strh	r3, [r7, #10]
 800c136:	4613      	mov	r3, r2
 800c138:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c13a:	897a      	ldrh	r2, [r7, #10]
 800c13c:	893b      	ldrh	r3, [r7, #8]
 800c13e:	4413      	add	r3, r2
 800c140:	b29b      	uxth	r3, r3
 800c142:	3314      	adds	r3, #20
 800c144:	b29b      	uxth	r3, r3
 800c146:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c14a:	4619      	mov	r1, r3
 800c14c:	2022      	movs	r0, #34	; 0x22
 800c14e:	f7fa fb77 	bl	8006840 <pbuf_alloc>
 800c152:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d04d      	beq.n	800c1f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c15a:	897b      	ldrh	r3, [r7, #10]
 800c15c:	3313      	adds	r3, #19
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	8952      	ldrh	r2, [r2, #10]
 800c162:	4293      	cmp	r3, r2
 800c164:	db06      	blt.n	800c174 <tcp_output_alloc_header_common+0x4c>
 800c166:	4b26      	ldr	r3, [pc, #152]	; (800c200 <tcp_output_alloc_header_common+0xd8>)
 800c168:	f240 7223 	movw	r2, #1827	; 0x723
 800c16c:	4925      	ldr	r1, [pc, #148]	; (800c204 <tcp_output_alloc_header_common+0xdc>)
 800c16e:	4826      	ldr	r0, [pc, #152]	; (800c208 <tcp_output_alloc_header_common+0xe0>)
 800c170:	f003 fd4e 	bl	800fc10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c17a:	8c3b      	ldrh	r3, [r7, #32]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7f9 fae5 	bl	800574c <lwip_htons>
 800c182:	4603      	mov	r3, r0
 800c184:	461a      	mov	r2, r3
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7f9 fadd 	bl	800574c <lwip_htons>
 800c192:	4603      	mov	r3, r0
 800c194:	461a      	mov	r2, r3
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f7f9 fae8 	bl	8005776 <lwip_htonl>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c1ac:	897b      	ldrh	r3, [r7, #10]
 800c1ae:	089b      	lsrs	r3, r3, #2
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3305      	adds	r3, #5
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	031b      	lsls	r3, r3, #12
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7f9 fac1 	bl	800574c <lwip_htons>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f9 fab9 	bl	800574c <lwip_htons>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	741a      	strb	r2, [r3, #16]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	749a      	strb	r2, [r3, #18]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c1f6:	697b      	ldr	r3, [r7, #20]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3718      	adds	r7, #24
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	08012700 	.word	0x08012700
 800c204:	08012dd8 	.word	0x08012dd8
 800c208:	08012754 	.word	0x08012754

0800c20c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c20c:	b5b0      	push	{r4, r5, r7, lr}
 800c20e:	b08a      	sub	sp, #40	; 0x28
 800c210:	af04      	add	r7, sp, #16
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	607b      	str	r3, [r7, #4]
 800c216:	460b      	mov	r3, r1
 800c218:	817b      	strh	r3, [r7, #10]
 800c21a:	4613      	mov	r3, r2
 800c21c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <tcp_output_alloc_header+0x26>
 800c224:	4b15      	ldr	r3, [pc, #84]	; (800c27c <tcp_output_alloc_header+0x70>)
 800c226:	f240 7242 	movw	r2, #1858	; 0x742
 800c22a:	4915      	ldr	r1, [pc, #84]	; (800c280 <tcp_output_alloc_header+0x74>)
 800c22c:	4815      	ldr	r0, [pc, #84]	; (800c284 <tcp_output_alloc_header+0x78>)
 800c22e:	f003 fcef 	bl	800fc10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	8adb      	ldrh	r3, [r3, #22]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	8b12      	ldrh	r2, [r2, #24]
 800c23e:	68f9      	ldr	r1, [r7, #12]
 800c240:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c242:	893d      	ldrh	r5, [r7, #8]
 800c244:	897c      	ldrh	r4, [r7, #10]
 800c246:	9103      	str	r1, [sp, #12]
 800c248:	2110      	movs	r1, #16
 800c24a:	9102      	str	r1, [sp, #8]
 800c24c:	9201      	str	r2, [sp, #4]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	462a      	mov	r2, r5
 800c254:	4621      	mov	r1, r4
 800c256:	f7ff ff67 	bl	800c128 <tcp_output_alloc_header_common>
 800c25a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d006      	beq.n	800c270 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c26a:	441a      	add	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c270:	697b      	ldr	r3, [r7, #20]
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bdb0      	pop	{r4, r5, r7, pc}
 800c27a:	bf00      	nop
 800c27c:	08012700 	.word	0x08012700
 800c280:	08012e08 	.word	0x08012e08
 800c284:	08012754 	.word	0x08012754

0800c288 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4611      	mov	r1, r2
 800c294:	461a      	mov	r2, r3
 800c296:	460b      	mov	r3, r1
 800c298:	71fb      	strb	r3, [r7, #7]
 800c29a:	4613      	mov	r3, r2
 800c29c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <tcp_output_fill_options+0x2e>
 800c2a8:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <tcp_output_fill_options+0x70>)
 800c2aa:	f240 7256 	movw	r2, #1878	; 0x756
 800c2ae:	4913      	ldr	r1, [pc, #76]	; (800c2fc <tcp_output_fill_options+0x74>)
 800c2b0:	4813      	ldr	r0, [pc, #76]	; (800c300 <tcp_output_fill_options+0x78>)
 800c2b2:	f003 fcad 	bl	800fc10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	3314      	adds	r3, #20
 800c2c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f103 0214 	add.w	r2, r3, #20
 800c2c8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	79fb      	ldrb	r3, [r7, #7]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	f003 0304 	and.w	r3, r3, #4
 800c2d6:	440b      	add	r3, r1
 800c2d8:	4413      	add	r3, r2
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d006      	beq.n	800c2ee <tcp_output_fill_options+0x66>
 800c2e0:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <tcp_output_fill_options+0x70>)
 800c2e2:	f240 7275 	movw	r2, #1909	; 0x775
 800c2e6:	4907      	ldr	r1, [pc, #28]	; (800c304 <tcp_output_fill_options+0x7c>)
 800c2e8:	4805      	ldr	r0, [pc, #20]	; (800c300 <tcp_output_fill_options+0x78>)
 800c2ea:	f003 fc91 	bl	800fc10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c2ee:	bf00      	nop
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	08012700 	.word	0x08012700
 800c2fc:	08012e30 	.word	0x08012e30
 800c300:	08012754 	.word	0x08012754
 800c304:	08012d28 	.word	0x08012d28

0800c308 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af04      	add	r7, sp, #16
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d106      	bne.n	800c32a <tcp_output_control_segment+0x22>
 800c31c:	4b1c      	ldr	r3, [pc, #112]	; (800c390 <tcp_output_control_segment+0x88>)
 800c31e:	f240 7287 	movw	r2, #1927	; 0x787
 800c322:	491c      	ldr	r1, [pc, #112]	; (800c394 <tcp_output_control_segment+0x8c>)
 800c324:	481c      	ldr	r0, [pc, #112]	; (800c398 <tcp_output_control_segment+0x90>)
 800c326:	f003 fc73 	bl	800fc10 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f7fe ff40 	bl	800b1b4 <tcp_route>
 800c334:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c33c:	23fc      	movs	r3, #252	; 0xfc
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	e01c      	b.n	800c37c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d006      	beq.n	800c356 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	7adb      	ldrb	r3, [r3, #11]
 800c34c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	7a9b      	ldrb	r3, [r3, #10]
 800c352:	757b      	strb	r3, [r7, #21]
 800c354:	e003      	b.n	800c35e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c356:	23ff      	movs	r3, #255	; 0xff
 800c358:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c35e:	7dba      	ldrb	r2, [r7, #22]
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	9302      	str	r3, [sp, #8]
 800c364:	2306      	movs	r3, #6
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	7d7b      	ldrb	r3, [r7, #21]
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	4613      	mov	r3, r2
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	6879      	ldr	r1, [r7, #4]
 800c372:	68b8      	ldr	r0, [r7, #8]
 800c374:	f002 fb2a 	bl	800e9cc <ip4_output_if>
 800c378:	4603      	mov	r3, r0
 800c37a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c37c:	68b8      	ldr	r0, [r7, #8]
 800c37e:	f7fa fd43 	bl	8006e08 <pbuf_free>
  return err;
 800c382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	08012700 	.word	0x08012700
 800c394:	08012e58 	.word	0x08012e58
 800c398:	08012754 	.word	0x08012754

0800c39c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b08b      	sub	sp, #44	; 0x2c
 800c3a0:	af04      	add	r7, sp, #16
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d106      	bne.n	800c3be <tcp_rst+0x22>
 800c3b0:	4b1f      	ldr	r3, [pc, #124]	; (800c430 <tcp_rst+0x94>)
 800c3b2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c3b6:	491f      	ldr	r1, [pc, #124]	; (800c434 <tcp_rst+0x98>)
 800c3b8:	481f      	ldr	r0, [pc, #124]	; (800c438 <tcp_rst+0x9c>)
 800c3ba:	f003 fc29 	bl	800fc10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d106      	bne.n	800c3d2 <tcp_rst+0x36>
 800c3c4:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <tcp_rst+0x94>)
 800c3c6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c3ca:	491c      	ldr	r1, [pc, #112]	; (800c43c <tcp_rst+0xa0>)
 800c3cc:	481a      	ldr	r0, [pc, #104]	; (800c438 <tcp_rst+0x9c>)
 800c3ce:	f003 fc1f 	bl	800fc10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c3d6:	f246 0308 	movw	r3, #24584	; 0x6008
 800c3da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c3dc:	7dfb      	ldrb	r3, [r7, #23]
 800c3de:	b29c      	uxth	r4, r3
 800c3e0:	68b8      	ldr	r0, [r7, #8]
 800c3e2:	f7f9 f9c8 	bl	8005776 <lwip_htonl>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	8abb      	ldrh	r3, [r7, #20]
 800c3ea:	9303      	str	r3, [sp, #12]
 800c3ec:	2314      	movs	r3, #20
 800c3ee:	9302      	str	r3, [sp, #8]
 800c3f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3f2:	9301      	str	r3, [sp, #4]
 800c3f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4621      	mov	r1, r4
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff fe92 	bl	800c128 <tcp_output_alloc_header_common>
 800c404:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00c      	beq.n	800c426 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2200      	movs	r2, #0
 800c410:	6939      	ldr	r1, [r7, #16]
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7ff ff38 	bl	800c288 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	6939      	ldr	r1, [r7, #16]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f7ff ff72 	bl	800c308 <tcp_output_control_segment>
 800c424:	e000      	b.n	800c428 <tcp_rst+0x8c>
    return;
 800c426:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c428:	371c      	adds	r7, #28
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd90      	pop	{r4, r7, pc}
 800c42e:	bf00      	nop
 800c430:	08012700 	.word	0x08012700
 800c434:	08012e84 	.word	0x08012e84
 800c438:	08012754 	.word	0x08012754
 800c43c:	08012ea0 	.word	0x08012ea0

0800c440 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c440:	b590      	push	{r4, r7, lr}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c448:	2300      	movs	r3, #0
 800c44a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d106      	bne.n	800c464 <tcp_send_empty_ack+0x24>
 800c456:	4b28      	ldr	r3, [pc, #160]	; (800c4f8 <tcp_send_empty_ack+0xb8>)
 800c458:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c45c:	4927      	ldr	r1, [pc, #156]	; (800c4fc <tcp_send_empty_ack+0xbc>)
 800c45e:	4828      	ldr	r0, [pc, #160]	; (800c500 <tcp_send_empty_ack+0xc0>)
 800c460:	f003 fbd6 	bl	800fc10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	f003 0304 	and.w	r3, r3, #4
 800c46e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c470:	7d7b      	ldrb	r3, [r7, #21]
 800c472:	b29c      	uxth	r4, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c478:	4618      	mov	r0, r3
 800c47a:	f7f9 f97c 	bl	8005776 <lwip_htonl>
 800c47e:	4603      	mov	r3, r0
 800c480:	2200      	movs	r2, #0
 800c482:	4621      	mov	r1, r4
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff fec1 	bl	800c20c <tcp_output_alloc_header>
 800c48a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d109      	bne.n	800c4a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8b5b      	ldrh	r3, [r3, #26]
 800c496:	f043 0303 	orr.w	r3, r3, #3
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c4a0:	f06f 0301 	mvn.w	r3, #1
 800c4a4:	e023      	b.n	800c4ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c4a6:	7dbb      	ldrb	r3, [r7, #22]
 800c4a8:	7dfa      	ldrb	r2, [r7, #23]
 800c4aa:	6939      	ldr	r1, [r7, #16]
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f7ff feeb 	bl	800c288 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	6939      	ldr	r1, [r7, #16]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f7ff ff24 	bl	800c308 <tcp_output_control_segment>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	8b5b      	ldrh	r3, [r3, #26]
 800c4d0:	f043 0303 	orr.w	r3, r3, #3
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	835a      	strh	r2, [r3, #26]
 800c4da:	e006      	b.n	800c4ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	8b5b      	ldrh	r3, [r3, #26]
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	371c      	adds	r7, #28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd90      	pop	{r4, r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	08012700 	.word	0x08012700
 800c4fc:	08012ebc 	.word	0x08012ebc
 800c500:	08012754 	.word	0x08012754

0800c504 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c504:	b590      	push	{r4, r7, lr}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c50c:	2300      	movs	r3, #0
 800c50e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d106      	bne.n	800c524 <tcp_keepalive+0x20>
 800c516:	4b18      	ldr	r3, [pc, #96]	; (800c578 <tcp_keepalive+0x74>)
 800c518:	f640 0224 	movw	r2, #2084	; 0x824
 800c51c:	4917      	ldr	r1, [pc, #92]	; (800c57c <tcp_keepalive+0x78>)
 800c51e:	4818      	ldr	r0, [pc, #96]	; (800c580 <tcp_keepalive+0x7c>)
 800c520:	f003 fb76 	bl	800fc10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	b29c      	uxth	r4, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52c:	3b01      	subs	r3, #1
 800c52e:	4618      	mov	r0, r3
 800c530:	f7f9 f921 	bl	8005776 <lwip_htonl>
 800c534:	4603      	mov	r3, r0
 800c536:	2200      	movs	r2, #0
 800c538:	4621      	mov	r1, r4
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff fe66 	bl	800c20c <tcp_output_alloc_header>
 800c540:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c54c:	e010      	b.n	800c570 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
 800c550:	2200      	movs	r2, #0
 800c552:	6939      	ldr	r1, [r7, #16]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fe97 	bl	800c288 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3304      	adds	r3, #4
 800c560:	6939      	ldr	r1, [r7, #16]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fed0 	bl	800c308 <tcp_output_control_segment>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	bd90      	pop	{r4, r7, pc}
 800c578:	08012700 	.word	0x08012700
 800c57c:	08012edc 	.word	0x08012edc
 800c580:	08012754 	.word	0x08012754

0800c584 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b08b      	sub	sp, #44	; 0x2c
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c58c:	2300      	movs	r3, #0
 800c58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <tcp_zero_window_probe+0x22>
 800c598:	4b4c      	ldr	r3, [pc, #304]	; (800c6cc <tcp_zero_window_probe+0x148>)
 800c59a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c59e:	494c      	ldr	r1, [pc, #304]	; (800c6d0 <tcp_zero_window_probe+0x14c>)
 800c5a0:	484c      	ldr	r0, [pc, #304]	; (800c6d4 <tcp_zero_window_probe+0x150>)
 800c5a2:	f003 fb35 	bl	800fc10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e086      	b.n	800c6c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5bc:	2bff      	cmp	r3, #255	; 0xff
 800c5be:	d007      	beq.n	800c5d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c5d0:	6a3b      	ldr	r3, [r7, #32]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	899b      	ldrh	r3, [r3, #12]
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7f9 f8b7 	bl	800574c <lwip_htons>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d005      	beq.n	800c5f6 <tcp_zero_window_probe+0x72>
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	891b      	ldrh	r3, [r3, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <tcp_zero_window_probe+0x72>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e000      	b.n	800c5f8 <tcp_zero_window_probe+0x74>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c5fa:	7ffb      	ldrb	r3, [r7, #31]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	bf0c      	ite	eq
 800c600:	2301      	moveq	r3, #1
 800c602:	2300      	movne	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60c:	b299      	uxth	r1, r3
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	8bba      	ldrh	r2, [r7, #28]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff fdf8 	bl	800c20c <tcp_output_alloc_header>
 800c61c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c628:	e04c      	b.n	800c6c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c630:	7ffb      	ldrb	r3, [r7, #31]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d011      	beq.n	800c65a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	899b      	ldrh	r3, [r3, #12]
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	b21b      	sxth	r3, r3
 800c63e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c642:	b21c      	sxth	r4, r3
 800c644:	2011      	movs	r0, #17
 800c646:	f7f9 f881 	bl	800574c <lwip_htons>
 800c64a:	4603      	mov	r3, r0
 800c64c:	b21b      	sxth	r3, r3
 800c64e:	4323      	orrs	r3, r4
 800c650:	b21b      	sxth	r3, r3
 800c652:	b29a      	uxth	r2, r3
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	819a      	strh	r2, [r3, #12]
 800c658:	e010      	b.n	800c67c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	3314      	adds	r3, #20
 800c660:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	6858      	ldr	r0, [r3, #4]
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	891a      	ldrh	r2, [r3, #8]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	891b      	ldrh	r3, [r3, #8]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	b29b      	uxth	r3, r3
 800c674:	2201      	movs	r2, #1
 800c676:	6939      	ldr	r1, [r7, #16]
 800c678:	f7fa fdc0 	bl	80071fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	4618      	mov	r0, r3
 800c684:	f7f9 f877 	bl	8005776 <lwip_htonl>
 800c688:	4603      	mov	r3, r0
 800c68a:	3301      	adds	r3, #1
 800c68c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	da02      	bge.n	800c6a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	69b9      	ldr	r1, [r7, #24]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f7ff fded 	bl	800c288 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	69b9      	ldr	r1, [r7, #24]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff fe26 	bl	800c308 <tcp_output_control_segment>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c6c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	372c      	adds	r7, #44	; 0x2c
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd90      	pop	{r4, r7, pc}
 800c6cc:	08012700 	.word	0x08012700
 800c6d0:	08012ef8 	.word	0x08012ef8
 800c6d4:	08012754 	.word	0x08012754

0800c6d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c6e0:	f7fa ff0c 	bl	80074fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <tcpip_tcp_timer+0x38>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d103      	bne.n	800c6f4 <tcpip_tcp_timer+0x1c>
 800c6ec:	4b09      	ldr	r3, [pc, #36]	; (800c714 <tcpip_tcp_timer+0x3c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d005      	beq.n	800c700 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4908      	ldr	r1, [pc, #32]	; (800c718 <tcpip_tcp_timer+0x40>)
 800c6f8:	20fa      	movs	r0, #250	; 0xfa
 800c6fa:	f000 f8f3 	bl	800c8e4 <sys_timeout>
 800c6fe:	e003      	b.n	800c708 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c700:	4b06      	ldr	r3, [pc, #24]	; (800c71c <tcpip_tcp_timer+0x44>)
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
  }
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	200087e0 	.word	0x200087e0
 800c714:	200087e4 	.word	0x200087e4
 800c718:	0800c6d9 	.word	0x0800c6d9
 800c71c:	2000882c 	.word	0x2000882c

0800c720 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <tcp_timer_needed+0x30>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10f      	bne.n	800c74c <tcp_timer_needed+0x2c>
 800c72c:	4b09      	ldr	r3, [pc, #36]	; (800c754 <tcp_timer_needed+0x34>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d103      	bne.n	800c73c <tcp_timer_needed+0x1c>
 800c734:	4b08      	ldr	r3, [pc, #32]	; (800c758 <tcp_timer_needed+0x38>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d007      	beq.n	800c74c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <tcp_timer_needed+0x30>)
 800c73e:	2201      	movs	r2, #1
 800c740:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c742:	2200      	movs	r2, #0
 800c744:	4905      	ldr	r1, [pc, #20]	; (800c75c <tcp_timer_needed+0x3c>)
 800c746:	20fa      	movs	r0, #250	; 0xfa
 800c748:	f000 f8cc 	bl	800c8e4 <sys_timeout>
  }
}
 800c74c:	bf00      	nop
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	2000882c 	.word	0x2000882c
 800c754:	200087e0 	.word	0x200087e0
 800c758:	200087e4 	.word	0x200087e4
 800c75c:	0800c6d9 	.word	0x0800c6d9

0800c760 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c76c:	2006      	movs	r0, #6
 800c76e:	f7f9 fc65 	bl	800603c <memp_malloc>
 800c772:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d109      	bne.n	800c78e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d151      	bne.n	800c824 <sys_timeout_abs+0xc4>
 800c780:	4b2a      	ldr	r3, [pc, #168]	; (800c82c <sys_timeout_abs+0xcc>)
 800c782:	22be      	movs	r2, #190	; 0xbe
 800c784:	492a      	ldr	r1, [pc, #168]	; (800c830 <sys_timeout_abs+0xd0>)
 800c786:	482b      	ldr	r0, [pc, #172]	; (800c834 <sys_timeout_abs+0xd4>)
 800c788:	f003 fa42 	bl	800fc10 <iprintf>
    return;
 800c78c:	e04a      	b.n	800c824 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2200      	movs	r2, #0
 800c792:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c7a6:	4b24      	ldr	r3, [pc, #144]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d103      	bne.n	800c7b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c7ae:	4a22      	ldr	r2, [pc, #136]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	6013      	str	r3, [r2, #0]
    return;
 800c7b4:	e037      	b.n	800c826 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	685a      	ldr	r2, [r3, #4]
 800c7ba:	4b1f      	ldr	r3, [pc, #124]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	0fdb      	lsrs	r3, r3, #31
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d007      	beq.n	800c7de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c7ce:	4b1a      	ldr	r3, [pc, #104]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c7d6:	4a18      	ldr	r2, [pc, #96]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	e023      	b.n	800c826 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c7de:	4b16      	ldr	r3, [pc, #88]	; (800c838 <sys_timeout_abs+0xd8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	e01a      	b.n	800c81c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00b      	beq.n	800c806 <sys_timeout_abs+0xa6>
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	685a      	ldr	r2, [r3, #4]
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	0fdb      	lsrs	r3, r3, #31
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b00      	cmp	r3, #0
 800c804:	d007      	beq.n	800c816 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	601a      	str	r2, [r3, #0]
        break;
 800c814:	e007      	b.n	800c826 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1e1      	bne.n	800c7e6 <sys_timeout_abs+0x86>
 800c822:	e000      	b.n	800c826 <sys_timeout_abs+0xc6>
    return;
 800c824:	bf00      	nop
      }
    }
  }
}
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	08012f1c 	.word	0x08012f1c
 800c830:	08012f50 	.word	0x08012f50
 800c834:	08012f90 	.word	0x08012f90
 800c838:	20008824 	.word	0x20008824

0800c83c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4798      	blx	r3

  now = sys_now();
 800c84e:	f7f8 fd71 	bl	8005334 <sys_now>
 800c852:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	4b0f      	ldr	r3, [pc, #60]	; (800c898 <lwip_cyclic_timer+0x5c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4413      	add	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	0fdb      	lsrs	r3, r3, #31
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d009      	beq.n	800c886 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	4413      	add	r3, r2
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4907      	ldr	r1, [pc, #28]	; (800c89c <lwip_cyclic_timer+0x60>)
 800c87e:	4618      	mov	r0, r3
 800c880:	f7ff ff6e 	bl	800c760 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c884:	e004      	b.n	800c890 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	4904      	ldr	r1, [pc, #16]	; (800c89c <lwip_cyclic_timer+0x60>)
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7ff ff68 	bl	800c760 <sys_timeout_abs>
}
 800c890:	bf00      	nop
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20008828 	.word	0x20008828
 800c89c:	0800c83d 	.word	0x0800c83d

0800c8a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	607b      	str	r3, [r7, #4]
 800c8aa:	e00e      	b.n	800c8ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c8ac:	4a0b      	ldr	r2, [pc, #44]	; (800c8dc <sys_timeouts_init+0x3c>)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	4a08      	ldr	r2, [pc, #32]	; (800c8dc <sys_timeouts_init+0x3c>)
 800c8ba:	4413      	add	r3, r2
 800c8bc:	461a      	mov	r2, r3
 800c8be:	4908      	ldr	r1, [pc, #32]	; (800c8e0 <sys_timeouts_init+0x40>)
 800c8c0:	f000 f810 	bl	800c8e4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d9ed      	bls.n	800c8ac <sys_timeouts_init+0xc>
  }
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08013b08 	.word	0x08013b08
 800c8e0:	0800c83d 	.word	0x0800c83d

0800c8e4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8f6:	d306      	bcc.n	800c906 <sys_timeout+0x22>
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <sys_timeout+0x40>)
 800c8fa:	f240 1229 	movw	r2, #297	; 0x129
 800c8fe:	490a      	ldr	r1, [pc, #40]	; (800c928 <sys_timeout+0x44>)
 800c900:	480a      	ldr	r0, [pc, #40]	; (800c92c <sys_timeout+0x48>)
 800c902:	f003 f985 	bl	800fc10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c906:	f7f8 fd15 	bl	8005334 <sys_now>
 800c90a:	4602      	mov	r2, r0
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	68b9      	ldr	r1, [r7, #8]
 800c916:	6978      	ldr	r0, [r7, #20]
 800c918:	f7ff ff22 	bl	800c760 <sys_timeout_abs>
#endif
}
 800c91c:	bf00      	nop
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	08012f1c 	.word	0x08012f1c
 800c928:	08012fb8 	.word	0x08012fb8
 800c92c:	08012f90 	.word	0x08012f90

0800c930 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c936:	f7f8 fcfd 	bl	8005334 <sys_now>
 800c93a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c93c:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <sys_check_timeouts+0x78>)
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <sys_check_timeouts+0x1a>
 800c946:	f7f9 ff25 	bl	8006794 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c94a:	4b18      	ldr	r3, [pc, #96]	; (800c9ac <sys_check_timeouts+0x7c>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d022      	beq.n	800c99c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	0fdb      	lsrs	r3, r3, #31
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	b2db      	uxtb	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	d11a      	bne.n	800c9a0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a0f      	ldr	r2, [pc, #60]	; (800c9ac <sys_check_timeouts+0x7c>)
 800c970:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	4a0b      	ldr	r2, [pc, #44]	; (800c9b0 <sys_check_timeouts+0x80>)
 800c984:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	2006      	movs	r0, #6
 800c98a:	f7f9 fbc7 	bl	800611c <memp_free>
    if (handler != NULL) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0d3      	beq.n	800c93c <sys_check_timeouts+0xc>
      handler(arg);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6838      	ldr	r0, [r7, #0]
 800c998:	4798      	blx	r3
  do {
 800c99a:	e7cf      	b.n	800c93c <sys_check_timeouts+0xc>
      return;
 800c99c:	bf00      	nop
 800c99e:	e000      	b.n	800c9a2 <sys_check_timeouts+0x72>
      return;
 800c9a0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	200087d1 	.word	0x200087d1
 800c9ac:	20008824 	.word	0x20008824
 800c9b0:	20008828 	.word	0x20008828

0800c9b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c9b8:	f003 f942 	bl	800fc40 <rand>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	4b01      	ldr	r3, [pc, #4]	; (800c9d4 <udp_init+0x20>)
 800c9ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9d0:	bf00      	nop
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	20000028 	.word	0x20000028

0800c9d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c9e2:	4b17      	ldr	r3, [pc, #92]	; (800ca40 <udp_new_port+0x68>)
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	b291      	uxth	r1, r2
 800c9ea:	4a15      	ldr	r2, [pc, #84]	; (800ca40 <udp_new_port+0x68>)
 800c9ec:	8011      	strh	r1, [r2, #0]
 800c9ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d103      	bne.n	800c9fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c9f6:	4b12      	ldr	r3, [pc, #72]	; (800ca40 <udp_new_port+0x68>)
 800c9f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c9fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9fe:	4b11      	ldr	r3, [pc, #68]	; (800ca44 <udp_new_port+0x6c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	603b      	str	r3, [r7, #0]
 800ca04:	e011      	b.n	800ca2a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	8a5a      	ldrh	r2, [r3, #18]
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	; (800ca40 <udp_new_port+0x68>)
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d108      	bne.n	800ca24 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	3301      	adds	r3, #1
 800ca16:	80fb      	strh	r3, [r7, #6]
 800ca18:	88fb      	ldrh	r3, [r7, #6]
 800ca1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca1e:	d3e0      	bcc.n	800c9e2 <udp_new_port+0xa>
        return 0;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e007      	b.n	800ca34 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	603b      	str	r3, [r7, #0]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1ea      	bne.n	800ca06 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ca30:	4b03      	ldr	r3, [pc, #12]	; (800ca40 <udp_new_port+0x68>)
 800ca32:	881b      	ldrh	r3, [r3, #0]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr
 800ca40:	20000028 	.word	0x20000028
 800ca44:	20008830 	.word	0x20008830

0800ca48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	4613      	mov	r3, r2
 800ca54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d105      	bne.n	800ca68 <udp_input_local_match+0x20>
 800ca5c:	4b27      	ldr	r3, [pc, #156]	; (800cafc <udp_input_local_match+0xb4>)
 800ca5e:	2287      	movs	r2, #135	; 0x87
 800ca60:	4927      	ldr	r1, [pc, #156]	; (800cb00 <udp_input_local_match+0xb8>)
 800ca62:	4828      	ldr	r0, [pc, #160]	; (800cb04 <udp_input_local_match+0xbc>)
 800ca64:	f003 f8d4 	bl	800fc10 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d105      	bne.n	800ca7a <udp_input_local_match+0x32>
 800ca6e:	4b23      	ldr	r3, [pc, #140]	; (800cafc <udp_input_local_match+0xb4>)
 800ca70:	2288      	movs	r2, #136	; 0x88
 800ca72:	4925      	ldr	r1, [pc, #148]	; (800cb08 <udp_input_local_match+0xc0>)
 800ca74:	4823      	ldr	r0, [pc, #140]	; (800cb04 <udp_input_local_match+0xbc>)
 800ca76:	f003 f8cb 	bl	800fc10 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	7a1b      	ldrb	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00b      	beq.n	800ca9a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7a1a      	ldrb	r2, [r3, #8]
 800ca86:	4b21      	ldr	r3, [pc, #132]	; (800cb0c <udp_input_local_match+0xc4>)
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca8e:	3301      	adds	r3, #1
 800ca90:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d001      	beq.n	800ca9a <udp_input_local_match+0x52>
    return 0;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e02b      	b.n	800caf2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d018      	beq.n	800cad2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d013      	beq.n	800cace <udp_input_local_match+0x86>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00f      	beq.n	800cace <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800caae:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <udp_input_local_match+0xc4>)
 800cab0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab6:	d00a      	beq.n	800cace <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <udp_input_local_match+0xc4>)
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	405a      	eors	r2, r3
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	3308      	adds	r3, #8
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d110      	bne.n	800caf0 <udp_input_local_match+0xa8>
          return 1;
 800cace:	2301      	movs	r3, #1
 800cad0:	e00f      	b.n	800caf2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d009      	beq.n	800caec <udp_input_local_match+0xa4>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d005      	beq.n	800caec <udp_input_local_match+0xa4>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <udp_input_local_match+0xc4>)
 800cae6:	695b      	ldr	r3, [r3, #20]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d101      	bne.n	800caf0 <udp_input_local_match+0xa8>
        return 1;
 800caec:	2301      	movs	r3, #1
 800caee:	e000      	b.n	800caf2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	08013004 	.word	0x08013004
 800cb00:	08013034 	.word	0x08013034
 800cb04:	08013058 	.word	0x08013058
 800cb08:	08013080 	.word	0x08013080
 800cb0c:	20005264 	.word	0x20005264

0800cb10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b08d      	sub	sp, #52	; 0x34
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d105      	bne.n	800cb30 <udp_input+0x20>
 800cb24:	4b7c      	ldr	r3, [pc, #496]	; (800cd18 <udp_input+0x208>)
 800cb26:	22cf      	movs	r2, #207	; 0xcf
 800cb28:	497c      	ldr	r1, [pc, #496]	; (800cd1c <udp_input+0x20c>)
 800cb2a:	487d      	ldr	r0, [pc, #500]	; (800cd20 <udp_input+0x210>)
 800cb2c:	f003 f870 	bl	800fc10 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d105      	bne.n	800cb42 <udp_input+0x32>
 800cb36:	4b78      	ldr	r3, [pc, #480]	; (800cd18 <udp_input+0x208>)
 800cb38:	22d0      	movs	r2, #208	; 0xd0
 800cb3a:	497a      	ldr	r1, [pc, #488]	; (800cd24 <udp_input+0x214>)
 800cb3c:	4878      	ldr	r0, [pc, #480]	; (800cd20 <udp_input+0x210>)
 800cb3e:	f003 f867 	bl	800fc10 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	895b      	ldrh	r3, [r3, #10]
 800cb46:	2b07      	cmp	r3, #7
 800cb48:	d803      	bhi.n	800cb52 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fa f95c 	bl	8006e08 <pbuf_free>
    goto end;
 800cb50:	e0de      	b.n	800cd10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cb58:	4b73      	ldr	r3, [pc, #460]	; (800cd28 <udp_input+0x218>)
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	4a72      	ldr	r2, [pc, #456]	; (800cd28 <udp_input+0x218>)
 800cb5e:	6812      	ldr	r2, [r2, #0]
 800cb60:	4611      	mov	r1, r2
 800cb62:	4618      	mov	r0, r3
 800cb64:	f002 f80a 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f8 fdea 	bl	800574c <lwip_htons>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	885b      	ldrh	r3, [r3, #2]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f8 fde2 	bl	800574c <lwip_htons>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb98:	4b64      	ldr	r3, [pc, #400]	; (800cd2c <udp_input+0x21c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb9e:	e054      	b.n	800cc4a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba2:	8a5b      	ldrh	r3, [r3, #18]
 800cba4:	89fa      	ldrh	r2, [r7, #14]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d14a      	bne.n	800cc40 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cbaa:	7cfb      	ldrb	r3, [r7, #19]
 800cbac:	461a      	mov	r2, r3
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbb2:	f7ff ff49 	bl	800ca48 <udp_input_local_match>
 800cbb6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d041      	beq.n	800cc40 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	f003 0304 	and.w	r3, r3, #4
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d11d      	bne.n	800cc04 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d102      	bne.n	800cbd4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	61fb      	str	r3, [r7, #28]
 800cbd2:	e017      	b.n	800cc04 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cbd4:	7cfb      	ldrb	r3, [r7, #19]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d014      	beq.n	800cc04 <udp_input+0xf4>
 800cbda:	4b53      	ldr	r3, [pc, #332]	; (800cd28 <udp_input+0x218>)
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbe2:	d10f      	bne.n	800cc04 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	3304      	adds	r3, #4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d008      	beq.n	800cc04 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d101      	bne.n	800cc04 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	8a9b      	ldrh	r3, [r3, #20]
 800cc08:	8a3a      	ldrh	r2, [r7, #16]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d118      	bne.n	800cc40 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc10:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d005      	beq.n	800cc22 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	685a      	ldr	r2, [r3, #4]
 800cc1a:	4b43      	ldr	r3, [pc, #268]	; (800cd28 <udp_input+0x218>)
 800cc1c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d10e      	bne.n	800cc40 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d014      	beq.n	800cc52 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	68da      	ldr	r2, [r3, #12]
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cc30:	4b3e      	ldr	r3, [pc, #248]	; (800cd2c <udp_input+0x21c>)
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cc38:	4a3c      	ldr	r2, [pc, #240]	; (800cd2c <udp_input+0x21c>)
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cc3e:	e008      	b.n	800cc52 <udp_input+0x142>
      }
    }

    prev = pcb;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1a7      	bne.n	800cba0 <udp_input+0x90>
 800cc50:	e000      	b.n	800cc54 <udp_input+0x144>
        break;
 800cc52:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <udp_input+0x14e>
    pcb = uncon_pcb;
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <udp_input+0x15a>
    for_us = 1;
 800cc64:	2301      	movs	r3, #1
 800cc66:	76fb      	strb	r3, [r7, #27]
 800cc68:	e00a      	b.n	800cc80 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	4b2d      	ldr	r3, [pc, #180]	; (800cd28 <udp_input+0x218>)
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	bf0c      	ite	eq
 800cc78:	2301      	moveq	r3, #1
 800cc7a:	2300      	movne	r3, #0
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cc80:	7efb      	ldrb	r3, [r7, #27]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d041      	beq.n	800cd0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cc86:	2108      	movs	r1, #8
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7fa f837 	bl	8006cfc <pbuf_remove_header>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00a      	beq.n	800ccaa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cc94:	4b20      	ldr	r3, [pc, #128]	; (800cd18 <udp_input+0x208>)
 800cc96:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cc9a:	4925      	ldr	r1, [pc, #148]	; (800cd30 <udp_input+0x220>)
 800cc9c:	4820      	ldr	r0, [pc, #128]	; (800cd20 <udp_input+0x210>)
 800cc9e:	f002 ffb7 	bl	800fc10 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7fa f8b0 	bl	8006e08 <pbuf_free>
      goto end;
 800cca8:	e032      	b.n	800cd10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d012      	beq.n	800ccd6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00a      	beq.n	800ccce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	699c      	ldr	r4, [r3, #24]
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	69d8      	ldr	r0, [r3, #28]
 800ccc0:	8a3b      	ldrh	r3, [r7, #16]
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <udp_input+0x224>)
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cccc:	e021      	b.n	800cd12 <udp_input+0x202>
        pbuf_free(p);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fa f89a 	bl	8006e08 <pbuf_free>
        goto end;
 800ccd4:	e01c      	b.n	800cd10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ccd6:	7cfb      	ldrb	r3, [r7, #19]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d112      	bne.n	800cd02 <udp_input+0x1f2>
 800ccdc:	4b12      	ldr	r3, [pc, #72]	; (800cd28 <udp_input+0x218>)
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cce4:	2be0      	cmp	r3, #224	; 0xe0
 800cce6:	d00c      	beq.n	800cd02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cce8:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <udp_input+0x218>)
 800ccea:	899b      	ldrh	r3, [r3, #12]
 800ccec:	3308      	adds	r3, #8
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	b21b      	sxth	r3, r3
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7fa f874 	bl	8006de2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ccfa:	2103      	movs	r1, #3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f001 fc1d 	bl	800e53c <icmp_dest_unreach>
      pbuf_free(p);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7fa f880 	bl	8006e08 <pbuf_free>
  return;
 800cd08:	e003      	b.n	800cd12 <udp_input+0x202>
    pbuf_free(p);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7fa f87c 	bl	8006e08 <pbuf_free>
  return;
 800cd10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cd12:	372c      	adds	r7, #44	; 0x2c
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd90      	pop	{r4, r7, pc}
 800cd18:	08013004 	.word	0x08013004
 800cd1c:	080130a8 	.word	0x080130a8
 800cd20:	08013058 	.word	0x08013058
 800cd24:	080130c0 	.word	0x080130c0
 800cd28:	20005264 	.word	0x20005264
 800cd2c:	20008830 	.word	0x20008830
 800cd30:	080130dc 	.word	0x080130dc
 800cd34:	20005274 	.word	0x20005274

0800cd38 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d109      	bne.n	800cd5c <udp_send+0x24>
 800cd48:	4b11      	ldr	r3, [pc, #68]	; (800cd90 <udp_send+0x58>)
 800cd4a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cd4e:	4911      	ldr	r1, [pc, #68]	; (800cd94 <udp_send+0x5c>)
 800cd50:	4811      	ldr	r0, [pc, #68]	; (800cd98 <udp_send+0x60>)
 800cd52:	f002 ff5d 	bl	800fc10 <iprintf>
 800cd56:	f06f 030f 	mvn.w	r3, #15
 800cd5a:	e015      	b.n	800cd88 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d109      	bne.n	800cd76 <udp_send+0x3e>
 800cd62:	4b0b      	ldr	r3, [pc, #44]	; (800cd90 <udp_send+0x58>)
 800cd64:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800cd68:	490c      	ldr	r1, [pc, #48]	; (800cd9c <udp_send+0x64>)
 800cd6a:	480b      	ldr	r0, [pc, #44]	; (800cd98 <udp_send+0x60>)
 800cd6c:	f002 ff50 	bl	800fc10 <iprintf>
 800cd70:	f06f 030f 	mvn.w	r3, #15
 800cd74:	e008      	b.n	800cd88 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	1d1a      	adds	r2, r3, #4
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	8a9b      	ldrh	r3, [r3, #20]
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f80d 	bl	800cda0 <udp_sendto>
 800cd86:	4603      	mov	r3, r0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	08013004 	.word	0x08013004
 800cd94:	080130f8 	.word	0x080130f8
 800cd98:	08013058 	.word	0x08013058
 800cd9c:	08013110 	.word	0x08013110

0800cda0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b088      	sub	sp, #32
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d109      	bne.n	800cdc8 <udp_sendto+0x28>
 800cdb4:	4b23      	ldr	r3, [pc, #140]	; (800ce44 <udp_sendto+0xa4>)
 800cdb6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cdba:	4923      	ldr	r1, [pc, #140]	; (800ce48 <udp_sendto+0xa8>)
 800cdbc:	4823      	ldr	r0, [pc, #140]	; (800ce4c <udp_sendto+0xac>)
 800cdbe:	f002 ff27 	bl	800fc10 <iprintf>
 800cdc2:	f06f 030f 	mvn.w	r3, #15
 800cdc6:	e038      	b.n	800ce3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <udp_sendto+0x42>
 800cdce:	4b1d      	ldr	r3, [pc, #116]	; (800ce44 <udp_sendto+0xa4>)
 800cdd0:	f240 2219 	movw	r2, #537	; 0x219
 800cdd4:	491e      	ldr	r1, [pc, #120]	; (800ce50 <udp_sendto+0xb0>)
 800cdd6:	481d      	ldr	r0, [pc, #116]	; (800ce4c <udp_sendto+0xac>)
 800cdd8:	f002 ff1a 	bl	800fc10 <iprintf>
 800cddc:	f06f 030f 	mvn.w	r3, #15
 800cde0:	e02b      	b.n	800ce3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d109      	bne.n	800cdfc <udp_sendto+0x5c>
 800cde8:	4b16      	ldr	r3, [pc, #88]	; (800ce44 <udp_sendto+0xa4>)
 800cdea:	f240 221a 	movw	r2, #538	; 0x21a
 800cdee:	4919      	ldr	r1, [pc, #100]	; (800ce54 <udp_sendto+0xb4>)
 800cdf0:	4816      	ldr	r0, [pc, #88]	; (800ce4c <udp_sendto+0xac>)
 800cdf2:	f002 ff0d 	bl	800fc10 <iprintf>
 800cdf6:	f06f 030f 	mvn.w	r3, #15
 800cdfa:	e01e      	b.n	800ce3a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	7a1b      	ldrb	r3, [r3, #8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d006      	beq.n	800ce12 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	7a1b      	ldrb	r3, [r3, #8]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7f9 fc9d 	bl	8006748 <netif_get_by_index>
 800ce0e:	6178      	str	r0, [r7, #20]
 800ce10:	e003      	b.n	800ce1a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f001 fc1c 	bl	800e650 <ip4_route>
 800ce18:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ce20:	f06f 0303 	mvn.w	r3, #3
 800ce24:	e009      	b.n	800ce3a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ce26:	887a      	ldrh	r2, [r7, #2]
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	9300      	str	r3, [sp, #0]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	68b9      	ldr	r1, [r7, #8]
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 f810 	bl	800ce58 <udp_sendto_if>
 800ce38:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3718      	adds	r7, #24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	08013004 	.word	0x08013004
 800ce48:	08013128 	.word	0x08013128
 800ce4c:	08013058 	.word	0x08013058
 800ce50:	08013140 	.word	0x08013140
 800ce54:	0801315c 	.word	0x0801315c

0800ce58 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b088      	sub	sp, #32
 800ce5c:	af02      	add	r7, sp, #8
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d109      	bne.n	800ce80 <udp_sendto_if+0x28>
 800ce6c:	4b2e      	ldr	r3, [pc, #184]	; (800cf28 <udp_sendto_if+0xd0>)
 800ce6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce72:	492e      	ldr	r1, [pc, #184]	; (800cf2c <udp_sendto_if+0xd4>)
 800ce74:	482e      	ldr	r0, [pc, #184]	; (800cf30 <udp_sendto_if+0xd8>)
 800ce76:	f002 fecb 	bl	800fc10 <iprintf>
 800ce7a:	f06f 030f 	mvn.w	r3, #15
 800ce7e:	e04f      	b.n	800cf20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d109      	bne.n	800ce9a <udp_sendto_if+0x42>
 800ce86:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <udp_sendto_if+0xd0>)
 800ce88:	f240 2281 	movw	r2, #641	; 0x281
 800ce8c:	4929      	ldr	r1, [pc, #164]	; (800cf34 <udp_sendto_if+0xdc>)
 800ce8e:	4828      	ldr	r0, [pc, #160]	; (800cf30 <udp_sendto_if+0xd8>)
 800ce90:	f002 febe 	bl	800fc10 <iprintf>
 800ce94:	f06f 030f 	mvn.w	r3, #15
 800ce98:	e042      	b.n	800cf20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d109      	bne.n	800ceb4 <udp_sendto_if+0x5c>
 800cea0:	4b21      	ldr	r3, [pc, #132]	; (800cf28 <udp_sendto_if+0xd0>)
 800cea2:	f240 2282 	movw	r2, #642	; 0x282
 800cea6:	4924      	ldr	r1, [pc, #144]	; (800cf38 <udp_sendto_if+0xe0>)
 800cea8:	4821      	ldr	r0, [pc, #132]	; (800cf30 <udp_sendto_if+0xd8>)
 800ceaa:	f002 feb1 	bl	800fc10 <iprintf>
 800ceae:	f06f 030f 	mvn.w	r3, #15
 800ceb2:	e035      	b.n	800cf20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d109      	bne.n	800cece <udp_sendto_if+0x76>
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <udp_sendto_if+0xd0>)
 800cebc:	f240 2283 	movw	r2, #643	; 0x283
 800cec0:	491e      	ldr	r1, [pc, #120]	; (800cf3c <udp_sendto_if+0xe4>)
 800cec2:	481b      	ldr	r0, [pc, #108]	; (800cf30 <udp_sendto_if+0xd8>)
 800cec4:	f002 fea4 	bl	800fc10 <iprintf>
 800cec8:	f06f 030f 	mvn.w	r3, #15
 800cecc:	e028      	b.n	800cf20 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d009      	beq.n	800cee8 <udp_sendto_if+0x90>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d005      	beq.n	800cee8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cee4:	2be0      	cmp	r3, #224	; 0xe0
 800cee6:	d103      	bne.n	800cef0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	3304      	adds	r3, #4
 800ceec:	617b      	str	r3, [r7, #20]
 800ceee:	e00b      	b.n	800cf08 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	3304      	adds	r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d002      	beq.n	800cf04 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800cefe:	f06f 0303 	mvn.w	r3, #3
 800cf02:	e00d      	b.n	800cf20 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cf08:	887a      	ldrh	r2, [r7, #2]
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	9301      	str	r3, [sp, #4]
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	4613      	mov	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68b9      	ldr	r1, [r7, #8]
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 f811 	bl	800cf40 <udp_sendto_if_src>
 800cf1e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	08013004 	.word	0x08013004
 800cf2c:	08013178 	.word	0x08013178
 800cf30:	08013058 	.word	0x08013058
 800cf34:	08013194 	.word	0x08013194
 800cf38:	080131b0 	.word	0x080131b0
 800cf3c:	080131d0 	.word	0x080131d0

0800cf40 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b08c      	sub	sp, #48	; 0x30
 800cf44:	af04      	add	r7, sp, #16
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <udp_sendto_if_src+0x28>
 800cf54:	4b65      	ldr	r3, [pc, #404]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800cf56:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cf5a:	4965      	ldr	r1, [pc, #404]	; (800d0f0 <udp_sendto_if_src+0x1b0>)
 800cf5c:	4865      	ldr	r0, [pc, #404]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800cf5e:	f002 fe57 	bl	800fc10 <iprintf>
 800cf62:	f06f 030f 	mvn.w	r3, #15
 800cf66:	e0bc      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <udp_sendto_if_src+0x42>
 800cf6e:	4b5f      	ldr	r3, [pc, #380]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800cf70:	f240 22d2 	movw	r2, #722	; 0x2d2
 800cf74:	4960      	ldr	r1, [pc, #384]	; (800d0f8 <udp_sendto_if_src+0x1b8>)
 800cf76:	485f      	ldr	r0, [pc, #380]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800cf78:	f002 fe4a 	bl	800fc10 <iprintf>
 800cf7c:	f06f 030f 	mvn.w	r3, #15
 800cf80:	e0af      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d109      	bne.n	800cf9c <udp_sendto_if_src+0x5c>
 800cf88:	4b58      	ldr	r3, [pc, #352]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800cf8a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800cf8e:	495b      	ldr	r1, [pc, #364]	; (800d0fc <udp_sendto_if_src+0x1bc>)
 800cf90:	4858      	ldr	r0, [pc, #352]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800cf92:	f002 fe3d 	bl	800fc10 <iprintf>
 800cf96:	f06f 030f 	mvn.w	r3, #15
 800cf9a:	e0a2      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d109      	bne.n	800cfb6 <udp_sendto_if_src+0x76>
 800cfa2:	4b52      	ldr	r3, [pc, #328]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800cfa4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cfa8:	4955      	ldr	r1, [pc, #340]	; (800d100 <udp_sendto_if_src+0x1c0>)
 800cfaa:	4852      	ldr	r0, [pc, #328]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800cfac:	f002 fe30 	bl	800fc10 <iprintf>
 800cfb0:	f06f 030f 	mvn.w	r3, #15
 800cfb4:	e095      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d109      	bne.n	800cfd0 <udp_sendto_if_src+0x90>
 800cfbc:	4b4b      	ldr	r3, [pc, #300]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800cfbe:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cfc2:	4950      	ldr	r1, [pc, #320]	; (800d104 <udp_sendto_if_src+0x1c4>)
 800cfc4:	484b      	ldr	r0, [pc, #300]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800cfc6:	f002 fe23 	bl	800fc10 <iprintf>
 800cfca:	f06f 030f 	mvn.w	r3, #15
 800cfce:	e088      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	8a5b      	ldrh	r3, [r3, #18]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10f      	bne.n	800cff8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cfd8:	68f9      	ldr	r1, [r7, #12]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	8a5b      	ldrh	r3, [r3, #18]
 800cfde:	461a      	mov	r2, r3
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f000 f893 	bl	800d10c <udp_bind>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800cfea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800cff2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cff6:	e074      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	891b      	ldrh	r3, [r3, #8]
 800cffc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d000:	4293      	cmp	r3, r2
 800d002:	d902      	bls.n	800d00a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800d004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d008:	e06b      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d00a:	2108      	movs	r1, #8
 800d00c:	68b8      	ldr	r0, [r7, #8]
 800d00e:	f7f9 fe65 	bl	8006cdc <pbuf_add_header>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d015      	beq.n	800d044 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d018:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d01c:	2108      	movs	r1, #8
 800d01e:	2022      	movs	r0, #34	; 0x22
 800d020:	f7f9 fc0e 	bl	8006840 <pbuf_alloc>
 800d024:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d102      	bne.n	800d032 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800d02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d030:	e057      	b.n	800d0e2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	891b      	ldrh	r3, [r3, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d006      	beq.n	800d048 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d03a:	68b9      	ldr	r1, [r7, #8]
 800d03c:	69f8      	ldr	r0, [r7, #28]
 800d03e:	f7f9 fffb 	bl	8007038 <pbuf_chain>
 800d042:	e001      	b.n	800d048 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	895b      	ldrh	r3, [r3, #10]
 800d04c:	2b07      	cmp	r3, #7
 800d04e:	d806      	bhi.n	800d05e <udp_sendto_if_src+0x11e>
 800d050:	4b26      	ldr	r3, [pc, #152]	; (800d0ec <udp_sendto_if_src+0x1ac>)
 800d052:	f240 320d 	movw	r2, #781	; 0x30d
 800d056:	492c      	ldr	r1, [pc, #176]	; (800d108 <udp_sendto_if_src+0x1c8>)
 800d058:	4826      	ldr	r0, [pc, #152]	; (800d0f4 <udp_sendto_if_src+0x1b4>)
 800d05a:	f002 fdd9 	bl	800fc10 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	8a5b      	ldrh	r3, [r3, #18]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f8 fb6f 	bl	800574c <lwip_htons>
 800d06e:	4603      	mov	r3, r0
 800d070:	461a      	mov	r2, r3
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d076:	887b      	ldrh	r3, [r7, #2]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7f8 fb67 	bl	800574c <lwip_htons>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2200      	movs	r2, #0
 800d08a:	719a      	strb	r2, [r3, #6]
 800d08c:	2200      	movs	r2, #0
 800d08e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	891b      	ldrh	r3, [r3, #8]
 800d094:	4618      	mov	r0, r3
 800d096:	f7f8 fb59 	bl	800574c <lwip_htons>
 800d09a:	4603      	mov	r3, r0
 800d09c:	461a      	mov	r2, r3
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d0a2:	2311      	movs	r3, #17
 800d0a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	7adb      	ldrb	r3, [r3, #11]
 800d0aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	7a9b      	ldrb	r3, [r3, #10]
 800d0b0:	7cb9      	ldrb	r1, [r7, #18]
 800d0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0b4:	9202      	str	r2, [sp, #8]
 800d0b6:	7cfa      	ldrb	r2, [r7, #19]
 800d0b8:	9201      	str	r2, [sp, #4]
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0c2:	69f8      	ldr	r0, [r7, #28]
 800d0c4:	f001 fcac 	bl	800ea20 <ip4_output_if_src>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d0cc:	69fa      	ldr	r2, [r7, #28]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d004      	beq.n	800d0de <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d0d4:	69f8      	ldr	r0, [r7, #28]
 800d0d6:	f7f9 fe97 	bl	8006e08 <pbuf_free>
    q = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d0de:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3720      	adds	r7, #32
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	08013004 	.word	0x08013004
 800d0f0:	080131f0 	.word	0x080131f0
 800d0f4:	08013058 	.word	0x08013058
 800d0f8:	08013210 	.word	0x08013210
 800d0fc:	08013230 	.word	0x08013230
 800d100:	08013254 	.word	0x08013254
 800d104:	08013278 	.word	0x08013278
 800d108:	0801329c 	.word	0x0801329c

0800d10c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	4613      	mov	r3, r2
 800d118:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d120:	4b39      	ldr	r3, [pc, #228]	; (800d208 <udp_bind+0xfc>)
 800d122:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d109      	bne.n	800d13e <udp_bind+0x32>
 800d12a:	4b38      	ldr	r3, [pc, #224]	; (800d20c <udp_bind+0x100>)
 800d12c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d130:	4937      	ldr	r1, [pc, #220]	; (800d210 <udp_bind+0x104>)
 800d132:	4838      	ldr	r0, [pc, #224]	; (800d214 <udp_bind+0x108>)
 800d134:	f002 fd6c 	bl	800fc10 <iprintf>
 800d138:	f06f 030f 	mvn.w	r3, #15
 800d13c:	e060      	b.n	800d200 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d142:	4b35      	ldr	r3, [pc, #212]	; (800d218 <udp_bind+0x10c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	e009      	b.n	800d15e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d14a:	68fa      	ldr	r2, [r7, #12]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d102      	bne.n	800d158 <udp_bind+0x4c>
      rebind = 1;
 800d152:	2301      	movs	r3, #1
 800d154:	74fb      	strb	r3, [r7, #19]
      break;
 800d156:	e005      	b.n	800d164 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1f2      	bne.n	800d14a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d164:	88fb      	ldrh	r3, [r7, #6]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d109      	bne.n	800d17e <udp_bind+0x72>
    port = udp_new_port();
 800d16a:	f7ff fc35 	bl	800c9d8 <udp_new_port>
 800d16e:	4603      	mov	r3, r0
 800d170:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d172:	88fb      	ldrh	r3, [r7, #6]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d12c      	bne.n	800d1d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d178:	f06f 0307 	mvn.w	r3, #7
 800d17c:	e040      	b.n	800d200 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d17e:	4b26      	ldr	r3, [pc, #152]	; (800d218 <udp_bind+0x10c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	e022      	b.n	800d1cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d01b      	beq.n	800d1c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	8a5b      	ldrh	r3, [r3, #18]
 800d192:	88fa      	ldrh	r2, [r7, #6]
 800d194:	429a      	cmp	r2, r3
 800d196:	d116      	bne.n	800d1c6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d00d      	beq.n	800d1c0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00a      	beq.n	800d1c0 <udp_bind+0xb4>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d006      	beq.n	800d1c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d1b2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d1c0:	f06f 0307 	mvn.w	r3, #7
 800d1c4:	e01c      	b.n	800d200 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1d9      	bne.n	800d186 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d002      	beq.n	800d1de <udp_bind+0xd2>
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	e000      	b.n	800d1e0 <udp_bind+0xd4>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	88fa      	ldrh	r2, [r7, #6]
 800d1e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d1ea:	7cfb      	ldrb	r3, [r7, #19]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d1f0:	4b09      	ldr	r3, [pc, #36]	; (800d218 <udp_bind+0x10c>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d1f8:	4a07      	ldr	r2, [pc, #28]	; (800d218 <udp_bind+0x10c>)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	08013b20 	.word	0x08013b20
 800d20c:	08013004 	.word	0x08013004
 800d210:	080132cc 	.word	0x080132cc
 800d214:	08013058 	.word	0x08013058
 800d218:	20008830 	.word	0x20008830

0800d21c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b086      	sub	sp, #24
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	4613      	mov	r3, r2
 800d228:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d109      	bne.n	800d244 <udp_connect+0x28>
 800d230:	4b2c      	ldr	r3, [pc, #176]	; (800d2e4 <udp_connect+0xc8>)
 800d232:	f240 4235 	movw	r2, #1077	; 0x435
 800d236:	492c      	ldr	r1, [pc, #176]	; (800d2e8 <udp_connect+0xcc>)
 800d238:	482c      	ldr	r0, [pc, #176]	; (800d2ec <udp_connect+0xd0>)
 800d23a:	f002 fce9 	bl	800fc10 <iprintf>
 800d23e:	f06f 030f 	mvn.w	r3, #15
 800d242:	e04b      	b.n	800d2dc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d109      	bne.n	800d25e <udp_connect+0x42>
 800d24a:	4b26      	ldr	r3, [pc, #152]	; (800d2e4 <udp_connect+0xc8>)
 800d24c:	f240 4236 	movw	r2, #1078	; 0x436
 800d250:	4927      	ldr	r1, [pc, #156]	; (800d2f0 <udp_connect+0xd4>)
 800d252:	4826      	ldr	r0, [pc, #152]	; (800d2ec <udp_connect+0xd0>)
 800d254:	f002 fcdc 	bl	800fc10 <iprintf>
 800d258:	f06f 030f 	mvn.w	r3, #15
 800d25c:	e03e      	b.n	800d2dc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	8a5b      	ldrh	r3, [r3, #18]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10f      	bne.n	800d286 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d266:	68f9      	ldr	r1, [r7, #12]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8a5b      	ldrh	r3, [r3, #18]
 800d26c:	461a      	mov	r2, r3
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff ff4c 	bl	800d10c <udp_bind>
 800d274:	4603      	mov	r3, r0
 800d276:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <udp_connect+0x6a>
      return err;
 800d280:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d284:	e02a      	b.n	800d2dc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <udp_connect+0x76>
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	e000      	b.n	800d294 <udp_connect+0x78>
 800d292:	2300      	movs	r3, #0
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	88fa      	ldrh	r2, [r7, #6]
 800d29c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	7c1b      	ldrb	r3, [r3, #16]
 800d2a2:	f043 0304 	orr.w	r3, r3, #4
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d2ac:	4b11      	ldr	r3, [pc, #68]	; (800d2f4 <udp_connect+0xd8>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	617b      	str	r3, [r7, #20]
 800d2b2:	e008      	b.n	800d2c6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d101      	bne.n	800d2c0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e00d      	b.n	800d2dc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d1f3      	bne.n	800d2b4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d2cc:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <udp_connect+0xd8>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d2d4:	4a07      	ldr	r2, [pc, #28]	; (800d2f4 <udp_connect+0xd8>)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08013004 	.word	0x08013004
 800d2e8:	080132e4 	.word	0x080132e4
 800d2ec:	08013058 	.word	0x08013058
 800d2f0:	08013300 	.word	0x08013300
 800d2f4:	20008830 	.word	0x20008830

0800d2f8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d107      	bne.n	800d316 <udp_disconnect+0x1e>
 800d306:	4b0d      	ldr	r3, [pc, #52]	; (800d33c <udp_disconnect+0x44>)
 800d308:	f240 426a 	movw	r2, #1130	; 0x46a
 800d30c:	490c      	ldr	r1, [pc, #48]	; (800d340 <udp_disconnect+0x48>)
 800d30e:	480d      	ldr	r0, [pc, #52]	; (800d344 <udp_disconnect+0x4c>)
 800d310:	f002 fc7e 	bl	800fc10 <iprintf>
 800d314:	e00f      	b.n	800d336 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	7c1b      	ldrb	r3, [r3, #16]
 800d32c:	f023 0304 	bic.w	r3, r3, #4
 800d330:	b2da      	uxtb	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	741a      	strb	r2, [r3, #16]
}
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	08013004 	.word	0x08013004
 800d340:	0801331c 	.word	0x0801331c
 800d344:	08013058 	.word	0x08013058

0800d348 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d107      	bne.n	800d36a <udp_recv+0x22>
 800d35a:	4b08      	ldr	r3, [pc, #32]	; (800d37c <udp_recv+0x34>)
 800d35c:	f240 428a 	movw	r2, #1162	; 0x48a
 800d360:	4907      	ldr	r1, [pc, #28]	; (800d380 <udp_recv+0x38>)
 800d362:	4808      	ldr	r0, [pc, #32]	; (800d384 <udp_recv+0x3c>)
 800d364:	f002 fc54 	bl	800fc10 <iprintf>
 800d368:	e005      	b.n	800d376 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	61da      	str	r2, [r3, #28]
}
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	08013004 	.word	0x08013004
 800d380:	08013338 	.word	0x08013338
 800d384:	08013058 	.word	0x08013058

0800d388 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d107      	bne.n	800d3a6 <udp_remove+0x1e>
 800d396:	4b19      	ldr	r3, [pc, #100]	; (800d3fc <udp_remove+0x74>)
 800d398:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d39c:	4918      	ldr	r1, [pc, #96]	; (800d400 <udp_remove+0x78>)
 800d39e:	4819      	ldr	r0, [pc, #100]	; (800d404 <udp_remove+0x7c>)
 800d3a0:	f002 fc36 	bl	800fc10 <iprintf>
 800d3a4:	e026      	b.n	800d3f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d3a6:	4b18      	ldr	r3, [pc, #96]	; (800d408 <udp_remove+0x80>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d105      	bne.n	800d3bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d3b0:	4b15      	ldr	r3, [pc, #84]	; (800d408 <udp_remove+0x80>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	4a14      	ldr	r2, [pc, #80]	; (800d408 <udp_remove+0x80>)
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	e017      	b.n	800d3ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d3bc:	4b12      	ldr	r3, [pc, #72]	; (800d408 <udp_remove+0x80>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	60fb      	str	r3, [r7, #12]
 800d3c2:	e010      	b.n	800d3e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d009      	beq.n	800d3e0 <udp_remove+0x58>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d104      	bne.n	800d3e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68da      	ldr	r2, [r3, #12]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	60da      	str	r2, [r3, #12]
        break;
 800d3de:	e005      	b.n	800d3ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1eb      	bne.n	800d3c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	f7f8 fe94 	bl	800611c <memp_free>
}
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	08013004 	.word	0x08013004
 800d400:	08013350 	.word	0x08013350
 800d404:	08013058 	.word	0x08013058
 800d408:	20008830 	.word	0x20008830

0800d40c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d412:	2000      	movs	r0, #0
 800d414:	f7f8 fe12 	bl	800603c <memp_malloc>
 800d418:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d420:	2220      	movs	r2, #32
 800d422:	2100      	movs	r1, #0
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f002 fbeb 	bl	800fc00 <memset>
    pcb->ttl = UDP_TTL;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	22ff      	movs	r2, #255	; 0xff
 800d42e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d430:	687b      	ldr	r3, [r7, #4]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
	...

0800d43c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01e      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d01a      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d017      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d013      	beq.n	800d48a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d462:	4b0d      	ldr	r3, [pc, #52]	; (800d498 <udp_netif_ip_addr_changed+0x5c>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	60fb      	str	r3, [r7, #12]
 800d468:	e00c      	b.n	800d484 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d103      	bne.n	800d47e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1ef      	bne.n	800d46a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d48a:	bf00      	nop
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	20008830 	.word	0x20008830

0800d49c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d4a4:	4915      	ldr	r1, [pc, #84]	; (800d4fc <etharp_free_entry+0x60>)
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	4413      	add	r3, r2
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	440b      	add	r3, r1
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d013      	beq.n	800d4e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d4b8:	4910      	ldr	r1, [pc, #64]	; (800d4fc <etharp_free_entry+0x60>)
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	4413      	add	r3, r2
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	440b      	add	r3, r1
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7f9 fc9d 	bl	8006e08 <pbuf_free>
    arp_table[i].q = NULL;
 800d4ce:	490b      	ldr	r1, [pc, #44]	; (800d4fc <etharp_free_entry+0x60>)
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4413      	add	r3, r2
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	440b      	add	r3, r1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d4e0:	4906      	ldr	r1, [pc, #24]	; (800d4fc <etharp_free_entry+0x60>)
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	4413      	add	r3, r2
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	440b      	add	r3, r1
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d4f4:	bf00      	nop
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	20008834 	.word	0x20008834

0800d500 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d506:	2300      	movs	r3, #0
 800d508:	607b      	str	r3, [r7, #4]
 800d50a:	e096      	b.n	800d63a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d50c:	494f      	ldr	r1, [pc, #316]	; (800d64c <etharp_tmr+0x14c>)
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	4613      	mov	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	4413      	add	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	440b      	add	r3, r1
 800d51a:	3314      	adds	r3, #20
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d520:	78fb      	ldrb	r3, [r7, #3]
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 8086 	beq.w	800d634 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d528:	4948      	ldr	r1, [pc, #288]	; (800d64c <etharp_tmr+0x14c>)
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	4613      	mov	r3, r2
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4413      	add	r3, r2
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	440b      	add	r3, r1
 800d536:	3312      	adds	r3, #18
 800d538:	881b      	ldrh	r3, [r3, #0]
 800d53a:	3301      	adds	r3, #1
 800d53c:	b298      	uxth	r0, r3
 800d53e:	4943      	ldr	r1, [pc, #268]	; (800d64c <etharp_tmr+0x14c>)
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	4613      	mov	r3, r2
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	4413      	add	r3, r2
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	440b      	add	r3, r1
 800d54c:	3312      	adds	r3, #18
 800d54e:	4602      	mov	r2, r0
 800d550:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d552:	493e      	ldr	r1, [pc, #248]	; (800d64c <etharp_tmr+0x14c>)
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	3312      	adds	r3, #18
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d568:	d215      	bcs.n	800d596 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d56a:	4938      	ldr	r1, [pc, #224]	; (800d64c <etharp_tmr+0x14c>)
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4613      	mov	r3, r2
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	440b      	add	r3, r1
 800d578:	3314      	adds	r3, #20
 800d57a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d10e      	bne.n	800d59e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d580:	4932      	ldr	r1, [pc, #200]	; (800d64c <etharp_tmr+0x14c>)
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	4613      	mov	r3, r2
 800d586:	005b      	lsls	r3, r3, #1
 800d588:	4413      	add	r3, r2
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	440b      	add	r3, r1
 800d58e:	3312      	adds	r3, #18
 800d590:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d592:	2b04      	cmp	r3, #4
 800d594:	d903      	bls.n	800d59e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff ff80 	bl	800d49c <etharp_free_entry>
 800d59c:	e04a      	b.n	800d634 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d59e:	492b      	ldr	r1, [pc, #172]	; (800d64c <etharp_tmr+0x14c>)
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	00db      	lsls	r3, r3, #3
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3314      	adds	r3, #20
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d10a      	bne.n	800d5ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5b4:	4925      	ldr	r1, [pc, #148]	; (800d64c <etharp_tmr+0x14c>)
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	005b      	lsls	r3, r3, #1
 800d5bc:	4413      	add	r3, r2
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	440b      	add	r3, r1
 800d5c2:	3314      	adds	r3, #20
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e034      	b.n	800d634 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5ca:	4920      	ldr	r1, [pc, #128]	; (800d64c <etharp_tmr+0x14c>)
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	4413      	add	r3, r2
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	440b      	add	r3, r1
 800d5d8:	3314      	adds	r3, #20
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b04      	cmp	r3, #4
 800d5de:	d10a      	bne.n	800d5f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5e0:	491a      	ldr	r1, [pc, #104]	; (800d64c <etharp_tmr+0x14c>)
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	440b      	add	r3, r1
 800d5ee:	3314      	adds	r3, #20
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	701a      	strb	r2, [r3, #0]
 800d5f4:	e01e      	b.n	800d634 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5f6:	4915      	ldr	r1, [pc, #84]	; (800d64c <etharp_tmr+0x14c>)
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4413      	add	r3, r2
 800d600:	00db      	lsls	r3, r3, #3
 800d602:	440b      	add	r3, r1
 800d604:	3314      	adds	r3, #20
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d113      	bne.n	800d634 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d60c:	490f      	ldr	r1, [pc, #60]	; (800d64c <etharp_tmr+0x14c>)
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	4613      	mov	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	4413      	add	r3, r2
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	440b      	add	r3, r1
 800d61a:	3308      	adds	r3, #8
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	4613      	mov	r3, r2
 800d622:	005b      	lsls	r3, r3, #1
 800d624:	4413      	add	r3, r2
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	4a08      	ldr	r2, [pc, #32]	; (800d64c <etharp_tmr+0x14c>)
 800d62a:	4413      	add	r3, r2
 800d62c:	3304      	adds	r3, #4
 800d62e:	4619      	mov	r1, r3
 800d630:	f000 fe6e 	bl	800e310 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3301      	adds	r3, #1
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b09      	cmp	r3, #9
 800d63e:	f77f af65 	ble.w	800d50c <etharp_tmr+0xc>
      }
    }
  }
}
 800d642:	bf00      	nop
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	20008834 	.word	0x20008834

0800d650 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	460b      	mov	r3, r1
 800d65a:	607a      	str	r2, [r7, #4]
 800d65c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d65e:	230a      	movs	r3, #10
 800d660:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d662:	230a      	movs	r3, #10
 800d664:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d666:	230a      	movs	r3, #10
 800d668:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d66e:	230a      	movs	r3, #10
 800d670:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	83bb      	strh	r3, [r7, #28]
 800d676:	2300      	movs	r3, #0
 800d678:	837b      	strh	r3, [r7, #26]
 800d67a:	2300      	movs	r3, #0
 800d67c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d67e:	2300      	movs	r3, #0
 800d680:	843b      	strh	r3, [r7, #32]
 800d682:	e0ae      	b.n	800d7e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d684:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d688:	49a6      	ldr	r1, [pc, #664]	; (800d924 <etharp_find_entry+0x2d4>)
 800d68a:	4613      	mov	r3, r2
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	4413      	add	r3, r2
 800d690:	00db      	lsls	r3, r3, #3
 800d692:	440b      	add	r3, r1
 800d694:	3314      	adds	r3, #20
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d69a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d69e:	2b0a      	cmp	r3, #10
 800d6a0:	d105      	bne.n	800d6ae <etharp_find_entry+0x5e>
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d102      	bne.n	800d6ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d6a8:	8c3b      	ldrh	r3, [r7, #32]
 800d6aa:	847b      	strh	r3, [r7, #34]	; 0x22
 800d6ac:	e095      	b.n	800d7da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 8092 	beq.w	800d7da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d009      	beq.n	800d6d0 <etharp_find_entry+0x80>
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d806      	bhi.n	800d6d0 <etharp_find_entry+0x80>
 800d6c2:	4b99      	ldr	r3, [pc, #612]	; (800d928 <etharp_find_entry+0x2d8>)
 800d6c4:	f240 1223 	movw	r2, #291	; 0x123
 800d6c8:	4998      	ldr	r1, [pc, #608]	; (800d92c <etharp_find_entry+0x2dc>)
 800d6ca:	4899      	ldr	r0, [pc, #612]	; (800d930 <etharp_find_entry+0x2e0>)
 800d6cc:	f002 faa0 	bl	800fc10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d020      	beq.n	800d718 <etharp_find_entry+0xc8>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6819      	ldr	r1, [r3, #0]
 800d6da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6de:	4891      	ldr	r0, [pc, #580]	; (800d924 <etharp_find_entry+0x2d4>)
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	4413      	add	r3, r2
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	4403      	add	r3, r0
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	d112      	bne.n	800d718 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00c      	beq.n	800d712 <etharp_find_entry+0xc2>
 800d6f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6fc:	4989      	ldr	r1, [pc, #548]	; (800d924 <etharp_find_entry+0x2d4>)
 800d6fe:	4613      	mov	r3, r2
 800d700:	005b      	lsls	r3, r3, #1
 800d702:	4413      	add	r3, r2
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	440b      	add	r3, r1
 800d708:	3308      	adds	r3, #8
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d102      	bne.n	800d718 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d712:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d716:	e100      	b.n	800d91a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d140      	bne.n	800d7a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d71e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d722:	4980      	ldr	r1, [pc, #512]	; (800d924 <etharp_find_entry+0x2d4>)
 800d724:	4613      	mov	r3, r2
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	4413      	add	r3, r2
 800d72a:	00db      	lsls	r3, r3, #3
 800d72c:	440b      	add	r3, r1
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01a      	beq.n	800d76a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d734:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d738:	497a      	ldr	r1, [pc, #488]	; (800d924 <etharp_find_entry+0x2d4>)
 800d73a:	4613      	mov	r3, r2
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	4413      	add	r3, r2
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	440b      	add	r3, r1
 800d744:	3312      	adds	r3, #18
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	8bba      	ldrh	r2, [r7, #28]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d845      	bhi.n	800d7da <etharp_find_entry+0x18a>
            old_queue = i;
 800d74e:	8c3b      	ldrh	r3, [r7, #32]
 800d750:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d756:	4973      	ldr	r1, [pc, #460]	; (800d924 <etharp_find_entry+0x2d4>)
 800d758:	4613      	mov	r3, r2
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	4413      	add	r3, r2
 800d75e:	00db      	lsls	r3, r3, #3
 800d760:	440b      	add	r3, r1
 800d762:	3312      	adds	r3, #18
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	83bb      	strh	r3, [r7, #28]
 800d768:	e037      	b.n	800d7da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d76a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d76e:	496d      	ldr	r1, [pc, #436]	; (800d924 <etharp_find_entry+0x2d4>)
 800d770:	4613      	mov	r3, r2
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	4413      	add	r3, r2
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	440b      	add	r3, r1
 800d77a:	3312      	adds	r3, #18
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	8b7a      	ldrh	r2, [r7, #26]
 800d780:	429a      	cmp	r2, r3
 800d782:	d82a      	bhi.n	800d7da <etharp_find_entry+0x18a>
            old_pending = i;
 800d784:	8c3b      	ldrh	r3, [r7, #32]
 800d786:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d788:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d78c:	4965      	ldr	r1, [pc, #404]	; (800d924 <etharp_find_entry+0x2d4>)
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	440b      	add	r3, r1
 800d798:	3312      	adds	r3, #18
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	837b      	strh	r3, [r7, #26]
 800d79e:	e01c      	b.n	800d7da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d919      	bls.n	800d7da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d7a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7aa:	495e      	ldr	r1, [pc, #376]	; (800d924 <etharp_find_entry+0x2d4>)
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	005b      	lsls	r3, r3, #1
 800d7b0:	4413      	add	r3, r2
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	440b      	add	r3, r1
 800d7b6:	3312      	adds	r3, #18
 800d7b8:	881b      	ldrh	r3, [r3, #0]
 800d7ba:	8b3a      	ldrh	r2, [r7, #24]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d80c      	bhi.n	800d7da <etharp_find_entry+0x18a>
            old_stable = i;
 800d7c0:	8c3b      	ldrh	r3, [r7, #32]
 800d7c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d7c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7c8:	4956      	ldr	r1, [pc, #344]	; (800d924 <etharp_find_entry+0x2d4>)
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	4413      	add	r3, r2
 800d7d0:	00db      	lsls	r3, r3, #3
 800d7d2:	440b      	add	r3, r1
 800d7d4:	3312      	adds	r3, #18
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d7da:	8c3b      	ldrh	r3, [r7, #32]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	843b      	strh	r3, [r7, #32]
 800d7e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7e6:	2b09      	cmp	r3, #9
 800d7e8:	f77f af4c 	ble.w	800d684 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d108      	bne.n	800d808 <etharp_find_entry+0x1b8>
 800d7f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7fa:	2b0a      	cmp	r3, #10
 800d7fc:	d107      	bne.n	800d80e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d80c:	e085      	b.n	800d91a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d80e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d812:	2b09      	cmp	r3, #9
 800d814:	dc02      	bgt.n	800d81c <etharp_find_entry+0x1cc>
    i = empty;
 800d816:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d818:	843b      	strh	r3, [r7, #32]
 800d81a:	e039      	b.n	800d890 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d81c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d820:	2b09      	cmp	r3, #9
 800d822:	dc14      	bgt.n	800d84e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d826:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d828:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d82c:	493d      	ldr	r1, [pc, #244]	; (800d924 <etharp_find_entry+0x2d4>)
 800d82e:	4613      	mov	r3, r2
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	4413      	add	r3, r2
 800d834:	00db      	lsls	r3, r3, #3
 800d836:	440b      	add	r3, r1
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d018      	beq.n	800d870 <etharp_find_entry+0x220>
 800d83e:	4b3a      	ldr	r3, [pc, #232]	; (800d928 <etharp_find_entry+0x2d8>)
 800d840:	f240 126d 	movw	r2, #365	; 0x16d
 800d844:	493b      	ldr	r1, [pc, #236]	; (800d934 <etharp_find_entry+0x2e4>)
 800d846:	483a      	ldr	r0, [pc, #232]	; (800d930 <etharp_find_entry+0x2e0>)
 800d848:	f002 f9e2 	bl	800fc10 <iprintf>
 800d84c:	e010      	b.n	800d870 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d84e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d852:	2b09      	cmp	r3, #9
 800d854:	dc02      	bgt.n	800d85c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d856:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d858:	843b      	strh	r3, [r7, #32]
 800d85a:	e009      	b.n	800d870 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d85c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d860:	2b09      	cmp	r3, #9
 800d862:	dc02      	bgt.n	800d86a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d864:	8bfb      	ldrh	r3, [r7, #30]
 800d866:	843b      	strh	r3, [r7, #32]
 800d868:	e002      	b.n	800d870 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d86e:	e054      	b.n	800d91a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d870:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d874:	2b09      	cmp	r3, #9
 800d876:	dd06      	ble.n	800d886 <etharp_find_entry+0x236>
 800d878:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <etharp_find_entry+0x2d8>)
 800d87a:	f240 127f 	movw	r2, #383	; 0x17f
 800d87e:	492e      	ldr	r1, [pc, #184]	; (800d938 <etharp_find_entry+0x2e8>)
 800d880:	482b      	ldr	r0, [pc, #172]	; (800d930 <etharp_find_entry+0x2e0>)
 800d882:	f002 f9c5 	bl	800fc10 <iprintf>
    etharp_free_entry(i);
 800d886:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7ff fe06 	bl	800d49c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d890:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d894:	2b09      	cmp	r3, #9
 800d896:	dd06      	ble.n	800d8a6 <etharp_find_entry+0x256>
 800d898:	4b23      	ldr	r3, [pc, #140]	; (800d928 <etharp_find_entry+0x2d8>)
 800d89a:	f240 1283 	movw	r2, #387	; 0x183
 800d89e:	4926      	ldr	r1, [pc, #152]	; (800d938 <etharp_find_entry+0x2e8>)
 800d8a0:	4823      	ldr	r0, [pc, #140]	; (800d930 <etharp_find_entry+0x2e0>)
 800d8a2:	f002 f9b5 	bl	800fc10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d8a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8aa:	491e      	ldr	r1, [pc, #120]	; (800d924 <etharp_find_entry+0x2d4>)
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	4413      	add	r3, r2
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	440b      	add	r3, r1
 800d8b6:	3314      	adds	r3, #20
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d006      	beq.n	800d8cc <etharp_find_entry+0x27c>
 800d8be:	4b1a      	ldr	r3, [pc, #104]	; (800d928 <etharp_find_entry+0x2d8>)
 800d8c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d8c4:	491d      	ldr	r1, [pc, #116]	; (800d93c <etharp_find_entry+0x2ec>)
 800d8c6:	481a      	ldr	r0, [pc, #104]	; (800d930 <etharp_find_entry+0x2e0>)
 800d8c8:	f002 f9a2 	bl	800fc10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00b      	beq.n	800d8ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d8d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6819      	ldr	r1, [r3, #0]
 800d8da:	4812      	ldr	r0, [pc, #72]	; (800d924 <etharp_find_entry+0x2d4>)
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	4403      	add	r3, r0
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d8ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8ee:	490d      	ldr	r1, [pc, #52]	; (800d924 <etharp_find_entry+0x2d4>)
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	4413      	add	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	440b      	add	r3, r1
 800d8fa:	3312      	adds	r3, #18
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d900:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d904:	4907      	ldr	r1, [pc, #28]	; (800d924 <etharp_find_entry+0x2d4>)
 800d906:	4613      	mov	r3, r2
 800d908:	005b      	lsls	r3, r3, #1
 800d90a:	4413      	add	r3, r2
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	440b      	add	r3, r1
 800d910:	3308      	adds	r3, #8
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d916:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3728      	adds	r7, #40	; 0x28
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	20008834 	.word	0x20008834
 800d928:	08013368 	.word	0x08013368
 800d92c:	080133a0 	.word	0x080133a0
 800d930:	080133e0 	.word	0x080133e0
 800d934:	08013408 	.word	0x08013408
 800d938:	08013420 	.word	0x08013420
 800d93c:	08013434 	.word	0x08013434

0800d940 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b088      	sub	sp, #32
 800d944:	af02      	add	r7, sp, #8
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d954:	2b06      	cmp	r3, #6
 800d956:	d006      	beq.n	800d966 <etharp_update_arp_entry+0x26>
 800d958:	4b48      	ldr	r3, [pc, #288]	; (800da7c <etharp_update_arp_entry+0x13c>)
 800d95a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d95e:	4948      	ldr	r1, [pc, #288]	; (800da80 <etharp_update_arp_entry+0x140>)
 800d960:	4848      	ldr	r0, [pc, #288]	; (800da84 <etharp_update_arp_entry+0x144>)
 800d962:	f002 f955 	bl	800fc10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d012      	beq.n	800d992 <etharp_update_arp_entry+0x52>
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00e      	beq.n	800d992 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68f9      	ldr	r1, [r7, #12]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f001 f8fe 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800d980:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d98e:	2be0      	cmp	r3, #224	; 0xe0
 800d990:	d102      	bne.n	800d998 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d992:	f06f 030f 	mvn.w	r3, #15
 800d996:	e06c      	b.n	800da72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4619      	mov	r1, r3
 800d99e:	68b8      	ldr	r0, [r7, #8]
 800d9a0:	f7ff fe56 	bl	800d650 <etharp_find_entry>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d9a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da02      	bge.n	800d9b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d9b0:	8afb      	ldrh	r3, [r7, #22]
 800d9b2:	b25b      	sxtb	r3, r3
 800d9b4:	e05d      	b.n	800da72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d9b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9ba:	4933      	ldr	r1, [pc, #204]	; (800da88 <etharp_update_arp_entry+0x148>)
 800d9bc:	4613      	mov	r3, r2
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	00db      	lsls	r3, r3, #3
 800d9c4:	440b      	add	r3, r1
 800d9c6:	3314      	adds	r3, #20
 800d9c8:	2202      	movs	r2, #2
 800d9ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d9cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9d0:	492d      	ldr	r1, [pc, #180]	; (800da88 <etharp_update_arp_entry+0x148>)
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	440b      	add	r3, r1
 800d9dc:	3308      	adds	r3, #8
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d9e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	4413      	add	r3, r2
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	3308      	adds	r3, #8
 800d9f0:	4a25      	ldr	r2, [pc, #148]	; (800da88 <etharp_update_arp_entry+0x148>)
 800d9f2:	4413      	add	r3, r2
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	2206      	movs	r2, #6
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f002 f8d8 	bl	800fbb0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800da00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da04:	4920      	ldr	r1, [pc, #128]	; (800da88 <etharp_update_arp_entry+0x148>)
 800da06:	4613      	mov	r3, r2
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	4413      	add	r3, r2
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	440b      	add	r3, r1
 800da10:	3312      	adds	r3, #18
 800da12:	2200      	movs	r2, #0
 800da14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800da16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da1a:	491b      	ldr	r1, [pc, #108]	; (800da88 <etharp_update_arp_entry+0x148>)
 800da1c:	4613      	mov	r3, r2
 800da1e:	005b      	lsls	r3, r3, #1
 800da20:	4413      	add	r3, r2
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	440b      	add	r3, r1
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d021      	beq.n	800da70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800da2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da30:	4915      	ldr	r1, [pc, #84]	; (800da88 <etharp_update_arp_entry+0x148>)
 800da32:	4613      	mov	r3, r2
 800da34:	005b      	lsls	r3, r3, #1
 800da36:	4413      	add	r3, r2
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	440b      	add	r3, r1
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800da40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da44:	4910      	ldr	r1, [pc, #64]	; (800da88 <etharp_update_arp_entry+0x148>)
 800da46:	4613      	mov	r3, r2
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	4413      	add	r3, r2
 800da4c:	00db      	lsls	r3, r3, #3
 800da4e:	440b      	add	r3, r1
 800da50:	2200      	movs	r2, #0
 800da52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800da5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6939      	ldr	r1, [r7, #16]
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f002 f827 	bl	800fab8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f7f9 f9cc 	bl	8006e08 <pbuf_free>
  }
  return ERR_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3718      	adds	r7, #24
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	08013368 	.word	0x08013368
 800da80:	08013460 	.word	0x08013460
 800da84:	080133e0 	.word	0x080133e0
 800da88:	20008834 	.word	0x20008834

0800da8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
 800da98:	e01e      	b.n	800dad8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800da9a:	4913      	ldr	r1, [pc, #76]	; (800dae8 <etharp_cleanup_netif+0x5c>)
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	4613      	mov	r3, r2
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	4413      	add	r3, r2
 800daa4:	00db      	lsls	r3, r3, #3
 800daa6:	440b      	add	r3, r1
 800daa8:	3314      	adds	r3, #20
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800daae:	7afb      	ldrb	r3, [r7, #11]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00e      	beq.n	800dad2 <etharp_cleanup_netif+0x46>
 800dab4:	490c      	ldr	r1, [pc, #48]	; (800dae8 <etharp_cleanup_netif+0x5c>)
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	4613      	mov	r3, r2
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	4413      	add	r3, r2
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	440b      	add	r3, r1
 800dac2:	3308      	adds	r3, #8
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d102      	bne.n	800dad2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f7ff fce5 	bl	800d49c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3301      	adds	r3, #1
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b09      	cmp	r3, #9
 800dadc:	dddd      	ble.n	800da9a <etharp_cleanup_netif+0xe>
    }
  }
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20008834 	.word	0x20008834

0800daec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800daec:	b5b0      	push	{r4, r5, r7, lr}
 800daee:	b08a      	sub	sp, #40	; 0x28
 800daf0:	af04      	add	r7, sp, #16
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d107      	bne.n	800db0c <etharp_input+0x20>
 800dafc:	4b3d      	ldr	r3, [pc, #244]	; (800dbf4 <etharp_input+0x108>)
 800dafe:	f240 228a 	movw	r2, #650	; 0x28a
 800db02:	493d      	ldr	r1, [pc, #244]	; (800dbf8 <etharp_input+0x10c>)
 800db04:	483d      	ldr	r0, [pc, #244]	; (800dbfc <etharp_input+0x110>)
 800db06:	f002 f883 	bl	800fc10 <iprintf>
 800db0a:	e06f      	b.n	800dbec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	881b      	ldrh	r3, [r3, #0]
 800db16:	b29b      	uxth	r3, r3
 800db18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db1c:	d10c      	bne.n	800db38 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800db22:	2b06      	cmp	r3, #6
 800db24:	d108      	bne.n	800db38 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d104      	bne.n	800db38 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	885b      	ldrh	r3, [r3, #2]
 800db32:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800db34:	2b08      	cmp	r3, #8
 800db36:	d003      	beq.n	800db40 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7f9 f965 	bl	8006e08 <pbuf_free>
    return;
 800db3e:	e055      	b.n	800dbec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	330e      	adds	r3, #14
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	3318      	adds	r3, #24
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	3304      	adds	r3, #4
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d102      	bne.n	800db60 <etharp_input+0x74>
    for_us = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	75fb      	strb	r3, [r7, #23]
 800db5e:	e009      	b.n	800db74 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	3304      	adds	r3, #4
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	bf0c      	ite	eq
 800db6c:	2301      	moveq	r3, #1
 800db6e:	2300      	movne	r3, #0
 800db70:	b2db      	uxtb	r3, r3
 800db72:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	f103 0208 	add.w	r2, r3, #8
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <etharp_input+0x98>
 800db80:	2301      	movs	r3, #1
 800db82:	e000      	b.n	800db86 <etharp_input+0x9a>
 800db84:	2302      	movs	r3, #2
 800db86:	f107 010c 	add.w	r1, r7, #12
 800db8a:	6838      	ldr	r0, [r7, #0]
 800db8c:	f7ff fed8 	bl	800d940 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	88db      	ldrh	r3, [r3, #6]
 800db94:	b29b      	uxth	r3, r3
 800db96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db9a:	d003      	beq.n	800dba4 <etharp_input+0xb8>
 800db9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba0:	d01e      	beq.n	800dbe0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dba2:	e020      	b.n	800dbe6 <etharp_input+0xfa>
      if (for_us) {
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d01c      	beq.n	800dbe4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dbc4:	2102      	movs	r1, #2
 800dbc6:	9103      	str	r1, [sp, #12]
 800dbc8:	f107 010c 	add.w	r1, r7, #12
 800dbcc:	9102      	str	r1, [sp, #8]
 800dbce:	9201      	str	r2, [sp, #4]
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	462b      	mov	r3, r5
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	6838      	ldr	r0, [r7, #0]
 800dbda:	f000 faeb 	bl	800e1b4 <etharp_raw>
      break;
 800dbde:	e001      	b.n	800dbe4 <etharp_input+0xf8>
      break;
 800dbe0:	bf00      	nop
 800dbe2:	e000      	b.n	800dbe6 <etharp_input+0xfa>
      break;
 800dbe4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7f9 f90e 	bl	8006e08 <pbuf_free>
}
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08013368 	.word	0x08013368
 800dbf8:	080134b8 	.word	0x080134b8
 800dbfc:	080133e0 	.word	0x080133e0

0800dc00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dc0e:	79fa      	ldrb	r2, [r7, #7]
 800dc10:	4944      	ldr	r1, [pc, #272]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc12:	4613      	mov	r3, r2
 800dc14:	005b      	lsls	r3, r3, #1
 800dc16:	4413      	add	r3, r2
 800dc18:	00db      	lsls	r3, r3, #3
 800dc1a:	440b      	add	r3, r1
 800dc1c:	3314      	adds	r3, #20
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d806      	bhi.n	800dc32 <etharp_output_to_arp_index+0x32>
 800dc24:	4b40      	ldr	r3, [pc, #256]	; (800dd28 <etharp_output_to_arp_index+0x128>)
 800dc26:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dc2a:	4940      	ldr	r1, [pc, #256]	; (800dd2c <etharp_output_to_arp_index+0x12c>)
 800dc2c:	4840      	ldr	r0, [pc, #256]	; (800dd30 <etharp_output_to_arp_index+0x130>)
 800dc2e:	f001 ffef 	bl	800fc10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dc32:	79fa      	ldrb	r2, [r7, #7]
 800dc34:	493b      	ldr	r1, [pc, #236]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc36:	4613      	mov	r3, r2
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	4413      	add	r3, r2
 800dc3c:	00db      	lsls	r3, r3, #3
 800dc3e:	440b      	add	r3, r1
 800dc40:	3314      	adds	r3, #20
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b02      	cmp	r3, #2
 800dc46:	d153      	bne.n	800dcf0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dc48:	79fa      	ldrb	r2, [r7, #7]
 800dc4a:	4936      	ldr	r1, [pc, #216]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	440b      	add	r3, r1
 800dc56:	3312      	adds	r3, #18
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dc5e:	d919      	bls.n	800dc94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc60:	79fa      	ldrb	r2, [r7, #7]
 800dc62:	4613      	mov	r3, r2
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	4413      	add	r3, r2
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	4a2e      	ldr	r2, [pc, #184]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc6c:	4413      	add	r3, r2
 800dc6e:	3304      	adds	r3, #4
 800dc70:	4619      	mov	r1, r3
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f000 fb4c 	bl	800e310 <etharp_request>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d138      	bne.n	800dcf0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc7e:	79fa      	ldrb	r2, [r7, #7]
 800dc80:	4928      	ldr	r1, [pc, #160]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc82:	4613      	mov	r3, r2
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	4413      	add	r3, r2
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	440b      	add	r3, r1
 800dc8c:	3314      	adds	r3, #20
 800dc8e:	2203      	movs	r2, #3
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e02d      	b.n	800dcf0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc94:	79fa      	ldrb	r2, [r7, #7]
 800dc96:	4923      	ldr	r1, [pc, #140]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dc98:	4613      	mov	r3, r2
 800dc9a:	005b      	lsls	r3, r3, #1
 800dc9c:	4413      	add	r3, r2
 800dc9e:	00db      	lsls	r3, r3, #3
 800dca0:	440b      	add	r3, r1
 800dca2:	3312      	adds	r3, #18
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dcaa:	d321      	bcc.n	800dcf0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dcac:	79fa      	ldrb	r2, [r7, #7]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	4413      	add	r3, r2
 800dcb4:	00db      	lsls	r3, r3, #3
 800dcb6:	4a1b      	ldr	r2, [pc, #108]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dcb8:	4413      	add	r3, r2
 800dcba:	1d19      	adds	r1, r3, #4
 800dcbc:	79fa      	ldrb	r2, [r7, #7]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	4413      	add	r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	4a16      	ldr	r2, [pc, #88]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dcca:	4413      	add	r3, r2
 800dccc:	3304      	adds	r3, #4
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f000 fafb 	bl	800e2cc <etharp_request_dst>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d109      	bne.n	800dcf0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dcdc:	79fa      	ldrb	r2, [r7, #7]
 800dcde:	4911      	ldr	r1, [pc, #68]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dce0:	4613      	mov	r3, r2
 800dce2:	005b      	lsls	r3, r3, #1
 800dce4:	4413      	add	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	440b      	add	r3, r1
 800dcea:	3314      	adds	r3, #20
 800dcec:	2203      	movs	r2, #3
 800dcee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dcf6:	79fa      	ldrb	r2, [r7, #7]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	3308      	adds	r3, #8
 800dd02:	4a08      	ldr	r2, [pc, #32]	; (800dd24 <etharp_output_to_arp_index+0x124>)
 800dd04:	4413      	add	r3, r2
 800dd06:	3304      	adds	r3, #4
 800dd08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd0c:	9200      	str	r2, [sp, #0]
 800dd0e:	460a      	mov	r2, r1
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f001 fed0 	bl	800fab8 <ethernet_output>
 800dd18:	4603      	mov	r3, r0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	20008834 	.word	0x20008834
 800dd28:	08013368 	.word	0x08013368
 800dd2c:	080134d8 	.word	0x080134d8
 800dd30:	080133e0 	.word	0x080133e0

0800dd34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b08a      	sub	sp, #40	; 0x28
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d106      	bne.n	800dd58 <etharp_output+0x24>
 800dd4a:	4b73      	ldr	r3, [pc, #460]	; (800df18 <etharp_output+0x1e4>)
 800dd4c:	f240 321e 	movw	r2, #798	; 0x31e
 800dd50:	4972      	ldr	r1, [pc, #456]	; (800df1c <etharp_output+0x1e8>)
 800dd52:	4873      	ldr	r0, [pc, #460]	; (800df20 <etharp_output+0x1ec>)
 800dd54:	f001 ff5c 	bl	800fc10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d106      	bne.n	800dd6c <etharp_output+0x38>
 800dd5e:	4b6e      	ldr	r3, [pc, #440]	; (800df18 <etharp_output+0x1e4>)
 800dd60:	f240 321f 	movw	r2, #799	; 0x31f
 800dd64:	496f      	ldr	r1, [pc, #444]	; (800df24 <etharp_output+0x1f0>)
 800dd66:	486e      	ldr	r0, [pc, #440]	; (800df20 <etharp_output+0x1ec>)
 800dd68:	f001 ff52 	bl	800fc10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <etharp_output+0x4c>
 800dd72:	4b69      	ldr	r3, [pc, #420]	; (800df18 <etharp_output+0x1e4>)
 800dd74:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dd78:	496b      	ldr	r1, [pc, #428]	; (800df28 <etharp_output+0x1f4>)
 800dd7a:	4869      	ldr	r0, [pc, #420]	; (800df20 <etharp_output+0x1ec>)
 800dd7c:	f001 ff48 	bl	800fc10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68f9      	ldr	r1, [r7, #12]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f000 fef8 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd92:	4b66      	ldr	r3, [pc, #408]	; (800df2c <etharp_output+0x1f8>)
 800dd94:	61fb      	str	r3, [r7, #28]
 800dd96:	e0af      	b.n	800def8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dda0:	2be0      	cmp	r3, #224	; 0xe0
 800dda2:	d118      	bne.n	800ddd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dda4:	2301      	movs	r3, #1
 800dda6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ddac:	235e      	movs	r3, #94	; 0x5e
 800ddae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3302      	adds	r3, #2
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	3303      	adds	r3, #3
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ddce:	f107 0310 	add.w	r3, r7, #16
 800ddd2:	61fb      	str	r3, [r7, #28]
 800ddd4:	e090      	b.n	800def8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3304      	adds	r3, #4
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	405a      	eors	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3308      	adds	r3, #8
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4013      	ands	r3, r2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d012      	beq.n	800de14 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ddf4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d00b      	beq.n	800de14 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	330c      	adds	r3, #12
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	330c      	adds	r3, #12
 800de0a:	61bb      	str	r3, [r7, #24]
 800de0c:	e002      	b.n	800de14 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800de0e:	f06f 0303 	mvn.w	r3, #3
 800de12:	e07d      	b.n	800df10 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de14:	4b46      	ldr	r3, [pc, #280]	; (800df30 <etharp_output+0x1fc>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	4619      	mov	r1, r3
 800de1a:	4a46      	ldr	r2, [pc, #280]	; (800df34 <etharp_output+0x200>)
 800de1c:	460b      	mov	r3, r1
 800de1e:	005b      	lsls	r3, r3, #1
 800de20:	440b      	add	r3, r1
 800de22:	00db      	lsls	r3, r3, #3
 800de24:	4413      	add	r3, r2
 800de26:	3314      	adds	r3, #20
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d925      	bls.n	800de7a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de2e:	4b40      	ldr	r3, [pc, #256]	; (800df30 <etharp_output+0x1fc>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	4619      	mov	r1, r3
 800de34:	4a3f      	ldr	r2, [pc, #252]	; (800df34 <etharp_output+0x200>)
 800de36:	460b      	mov	r3, r1
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	440b      	add	r3, r1
 800de3c:	00db      	lsls	r3, r3, #3
 800de3e:	4413      	add	r3, r2
 800de40:	3308      	adds	r3, #8
 800de42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	429a      	cmp	r2, r3
 800de48:	d117      	bne.n	800de7a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800de4a:	69bb      	ldr	r3, [r7, #24]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	4b38      	ldr	r3, [pc, #224]	; (800df30 <etharp_output+0x1fc>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	4618      	mov	r0, r3
 800de54:	4937      	ldr	r1, [pc, #220]	; (800df34 <etharp_output+0x200>)
 800de56:	4603      	mov	r3, r0
 800de58:	005b      	lsls	r3, r3, #1
 800de5a:	4403      	add	r3, r0
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	440b      	add	r3, r1
 800de60:	3304      	adds	r3, #4
 800de62:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de64:	429a      	cmp	r2, r3
 800de66:	d108      	bne.n	800de7a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de68:	4b31      	ldr	r3, [pc, #196]	; (800df30 <etharp_output+0x1fc>)
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	461a      	mov	r2, r3
 800de6e:	68b9      	ldr	r1, [r7, #8]
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f7ff fec5 	bl	800dc00 <etharp_output_to_arp_index>
 800de76:	4603      	mov	r3, r0
 800de78:	e04a      	b.n	800df10 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de7a:	2300      	movs	r3, #0
 800de7c:	75fb      	strb	r3, [r7, #23]
 800de7e:	e031      	b.n	800dee4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de80:	7dfa      	ldrb	r2, [r7, #23]
 800de82:	492c      	ldr	r1, [pc, #176]	; (800df34 <etharp_output+0x200>)
 800de84:	4613      	mov	r3, r2
 800de86:	005b      	lsls	r3, r3, #1
 800de88:	4413      	add	r3, r2
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	440b      	add	r3, r1
 800de8e:	3314      	adds	r3, #20
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d923      	bls.n	800dede <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800de96:	7dfa      	ldrb	r2, [r7, #23]
 800de98:	4926      	ldr	r1, [pc, #152]	; (800df34 <etharp_output+0x200>)
 800de9a:	4613      	mov	r3, r2
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	440b      	add	r3, r1
 800dea4:	3308      	adds	r3, #8
 800dea6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d117      	bne.n	800dede <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	6819      	ldr	r1, [r3, #0]
 800deb2:	7dfa      	ldrb	r2, [r7, #23]
 800deb4:	481f      	ldr	r0, [pc, #124]	; (800df34 <etharp_output+0x200>)
 800deb6:	4613      	mov	r3, r2
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	4413      	add	r3, r2
 800debc:	00db      	lsls	r3, r3, #3
 800debe:	4403      	add	r3, r0
 800dec0:	3304      	adds	r3, #4
 800dec2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dec4:	4299      	cmp	r1, r3
 800dec6:	d10a      	bne.n	800dede <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dec8:	4a19      	ldr	r2, [pc, #100]	; (800df30 <etharp_output+0x1fc>)
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	461a      	mov	r2, r3
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f7ff fe93 	bl	800dc00 <etharp_output_to_arp_index>
 800deda:	4603      	mov	r3, r0
 800dedc:	e018      	b.n	800df10 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	3301      	adds	r3, #1
 800dee2:	75fb      	strb	r3, [r7, #23]
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	2b09      	cmp	r3, #9
 800dee8:	d9ca      	bls.n	800de80 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800deea:	68ba      	ldr	r2, [r7, #8]
 800deec:	69b9      	ldr	r1, [r7, #24]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f000 f822 	bl	800df38 <etharp_query>
 800def4:	4603      	mov	r3, r0
 800def6:	e00b      	b.n	800df10 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800defe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df02:	9300      	str	r3, [sp, #0]
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f001 fdd5 	bl	800fab8 <ethernet_output>
 800df0e:	4603      	mov	r3, r0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	08013368 	.word	0x08013368
 800df1c:	080134b8 	.word	0x080134b8
 800df20:	080133e0 	.word	0x080133e0
 800df24:	08013508 	.word	0x08013508
 800df28:	080134a8 	.word	0x080134a8
 800df2c:	08013b24 	.word	0x08013b24
 800df30:	20008924 	.word	0x20008924
 800df34:	20008834 	.word	0x20008834

0800df38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30
 800df3c:	af02      	add	r7, sp, #8
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3326      	adds	r3, #38	; 0x26
 800df48:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800df4a:	23ff      	movs	r3, #255	; 0xff
 800df4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	68f9      	ldr	r1, [r7, #12]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fe0e 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10c      	bne.n	800df80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df6e:	2be0      	cmp	r3, #224	; 0xe0
 800df70:	d006      	beq.n	800df80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d102      	bne.n	800df86 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df80:	f06f 030f 	mvn.w	r3, #15
 800df84:	e101      	b.n	800e18a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	2101      	movs	r1, #1
 800df8a:	68b8      	ldr	r0, [r7, #8]
 800df8c:	f7ff fb60 	bl	800d650 <etharp_find_entry>
 800df90:	4603      	mov	r3, r0
 800df92:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800df94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da02      	bge.n	800dfa2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800df9c:	8a7b      	ldrh	r3, [r7, #18]
 800df9e:	b25b      	sxtb	r3, r3
 800dfa0:	e0f3      	b.n	800e18a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dfa2:	8a7b      	ldrh	r3, [r7, #18]
 800dfa4:	2b7e      	cmp	r3, #126	; 0x7e
 800dfa6:	d906      	bls.n	800dfb6 <etharp_query+0x7e>
 800dfa8:	4b7a      	ldr	r3, [pc, #488]	; (800e194 <etharp_query+0x25c>)
 800dfaa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dfae:	497a      	ldr	r1, [pc, #488]	; (800e198 <etharp_query+0x260>)
 800dfb0:	487a      	ldr	r0, [pc, #488]	; (800e19c <etharp_query+0x264>)
 800dfb2:	f001 fe2d 	bl	800fc10 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dfb6:	8a7b      	ldrh	r3, [r7, #18]
 800dfb8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dfba:	7c7a      	ldrb	r2, [r7, #17]
 800dfbc:	4978      	ldr	r1, [pc, #480]	; (800e1a0 <etharp_query+0x268>)
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	440b      	add	r3, r1
 800dfc8:	3314      	adds	r3, #20
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d115      	bne.n	800dffc <etharp_query+0xc4>
    is_new_entry = 1;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dfd4:	7c7a      	ldrb	r2, [r7, #17]
 800dfd6:	4972      	ldr	r1, [pc, #456]	; (800e1a0 <etharp_query+0x268>)
 800dfd8:	4613      	mov	r3, r2
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	4413      	add	r3, r2
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	440b      	add	r3, r1
 800dfe2:	3314      	adds	r3, #20
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dfe8:	7c7a      	ldrb	r2, [r7, #17]
 800dfea:	496d      	ldr	r1, [pc, #436]	; (800e1a0 <etharp_query+0x268>)
 800dfec:	4613      	mov	r3, r2
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	4413      	add	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	440b      	add	r3, r1
 800dff6:	3308      	adds	r3, #8
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dffc:	7c7a      	ldrb	r2, [r7, #17]
 800dffe:	4968      	ldr	r1, [pc, #416]	; (800e1a0 <etharp_query+0x268>)
 800e000:	4613      	mov	r3, r2
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	4413      	add	r3, r2
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	440b      	add	r3, r1
 800e00a:	3314      	adds	r3, #20
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d011      	beq.n	800e036 <etharp_query+0xfe>
 800e012:	7c7a      	ldrb	r2, [r7, #17]
 800e014:	4962      	ldr	r1, [pc, #392]	; (800e1a0 <etharp_query+0x268>)
 800e016:	4613      	mov	r3, r2
 800e018:	005b      	lsls	r3, r3, #1
 800e01a:	4413      	add	r3, r2
 800e01c:	00db      	lsls	r3, r3, #3
 800e01e:	440b      	add	r3, r1
 800e020:	3314      	adds	r3, #20
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d806      	bhi.n	800e036 <etharp_query+0xfe>
 800e028:	4b5a      	ldr	r3, [pc, #360]	; (800e194 <etharp_query+0x25c>)
 800e02a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e02e:	495d      	ldr	r1, [pc, #372]	; (800e1a4 <etharp_query+0x26c>)
 800e030:	485a      	ldr	r0, [pc, #360]	; (800e19c <etharp_query+0x264>)
 800e032:	f001 fded 	bl	800fc10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <etharp_query+0x10a>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d10c      	bne.n	800e05c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e042:	68b9      	ldr	r1, [r7, #8]
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 f963 	bl	800e310 <etharp_request>
 800e04a:	4603      	mov	r3, r0
 800e04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <etharp_query+0x124>
      return result;
 800e056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e05a:	e096      	b.n	800e18a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <etharp_query+0x138>
 800e062:	4b4c      	ldr	r3, [pc, #304]	; (800e194 <etharp_query+0x25c>)
 800e064:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e068:	494f      	ldr	r1, [pc, #316]	; (800e1a8 <etharp_query+0x270>)
 800e06a:	484c      	ldr	r0, [pc, #304]	; (800e19c <etharp_query+0x264>)
 800e06c:	f001 fdd0 	bl	800fc10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e070:	7c7a      	ldrb	r2, [r7, #17]
 800e072:	494b      	ldr	r1, [pc, #300]	; (800e1a0 <etharp_query+0x268>)
 800e074:	4613      	mov	r3, r2
 800e076:	005b      	lsls	r3, r3, #1
 800e078:	4413      	add	r3, r2
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	440b      	add	r3, r1
 800e07e:	3314      	adds	r3, #20
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b01      	cmp	r3, #1
 800e084:	d917      	bls.n	800e0b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e086:	4a49      	ldr	r2, [pc, #292]	; (800e1ac <etharp_query+0x274>)
 800e088:	7c7b      	ldrb	r3, [r7, #17]
 800e08a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e08c:	7c7a      	ldrb	r2, [r7, #17]
 800e08e:	4613      	mov	r3, r2
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4413      	add	r3, r2
 800e094:	00db      	lsls	r3, r3, #3
 800e096:	3308      	adds	r3, #8
 800e098:	4a41      	ldr	r2, [pc, #260]	; (800e1a0 <etharp_query+0x268>)
 800e09a:	4413      	add	r3, r2
 800e09c:	3304      	adds	r3, #4
 800e09e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0a2:	9200      	str	r2, [sp, #0]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	6879      	ldr	r1, [r7, #4]
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f001 fd05 	bl	800fab8 <ethernet_output>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0b4:	e067      	b.n	800e186 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e0b6:	7c7a      	ldrb	r2, [r7, #17]
 800e0b8:	4939      	ldr	r1, [pc, #228]	; (800e1a0 <etharp_query+0x268>)
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3314      	adds	r3, #20
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d15c      	bne.n	800e186 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0d4:	e01c      	b.n	800e110 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	895a      	ldrh	r2, [r3, #10]
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d10a      	bne.n	800e0f8 <etharp_query+0x1c0>
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d006      	beq.n	800e0f8 <etharp_query+0x1c0>
 800e0ea:	4b2a      	ldr	r3, [pc, #168]	; (800e194 <etharp_query+0x25c>)
 800e0ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e0f0:	492f      	ldr	r1, [pc, #188]	; (800e1b0 <etharp_query+0x278>)
 800e0f2:	482a      	ldr	r0, [pc, #168]	; (800e19c <etharp_query+0x264>)
 800e0f4:	f001 fd8c 	bl	800fc10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	7b1b      	ldrb	r3, [r3, #12]
 800e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <etharp_query+0x1d2>
        copy_needed = 1;
 800e104:	2301      	movs	r3, #1
 800e106:	61bb      	str	r3, [r7, #24]
        break;
 800e108:	e005      	b.n	800e116 <etharp_query+0x1de>
      }
      p = p->next;
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1df      	bne.n	800e0d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d007      	beq.n	800e12c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e122:	200e      	movs	r0, #14
 800e124:	f7f9 f96e 	bl	8007404 <pbuf_clone>
 800e128:	61f8      	str	r0, [r7, #28]
 800e12a:	e004      	b.n	800e136 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e130:	69f8      	ldr	r0, [r7, #28]
 800e132:	f7f8 ff09 	bl	8006f48 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d021      	beq.n	800e180 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e13c:	7c7a      	ldrb	r2, [r7, #17]
 800e13e:	4918      	ldr	r1, [pc, #96]	; (800e1a0 <etharp_query+0x268>)
 800e140:	4613      	mov	r3, r2
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	4413      	add	r3, r2
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	440b      	add	r3, r1
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00a      	beq.n	800e166 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e150:	7c7a      	ldrb	r2, [r7, #17]
 800e152:	4913      	ldr	r1, [pc, #76]	; (800e1a0 <etharp_query+0x268>)
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	00db      	lsls	r3, r3, #3
 800e15c:	440b      	add	r3, r1
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4618      	mov	r0, r3
 800e162:	f7f8 fe51 	bl	8006e08 <pbuf_free>
      }
      arp_table[i].q = p;
 800e166:	7c7a      	ldrb	r2, [r7, #17]
 800e168:	490d      	ldr	r1, [pc, #52]	; (800e1a0 <etharp_query+0x268>)
 800e16a:	4613      	mov	r3, r2
 800e16c:	005b      	lsls	r3, r3, #1
 800e16e:	4413      	add	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	440b      	add	r3, r1
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e17e:	e002      	b.n	800e186 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e180:	23ff      	movs	r3, #255	; 0xff
 800e182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e186:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3728      	adds	r7, #40	; 0x28
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	08013368 	.word	0x08013368
 800e198:	08013514 	.word	0x08013514
 800e19c:	080133e0 	.word	0x080133e0
 800e1a0:	20008834 	.word	0x20008834
 800e1a4:	08013524 	.word	0x08013524
 800e1a8:	08013508 	.word	0x08013508
 800e1ac:	20008924 	.word	0x20008924
 800e1b0:	0801354c 	.word	0x0801354c

0800e1b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08a      	sub	sp, #40	; 0x28
 800e1b8:	af02      	add	r7, sp, #8
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <etharp_raw+0x26>
 800e1cc:	4b3a      	ldr	r3, [pc, #232]	; (800e2b8 <etharp_raw+0x104>)
 800e1ce:	f240 4257 	movw	r2, #1111	; 0x457
 800e1d2:	493a      	ldr	r1, [pc, #232]	; (800e2bc <etharp_raw+0x108>)
 800e1d4:	483a      	ldr	r0, [pc, #232]	; (800e2c0 <etharp_raw+0x10c>)
 800e1d6:	f001 fd1b 	bl	800fc10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e1da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1de:	211c      	movs	r1, #28
 800e1e0:	200e      	movs	r0, #14
 800e1e2:	f7f8 fb2d 	bl	8006840 <pbuf_alloc>
 800e1e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d102      	bne.n	800e1f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f2:	e05d      	b.n	800e2b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	895b      	ldrh	r3, [r3, #10]
 800e1f8:	2b1b      	cmp	r3, #27
 800e1fa:	d806      	bhi.n	800e20a <etharp_raw+0x56>
 800e1fc:	4b2e      	ldr	r3, [pc, #184]	; (800e2b8 <etharp_raw+0x104>)
 800e1fe:	f240 4262 	movw	r2, #1122	; 0x462
 800e202:	4930      	ldr	r1, [pc, #192]	; (800e2c4 <etharp_raw+0x110>)
 800e204:	482e      	ldr	r0, [pc, #184]	; (800e2c0 <etharp_raw+0x10c>)
 800e206:	f001 fd03 	bl	800fc10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e210:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e212:	4618      	mov	r0, r3
 800e214:	f7f7 fa9a 	bl	800574c <lwip_htons>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e226:	2b06      	cmp	r3, #6
 800e228:	d006      	beq.n	800e238 <etharp_raw+0x84>
 800e22a:	4b23      	ldr	r3, [pc, #140]	; (800e2b8 <etharp_raw+0x104>)
 800e22c:	f240 4269 	movw	r2, #1129	; 0x469
 800e230:	4925      	ldr	r1, [pc, #148]	; (800e2c8 <etharp_raw+0x114>)
 800e232:	4823      	ldr	r0, [pc, #140]	; (800e2c0 <etharp_raw+0x10c>)
 800e234:	f001 fcec 	bl	800fc10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	3308      	adds	r3, #8
 800e23c:	2206      	movs	r2, #6
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f001 fcb5 	bl	800fbb0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	3312      	adds	r3, #18
 800e24a:	2206      	movs	r2, #6
 800e24c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e24e:	4618      	mov	r0, r3
 800e250:	f001 fcae 	bl	800fbb0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	330e      	adds	r3, #14
 800e258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e25a:	6812      	ldr	r2, [r2, #0]
 800e25c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	3318      	adds	r3, #24
 800e262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e264:	6812      	ldr	r2, [r2, #0]
 800e266:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
 800e26e:	2200      	movs	r2, #0
 800e270:	f042 0201 	orr.w	r2, r2, #1
 800e274:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	2200      	movs	r2, #0
 800e27a:	f042 0208 	orr.w	r2, r2, #8
 800e27e:	709a      	strb	r2, [r3, #2]
 800e280:	2200      	movs	r2, #0
 800e282:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	2206      	movs	r2, #6
 800e288:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2204      	movs	r2, #4
 800e28e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e290:	f640 0306 	movw	r3, #2054	; 0x806
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	69b9      	ldr	r1, [r7, #24]
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f001 fc0b 	bl	800fab8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e2a2:	69b8      	ldr	r0, [r7, #24]
 800e2a4:	f7f8 fdb0 	bl	8006e08 <pbuf_free>
  p = NULL;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e2ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3720      	adds	r7, #32
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	08013368 	.word	0x08013368
 800e2bc:	080134b8 	.word	0x080134b8
 800e2c0:	080133e0 	.word	0x080133e0
 800e2c4:	08013568 	.word	0x08013568
 800e2c8:	0801359c 	.word	0x0801359c

0800e2cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af04      	add	r7, sp, #16
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	9203      	str	r2, [sp, #12]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	9202      	str	r2, [sp, #8]
 800e2f0:	4a06      	ldr	r2, [pc, #24]	; (800e30c <etharp_request_dst+0x40>)
 800e2f2:	9201      	str	r2, [sp, #4]
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7ff ff5a 	bl	800e1b4 <etharp_raw>
 800e300:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e302:	4618      	mov	r0, r3
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	08013b2c 	.word	0x08013b2c

0800e310 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e31a:	4a05      	ldr	r2, [pc, #20]	; (800e330 <etharp_request+0x20>)
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff ffd4 	bl	800e2cc <etharp_request_dst>
 800e324:	4603      	mov	r3, r0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	08013b24 	.word	0x08013b24

0800e334 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b08e      	sub	sp, #56	; 0x38
 800e338:	af04      	add	r7, sp, #16
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e33e:	4b79      	ldr	r3, [pc, #484]	; (800e524 <icmp_input+0x1f0>)
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 030f 	and.w	r3, r3, #15
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	b2db      	uxtb	r3, r3
 800e352:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e356:	2b13      	cmp	r3, #19
 800e358:	f240 80cd 	bls.w	800e4f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	895b      	ldrh	r3, [r3, #10]
 800e360:	2b03      	cmp	r3, #3
 800e362:	f240 80ca 	bls.w	800e4fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e370:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80b7 	beq.w	800e4e8 <icmp_input+0x1b4>
 800e37a:	2b08      	cmp	r3, #8
 800e37c:	f040 80b7 	bne.w	800e4ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e380:	4b69      	ldr	r3, [pc, #420]	; (800e528 <icmp_input+0x1f4>)
 800e382:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e384:	4b67      	ldr	r3, [pc, #412]	; (800e524 <icmp_input+0x1f0>)
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e38c:	2be0      	cmp	r3, #224	; 0xe0
 800e38e:	f000 80bb 	beq.w	800e508 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e392:	4b64      	ldr	r3, [pc, #400]	; (800e524 <icmp_input+0x1f0>)
 800e394:	695b      	ldr	r3, [r3, #20]
 800e396:	4a63      	ldr	r2, [pc, #396]	; (800e524 <icmp_input+0x1f0>)
 800e398:	6812      	ldr	r2, [r2, #0]
 800e39a:	4611      	mov	r1, r2
 800e39c:	4618      	mov	r0, r3
 800e39e:	f000 fbed 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f040 80b1 	bne.w	800e50c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	891b      	ldrh	r3, [r3, #8]
 800e3ae:	2b07      	cmp	r3, #7
 800e3b0:	f240 80a5 	bls.w	800e4fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e3b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3b6:	330e      	adds	r3, #14
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7f8 fc8e 	bl	8006cdc <pbuf_add_header>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d04b      	beq.n	800e45e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	891a      	ldrh	r2, [r3, #8]
 800e3ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3cc:	4413      	add	r3, r2
 800e3ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	891b      	ldrh	r3, [r3, #8]
 800e3d4:	8b7a      	ldrh	r2, [r7, #26]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	f0c0 809a 	bcc.w	800e510 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e3dc:	8b7b      	ldrh	r3, [r7, #26]
 800e3de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	200e      	movs	r0, #14
 800e3e6:	f7f8 fa2b 	bl	8006840 <pbuf_alloc>
 800e3ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 8090 	beq.w	800e514 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	895b      	ldrh	r3, [r3, #10]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d203      	bcs.n	800e40a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e402:	6978      	ldr	r0, [r7, #20]
 800e404:	f7f8 fd00 	bl	8006e08 <pbuf_free>
          goto icmperr;
 800e408:	e085      	b.n	800e516 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e412:	4618      	mov	r0, r3
 800e414:	f001 fbcc 	bl	800fbb0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e41a:	4619      	mov	r1, r3
 800e41c:	6978      	ldr	r0, [r7, #20]
 800e41e:	f7f8 fc6d 	bl	8006cfc <pbuf_remove_header>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d009      	beq.n	800e43c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e428:	4b40      	ldr	r3, [pc, #256]	; (800e52c <icmp_input+0x1f8>)
 800e42a:	22b6      	movs	r2, #182	; 0xb6
 800e42c:	4940      	ldr	r1, [pc, #256]	; (800e530 <icmp_input+0x1fc>)
 800e42e:	4841      	ldr	r0, [pc, #260]	; (800e534 <icmp_input+0x200>)
 800e430:	f001 fbee 	bl	800fc10 <iprintf>
          pbuf_free(r);
 800e434:	6978      	ldr	r0, [r7, #20]
 800e436:	f7f8 fce7 	bl	8006e08 <pbuf_free>
          goto icmperr;
 800e43a:	e06c      	b.n	800e516 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e43c:	6879      	ldr	r1, [r7, #4]
 800e43e:	6978      	ldr	r0, [r7, #20]
 800e440:	f7f8 fe0a 	bl	8007058 <pbuf_copy>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e44a:	6978      	ldr	r0, [r7, #20]
 800e44c:	f7f8 fcdc 	bl	8006e08 <pbuf_free>
          goto icmperr;
 800e450:	e061      	b.n	800e516 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7f8 fcd8 	bl	8006e08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	607b      	str	r3, [r7, #4]
 800e45c:	e00f      	b.n	800e47e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e45e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e460:	330e      	adds	r3, #14
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7f8 fc49 	bl	8006cfc <pbuf_remove_header>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d006      	beq.n	800e47e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e470:	4b2e      	ldr	r3, [pc, #184]	; (800e52c <icmp_input+0x1f8>)
 800e472:	22c7      	movs	r2, #199	; 0xc7
 800e474:	4930      	ldr	r1, [pc, #192]	; (800e538 <icmp_input+0x204>)
 800e476:	482f      	ldr	r0, [pc, #188]	; (800e534 <icmp_input+0x200>)
 800e478:	f001 fbca 	bl	800fc10 <iprintf>
          goto icmperr;
 800e47c:	e04b      	b.n	800e516 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e486:	4619      	mov	r1, r3
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7f8 fc27 	bl	8006cdc <pbuf_add_header>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d12b      	bne.n	800e4ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e4a2:	4b20      	ldr	r3, [pc, #128]	; (800e524 <icmp_input+0x1f0>)
 800e4a4:	691a      	ldr	r2, [r3, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	709a      	strb	r2, [r3, #2]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	22ff      	movs	r2, #255	; 0xff
 800e4be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	729a      	strb	r2, [r3, #10]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	9302      	str	r3, [sp, #8]
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9300      	str	r3, [sp, #0]
 800e4d6:	23ff      	movs	r3, #255	; 0xff
 800e4d8:	2200      	movs	r2, #0
 800e4da:	69f9      	ldr	r1, [r7, #28]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fa75 	bl	800e9cc <ip4_output_if>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e4e6:	e001      	b.n	800e4ec <icmp_input+0x1b8>
      break;
 800e4e8:	bf00      	nop
 800e4ea:	e000      	b.n	800e4ee <icmp_input+0x1ba>
      break;
 800e4ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7f8 fc8a 	bl	8006e08 <pbuf_free>
  return;
 800e4f4:	e013      	b.n	800e51e <icmp_input+0x1ea>
    goto lenerr;
 800e4f6:	bf00      	nop
 800e4f8:	e002      	b.n	800e500 <icmp_input+0x1cc>
    goto lenerr;
 800e4fa:	bf00      	nop
 800e4fc:	e000      	b.n	800e500 <icmp_input+0x1cc>
        goto lenerr;
 800e4fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7f8 fc81 	bl	8006e08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e506:	e00a      	b.n	800e51e <icmp_input+0x1ea>
        goto icmperr;
 800e508:	bf00      	nop
 800e50a:	e004      	b.n	800e516 <icmp_input+0x1e2>
        goto icmperr;
 800e50c:	bf00      	nop
 800e50e:	e002      	b.n	800e516 <icmp_input+0x1e2>
          goto icmperr;
 800e510:	bf00      	nop
 800e512:	e000      	b.n	800e516 <icmp_input+0x1e2>
          goto icmperr;
 800e514:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7f8 fc76 	bl	8006e08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e51c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e51e:	3728      	adds	r7, #40	; 0x28
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	20005264 	.word	0x20005264
 800e528:	20005278 	.word	0x20005278
 800e52c:	080135e0 	.word	0x080135e0
 800e530:	08013618 	.word	0x08013618
 800e534:	08013650 	.word	0x08013650
 800e538:	08013678 	.word	0x08013678

0800e53c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e548:	78fb      	ldrb	r3, [r7, #3]
 800e54a:	461a      	mov	r2, r3
 800e54c:	2103      	movs	r1, #3
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f814 	bl	800e57c <icmp_send_response>
}
 800e554:	bf00      	nop
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	460b      	mov	r3, r1
 800e566:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e568:	78fb      	ldrb	r3, [r7, #3]
 800e56a:	461a      	mov	r2, r3
 800e56c:	210b      	movs	r1, #11
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f804 	bl	800e57c <icmp_send_response>
}
 800e574:	bf00      	nop
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08c      	sub	sp, #48	; 0x30
 800e580:	af04      	add	r7, sp, #16
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	70fb      	strb	r3, [r7, #3]
 800e588:	4613      	mov	r3, r2
 800e58a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e58c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e590:	2124      	movs	r1, #36	; 0x24
 800e592:	2022      	movs	r0, #34	; 0x22
 800e594:	f7f8 f954 	bl	8006840 <pbuf_alloc>
 800e598:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d04c      	beq.n	800e63a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	895b      	ldrh	r3, [r3, #10]
 800e5a4:	2b23      	cmp	r3, #35	; 0x23
 800e5a6:	d806      	bhi.n	800e5b6 <icmp_send_response+0x3a>
 800e5a8:	4b26      	ldr	r3, [pc, #152]	; (800e644 <icmp_send_response+0xc8>)
 800e5aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e5ae:	4926      	ldr	r1, [pc, #152]	; (800e648 <icmp_send_response+0xcc>)
 800e5b0:	4826      	ldr	r0, [pc, #152]	; (800e64c <icmp_send_response+0xd0>)
 800e5b2:	f001 fb2d 	bl	800fc10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	78fa      	ldrb	r2, [r7, #3]
 800e5c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	78ba      	ldrb	r2, [r7, #2]
 800e5cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	711a      	strb	r2, [r3, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	719a      	strb	r2, [r3, #6]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	f103 0008 	add.w	r0, r3, #8
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	221c      	movs	r2, #28
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	f001 fadd 	bl	800fbb0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	4618      	mov	r0, r3
 800e602:	f000 f825 	bl	800e650 <ip4_route>
 800e606:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d011      	beq.n	800e632 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	2200      	movs	r2, #0
 800e612:	709a      	strb	r2, [r3, #2]
 800e614:	2200      	movs	r2, #0
 800e616:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e618:	f107 020c 	add.w	r2, r7, #12
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	9302      	str	r3, [sp, #8]
 800e620:	2301      	movs	r3, #1
 800e622:	9301      	str	r3, [sp, #4]
 800e624:	2300      	movs	r3, #0
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	23ff      	movs	r3, #255	; 0xff
 800e62a:	2100      	movs	r1, #0
 800e62c:	69f8      	ldr	r0, [r7, #28]
 800e62e:	f000 f9cd 	bl	800e9cc <ip4_output_if>
  }
  pbuf_free(q);
 800e632:	69f8      	ldr	r0, [r7, #28]
 800e634:	f7f8 fbe8 	bl	8006e08 <pbuf_free>
 800e638:	e000      	b.n	800e63c <icmp_send_response+0xc0>
    return;
 800e63a:	bf00      	nop
}
 800e63c:	3720      	adds	r7, #32
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	080135e0 	.word	0x080135e0
 800e648:	080136ac 	.word	0x080136ac
 800e64c:	08013650 	.word	0x08013650

0800e650 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e658:	4b33      	ldr	r3, [pc, #204]	; (800e728 <ip4_route+0xd8>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60fb      	str	r3, [r7, #12]
 800e65e:	e036      	b.n	800e6ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e666:	f003 0301 	and.w	r3, r3, #1
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d02b      	beq.n	800e6c8 <ip4_route+0x78>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e676:	089b      	lsrs	r3, r3, #2
 800e678:	f003 0301 	and.w	r3, r3, #1
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d022      	beq.n	800e6c8 <ip4_route+0x78>
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3304      	adds	r3, #4
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d01d      	beq.n	800e6c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	3304      	adds	r3, #4
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	405a      	eors	r2, r3
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3308      	adds	r3, #8
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4013      	ands	r3, r2
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	e038      	b.n	800e71a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d108      	bne.n	800e6c8 <ip4_route+0x78>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	330c      	adds	r3, #12
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d101      	bne.n	800e6c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	e028      	b.n	800e71a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1c5      	bne.n	800e660 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6d4:	4b15      	ldr	r3, [pc, #84]	; (800e72c <ip4_route+0xdc>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d01a      	beq.n	800e712 <ip4_route+0xc2>
 800e6dc:	4b13      	ldr	r3, [pc, #76]	; (800e72c <ip4_route+0xdc>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6e4:	f003 0301 	and.w	r3, r3, #1
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d012      	beq.n	800e712 <ip4_route+0xc2>
 800e6ec:	4b0f      	ldr	r3, [pc, #60]	; (800e72c <ip4_route+0xdc>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6f4:	f003 0304 	and.w	r3, r3, #4
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6fc:	4b0b      	ldr	r3, [pc, #44]	; (800e72c <ip4_route+0xdc>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3304      	adds	r3, #4
 800e702:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e704:	2b00      	cmp	r3, #0
 800e706:	d004      	beq.n	800e712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b7f      	cmp	r3, #127	; 0x7f
 800e710:	d101      	bne.n	800e716 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e712:	2300      	movs	r3, #0
 800e714:	e001      	b.n	800e71a <ip4_route+0xca>
  }

  return netif_default;
 800e716:	4b05      	ldr	r3, [pc, #20]	; (800e72c <ip4_route+0xdc>)
 800e718:	681b      	ldr	r3, [r3, #0]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3714      	adds	r7, #20
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	200087c8 	.word	0x200087c8
 800e72c:	200087cc 	.word	0x200087cc

0800e730 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d016      	beq.n	800e776 <ip4_input_accept+0x46>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3304      	adds	r3, #4
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d011      	beq.n	800e776 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e752:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <ip4_input_accept+0x50>)
 800e754:	695a      	ldr	r2, [r3, #20]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	3304      	adds	r3, #4
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d008      	beq.n	800e772 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e760:	4b07      	ldr	r3, [pc, #28]	; (800e780 <ip4_input_accept+0x50>)
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	6879      	ldr	r1, [r7, #4]
 800e766:	4618      	mov	r0, r3
 800e768:	f000 fa08 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800e76c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d001      	beq.n	800e776 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e772:	2301      	movs	r3, #1
 800e774:	e000      	b.n	800e778 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	20005264 	.word	0x20005264

0800e784 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	091b      	lsrs	r3, r3, #4
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b04      	cmp	r3, #4
 800e79e:	d004      	beq.n	800e7aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7f8 fb31 	bl	8006e08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e107      	b.n	800e9ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	f003 030f 	and.w	r3, r3, #15
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	885b      	ldrh	r3, [r3, #2]
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f6 ffc3 	bl	800574c <lwip_htons>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	891b      	ldrh	r3, [r3, #8]
 800e7ce:	89ba      	ldrh	r2, [r7, #12]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d204      	bcs.n	800e7de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e7d4:	89bb      	ldrh	r3, [r7, #12]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7f8 f98f 	bl	8006afc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	895b      	ldrh	r3, [r3, #10]
 800e7e2:	89fa      	ldrh	r2, [r7, #14]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d807      	bhi.n	800e7f8 <ip4_input+0x74>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	891b      	ldrh	r3, [r3, #8]
 800e7ec:	89ba      	ldrh	r2, [r7, #12]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d802      	bhi.n	800e7f8 <ip4_input+0x74>
 800e7f2:	89fb      	ldrh	r3, [r7, #14]
 800e7f4:	2b13      	cmp	r3, #19
 800e7f6:	d804      	bhi.n	800e802 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7f8 fb05 	bl	8006e08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	e0db      	b.n	800e9ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	4a6f      	ldr	r2, [pc, #444]	; (800e9c4 <ip4_input+0x240>)
 800e808:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	4a6d      	ldr	r2, [pc, #436]	; (800e9c4 <ip4_input+0x240>)
 800e810:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e812:	4b6c      	ldr	r3, [pc, #432]	; (800e9c4 <ip4_input+0x240>)
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e81a:	2be0      	cmp	r3, #224	; 0xe0
 800e81c:	d112      	bne.n	800e844 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d007      	beq.n	800e83e <ip4_input+0xba>
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	3304      	adds	r3, #4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <ip4_input+0xba>
      netif = inp;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	613b      	str	r3, [r7, #16]
 800e83c:	e02a      	b.n	800e894 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e83e:	2300      	movs	r3, #0
 800e840:	613b      	str	r3, [r7, #16]
 800e842:	e027      	b.n	800e894 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e844:	6838      	ldr	r0, [r7, #0]
 800e846:	f7ff ff73 	bl	800e730 <ip4_input_accept>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <ip4_input+0xd2>
      netif = inp;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	613b      	str	r3, [r7, #16]
 800e854:	e01e      	b.n	800e894 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e856:	2300      	movs	r3, #0
 800e858:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e85a:	4b5a      	ldr	r3, [pc, #360]	; (800e9c4 <ip4_input+0x240>)
 800e85c:	695b      	ldr	r3, [r3, #20]
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b7f      	cmp	r3, #127	; 0x7f
 800e862:	d017      	beq.n	800e894 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e864:	4b58      	ldr	r3, [pc, #352]	; (800e9c8 <ip4_input+0x244>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	613b      	str	r3, [r7, #16]
 800e86a:	e00e      	b.n	800e88a <ip4_input+0x106>
          if (netif == inp) {
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	429a      	cmp	r2, r3
 800e872:	d006      	beq.n	800e882 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e874:	6938      	ldr	r0, [r7, #16]
 800e876:	f7ff ff5b 	bl	800e730 <ip4_input_accept>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d108      	bne.n	800e892 <ip4_input+0x10e>
 800e880:	e000      	b.n	800e884 <ip4_input+0x100>
            continue;
 800e882:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	613b      	str	r3, [r7, #16]
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1ed      	bne.n	800e86c <ip4_input+0xe8>
 800e890:	e000      	b.n	800e894 <ip4_input+0x110>
            break;
 800e892:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e894:	4b4b      	ldr	r3, [pc, #300]	; (800e9c4 <ip4_input+0x240>)
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	6839      	ldr	r1, [r7, #0]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f000 f96e 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d105      	bne.n	800e8b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e8a6:	4b47      	ldr	r3, [pc, #284]	; (800e9c4 <ip4_input+0x240>)
 800e8a8:	691b      	ldr	r3, [r3, #16]
 800e8aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e8ae:	2be0      	cmp	r3, #224	; 0xe0
 800e8b0:	d104      	bne.n	800e8bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f7f8 faa8 	bl	8006e08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e07e      	b.n	800e9ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d104      	bne.n	800e8cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7f8 faa0 	bl	8006e08 <pbuf_free>
    return ERR_OK;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	e076      	b.n	800e9ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	88db      	ldrh	r3, [r3, #6]
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00b      	beq.n	800e8f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 fd22 	bl	800f328 <ip4_reass>
 800e8e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <ip4_input+0x16c>
      return ERR_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	e064      	b.n	800e9ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e8f6:	4a33      	ldr	r2, [pc, #204]	; (800e9c4 <ip4_input+0x240>)
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e8fc:	4a31      	ldr	r2, [pc, #196]	; (800e9c4 <ip4_input+0x240>)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e902:	4a30      	ldr	r2, [pc, #192]	; (800e9c4 <ip4_input+0x240>)
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f003 030f 	and.w	r3, r3, #15
 800e910:	b2db      	uxtb	r3, r3
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	b2db      	uxtb	r3, r3
 800e916:	b29a      	uxth	r2, r3
 800e918:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <ip4_input+0x240>)
 800e91a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e91c:	89fb      	ldrh	r3, [r7, #14]
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7f8 f9eb 	bl	8006cfc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	7a5b      	ldrb	r3, [r3, #9]
 800e92a:	2b11      	cmp	r3, #17
 800e92c:	d006      	beq.n	800e93c <ip4_input+0x1b8>
 800e92e:	2b11      	cmp	r3, #17
 800e930:	dc13      	bgt.n	800e95a <ip4_input+0x1d6>
 800e932:	2b01      	cmp	r3, #1
 800e934:	d00c      	beq.n	800e950 <ip4_input+0x1cc>
 800e936:	2b06      	cmp	r3, #6
 800e938:	d005      	beq.n	800e946 <ip4_input+0x1c2>
 800e93a:	e00e      	b.n	800e95a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7fe f8e6 	bl	800cb10 <udp_input>
        break;
 800e944:	e026      	b.n	800e994 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7fa f927 	bl	8008b9c <tcp_input>
        break;
 800e94e:	e021      	b.n	800e994 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff fcee 	bl	800e334 <icmp_input>
        break;
 800e958:	e01c      	b.n	800e994 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e95a:	4b1a      	ldr	r3, [pc, #104]	; (800e9c4 <ip4_input+0x240>)
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	6939      	ldr	r1, [r7, #16]
 800e960:	4618      	mov	r0, r3
 800e962:	f000 f90b 	bl	800eb7c <ip4_addr_isbroadcast_u32>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10f      	bne.n	800e98c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e96c:	4b15      	ldr	r3, [pc, #84]	; (800e9c4 <ip4_input+0x240>)
 800e96e:	695b      	ldr	r3, [r3, #20]
 800e970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e974:	2be0      	cmp	r3, #224	; 0xe0
 800e976:	d009      	beq.n	800e98c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7f8 fa2f 	bl	8006de2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e984:	2102      	movs	r1, #2
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff fdd8 	bl	800e53c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7f8 fa3b 	bl	8006e08 <pbuf_free>
        break;
 800e992:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e994:	4b0b      	ldr	r3, [pc, #44]	; (800e9c4 <ip4_input+0x240>)
 800e996:	2200      	movs	r2, #0
 800e998:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e99a:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <ip4_input+0x240>)
 800e99c:	2200      	movs	r2, #0
 800e99e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e9a0:	4b08      	ldr	r3, [pc, #32]	; (800e9c4 <ip4_input+0x240>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e9a6:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <ip4_input+0x240>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e9ac:	4b05      	ldr	r3, [pc, #20]	; (800e9c4 <ip4_input+0x240>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e9b2:	4b04      	ldr	r3, [pc, #16]	; (800e9c4 <ip4_input+0x240>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3718      	adds	r7, #24
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20005264 	.word	0x20005264
 800e9c8:	200087c8 	.word	0x200087c8

0800e9cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b08a      	sub	sp, #40	; 0x28
 800e9d0:	af04      	add	r7, sp, #16
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	607a      	str	r2, [r7, #4]
 800e9d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d003      	beq.n	800e9f2 <ip4_output_if+0x26>
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d102      	bne.n	800e9f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e9f8:	78fa      	ldrb	r2, [r7, #3]
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	9302      	str	r3, [sp, #8]
 800e9fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ea02:	9301      	str	r3, [sp, #4]
 800ea04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ea08:	9300      	str	r3, [sp, #0]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	6979      	ldr	r1, [r7, #20]
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 f805 	bl	800ea20 <ip4_output_if_src>
 800ea16:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
 800ea2c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	7b9b      	ldrb	r3, [r3, #14]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d006      	beq.n	800ea44 <ip4_output_if_src+0x24>
 800ea36:	4b4b      	ldr	r3, [pc, #300]	; (800eb64 <ip4_output_if_src+0x144>)
 800ea38:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ea3c:	494a      	ldr	r1, [pc, #296]	; (800eb68 <ip4_output_if_src+0x148>)
 800ea3e:	484b      	ldr	r0, [pc, #300]	; (800eb6c <ip4_output_if_src+0x14c>)
 800ea40:	f001 f8e6 	bl	800fc10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d060      	beq.n	800eb0c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ea4a:	2314      	movs	r3, #20
 800ea4c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ea4e:	2114      	movs	r1, #20
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7f8 f943 	bl	8006cdc <pbuf_add_header>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea5c:	f06f 0301 	mvn.w	r3, #1
 800ea60:	e07c      	b.n	800eb5c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	895b      	ldrh	r3, [r3, #10]
 800ea6c:	2b13      	cmp	r3, #19
 800ea6e:	d806      	bhi.n	800ea7e <ip4_output_if_src+0x5e>
 800ea70:	4b3c      	ldr	r3, [pc, #240]	; (800eb64 <ip4_output_if_src+0x144>)
 800ea72:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ea76:	493e      	ldr	r1, [pc, #248]	; (800eb70 <ip4_output_if_src+0x150>)
 800ea78:	483c      	ldr	r0, [pc, #240]	; (800eb6c <ip4_output_if_src+0x14c>)
 800ea7a:	f001 f8c9 	bl	800fc10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	78fa      	ldrb	r2, [r7, #3]
 800ea82:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ea8a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ea94:	8b7b      	ldrh	r3, [r7, #26]
 800ea96:	089b      	lsrs	r3, r3, #2
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eaac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	891b      	ldrh	r3, [r3, #8]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f6 fe4a 	bl	800574c <lwip_htons>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2200      	movs	r2, #0
 800eac4:	719a      	strb	r2, [r3, #6]
 800eac6:	2200      	movs	r2, #0
 800eac8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800eaca:	4b2a      	ldr	r3, [pc, #168]	; (800eb74 <ip4_output_if_src+0x154>)
 800eacc:	881b      	ldrh	r3, [r3, #0]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7f6 fe3c 	bl	800574c <lwip_htons>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461a      	mov	r2, r3
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800eadc:	4b25      	ldr	r3, [pc, #148]	; (800eb74 <ip4_output_if_src+0x154>)
 800eade:	881b      	ldrh	r3, [r3, #0]
 800eae0:	3301      	adds	r3, #1
 800eae2:	b29a      	uxth	r2, r3
 800eae4:	4b23      	ldr	r3, [pc, #140]	; (800eb74 <ip4_output_if_src+0x154>)
 800eae6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d104      	bne.n	800eaf8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eaee:	4b22      	ldr	r3, [pc, #136]	; (800eb78 <ip4_output_if_src+0x158>)
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	60da      	str	r2, [r3, #12]
 800eaf6:	e003      	b.n	800eb00 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	2200      	movs	r2, #0
 800eb04:	729a      	strb	r2, [r3, #10]
 800eb06:	2200      	movs	r2, #0
 800eb08:	72da      	strb	r2, [r3, #11]
 800eb0a:	e00f      	b.n	800eb2c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	895b      	ldrh	r3, [r3, #10]
 800eb10:	2b13      	cmp	r3, #19
 800eb12:	d802      	bhi.n	800eb1a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb14:	f06f 0301 	mvn.w	r3, #1
 800eb18:	e020      	b.n	800eb5c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eb26:	f107 0314 	add.w	r3, r7, #20
 800eb2a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d00c      	beq.n	800eb4e <ip4_output_if_src+0x12e>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	891a      	ldrh	r2, [r3, #8]
 800eb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d906      	bls.n	800eb4e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f000 fde3 	bl	800f710 <ip4_frag>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	e006      	b.n	800eb5c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	695b      	ldr	r3, [r3, #20]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	68f9      	ldr	r1, [r7, #12]
 800eb56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb58:	4798      	blx	r3
 800eb5a:	4603      	mov	r3, r0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	080136d8 	.word	0x080136d8
 800eb68:	0801370c 	.word	0x0801370c
 800eb6c:	08013718 	.word	0x08013718
 800eb70:	08013740 	.word	0x08013740
 800eb74:	20008926 	.word	0x20008926
 800eb78:	08013b20 	.word	0x08013b20

0800eb7c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb90:	d002      	beq.n	800eb98 <ip4_addr_isbroadcast_u32+0x1c>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d101      	bne.n	800eb9c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	e02a      	b.n	800ebf2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eba2:	f003 0302 	and.w	r3, r3, #2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d101      	bne.n	800ebae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e021      	b.n	800ebf2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d101      	bne.n	800ebbe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e019      	b.n	800ebf2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ebbe:	68fa      	ldr	r2, [r7, #12]
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	3304      	adds	r3, #4
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	405a      	eors	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	3308      	adds	r3, #8
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4013      	ands	r3, r2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d10d      	bne.n	800ebf0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	3308      	adds	r3, #8
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	43da      	mvns	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d101      	bne.n	800ebf0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ebf0:	2300      	movs	r3, #0
  }
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800ec08:	2210      	movs	r2, #16
 800ec0a:	4904      	ldr	r1, [pc, #16]	; (800ec1c <ip4addr_ntoa+0x1c>)
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f807 	bl	800ec20 <ip4addr_ntoa_r>
 800ec12:	4603      	mov	r3, r0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}
 800ec1c:	20008928 	.word	0x20008928

0800ec20 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b08d      	sub	sp, #52	; 0x34
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	60b9      	str	r1, [r7, #8]
 800ec2a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800ec3a:	f107 0318 	add.w	r3, r7, #24
 800ec3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ec40:	2300      	movs	r3, #0
 800ec42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec46:	e058      	b.n	800ecfa <ip4addr_ntoa_r+0xda>
    i = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	781a      	ldrb	r2, [r3, #0]
 800ec52:	4b32      	ldr	r3, [pc, #200]	; (800ed1c <ip4addr_ntoa_r+0xfc>)
 800ec54:	fba3 1302 	umull	r1, r3, r3, r2
 800ec58:	08d9      	lsrs	r1, r3, #3
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	440b      	add	r3, r1
 800ec60:	005b      	lsls	r3, r3, #1
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	4a2c      	ldr	r2, [pc, #176]	; (800ed1c <ip4addr_ntoa_r+0xfc>)
 800ec6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ec70:	08db      	lsrs	r3, r3, #3
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800ec78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ec82:	4619      	mov	r1, r3
 800ec84:	7ffb      	ldrb	r3, [r7, #31]
 800ec86:	3330      	adds	r3, #48	; 0x30
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800ec8e:	443b      	add	r3, r7
 800ec90:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800ec94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1d8      	bne.n	800ec4e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ec9c:	e011      	b.n	800ecc2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	623a      	str	r2, [r7, #32]
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	dc01      	bgt.n	800ecae <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	e030      	b.n	800ed10 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ecae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	1c59      	adds	r1, r3, #1
 800ecb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ecb8:	3230      	adds	r2, #48	; 0x30
 800ecba:	443a      	add	r2, r7
 800ecbc:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ecc0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ecc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecc6:	1e5a      	subs	r2, r3, #1
 800ecc8:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1e6      	bne.n	800ec9e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	623a      	str	r2, [r7, #32]
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	dc01      	bgt.n	800ece0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	e017      	b.n	800ed10 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ece0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece2:	1c5a      	adds	r2, r3, #1
 800ece4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ece6:	222e      	movs	r2, #46	; 0x2e
 800ece8:	701a      	strb	r2, [r3, #0]
    ap++;
 800ecea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecec:	3301      	adds	r3, #1
 800ecee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ecf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d9a2      	bls.n	800ec48 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ed02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed04:	3b01      	subs	r3, #1
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
  return buf;
 800ed0e:	68bb      	ldr	r3, [r7, #8]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3734      	adds	r7, #52	; 0x34
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr
 800ed1c:	cccccccd 	.word	0xcccccccd

0800ed20 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ed26:	2300      	movs	r3, #0
 800ed28:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ed2a:	4b12      	ldr	r3, [pc, #72]	; (800ed74 <ip_reass_tmr+0x54>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ed30:	e018      	b.n	800ed64 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	7fdb      	ldrb	r3, [r3, #31]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00b      	beq.n	800ed52 <ip_reass_tmr+0x32>
      r->timer--;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	7fdb      	ldrb	r3, [r3, #31]
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]
 800ed50:	e008      	b.n	800ed64 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f80a 	bl	800ed78 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1e3      	bne.n	800ed32 <ip_reass_tmr+0x12>
    }
  }
}
 800ed6a:	bf00      	nop
 800ed6c:	bf00      	nop
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	20008938 	.word	0x20008938

0800ed78 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b088      	sub	sp, #32
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed86:	683a      	ldr	r2, [r7, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d105      	bne.n	800ed9a <ip_reass_free_complete_datagram+0x22>
 800ed8e:	4b45      	ldr	r3, [pc, #276]	; (800eea4 <ip_reass_free_complete_datagram+0x12c>)
 800ed90:	22ab      	movs	r2, #171	; 0xab
 800ed92:	4945      	ldr	r1, [pc, #276]	; (800eea8 <ip_reass_free_complete_datagram+0x130>)
 800ed94:	4845      	ldr	r0, [pc, #276]	; (800eeac <ip_reass_free_complete_datagram+0x134>)
 800ed96:	f000 ff3b 	bl	800fc10 <iprintf>
  if (prev != NULL) {
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00a      	beq.n	800edb6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d005      	beq.n	800edb6 <ip_reass_free_complete_datagram+0x3e>
 800edaa:	4b3e      	ldr	r3, [pc, #248]	; (800eea4 <ip_reass_free_complete_datagram+0x12c>)
 800edac:	22ad      	movs	r2, #173	; 0xad
 800edae:	4940      	ldr	r1, [pc, #256]	; (800eeb0 <ip_reass_free_complete_datagram+0x138>)
 800edb0:	483e      	ldr	r0, [pc, #248]	; (800eeac <ip_reass_free_complete_datagram+0x134>)
 800edb2:	f000 ff2d 	bl	800fc10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	889b      	ldrh	r3, [r3, #4]
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d12a      	bne.n	800ee1e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	6858      	ldr	r0, [r3, #4]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	3308      	adds	r3, #8
 800edde:	2214      	movs	r2, #20
 800ede0:	4619      	mov	r1, r3
 800ede2:	f000 fee5 	bl	800fbb0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ede6:	2101      	movs	r1, #1
 800ede8:	69b8      	ldr	r0, [r7, #24]
 800edea:	f7ff fbb7 	bl	800e55c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800edee:	69b8      	ldr	r0, [r7, #24]
 800edf0:	f7f8 f892 	bl	8006f18 <pbuf_clen>
 800edf4:	4603      	mov	r3, r0
 800edf6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800edf8:	8bfa      	ldrh	r2, [r7, #30]
 800edfa:	8a7b      	ldrh	r3, [r7, #18]
 800edfc:	4413      	add	r3, r2
 800edfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee02:	db05      	blt.n	800ee10 <ip_reass_free_complete_datagram+0x98>
 800ee04:	4b27      	ldr	r3, [pc, #156]	; (800eea4 <ip_reass_free_complete_datagram+0x12c>)
 800ee06:	22bc      	movs	r2, #188	; 0xbc
 800ee08:	492a      	ldr	r1, [pc, #168]	; (800eeb4 <ip_reass_free_complete_datagram+0x13c>)
 800ee0a:	4828      	ldr	r0, [pc, #160]	; (800eeac <ip_reass_free_complete_datagram+0x134>)
 800ee0c:	f000 ff00 	bl	800fc10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee10:	8bfa      	ldrh	r2, [r7, #30]
 800ee12:	8a7b      	ldrh	r3, [r7, #18]
 800ee14:	4413      	add	r3, r2
 800ee16:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ee18:	69b8      	ldr	r0, [r7, #24]
 800ee1a:	f7f7 fff5 	bl	8006e08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ee24:	e01f      	b.n	800ee66 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7f8 f86e 	bl	8006f18 <pbuf_clen>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee40:	8bfa      	ldrh	r2, [r7, #30]
 800ee42:	8a7b      	ldrh	r3, [r7, #18]
 800ee44:	4413      	add	r3, r2
 800ee46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee4a:	db05      	blt.n	800ee58 <ip_reass_free_complete_datagram+0xe0>
 800ee4c:	4b15      	ldr	r3, [pc, #84]	; (800eea4 <ip_reass_free_complete_datagram+0x12c>)
 800ee4e:	22cc      	movs	r2, #204	; 0xcc
 800ee50:	4918      	ldr	r1, [pc, #96]	; (800eeb4 <ip_reass_free_complete_datagram+0x13c>)
 800ee52:	4816      	ldr	r0, [pc, #88]	; (800eeac <ip_reass_free_complete_datagram+0x134>)
 800ee54:	f000 fedc 	bl	800fc10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee58:	8bfa      	ldrh	r2, [r7, #30]
 800ee5a:	8a7b      	ldrh	r3, [r7, #18]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f7f7 ffd1 	bl	8006e08 <pbuf_free>
  while (p != NULL) {
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1dc      	bne.n	800ee26 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee6c:	6839      	ldr	r1, [r7, #0]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f000 f8c2 	bl	800eff8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ee74:	4b10      	ldr	r3, [pc, #64]	; (800eeb8 <ip_reass_free_complete_datagram+0x140>)
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	8bfa      	ldrh	r2, [r7, #30]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d905      	bls.n	800ee8a <ip_reass_free_complete_datagram+0x112>
 800ee7e:	4b09      	ldr	r3, [pc, #36]	; (800eea4 <ip_reass_free_complete_datagram+0x12c>)
 800ee80:	22d2      	movs	r2, #210	; 0xd2
 800ee82:	490e      	ldr	r1, [pc, #56]	; (800eebc <ip_reass_free_complete_datagram+0x144>)
 800ee84:	4809      	ldr	r0, [pc, #36]	; (800eeac <ip_reass_free_complete_datagram+0x134>)
 800ee86:	f000 fec3 	bl	800fc10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ee8a:	4b0b      	ldr	r3, [pc, #44]	; (800eeb8 <ip_reass_free_complete_datagram+0x140>)
 800ee8c:	881a      	ldrh	r2, [r3, #0]
 800ee8e:	8bfb      	ldrh	r3, [r7, #30]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	4b08      	ldr	r3, [pc, #32]	; (800eeb8 <ip_reass_free_complete_datagram+0x140>)
 800ee96:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ee98:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3720      	adds	r7, #32
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	08013770 	.word	0x08013770
 800eea8:	080137ac 	.word	0x080137ac
 800eeac:	080137b8 	.word	0x080137b8
 800eeb0:	080137e0 	.word	0x080137e0
 800eeb4:	080137f4 	.word	0x080137f4
 800eeb8:	2000893c 	.word	0x2000893c
 800eebc:	08013814 	.word	0x08013814

0800eec0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b08a      	sub	sp, #40	; 0x28
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800eeca:	2300      	movs	r3, #0
 800eecc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800eece:	2300      	movs	r3, #0
 800eed0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eed6:	2300      	movs	r3, #0
 800eed8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eede:	4b28      	ldr	r3, [pc, #160]	; (800ef80 <ip_reass_remove_oldest_datagram+0xc0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eee4:	e030      	b.n	800ef48 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	695a      	ldr	r2, [r3, #20]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d10c      	bne.n	800ef0c <ip_reass_remove_oldest_datagram+0x4c>
 800eef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef4:	699a      	ldr	r2, [r3, #24]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d106      	bne.n	800ef0c <ip_reass_remove_oldest_datagram+0x4c>
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	899a      	ldrh	r2, [r3, #12]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	889b      	ldrh	r3, [r3, #4]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d014      	beq.n	800ef36 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ef12:	6a3b      	ldr	r3, [r7, #32]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ef18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	61bb      	str	r3, [r7, #24]
 800ef20:	e009      	b.n	800ef36 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ef22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef24:	7fda      	ldrb	r2, [r3, #31]
 800ef26:	6a3b      	ldr	r3, [r7, #32]
 800ef28:	7fdb      	ldrb	r3, [r3, #31]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d803      	bhi.n	800ef36 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1cb      	bne.n	800eee6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d008      	beq.n	800ef66 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef54:	69b9      	ldr	r1, [r7, #24]
 800ef56:	6a38      	ldr	r0, [r7, #32]
 800ef58:	f7ff ff0e 	bl	800ed78 <ip_reass_free_complete_datagram>
 800ef5c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	da02      	bge.n	800ef74 <ip_reass_remove_oldest_datagram+0xb4>
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	dcac      	bgt.n	800eece <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef74:	697b      	ldr	r3, [r7, #20]
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3728      	adds	r7, #40	; 0x28
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	20008938 	.word	0x20008938

0800ef84 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef8e:	2004      	movs	r0, #4
 800ef90:	f7f7 f854 	bl	800603c <memp_malloc>
 800ef94:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d110      	bne.n	800efbe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff ff8e 	bl	800eec0 <ip_reass_remove_oldest_datagram>
 800efa4:	4602      	mov	r2, r0
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	4293      	cmp	r3, r2
 800efaa:	dc03      	bgt.n	800efb4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800efac:	2004      	movs	r0, #4
 800efae:	f7f7 f845 	bl	800603c <memp_malloc>
 800efb2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d101      	bne.n	800efbe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800efba:	2300      	movs	r3, #0
 800efbc:	e016      	b.n	800efec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800efbe:	2220      	movs	r2, #32
 800efc0:	2100      	movs	r1, #0
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 fe1c 	bl	800fc00 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	220f      	movs	r2, #15
 800efcc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800efce:	4b09      	ldr	r3, [pc, #36]	; (800eff4 <ip_reass_enqueue_new_datagram+0x70>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800efd6:	4a07      	ldr	r2, [pc, #28]	; (800eff4 <ip_reass_enqueue_new_datagram+0x70>)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	3308      	adds	r3, #8
 800efe0:	2214      	movs	r2, #20
 800efe2:	6879      	ldr	r1, [r7, #4]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f000 fde3 	bl	800fbb0 <memcpy>
  return ipr;
 800efea:	68fb      	ldr	r3, [r7, #12]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	20008938 	.word	0x20008938

0800eff8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f002:	4b10      	ldr	r3, [pc, #64]	; (800f044 <ip_reass_dequeue_datagram+0x4c>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d104      	bne.n	800f016 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a0c      	ldr	r2, [pc, #48]	; (800f044 <ip_reass_dequeue_datagram+0x4c>)
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	e00d      	b.n	800f032 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d106      	bne.n	800f02a <ip_reass_dequeue_datagram+0x32>
 800f01c:	4b0a      	ldr	r3, [pc, #40]	; (800f048 <ip_reass_dequeue_datagram+0x50>)
 800f01e:	f240 1245 	movw	r2, #325	; 0x145
 800f022:	490a      	ldr	r1, [pc, #40]	; (800f04c <ip_reass_dequeue_datagram+0x54>)
 800f024:	480a      	ldr	r0, [pc, #40]	; (800f050 <ip_reass_dequeue_datagram+0x58>)
 800f026:	f000 fdf3 	bl	800fc10 <iprintf>
    prev->next = ipr->next;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	2004      	movs	r0, #4
 800f036:	f7f7 f871 	bl	800611c <memp_free>
}
 800f03a:	bf00      	nop
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	20008938 	.word	0x20008938
 800f048:	08013770 	.word	0x08013770
 800f04c:	08013838 	.word	0x08013838
 800f050:	080137b8 	.word	0x080137b8

0800f054 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08c      	sub	sp, #48	; 0x30
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f060:	2300      	movs	r3, #0
 800f062:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f064:	2301      	movs	r3, #1
 800f066:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	885b      	ldrh	r3, [r3, #2]
 800f072:	b29b      	uxth	r3, r3
 800f074:	4618      	mov	r0, r3
 800f076:	f7f6 fb69 	bl	800574c <lwip_htons>
 800f07a:	4603      	mov	r3, r0
 800f07c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	f003 030f 	and.w	r3, r3, #15
 800f086:	b2db      	uxtb	r3, r3
 800f088:	009b      	lsls	r3, r3, #2
 800f08a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f08c:	7e7b      	ldrb	r3, [r7, #25]
 800f08e:	b29b      	uxth	r3, r3
 800f090:	8b7a      	ldrh	r2, [r7, #26]
 800f092:	429a      	cmp	r2, r3
 800f094:	d202      	bcs.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f09a:	e135      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f09c:	7e7b      	ldrb	r3, [r7, #25]
 800f09e:	b29b      	uxth	r3, r3
 800f0a0:	8b7a      	ldrh	r2, [r7, #26]
 800f0a2:	1ad3      	subs	r3, r2, r3
 800f0a4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f6 fb4d 	bl	800574c <lwip_htons>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	701a      	strb	r2, [r3, #0]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	705a      	strb	r2, [r3, #1]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	709a      	strb	r2, [r3, #2]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d8:	8afa      	ldrh	r2, [r7, #22]
 800f0da:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f0dc:	8afa      	ldrh	r2, [r7, #22]
 800f0de:	8b7b      	ldrh	r3, [r7, #26]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ea:	88db      	ldrh	r3, [r3, #6]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	8afa      	ldrh	r2, [r7, #22]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d902      	bls.n	800f0fa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0f8:	e106      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f100:	e068      	b.n	800f1d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	889b      	ldrh	r3, [r3, #4]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	889b      	ldrh	r3, [r3, #4]
 800f112:	b29b      	uxth	r3, r3
 800f114:	429a      	cmp	r2, r3
 800f116:	d235      	bcs.n	800f184 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	2b00      	cmp	r3, #0
 800f122:	d020      	beq.n	800f166 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	889b      	ldrh	r3, [r3, #4]
 800f128:	b29a      	uxth	r2, r3
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	88db      	ldrh	r3, [r3, #6]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	429a      	cmp	r2, r3
 800f132:	d307      	bcc.n	800f144 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	88db      	ldrh	r3, [r3, #6]
 800f138:	b29a      	uxth	r2, r3
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	889b      	ldrh	r3, [r3, #4]
 800f13e:	b29b      	uxth	r3, r3
 800f140:	429a      	cmp	r2, r3
 800f142:	d902      	bls.n	800f14a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f148:	e0de      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f152:	88db      	ldrh	r3, [r3, #6]
 800f154:	b29a      	uxth	r2, r3
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	889b      	ldrh	r3, [r3, #4]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d03d      	beq.n	800f1dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f160:	2300      	movs	r3, #0
 800f162:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f164:	e03a      	b.n	800f1dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	88db      	ldrh	r3, [r3, #6]
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	889b      	ldrh	r3, [r3, #4]
 800f170:	b29b      	uxth	r3, r3
 800f172:	429a      	cmp	r2, r3
 800f174:	d902      	bls.n	800f17c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f17a:	e0c5      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	605a      	str	r2, [r3, #4]
      break;
 800f182:	e02b      	b.n	800f1dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	889b      	ldrh	r3, [r3, #4]
 800f188:	b29a      	uxth	r2, r3
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	889b      	ldrh	r3, [r3, #4]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	429a      	cmp	r2, r3
 800f192:	d102      	bne.n	800f19a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f198:	e0b6      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	889b      	ldrh	r3, [r3, #4]
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	88db      	ldrh	r3, [r3, #6]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d202      	bcs.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1ae:	e0ab      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d009      	beq.n	800f1ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b8:	88db      	ldrh	r3, [r3, #6]
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	889b      	ldrh	r3, [r3, #4]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d001      	beq.n	800f1ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d193      	bne.n	800f102 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f1da:	e000      	b.n	800f1de <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f1dc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d12d      	bne.n	800f240 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d01c      	beq.n	800f224 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	88db      	ldrh	r3, [r3, #6]
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	889b      	ldrh	r3, [r3, #4]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d906      	bls.n	800f208 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f1fa:	4b45      	ldr	r3, [pc, #276]	; (800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1fc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f200:	4944      	ldr	r1, [pc, #272]	; (800f314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f202:	4845      	ldr	r0, [pc, #276]	; (800f318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f204:	f000 fd04 	bl	800fc10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	88db      	ldrh	r3, [r3, #6]
 800f212:	b29a      	uxth	r2, r3
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	889b      	ldrh	r3, [r3, #4]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d010      	beq.n	800f240 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f21e:	2300      	movs	r3, #0
 800f220:	623b      	str	r3, [r7, #32]
 800f222:	e00d      	b.n	800f240 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d006      	beq.n	800f23a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f22c:	4b38      	ldr	r3, [pc, #224]	; (800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f22e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f232:	493a      	ldr	r1, [pc, #232]	; (800f31c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f234:	4838      	ldr	r0, [pc, #224]	; (800f318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f236:	f000 fceb 	bl	800fc10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d105      	bne.n	800f252 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	7f9b      	ldrb	r3, [r3, #30]
 800f24a:	f003 0301 	and.w	r3, r3, #1
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d059      	beq.n	800f306 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f252:	6a3b      	ldr	r3, [r7, #32]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d04f      	beq.n	800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d006      	beq.n	800f26e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	889b      	ldrh	r3, [r3, #4]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d002      	beq.n	800f274 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	623b      	str	r3, [r7, #32]
 800f272:	e041      	b.n	800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f27e:	e012      	b.n	800f2a6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	88db      	ldrh	r3, [r3, #6]
 800f28a:	b29a      	uxth	r2, r3
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	889b      	ldrh	r3, [r3, #4]
 800f290:	b29b      	uxth	r3, r3
 800f292:	429a      	cmp	r2, r3
 800f294:	d002      	beq.n	800f29c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	623b      	str	r3, [r7, #32]
            break;
 800f29a:	e007      	b.n	800f2ac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1e9      	bne.n	800f280 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f2ac:	6a3b      	ldr	r3, [r7, #32]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d022      	beq.n	800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d106      	bne.n	800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f2ba:	4b15      	ldr	r3, [pc, #84]	; (800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2bc:	f240 12df 	movw	r2, #479	; 0x1df
 800f2c0:	4917      	ldr	r1, [pc, #92]	; (800f320 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2c2:	4815      	ldr	r0, [pc, #84]	; (800f318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2c4:	f000 fca4 	bl	800fc10 <iprintf>
          LWIP_ASSERT("sanity check",
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d106      	bne.n	800f2e2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f2d4:	4b0e      	ldr	r3, [pc, #56]	; (800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f2da:	4911      	ldr	r1, [pc, #68]	; (800f320 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2dc:	480e      	ldr	r0, [pc, #56]	; (800f318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2de:	f000 fc97 	bl	800fc10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d006      	beq.n	800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f2ea:	4b09      	ldr	r3, [pc, #36]	; (800f310 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2ec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f2f0:	490c      	ldr	r1, [pc, #48]	; (800f324 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f2f2:	4809      	ldr	r0, [pc, #36]	; (800f318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2f4:	f000 fc8c 	bl	800fc10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	bf14      	ite	ne
 800f2fe:	2301      	movne	r3, #1
 800f300:	2300      	moveq	r3, #0
 800f302:	b2db      	uxtb	r3, r3
 800f304:	e000      	b.n	800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3730      	adds	r7, #48	; 0x30
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	08013770 	.word	0x08013770
 800f314:	08013854 	.word	0x08013854
 800f318:	080137b8 	.word	0x080137b8
 800f31c:	08013874 	.word	0x08013874
 800f320:	080138ac 	.word	0x080138ac
 800f324:	080138bc 	.word	0x080138bc

0800f328 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b08e      	sub	sp, #56	; 0x38
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	f003 030f 	and.w	r3, r3, #15
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b14      	cmp	r3, #20
 800f346:	f040 8171 	bne.w	800f62c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34c:	88db      	ldrh	r3, [r3, #6]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7f6 f9fb 	bl	800574c <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	885b      	ldrh	r3, [r3, #2]
 800f366:	b29b      	uxth	r3, r3
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f6 f9ef 	bl	800574c <lwip_htons>
 800f36e:	4603      	mov	r3, r0
 800f370:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	f003 030f 	and.w	r3, r3, #15
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f386:	b29b      	uxth	r3, r3
 800f388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f38a:	429a      	cmp	r2, r3
 800f38c:	f0c0 8150 	bcc.w	800f630 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f394:	b29b      	uxth	r3, r3
 800f396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7f7 fdbb 	bl	8006f18 <pbuf_clen>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f3a6:	4b8c      	ldr	r3, [pc, #560]	; (800f5d8 <ip4_reass+0x2b0>)
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	8c3b      	ldrh	r3, [r7, #32]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	2b0a      	cmp	r3, #10
 800f3b2:	dd10      	ble.n	800f3d6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3b4:	8c3b      	ldrh	r3, [r7, #32]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ba:	f7ff fd81 	bl	800eec0 <ip_reass_remove_oldest_datagram>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f000 8137 	beq.w	800f634 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f3c6:	4b84      	ldr	r3, [pc, #528]	; (800f5d8 <ip4_reass+0x2b0>)
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	8c3b      	ldrh	r3, [r7, #32]
 800f3ce:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3d0:	2b0a      	cmp	r3, #10
 800f3d2:	f300 812f 	bgt.w	800f634 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3d6:	4b81      	ldr	r3, [pc, #516]	; (800f5dc <ip4_reass+0x2b4>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	633b      	str	r3, [r7, #48]	; 0x30
 800f3dc:	e015      	b.n	800f40a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	695a      	ldr	r2, [r3, #20]
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d10c      	bne.n	800f404 <ip4_reass+0xdc>
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	699a      	ldr	r2, [r3, #24]
 800f3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f0:	691b      	ldr	r3, [r3, #16]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d106      	bne.n	800f404 <ip4_reass+0xdc>
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	899a      	ldrh	r2, [r3, #12]
 800f3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fc:	889b      	ldrh	r3, [r3, #4]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	429a      	cmp	r2, r3
 800f402:	d006      	beq.n	800f412 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	633b      	str	r3, [r7, #48]	; 0x30
 800f40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d1e6      	bne.n	800f3de <ip4_reass+0xb6>
 800f410:	e000      	b.n	800f414 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f412:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f416:	2b00      	cmp	r3, #0
 800f418:	d109      	bne.n	800f42e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f41a:	8c3b      	ldrh	r3, [r7, #32]
 800f41c:	4619      	mov	r1, r3
 800f41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f420:	f7ff fdb0 	bl	800ef84 <ip_reass_enqueue_new_datagram>
 800f424:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d11c      	bne.n	800f466 <ip4_reass+0x13e>
      goto nullreturn;
 800f42c:	e105      	b.n	800f63a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	88db      	ldrh	r3, [r3, #6]
 800f432:	b29b      	uxth	r3, r3
 800f434:	4618      	mov	r0, r3
 800f436:	f7f6 f989 	bl	800574c <lwip_htons>
 800f43a:	4603      	mov	r3, r0
 800f43c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f440:	2b00      	cmp	r3, #0
 800f442:	d110      	bne.n	800f466 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f446:	89db      	ldrh	r3, [r3, #14]
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f6 f97f 	bl	800574c <lwip_htons>
 800f44e:	4603      	mov	r3, r0
 800f450:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f454:	2b00      	cmp	r3, #0
 800f456:	d006      	beq.n	800f466 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45a:	3308      	adds	r3, #8
 800f45c:	2214      	movs	r2, #20
 800f45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f460:	4618      	mov	r0, r3
 800f462:	f000 fba5 	bl	800fbb0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	88db      	ldrh	r3, [r3, #6]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f003 0320 	and.w	r3, r3, #32
 800f470:	2b00      	cmp	r3, #0
 800f472:	bf0c      	ite	eq
 800f474:	2301      	moveq	r3, #1
 800f476:	2300      	movne	r3, #0
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00e      	beq.n	800f4a0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f482:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f486:	4413      	add	r3, r2
 800f488:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f48a:	8b7a      	ldrh	r2, [r7, #26]
 800f48c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f48e:	429a      	cmp	r2, r3
 800f490:	f0c0 80a0 	bcc.w	800f5d4 <ip4_reass+0x2ac>
 800f494:	8b7b      	ldrh	r3, [r7, #26]
 800f496:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f49a:	4293      	cmp	r3, r2
 800f49c:	f200 809a 	bhi.w	800f5d4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f4a0:	69fa      	ldr	r2, [r7, #28]
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4a6:	f7ff fdd5 	bl	800f054 <ip_reass_chain_frag_into_datagram_and_validate>
 800f4aa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4b2:	f000 809b 	beq.w	800f5ec <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f4b6:	4b48      	ldr	r3, [pc, #288]	; (800f5d8 <ip4_reass+0x2b0>)
 800f4b8:	881a      	ldrh	r2, [r3, #0]
 800f4ba:	8c3b      	ldrh	r3, [r7, #32]
 800f4bc:	4413      	add	r3, r2
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	4b45      	ldr	r3, [pc, #276]	; (800f5d8 <ip4_reass+0x2b0>)
 800f4c2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00d      	beq.n	800f4e6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f4ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4ce:	4413      	add	r3, r2
 800f4d0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	8a7a      	ldrh	r2, [r7, #18]
 800f4d6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4da:	7f9b      	ldrb	r3, [r3, #30]
 800f4dc:	f043 0301 	orr.w	r3, r3, #1
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d171      	bne.n	800f5d0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ee:	8b9b      	ldrh	r3, [r3, #28]
 800f4f0:	3314      	adds	r3, #20
 800f4f2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	3308      	adds	r3, #8
 800f50a:	2214      	movs	r2, #20
 800f50c:	4619      	mov	r1, r3
 800f50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f510:	f000 fb4e 	bl	800fbb0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f514:	8a3b      	ldrh	r3, [r7, #16]
 800f516:	4618      	mov	r0, r3
 800f518:	f7f6 f918 	bl	800574c <lwip_htons>
 800f51c:	4603      	mov	r3, r0
 800f51e:	461a      	mov	r2, r3
 800f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f522:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f526:	2200      	movs	r2, #0
 800f528:	719a      	strb	r2, [r3, #6]
 800f52a:	2200      	movs	r2, #0
 800f52c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f530:	2200      	movs	r2, #0
 800f532:	729a      	strb	r2, [r3, #10]
 800f534:	2200      	movs	r2, #0
 800f536:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f53e:	e00d      	b.n	800f55c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f546:	2114      	movs	r1, #20
 800f548:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f54a:	f7f7 fbd7 	bl	8006cfc <pbuf_remove_header>
      pbuf_cat(p, r);
 800f54e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7f7 fd1b 	bl	8006f8c <pbuf_cat>
      r = iprh->next_pbuf;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d1ee      	bne.n	800f540 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f562:	4b1e      	ldr	r3, [pc, #120]	; (800f5dc <ip4_reass+0x2b4>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f568:	429a      	cmp	r2, r3
 800f56a:	d102      	bne.n	800f572 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f570:	e010      	b.n	800f594 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f572:	4b1a      	ldr	r3, [pc, #104]	; (800f5dc <ip4_reass+0x2b4>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f578:	e007      	b.n	800f58a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f580:	429a      	cmp	r2, r3
 800f582:	d006      	beq.n	800f592 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1f4      	bne.n	800f57a <ip4_reass+0x252>
 800f590:	e000      	b.n	800f594 <ip4_reass+0x26c>
          break;
 800f592:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f598:	f7ff fd2e 	bl	800eff8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7f7 fcbb 	bl	8006f18 <pbuf_clen>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f5a6:	4b0c      	ldr	r3, [pc, #48]	; (800f5d8 <ip4_reass+0x2b0>)
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	8c3a      	ldrh	r2, [r7, #32]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d906      	bls.n	800f5be <ip4_reass+0x296>
 800f5b0:	4b0b      	ldr	r3, [pc, #44]	; (800f5e0 <ip4_reass+0x2b8>)
 800f5b2:	f240 229b 	movw	r2, #667	; 0x29b
 800f5b6:	490b      	ldr	r1, [pc, #44]	; (800f5e4 <ip4_reass+0x2bc>)
 800f5b8:	480b      	ldr	r0, [pc, #44]	; (800f5e8 <ip4_reass+0x2c0>)
 800f5ba:	f000 fb29 	bl	800fc10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f5be:	4b06      	ldr	r3, [pc, #24]	; (800f5d8 <ip4_reass+0x2b0>)
 800f5c0:	881a      	ldrh	r2, [r3, #0]
 800f5c2:	8c3b      	ldrh	r3, [r7, #32]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	4b03      	ldr	r3, [pc, #12]	; (800f5d8 <ip4_reass+0x2b0>)
 800f5ca:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	e038      	b.n	800f642 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	e036      	b.n	800f642 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f5d4:	bf00      	nop
 800f5d6:	e00a      	b.n	800f5ee <ip4_reass+0x2c6>
 800f5d8:	2000893c 	.word	0x2000893c
 800f5dc:	20008938 	.word	0x20008938
 800f5e0:	08013770 	.word	0x08013770
 800f5e4:	080138e0 	.word	0x080138e0
 800f5e8:	080137b8 	.word	0x080137b8
    goto nullreturn_ipr;
 800f5ec:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d106      	bne.n	800f602 <ip4_reass+0x2da>
 800f5f4:	4b15      	ldr	r3, [pc, #84]	; (800f64c <ip4_reass+0x324>)
 800f5f6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f5fa:	4915      	ldr	r1, [pc, #84]	; (800f650 <ip4_reass+0x328>)
 800f5fc:	4815      	ldr	r0, [pc, #84]	; (800f654 <ip4_reass+0x32c>)
 800f5fe:	f000 fb07 	bl	800fc10 <iprintf>
  if (ipr->p == NULL) {
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d116      	bne.n	800f638 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f60a:	4b13      	ldr	r3, [pc, #76]	; (800f658 <ip4_reass+0x330>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f610:	429a      	cmp	r2, r3
 800f612:	d006      	beq.n	800f622 <ip4_reass+0x2fa>
 800f614:	4b0d      	ldr	r3, [pc, #52]	; (800f64c <ip4_reass+0x324>)
 800f616:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f61a:	4910      	ldr	r1, [pc, #64]	; (800f65c <ip4_reass+0x334>)
 800f61c:	480d      	ldr	r0, [pc, #52]	; (800f654 <ip4_reass+0x32c>)
 800f61e:	f000 faf7 	bl	800fc10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f622:	2100      	movs	r1, #0
 800f624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f626:	f7ff fce7 	bl	800eff8 <ip_reass_dequeue_datagram>
 800f62a:	e006      	b.n	800f63a <ip4_reass+0x312>
    goto nullreturn;
 800f62c:	bf00      	nop
 800f62e:	e004      	b.n	800f63a <ip4_reass+0x312>
    goto nullreturn;
 800f630:	bf00      	nop
 800f632:	e002      	b.n	800f63a <ip4_reass+0x312>
      goto nullreturn;
 800f634:	bf00      	nop
 800f636:	e000      	b.n	800f63a <ip4_reass+0x312>
  }

nullreturn:
 800f638:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f7f7 fbe4 	bl	8006e08 <pbuf_free>
  return NULL;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3738      	adds	r7, #56	; 0x38
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	08013770 	.word	0x08013770
 800f650:	080138fc 	.word	0x080138fc
 800f654:	080137b8 	.word	0x080137b8
 800f658:	20008938 	.word	0x20008938
 800f65c:	08013908 	.word	0x08013908

0800f660 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f664:	2005      	movs	r0, #5
 800f666:	f7f6 fce9 	bl	800603c <memp_malloc>
 800f66a:	4603      	mov	r3, r0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d106      	bne.n	800f68c <ip_frag_free_pbuf_custom_ref+0x1c>
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f680:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f684:	4906      	ldr	r1, [pc, #24]	; (800f6a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f686:	4807      	ldr	r0, [pc, #28]	; (800f6a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f688:	f000 fac2 	bl	800fc10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f68c:	6879      	ldr	r1, [r7, #4]
 800f68e:	2005      	movs	r0, #5
 800f690:	f7f6 fd44 	bl	800611c <memp_free>
}
 800f694:	bf00      	nop
 800f696:	3708      	adds	r7, #8
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08013770 	.word	0x08013770
 800f6a0:	08013928 	.word	0x08013928
 800f6a4:	080137b8 	.word	0x080137b8

0800f6a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <ipfrag_free_pbuf_custom+0x20>
 800f6ba:	4b11      	ldr	r3, [pc, #68]	; (800f700 <ipfrag_free_pbuf_custom+0x58>)
 800f6bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f6c0:	4910      	ldr	r1, [pc, #64]	; (800f704 <ipfrag_free_pbuf_custom+0x5c>)
 800f6c2:	4811      	ldr	r0, [pc, #68]	; (800f708 <ipfrag_free_pbuf_custom+0x60>)
 800f6c4:	f000 faa4 	bl	800fc10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d006      	beq.n	800f6de <ipfrag_free_pbuf_custom+0x36>
 800f6d0:	4b0b      	ldr	r3, [pc, #44]	; (800f700 <ipfrag_free_pbuf_custom+0x58>)
 800f6d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f6d6:	490d      	ldr	r1, [pc, #52]	; (800f70c <ipfrag_free_pbuf_custom+0x64>)
 800f6d8:	480b      	ldr	r0, [pc, #44]	; (800f708 <ipfrag_free_pbuf_custom+0x60>)
 800f6da:	f000 fa99 	bl	800fc10 <iprintf>
  if (pcr->original != NULL) {
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d004      	beq.n	800f6f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f7 fb8c 	bl	8006e08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7ff ffbd 	bl	800f670 <ip_frag_free_pbuf_custom_ref>
}
 800f6f6:	bf00      	nop
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	08013770 	.word	0x08013770
 800f704:	08013934 	.word	0x08013934
 800f708:	080137b8 	.word	0x080137b8
 800f70c:	08013940 	.word	0x08013940

0800f710 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b094      	sub	sp, #80	; 0x50
 800f714:	af02      	add	r7, sp, #8
 800f716:	60f8      	str	r0, [r7, #12]
 800f718:	60b9      	str	r1, [r7, #8]
 800f71a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f726:	3b14      	subs	r3, #20
 800f728:	2b00      	cmp	r3, #0
 800f72a:	da00      	bge.n	800f72e <ip4_frag+0x1e>
 800f72c:	3307      	adds	r3, #7
 800f72e:	10db      	asrs	r3, r3, #3
 800f730:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f732:	2314      	movs	r3, #20
 800f734:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	f003 030f 	and.w	r3, r3, #15
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b14      	cmp	r3, #20
 800f750:	d002      	beq.n	800f758 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f752:	f06f 0305 	mvn.w	r3, #5
 800f756:	e110      	b.n	800f97a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	895b      	ldrh	r3, [r3, #10]
 800f75c:	2b13      	cmp	r3, #19
 800f75e:	d809      	bhi.n	800f774 <ip4_frag+0x64>
 800f760:	4b88      	ldr	r3, [pc, #544]	; (800f984 <ip4_frag+0x274>)
 800f762:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f766:	4988      	ldr	r1, [pc, #544]	; (800f988 <ip4_frag+0x278>)
 800f768:	4888      	ldr	r0, [pc, #544]	; (800f98c <ip4_frag+0x27c>)
 800f76a:	f000 fa51 	bl	800fc10 <iprintf>
 800f76e:	f06f 0305 	mvn.w	r3, #5
 800f772:	e102      	b.n	800f97a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	88db      	ldrh	r3, [r3, #6]
 800f778:	b29b      	uxth	r3, r3
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7f5 ffe6 	bl	800574c <lwip_htons>
 800f780:	4603      	mov	r3, r0
 800f782:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f784:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f786:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f78a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f78e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f794:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	891b      	ldrh	r3, [r3, #8]
 800f79a:	3b14      	subs	r3, #20
 800f79c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f7a0:	e0e1      	b.n	800f966 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f7a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f7a4:	00db      	lsls	r3, r3, #3
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	bf28      	it	cs
 800f7b0:	4613      	movcs	r3, r2
 800f7b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f7b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7b8:	2114      	movs	r1, #20
 800f7ba:	200e      	movs	r0, #14
 800f7bc:	f7f7 f840 	bl	8006840 <pbuf_alloc>
 800f7c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 80d5 	beq.w	800f974 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7cc:	895b      	ldrh	r3, [r3, #10]
 800f7ce:	2b13      	cmp	r3, #19
 800f7d0:	d806      	bhi.n	800f7e0 <ip4_frag+0xd0>
 800f7d2:	4b6c      	ldr	r3, [pc, #432]	; (800f984 <ip4_frag+0x274>)
 800f7d4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f7d8:	496d      	ldr	r1, [pc, #436]	; (800f990 <ip4_frag+0x280>)
 800f7da:	486c      	ldr	r0, [pc, #432]	; (800f98c <ip4_frag+0x27c>)
 800f7dc:	f000 fa18 	bl	800fc10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2214      	movs	r2, #20
 800f7e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 f9e1 	bl	800fbb0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f7f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f7fa:	e064      	b.n	800f8c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	895a      	ldrh	r2, [r3, #10]
 800f800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	895b      	ldrh	r3, [r3, #10]
 800f80a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d906      	bls.n	800f81e <ip4_frag+0x10e>
 800f810:	4b5c      	ldr	r3, [pc, #368]	; (800f984 <ip4_frag+0x274>)
 800f812:	f240 322d 	movw	r2, #813	; 0x32d
 800f816:	495f      	ldr	r1, [pc, #380]	; (800f994 <ip4_frag+0x284>)
 800f818:	485c      	ldr	r0, [pc, #368]	; (800f98c <ip4_frag+0x27c>)
 800f81a:	f000 f9f9 	bl	800fc10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f81e:	8bfa      	ldrh	r2, [r7, #30]
 800f820:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f824:	4293      	cmp	r3, r2
 800f826:	bf28      	it	cs
 800f828:	4613      	movcs	r3, r2
 800f82a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f82e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f832:	2b00      	cmp	r3, #0
 800f834:	d105      	bne.n	800f842 <ip4_frag+0x132>
        poff = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	60fb      	str	r3, [r7, #12]
        continue;
 800f840:	e041      	b.n	800f8c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f842:	f7ff ff0d 	bl	800f660 <ip_frag_alloc_pbuf_custom_ref>
 800f846:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d103      	bne.n	800f856 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f850:	f7f7 fada 	bl	8006e08 <pbuf_free>
        goto memerr;
 800f854:	e08f      	b.n	800f976 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f856:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f85c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f85e:	4413      	add	r3, r2
 800f860:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f864:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	4603      	mov	r3, r0
 800f86e:	2241      	movs	r2, #65	; 0x41
 800f870:	2000      	movs	r0, #0
 800f872:	f7f7 f90f 	bl	8006a94 <pbuf_alloced_custom>
 800f876:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f87e:	69b8      	ldr	r0, [r7, #24]
 800f880:	f7ff fef6 	bl	800f670 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f886:	f7f7 fabf 	bl	8006e08 <pbuf_free>
        goto memerr;
 800f88a:	e074      	b.n	800f976 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7f7 fb5b 	bl	8006f48 <pbuf_ref>
      pcr->original = p;
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f898:	69bb      	ldr	r3, [r7, #24]
 800f89a:	4a3f      	ldr	r2, [pc, #252]	; (800f998 <ip4_frag+0x288>)
 800f89c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f89e:	6979      	ldr	r1, [r7, #20]
 800f8a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8a2:	f7f7 fb73 	bl	8006f8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f8a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f8aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f8ae:	1ad3      	subs	r3, r2, r3
 800f8b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f8b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d004      	beq.n	800f8c6 <ip4_frag+0x1b6>
        poff = 0;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f8c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d196      	bne.n	800f7fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f8ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f8d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f8d4:	4413      	add	r3, r2
 800f8d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f8dc:	f1a3 0213 	sub.w	r2, r3, #19
 800f8e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	bfcc      	ite	gt
 800f8e8:	2301      	movgt	r3, #1
 800f8ea:	2300      	movle	r3, #0
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f8f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <ip4_frag+0x1f6>
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	2b00      	cmp	r3, #0
 800f904:	d003      	beq.n	800f90e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f906:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f90c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f90e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f910:	4618      	mov	r0, r3
 800f912:	f7f5 ff1b 	bl	800574c <lwip_htons>
 800f916:	4603      	mov	r3, r0
 800f918:	461a      	mov	r2, r3
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f91e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f920:	3314      	adds	r3, #20
 800f922:	b29b      	uxth	r3, r3
 800f924:	4618      	mov	r0, r3
 800f926:	f7f5 ff11 	bl	800574c <lwip_htons>
 800f92a:	4603      	mov	r3, r0
 800f92c:	461a      	mov	r2, r3
 800f92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f930:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f934:	2200      	movs	r2, #0
 800f936:	729a      	strb	r2, [r3, #10]
 800f938:	2200      	movs	r2, #0
 800f93a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f944:	68b8      	ldr	r0, [r7, #8]
 800f946:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f94a:	f7f7 fa5d 	bl	8006e08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f94e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f952:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f95a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f95e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f960:	4413      	add	r3, r2
 800f962:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f47f af19 	bne.w	800f7a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	e002      	b.n	800f97a <ip4_frag+0x26a>
      goto memerr;
 800f974:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3748      	adds	r7, #72	; 0x48
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	08013770 	.word	0x08013770
 800f988:	0801394c 	.word	0x0801394c
 800f98c:	080137b8 	.word	0x080137b8
 800f990:	08013968 	.word	0x08013968
 800f994:	08013988 	.word	0x08013988
 800f998:	0800f6a9 	.word	0x0800f6a9

0800f99c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b086      	sub	sp, #24
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f9a6:	230e      	movs	r3, #14
 800f9a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	895b      	ldrh	r3, [r3, #10]
 800f9ae:	2b0e      	cmp	r3, #14
 800f9b0:	d96e      	bls.n	800fa90 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	7bdb      	ldrb	r3, [r3, #15]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	7b1a      	ldrb	r2, [r3, #12]
 800f9d2:	7b5b      	ldrb	r3, [r3, #13]
 800f9d4:	021b      	lsls	r3, r3, #8
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d023      	beq.n	800fa2e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d10f      	bne.n	800fa0e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	785b      	ldrb	r3, [r3, #1]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d11b      	bne.n	800fa2e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9fa:	2b5e      	cmp	r3, #94	; 0x5e
 800f9fc:	d117      	bne.n	800fa2e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7b5b      	ldrb	r3, [r3, #13]
 800fa02:	f043 0310 	orr.w	r3, r3, #16
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	735a      	strb	r2, [r3, #13]
 800fa0c:	e00f      	b.n	800fa2e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2206      	movs	r2, #6
 800fa12:	4928      	ldr	r1, [pc, #160]	; (800fab4 <ethernet_input+0x118>)
 800fa14:	4618      	mov	r0, r3
 800fa16:	f000 f8bb 	bl	800fb90 <memcmp>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d106      	bne.n	800fa2e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	7b5b      	ldrb	r3, [r3, #13]
 800fa24:	f043 0308 	orr.w	r3, r3, #8
 800fa28:	b2da      	uxtb	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fa2e:	89fb      	ldrh	r3, [r7, #14]
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	d003      	beq.n	800fa3c <ethernet_input+0xa0>
 800fa34:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fa38:	d014      	beq.n	800fa64 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fa3a:	e032      	b.n	800faa2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa42:	f003 0308 	and.w	r3, r3, #8
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d024      	beq.n	800fa94 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa4a:	8afb      	ldrh	r3, [r7, #22]
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7f7 f954 	bl	8006cfc <pbuf_remove_header>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d11e      	bne.n	800fa98 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe fe91 	bl	800e784 <ip4_input>
      break;
 800fa62:	e013      	b.n	800fa8c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa6a:	f003 0308 	and.w	r3, r3, #8
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d014      	beq.n	800fa9c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa72:	8afb      	ldrh	r3, [r7, #22]
 800fa74:	4619      	mov	r1, r3
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7f7 f940 	bl	8006cfc <pbuf_remove_header>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d10e      	bne.n	800faa0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7fe f831 	bl	800daec <etharp_input>
      break;
 800fa8a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e00c      	b.n	800faaa <ethernet_input+0x10e>
    goto free_and_return;
 800fa90:	bf00      	nop
 800fa92:	e006      	b.n	800faa2 <ethernet_input+0x106>
        goto free_and_return;
 800fa94:	bf00      	nop
 800fa96:	e004      	b.n	800faa2 <ethernet_input+0x106>
        goto free_and_return;
 800fa98:	bf00      	nop
 800fa9a:	e002      	b.n	800faa2 <ethernet_input+0x106>
        goto free_and_return;
 800fa9c:	bf00      	nop
 800fa9e:	e000      	b.n	800faa2 <ethernet_input+0x106>
        goto free_and_return;
 800faa0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7f7 f9b0 	bl	8006e08 <pbuf_free>
  return ERR_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3718      	adds	r7, #24
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	08013b24 	.word	0x08013b24

0800fab8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fac6:	8c3b      	ldrh	r3, [r7, #32]
 800fac8:	4618      	mov	r0, r3
 800faca:	f7f5 fe3f 	bl	800574c <lwip_htons>
 800face:	4603      	mov	r3, r0
 800fad0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fad2:	210e      	movs	r1, #14
 800fad4:	68b8      	ldr	r0, [r7, #8]
 800fad6:	f7f7 f901 	bl	8006cdc <pbuf_add_header>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d125      	bne.n	800fb2c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	8afa      	ldrh	r2, [r7, #22]
 800faea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	2206      	movs	r2, #6
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f000 f85c 	bl	800fbb0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	3306      	adds	r3, #6
 800fafc:	2206      	movs	r2, #6
 800fafe:	6879      	ldr	r1, [r7, #4]
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 f855 	bl	800fbb0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb0c:	2b06      	cmp	r3, #6
 800fb0e:	d006      	beq.n	800fb1e <ethernet_output+0x66>
 800fb10:	4b0a      	ldr	r3, [pc, #40]	; (800fb3c <ethernet_output+0x84>)
 800fb12:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fb16:	490a      	ldr	r1, [pc, #40]	; (800fb40 <ethernet_output+0x88>)
 800fb18:	480a      	ldr	r0, [pc, #40]	; (800fb44 <ethernet_output+0x8c>)
 800fb1a:	f000 f879 	bl	800fc10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	699b      	ldr	r3, [r3, #24]
 800fb22:	68b9      	ldr	r1, [r7, #8]
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	4798      	blx	r3
 800fb28:	4603      	mov	r3, r0
 800fb2a:	e002      	b.n	800fb32 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fb2c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fb2e:	f06f 0301 	mvn.w	r3, #1
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3718      	adds	r7, #24
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	08013998 	.word	0x08013998
 800fb40:	080139d0 	.word	0x080139d0
 800fb44:	08013a04 	.word	0x08013a04

0800fb48 <__libc_init_array>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	4d0d      	ldr	r5, [pc, #52]	; (800fb80 <__libc_init_array+0x38>)
 800fb4c:	4c0d      	ldr	r4, [pc, #52]	; (800fb84 <__libc_init_array+0x3c>)
 800fb4e:	1b64      	subs	r4, r4, r5
 800fb50:	10a4      	asrs	r4, r4, #2
 800fb52:	2600      	movs	r6, #0
 800fb54:	42a6      	cmp	r6, r4
 800fb56:	d109      	bne.n	800fb6c <__libc_init_array+0x24>
 800fb58:	4d0b      	ldr	r5, [pc, #44]	; (800fb88 <__libc_init_array+0x40>)
 800fb5a:	4c0c      	ldr	r4, [pc, #48]	; (800fb8c <__libc_init_array+0x44>)
 800fb5c:	f001 fa5c 	bl	8011018 <_init>
 800fb60:	1b64      	subs	r4, r4, r5
 800fb62:	10a4      	asrs	r4, r4, #2
 800fb64:	2600      	movs	r6, #0
 800fb66:	42a6      	cmp	r6, r4
 800fb68:	d105      	bne.n	800fb76 <__libc_init_array+0x2e>
 800fb6a:	bd70      	pop	{r4, r5, r6, pc}
 800fb6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb70:	4798      	blx	r3
 800fb72:	3601      	adds	r6, #1
 800fb74:	e7ee      	b.n	800fb54 <__libc_init_array+0xc>
 800fb76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb7a:	4798      	blx	r3
 800fb7c:	3601      	adds	r6, #1
 800fb7e:	e7f2      	b.n	800fb66 <__libc_init_array+0x1e>
 800fb80:	08013c84 	.word	0x08013c84
 800fb84:	08013c84 	.word	0x08013c84
 800fb88:	08013c84 	.word	0x08013c84
 800fb8c:	08013c88 	.word	0x08013c88

0800fb90 <memcmp>:
 800fb90:	b510      	push	{r4, lr}
 800fb92:	3901      	subs	r1, #1
 800fb94:	4402      	add	r2, r0
 800fb96:	4290      	cmp	r0, r2
 800fb98:	d101      	bne.n	800fb9e <memcmp+0xe>
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	e005      	b.n	800fbaa <memcmp+0x1a>
 800fb9e:	7803      	ldrb	r3, [r0, #0]
 800fba0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d001      	beq.n	800fbac <memcmp+0x1c>
 800fba8:	1b18      	subs	r0, r3, r4
 800fbaa:	bd10      	pop	{r4, pc}
 800fbac:	3001      	adds	r0, #1
 800fbae:	e7f2      	b.n	800fb96 <memcmp+0x6>

0800fbb0 <memcpy>:
 800fbb0:	440a      	add	r2, r1
 800fbb2:	4291      	cmp	r1, r2
 800fbb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fbb8:	d100      	bne.n	800fbbc <memcpy+0xc>
 800fbba:	4770      	bx	lr
 800fbbc:	b510      	push	{r4, lr}
 800fbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbc6:	4291      	cmp	r1, r2
 800fbc8:	d1f9      	bne.n	800fbbe <memcpy+0xe>
 800fbca:	bd10      	pop	{r4, pc}

0800fbcc <memmove>:
 800fbcc:	4288      	cmp	r0, r1
 800fbce:	b510      	push	{r4, lr}
 800fbd0:	eb01 0402 	add.w	r4, r1, r2
 800fbd4:	d902      	bls.n	800fbdc <memmove+0x10>
 800fbd6:	4284      	cmp	r4, r0
 800fbd8:	4623      	mov	r3, r4
 800fbda:	d807      	bhi.n	800fbec <memmove+0x20>
 800fbdc:	1e43      	subs	r3, r0, #1
 800fbde:	42a1      	cmp	r1, r4
 800fbe0:	d008      	beq.n	800fbf4 <memmove+0x28>
 800fbe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbea:	e7f8      	b.n	800fbde <memmove+0x12>
 800fbec:	4402      	add	r2, r0
 800fbee:	4601      	mov	r1, r0
 800fbf0:	428a      	cmp	r2, r1
 800fbf2:	d100      	bne.n	800fbf6 <memmove+0x2a>
 800fbf4:	bd10      	pop	{r4, pc}
 800fbf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbfe:	e7f7      	b.n	800fbf0 <memmove+0x24>

0800fc00 <memset>:
 800fc00:	4402      	add	r2, r0
 800fc02:	4603      	mov	r3, r0
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d100      	bne.n	800fc0a <memset+0xa>
 800fc08:	4770      	bx	lr
 800fc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc0e:	e7f9      	b.n	800fc04 <memset+0x4>

0800fc10 <iprintf>:
 800fc10:	b40f      	push	{r0, r1, r2, r3}
 800fc12:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <iprintf+0x2c>)
 800fc14:	b513      	push	{r0, r1, r4, lr}
 800fc16:	681c      	ldr	r4, [r3, #0]
 800fc18:	b124      	cbz	r4, 800fc24 <iprintf+0x14>
 800fc1a:	69a3      	ldr	r3, [r4, #24]
 800fc1c:	b913      	cbnz	r3, 800fc24 <iprintf+0x14>
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f000 f8e2 	bl	800fde8 <__sinit>
 800fc24:	ab05      	add	r3, sp, #20
 800fc26:	9a04      	ldr	r2, [sp, #16]
 800fc28:	68a1      	ldr	r1, [r4, #8]
 800fc2a:	9301      	str	r3, [sp, #4]
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 fbfb 	bl	8010428 <_vfiprintf_r>
 800fc32:	b002      	add	sp, #8
 800fc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc38:	b004      	add	sp, #16
 800fc3a:	4770      	bx	lr
 800fc3c:	2000002c 	.word	0x2000002c

0800fc40 <rand>:
 800fc40:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <rand+0x5c>)
 800fc42:	b510      	push	{r4, lr}
 800fc44:	681c      	ldr	r4, [r3, #0]
 800fc46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc48:	b9b3      	cbnz	r3, 800fc78 <rand+0x38>
 800fc4a:	2018      	movs	r0, #24
 800fc4c:	f000 f97e 	bl	800ff4c <malloc>
 800fc50:	63a0      	str	r0, [r4, #56]	; 0x38
 800fc52:	b928      	cbnz	r0, 800fc60 <rand+0x20>
 800fc54:	4602      	mov	r2, r0
 800fc56:	4b12      	ldr	r3, [pc, #72]	; (800fca0 <rand+0x60>)
 800fc58:	4812      	ldr	r0, [pc, #72]	; (800fca4 <rand+0x64>)
 800fc5a:	214e      	movs	r1, #78	; 0x4e
 800fc5c:	f000 f84e 	bl	800fcfc <__assert_func>
 800fc60:	4a11      	ldr	r2, [pc, #68]	; (800fca8 <rand+0x68>)
 800fc62:	4b12      	ldr	r3, [pc, #72]	; (800fcac <rand+0x6c>)
 800fc64:	e9c0 2300 	strd	r2, r3, [r0]
 800fc68:	4b11      	ldr	r3, [pc, #68]	; (800fcb0 <rand+0x70>)
 800fc6a:	6083      	str	r3, [r0, #8]
 800fc6c:	230b      	movs	r3, #11
 800fc6e:	8183      	strh	r3, [r0, #12]
 800fc70:	2201      	movs	r2, #1
 800fc72:	2300      	movs	r3, #0
 800fc74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fc78:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fc7a:	4a0e      	ldr	r2, [pc, #56]	; (800fcb4 <rand+0x74>)
 800fc7c:	6920      	ldr	r0, [r4, #16]
 800fc7e:	6963      	ldr	r3, [r4, #20]
 800fc80:	490d      	ldr	r1, [pc, #52]	; (800fcb8 <rand+0x78>)
 800fc82:	4342      	muls	r2, r0
 800fc84:	fb01 2203 	mla	r2, r1, r3, r2
 800fc88:	fba0 0101 	umull	r0, r1, r0, r1
 800fc8c:	1c43      	adds	r3, r0, #1
 800fc8e:	eb42 0001 	adc.w	r0, r2, r1
 800fc92:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fc96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fc9a:	bd10      	pop	{r4, pc}
 800fc9c:	2000002c 	.word	0x2000002c
 800fca0:	08013b38 	.word	0x08013b38
 800fca4:	08013b4f 	.word	0x08013b4f
 800fca8:	abcd330e 	.word	0xabcd330e
 800fcac:	e66d1234 	.word	0xe66d1234
 800fcb0:	0005deec 	.word	0x0005deec
 800fcb4:	5851f42d 	.word	0x5851f42d
 800fcb8:	4c957f2d 	.word	0x4c957f2d

0800fcbc <siprintf>:
 800fcbc:	b40e      	push	{r1, r2, r3}
 800fcbe:	b500      	push	{lr}
 800fcc0:	b09c      	sub	sp, #112	; 0x70
 800fcc2:	ab1d      	add	r3, sp, #116	; 0x74
 800fcc4:	9002      	str	r0, [sp, #8]
 800fcc6:	9006      	str	r0, [sp, #24]
 800fcc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fccc:	4809      	ldr	r0, [pc, #36]	; (800fcf4 <siprintf+0x38>)
 800fcce:	9107      	str	r1, [sp, #28]
 800fcd0:	9104      	str	r1, [sp, #16]
 800fcd2:	4909      	ldr	r1, [pc, #36]	; (800fcf8 <siprintf+0x3c>)
 800fcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd8:	9105      	str	r1, [sp, #20]
 800fcda:	6800      	ldr	r0, [r0, #0]
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	a902      	add	r1, sp, #8
 800fce0:	f000 fa78 	bl	80101d4 <_svfiprintf_r>
 800fce4:	9b02      	ldr	r3, [sp, #8]
 800fce6:	2200      	movs	r2, #0
 800fce8:	701a      	strb	r2, [r3, #0]
 800fcea:	b01c      	add	sp, #112	; 0x70
 800fcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcf0:	b003      	add	sp, #12
 800fcf2:	4770      	bx	lr
 800fcf4:	2000002c 	.word	0x2000002c
 800fcf8:	ffff0208 	.word	0xffff0208

0800fcfc <__assert_func>:
 800fcfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcfe:	4614      	mov	r4, r2
 800fd00:	461a      	mov	r2, r3
 800fd02:	4b09      	ldr	r3, [pc, #36]	; (800fd28 <__assert_func+0x2c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4605      	mov	r5, r0
 800fd08:	68d8      	ldr	r0, [r3, #12]
 800fd0a:	b14c      	cbz	r4, 800fd20 <__assert_func+0x24>
 800fd0c:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <__assert_func+0x30>)
 800fd0e:	9100      	str	r1, [sp, #0]
 800fd10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd14:	4906      	ldr	r1, [pc, #24]	; (800fd30 <__assert_func+0x34>)
 800fd16:	462b      	mov	r3, r5
 800fd18:	f000 f8e4 	bl	800fee4 <fiprintf>
 800fd1c:	f000 ff6e 	bl	8010bfc <abort>
 800fd20:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <__assert_func+0x38>)
 800fd22:	461c      	mov	r4, r3
 800fd24:	e7f3      	b.n	800fd0e <__assert_func+0x12>
 800fd26:	bf00      	nop
 800fd28:	2000002c 	.word	0x2000002c
 800fd2c:	08013baa 	.word	0x08013baa
 800fd30:	08013bb7 	.word	0x08013bb7
 800fd34:	08013be5 	.word	0x08013be5

0800fd38 <std>:
 800fd38:	2300      	movs	r3, #0
 800fd3a:	b510      	push	{r4, lr}
 800fd3c:	4604      	mov	r4, r0
 800fd3e:	e9c0 3300 	strd	r3, r3, [r0]
 800fd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd46:	6083      	str	r3, [r0, #8]
 800fd48:	8181      	strh	r1, [r0, #12]
 800fd4a:	6643      	str	r3, [r0, #100]	; 0x64
 800fd4c:	81c2      	strh	r2, [r0, #14]
 800fd4e:	6183      	str	r3, [r0, #24]
 800fd50:	4619      	mov	r1, r3
 800fd52:	2208      	movs	r2, #8
 800fd54:	305c      	adds	r0, #92	; 0x5c
 800fd56:	f7ff ff53 	bl	800fc00 <memset>
 800fd5a:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <std+0x38>)
 800fd5c:	6263      	str	r3, [r4, #36]	; 0x24
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <std+0x3c>)
 800fd60:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <std+0x40>)
 800fd64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd66:	4b05      	ldr	r3, [pc, #20]	; (800fd7c <std+0x44>)
 800fd68:	6224      	str	r4, [r4, #32]
 800fd6a:	6323      	str	r3, [r4, #48]	; 0x30
 800fd6c:	bd10      	pop	{r4, pc}
 800fd6e:	bf00      	nop
 800fd70:	080109d1 	.word	0x080109d1
 800fd74:	080109f3 	.word	0x080109f3
 800fd78:	08010a2b 	.word	0x08010a2b
 800fd7c:	08010a4f 	.word	0x08010a4f

0800fd80 <_cleanup_r>:
 800fd80:	4901      	ldr	r1, [pc, #4]	; (800fd88 <_cleanup_r+0x8>)
 800fd82:	f000 b8c1 	b.w	800ff08 <_fwalk_reent>
 800fd86:	bf00      	nop
 800fd88:	08010d39 	.word	0x08010d39

0800fd8c <__sfmoreglue>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	2268      	movs	r2, #104	; 0x68
 800fd90:	1e4d      	subs	r5, r1, #1
 800fd92:	4355      	muls	r5, r2
 800fd94:	460e      	mov	r6, r1
 800fd96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd9a:	f000 f94b 	bl	8010034 <_malloc_r>
 800fd9e:	4604      	mov	r4, r0
 800fda0:	b140      	cbz	r0, 800fdb4 <__sfmoreglue+0x28>
 800fda2:	2100      	movs	r1, #0
 800fda4:	e9c0 1600 	strd	r1, r6, [r0]
 800fda8:	300c      	adds	r0, #12
 800fdaa:	60a0      	str	r0, [r4, #8]
 800fdac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fdb0:	f7ff ff26 	bl	800fc00 <memset>
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	bd70      	pop	{r4, r5, r6, pc}

0800fdb8 <__sfp_lock_acquire>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__sfp_lock_acquire+0x8>)
 800fdba:	f000 b8c5 	b.w	800ff48 <__retarget_lock_acquire_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	20008945 	.word	0x20008945

0800fdc4 <__sfp_lock_release>:
 800fdc4:	4801      	ldr	r0, [pc, #4]	; (800fdcc <__sfp_lock_release+0x8>)
 800fdc6:	f000 b8c0 	b.w	800ff4a <__retarget_lock_release_recursive>
 800fdca:	bf00      	nop
 800fdcc:	20008945 	.word	0x20008945

0800fdd0 <__sinit_lock_acquire>:
 800fdd0:	4801      	ldr	r0, [pc, #4]	; (800fdd8 <__sinit_lock_acquire+0x8>)
 800fdd2:	f000 b8b9 	b.w	800ff48 <__retarget_lock_acquire_recursive>
 800fdd6:	bf00      	nop
 800fdd8:	20008946 	.word	0x20008946

0800fddc <__sinit_lock_release>:
 800fddc:	4801      	ldr	r0, [pc, #4]	; (800fde4 <__sinit_lock_release+0x8>)
 800fdde:	f000 b8b4 	b.w	800ff4a <__retarget_lock_release_recursive>
 800fde2:	bf00      	nop
 800fde4:	20008946 	.word	0x20008946

0800fde8 <__sinit>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	4604      	mov	r4, r0
 800fdec:	f7ff fff0 	bl	800fdd0 <__sinit_lock_acquire>
 800fdf0:	69a3      	ldr	r3, [r4, #24]
 800fdf2:	b11b      	cbz	r3, 800fdfc <__sinit+0x14>
 800fdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf8:	f7ff bff0 	b.w	800fddc <__sinit_lock_release>
 800fdfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe00:	6523      	str	r3, [r4, #80]	; 0x50
 800fe02:	4b13      	ldr	r3, [pc, #76]	; (800fe50 <__sinit+0x68>)
 800fe04:	4a13      	ldr	r2, [pc, #76]	; (800fe54 <__sinit+0x6c>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe0a:	42a3      	cmp	r3, r4
 800fe0c:	bf04      	itt	eq
 800fe0e:	2301      	moveq	r3, #1
 800fe10:	61a3      	streq	r3, [r4, #24]
 800fe12:	4620      	mov	r0, r4
 800fe14:	f000 f820 	bl	800fe58 <__sfp>
 800fe18:	6060      	str	r0, [r4, #4]
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f000 f81c 	bl	800fe58 <__sfp>
 800fe20:	60a0      	str	r0, [r4, #8]
 800fe22:	4620      	mov	r0, r4
 800fe24:	f000 f818 	bl	800fe58 <__sfp>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	60e0      	str	r0, [r4, #12]
 800fe2c:	2104      	movs	r1, #4
 800fe2e:	6860      	ldr	r0, [r4, #4]
 800fe30:	f7ff ff82 	bl	800fd38 <std>
 800fe34:	68a0      	ldr	r0, [r4, #8]
 800fe36:	2201      	movs	r2, #1
 800fe38:	2109      	movs	r1, #9
 800fe3a:	f7ff ff7d 	bl	800fd38 <std>
 800fe3e:	68e0      	ldr	r0, [r4, #12]
 800fe40:	2202      	movs	r2, #2
 800fe42:	2112      	movs	r1, #18
 800fe44:	f7ff ff78 	bl	800fd38 <std>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	61a3      	str	r3, [r4, #24]
 800fe4c:	e7d2      	b.n	800fdf4 <__sinit+0xc>
 800fe4e:	bf00      	nop
 800fe50:	08013b34 	.word	0x08013b34
 800fe54:	0800fd81 	.word	0x0800fd81

0800fe58 <__sfp>:
 800fe58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5a:	4607      	mov	r7, r0
 800fe5c:	f7ff ffac 	bl	800fdb8 <__sfp_lock_acquire>
 800fe60:	4b1e      	ldr	r3, [pc, #120]	; (800fedc <__sfp+0x84>)
 800fe62:	681e      	ldr	r6, [r3, #0]
 800fe64:	69b3      	ldr	r3, [r6, #24]
 800fe66:	b913      	cbnz	r3, 800fe6e <__sfp+0x16>
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7ff ffbd 	bl	800fde8 <__sinit>
 800fe6e:	3648      	adds	r6, #72	; 0x48
 800fe70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe74:	3b01      	subs	r3, #1
 800fe76:	d503      	bpl.n	800fe80 <__sfp+0x28>
 800fe78:	6833      	ldr	r3, [r6, #0]
 800fe7a:	b30b      	cbz	r3, 800fec0 <__sfp+0x68>
 800fe7c:	6836      	ldr	r6, [r6, #0]
 800fe7e:	e7f7      	b.n	800fe70 <__sfp+0x18>
 800fe80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe84:	b9d5      	cbnz	r5, 800febc <__sfp+0x64>
 800fe86:	4b16      	ldr	r3, [pc, #88]	; (800fee0 <__sfp+0x88>)
 800fe88:	60e3      	str	r3, [r4, #12]
 800fe8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe8e:	6665      	str	r5, [r4, #100]	; 0x64
 800fe90:	f000 f859 	bl	800ff46 <__retarget_lock_init_recursive>
 800fe94:	f7ff ff96 	bl	800fdc4 <__sfp_lock_release>
 800fe98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fea0:	6025      	str	r5, [r4, #0]
 800fea2:	61a5      	str	r5, [r4, #24]
 800fea4:	2208      	movs	r2, #8
 800fea6:	4629      	mov	r1, r5
 800fea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800feac:	f7ff fea8 	bl	800fc00 <memset>
 800feb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800feb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800feb8:	4620      	mov	r0, r4
 800feba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800febc:	3468      	adds	r4, #104	; 0x68
 800febe:	e7d9      	b.n	800fe74 <__sfp+0x1c>
 800fec0:	2104      	movs	r1, #4
 800fec2:	4638      	mov	r0, r7
 800fec4:	f7ff ff62 	bl	800fd8c <__sfmoreglue>
 800fec8:	4604      	mov	r4, r0
 800feca:	6030      	str	r0, [r6, #0]
 800fecc:	2800      	cmp	r0, #0
 800fece:	d1d5      	bne.n	800fe7c <__sfp+0x24>
 800fed0:	f7ff ff78 	bl	800fdc4 <__sfp_lock_release>
 800fed4:	230c      	movs	r3, #12
 800fed6:	603b      	str	r3, [r7, #0]
 800fed8:	e7ee      	b.n	800feb8 <__sfp+0x60>
 800feda:	bf00      	nop
 800fedc:	08013b34 	.word	0x08013b34
 800fee0:	ffff0001 	.word	0xffff0001

0800fee4 <fiprintf>:
 800fee4:	b40e      	push	{r1, r2, r3}
 800fee6:	b503      	push	{r0, r1, lr}
 800fee8:	4601      	mov	r1, r0
 800feea:	ab03      	add	r3, sp, #12
 800feec:	4805      	ldr	r0, [pc, #20]	; (800ff04 <fiprintf+0x20>)
 800feee:	f853 2b04 	ldr.w	r2, [r3], #4
 800fef2:	6800      	ldr	r0, [r0, #0]
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	f000 fa97 	bl	8010428 <_vfiprintf_r>
 800fefa:	b002      	add	sp, #8
 800fefc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff00:	b003      	add	sp, #12
 800ff02:	4770      	bx	lr
 800ff04:	2000002c 	.word	0x2000002c

0800ff08 <_fwalk_reent>:
 800ff08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	4688      	mov	r8, r1
 800ff10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff14:	2700      	movs	r7, #0
 800ff16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ff1e:	d505      	bpl.n	800ff2c <_fwalk_reent+0x24>
 800ff20:	6824      	ldr	r4, [r4, #0]
 800ff22:	2c00      	cmp	r4, #0
 800ff24:	d1f7      	bne.n	800ff16 <_fwalk_reent+0xe>
 800ff26:	4638      	mov	r0, r7
 800ff28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff2c:	89ab      	ldrh	r3, [r5, #12]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d907      	bls.n	800ff42 <_fwalk_reent+0x3a>
 800ff32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff36:	3301      	adds	r3, #1
 800ff38:	d003      	beq.n	800ff42 <_fwalk_reent+0x3a>
 800ff3a:	4629      	mov	r1, r5
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	47c0      	blx	r8
 800ff40:	4307      	orrs	r7, r0
 800ff42:	3568      	adds	r5, #104	; 0x68
 800ff44:	e7e9      	b.n	800ff1a <_fwalk_reent+0x12>

0800ff46 <__retarget_lock_init_recursive>:
 800ff46:	4770      	bx	lr

0800ff48 <__retarget_lock_acquire_recursive>:
 800ff48:	4770      	bx	lr

0800ff4a <__retarget_lock_release_recursive>:
 800ff4a:	4770      	bx	lr

0800ff4c <malloc>:
 800ff4c:	4b02      	ldr	r3, [pc, #8]	; (800ff58 <malloc+0xc>)
 800ff4e:	4601      	mov	r1, r0
 800ff50:	6818      	ldr	r0, [r3, #0]
 800ff52:	f000 b86f 	b.w	8010034 <_malloc_r>
 800ff56:	bf00      	nop
 800ff58:	2000002c 	.word	0x2000002c

0800ff5c <_free_r>:
 800ff5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	d044      	beq.n	800ffec <_free_r+0x90>
 800ff62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff66:	9001      	str	r0, [sp, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	f1a1 0404 	sub.w	r4, r1, #4
 800ff6e:	bfb8      	it	lt
 800ff70:	18e4      	addlt	r4, r4, r3
 800ff72:	f000 ff95 	bl	8010ea0 <__malloc_lock>
 800ff76:	4a1e      	ldr	r2, [pc, #120]	; (800fff0 <_free_r+0x94>)
 800ff78:	9801      	ldr	r0, [sp, #4]
 800ff7a:	6813      	ldr	r3, [r2, #0]
 800ff7c:	b933      	cbnz	r3, 800ff8c <_free_r+0x30>
 800ff7e:	6063      	str	r3, [r4, #4]
 800ff80:	6014      	str	r4, [r2, #0]
 800ff82:	b003      	add	sp, #12
 800ff84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff88:	f000 bf90 	b.w	8010eac <__malloc_unlock>
 800ff8c:	42a3      	cmp	r3, r4
 800ff8e:	d908      	bls.n	800ffa2 <_free_r+0x46>
 800ff90:	6825      	ldr	r5, [r4, #0]
 800ff92:	1961      	adds	r1, r4, r5
 800ff94:	428b      	cmp	r3, r1
 800ff96:	bf01      	itttt	eq
 800ff98:	6819      	ldreq	r1, [r3, #0]
 800ff9a:	685b      	ldreq	r3, [r3, #4]
 800ff9c:	1949      	addeq	r1, r1, r5
 800ff9e:	6021      	streq	r1, [r4, #0]
 800ffa0:	e7ed      	b.n	800ff7e <_free_r+0x22>
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	b10b      	cbz	r3, 800ffac <_free_r+0x50>
 800ffa8:	42a3      	cmp	r3, r4
 800ffaa:	d9fa      	bls.n	800ffa2 <_free_r+0x46>
 800ffac:	6811      	ldr	r1, [r2, #0]
 800ffae:	1855      	adds	r5, r2, r1
 800ffb0:	42a5      	cmp	r5, r4
 800ffb2:	d10b      	bne.n	800ffcc <_free_r+0x70>
 800ffb4:	6824      	ldr	r4, [r4, #0]
 800ffb6:	4421      	add	r1, r4
 800ffb8:	1854      	adds	r4, r2, r1
 800ffba:	42a3      	cmp	r3, r4
 800ffbc:	6011      	str	r1, [r2, #0]
 800ffbe:	d1e0      	bne.n	800ff82 <_free_r+0x26>
 800ffc0:	681c      	ldr	r4, [r3, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	6053      	str	r3, [r2, #4]
 800ffc6:	4421      	add	r1, r4
 800ffc8:	6011      	str	r1, [r2, #0]
 800ffca:	e7da      	b.n	800ff82 <_free_r+0x26>
 800ffcc:	d902      	bls.n	800ffd4 <_free_r+0x78>
 800ffce:	230c      	movs	r3, #12
 800ffd0:	6003      	str	r3, [r0, #0]
 800ffd2:	e7d6      	b.n	800ff82 <_free_r+0x26>
 800ffd4:	6825      	ldr	r5, [r4, #0]
 800ffd6:	1961      	adds	r1, r4, r5
 800ffd8:	428b      	cmp	r3, r1
 800ffda:	bf04      	itt	eq
 800ffdc:	6819      	ldreq	r1, [r3, #0]
 800ffde:	685b      	ldreq	r3, [r3, #4]
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	bf04      	itt	eq
 800ffe4:	1949      	addeq	r1, r1, r5
 800ffe6:	6021      	streq	r1, [r4, #0]
 800ffe8:	6054      	str	r4, [r2, #4]
 800ffea:	e7ca      	b.n	800ff82 <_free_r+0x26>
 800ffec:	b003      	add	sp, #12
 800ffee:	bd30      	pop	{r4, r5, pc}
 800fff0:	20008948 	.word	0x20008948

0800fff4 <sbrk_aligned>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	4e0e      	ldr	r6, [pc, #56]	; (8010030 <sbrk_aligned+0x3c>)
 800fff8:	460c      	mov	r4, r1
 800fffa:	6831      	ldr	r1, [r6, #0]
 800fffc:	4605      	mov	r5, r0
 800fffe:	b911      	cbnz	r1, 8010006 <sbrk_aligned+0x12>
 8010000:	f000 fcd6 	bl	80109b0 <_sbrk_r>
 8010004:	6030      	str	r0, [r6, #0]
 8010006:	4621      	mov	r1, r4
 8010008:	4628      	mov	r0, r5
 801000a:	f000 fcd1 	bl	80109b0 <_sbrk_r>
 801000e:	1c43      	adds	r3, r0, #1
 8010010:	d00a      	beq.n	8010028 <sbrk_aligned+0x34>
 8010012:	1cc4      	adds	r4, r0, #3
 8010014:	f024 0403 	bic.w	r4, r4, #3
 8010018:	42a0      	cmp	r0, r4
 801001a:	d007      	beq.n	801002c <sbrk_aligned+0x38>
 801001c:	1a21      	subs	r1, r4, r0
 801001e:	4628      	mov	r0, r5
 8010020:	f000 fcc6 	bl	80109b0 <_sbrk_r>
 8010024:	3001      	adds	r0, #1
 8010026:	d101      	bne.n	801002c <sbrk_aligned+0x38>
 8010028:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801002c:	4620      	mov	r0, r4
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	2000894c 	.word	0x2000894c

08010034 <_malloc_r>:
 8010034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010038:	1ccd      	adds	r5, r1, #3
 801003a:	f025 0503 	bic.w	r5, r5, #3
 801003e:	3508      	adds	r5, #8
 8010040:	2d0c      	cmp	r5, #12
 8010042:	bf38      	it	cc
 8010044:	250c      	movcc	r5, #12
 8010046:	2d00      	cmp	r5, #0
 8010048:	4607      	mov	r7, r0
 801004a:	db01      	blt.n	8010050 <_malloc_r+0x1c>
 801004c:	42a9      	cmp	r1, r5
 801004e:	d905      	bls.n	801005c <_malloc_r+0x28>
 8010050:	230c      	movs	r3, #12
 8010052:	603b      	str	r3, [r7, #0]
 8010054:	2600      	movs	r6, #0
 8010056:	4630      	mov	r0, r6
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	4e2e      	ldr	r6, [pc, #184]	; (8010118 <_malloc_r+0xe4>)
 801005e:	f000 ff1f 	bl	8010ea0 <__malloc_lock>
 8010062:	6833      	ldr	r3, [r6, #0]
 8010064:	461c      	mov	r4, r3
 8010066:	bb34      	cbnz	r4, 80100b6 <_malloc_r+0x82>
 8010068:	4629      	mov	r1, r5
 801006a:	4638      	mov	r0, r7
 801006c:	f7ff ffc2 	bl	800fff4 <sbrk_aligned>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	4604      	mov	r4, r0
 8010074:	d14d      	bne.n	8010112 <_malloc_r+0xde>
 8010076:	6834      	ldr	r4, [r6, #0]
 8010078:	4626      	mov	r6, r4
 801007a:	2e00      	cmp	r6, #0
 801007c:	d140      	bne.n	8010100 <_malloc_r+0xcc>
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	4631      	mov	r1, r6
 8010082:	4638      	mov	r0, r7
 8010084:	eb04 0803 	add.w	r8, r4, r3
 8010088:	f000 fc92 	bl	80109b0 <_sbrk_r>
 801008c:	4580      	cmp	r8, r0
 801008e:	d13a      	bne.n	8010106 <_malloc_r+0xd2>
 8010090:	6821      	ldr	r1, [r4, #0]
 8010092:	3503      	adds	r5, #3
 8010094:	1a6d      	subs	r5, r5, r1
 8010096:	f025 0503 	bic.w	r5, r5, #3
 801009a:	3508      	adds	r5, #8
 801009c:	2d0c      	cmp	r5, #12
 801009e:	bf38      	it	cc
 80100a0:	250c      	movcc	r5, #12
 80100a2:	4629      	mov	r1, r5
 80100a4:	4638      	mov	r0, r7
 80100a6:	f7ff ffa5 	bl	800fff4 <sbrk_aligned>
 80100aa:	3001      	adds	r0, #1
 80100ac:	d02b      	beq.n	8010106 <_malloc_r+0xd2>
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	442b      	add	r3, r5
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	e00e      	b.n	80100d4 <_malloc_r+0xa0>
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	1b52      	subs	r2, r2, r5
 80100ba:	d41e      	bmi.n	80100fa <_malloc_r+0xc6>
 80100bc:	2a0b      	cmp	r2, #11
 80100be:	d916      	bls.n	80100ee <_malloc_r+0xba>
 80100c0:	1961      	adds	r1, r4, r5
 80100c2:	42a3      	cmp	r3, r4
 80100c4:	6025      	str	r5, [r4, #0]
 80100c6:	bf18      	it	ne
 80100c8:	6059      	strne	r1, [r3, #4]
 80100ca:	6863      	ldr	r3, [r4, #4]
 80100cc:	bf08      	it	eq
 80100ce:	6031      	streq	r1, [r6, #0]
 80100d0:	5162      	str	r2, [r4, r5]
 80100d2:	604b      	str	r3, [r1, #4]
 80100d4:	4638      	mov	r0, r7
 80100d6:	f104 060b 	add.w	r6, r4, #11
 80100da:	f000 fee7 	bl	8010eac <__malloc_unlock>
 80100de:	f026 0607 	bic.w	r6, r6, #7
 80100e2:	1d23      	adds	r3, r4, #4
 80100e4:	1af2      	subs	r2, r6, r3
 80100e6:	d0b6      	beq.n	8010056 <_malloc_r+0x22>
 80100e8:	1b9b      	subs	r3, r3, r6
 80100ea:	50a3      	str	r3, [r4, r2]
 80100ec:	e7b3      	b.n	8010056 <_malloc_r+0x22>
 80100ee:	6862      	ldr	r2, [r4, #4]
 80100f0:	42a3      	cmp	r3, r4
 80100f2:	bf0c      	ite	eq
 80100f4:	6032      	streq	r2, [r6, #0]
 80100f6:	605a      	strne	r2, [r3, #4]
 80100f8:	e7ec      	b.n	80100d4 <_malloc_r+0xa0>
 80100fa:	4623      	mov	r3, r4
 80100fc:	6864      	ldr	r4, [r4, #4]
 80100fe:	e7b2      	b.n	8010066 <_malloc_r+0x32>
 8010100:	4634      	mov	r4, r6
 8010102:	6876      	ldr	r6, [r6, #4]
 8010104:	e7b9      	b.n	801007a <_malloc_r+0x46>
 8010106:	230c      	movs	r3, #12
 8010108:	603b      	str	r3, [r7, #0]
 801010a:	4638      	mov	r0, r7
 801010c:	f000 fece 	bl	8010eac <__malloc_unlock>
 8010110:	e7a1      	b.n	8010056 <_malloc_r+0x22>
 8010112:	6025      	str	r5, [r4, #0]
 8010114:	e7de      	b.n	80100d4 <_malloc_r+0xa0>
 8010116:	bf00      	nop
 8010118:	20008948 	.word	0x20008948

0801011c <__ssputs_r>:
 801011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010120:	688e      	ldr	r6, [r1, #8]
 8010122:	429e      	cmp	r6, r3
 8010124:	4682      	mov	sl, r0
 8010126:	460c      	mov	r4, r1
 8010128:	4690      	mov	r8, r2
 801012a:	461f      	mov	r7, r3
 801012c:	d838      	bhi.n	80101a0 <__ssputs_r+0x84>
 801012e:	898a      	ldrh	r2, [r1, #12]
 8010130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010134:	d032      	beq.n	801019c <__ssputs_r+0x80>
 8010136:	6825      	ldr	r5, [r4, #0]
 8010138:	6909      	ldr	r1, [r1, #16]
 801013a:	eba5 0901 	sub.w	r9, r5, r1
 801013e:	6965      	ldr	r5, [r4, #20]
 8010140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010148:	3301      	adds	r3, #1
 801014a:	444b      	add	r3, r9
 801014c:	106d      	asrs	r5, r5, #1
 801014e:	429d      	cmp	r5, r3
 8010150:	bf38      	it	cc
 8010152:	461d      	movcc	r5, r3
 8010154:	0553      	lsls	r3, r2, #21
 8010156:	d531      	bpl.n	80101bc <__ssputs_r+0xa0>
 8010158:	4629      	mov	r1, r5
 801015a:	f7ff ff6b 	bl	8010034 <_malloc_r>
 801015e:	4606      	mov	r6, r0
 8010160:	b950      	cbnz	r0, 8010178 <__ssputs_r+0x5c>
 8010162:	230c      	movs	r3, #12
 8010164:	f8ca 3000 	str.w	r3, [sl]
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801016e:	81a3      	strh	r3, [r4, #12]
 8010170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	6921      	ldr	r1, [r4, #16]
 801017a:	464a      	mov	r2, r9
 801017c:	f7ff fd18 	bl	800fbb0 <memcpy>
 8010180:	89a3      	ldrh	r3, [r4, #12]
 8010182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801018a:	81a3      	strh	r3, [r4, #12]
 801018c:	6126      	str	r6, [r4, #16]
 801018e:	6165      	str	r5, [r4, #20]
 8010190:	444e      	add	r6, r9
 8010192:	eba5 0509 	sub.w	r5, r5, r9
 8010196:	6026      	str	r6, [r4, #0]
 8010198:	60a5      	str	r5, [r4, #8]
 801019a:	463e      	mov	r6, r7
 801019c:	42be      	cmp	r6, r7
 801019e:	d900      	bls.n	80101a2 <__ssputs_r+0x86>
 80101a0:	463e      	mov	r6, r7
 80101a2:	6820      	ldr	r0, [r4, #0]
 80101a4:	4632      	mov	r2, r6
 80101a6:	4641      	mov	r1, r8
 80101a8:	f7ff fd10 	bl	800fbcc <memmove>
 80101ac:	68a3      	ldr	r3, [r4, #8]
 80101ae:	1b9b      	subs	r3, r3, r6
 80101b0:	60a3      	str	r3, [r4, #8]
 80101b2:	6823      	ldr	r3, [r4, #0]
 80101b4:	4433      	add	r3, r6
 80101b6:	6023      	str	r3, [r4, #0]
 80101b8:	2000      	movs	r0, #0
 80101ba:	e7db      	b.n	8010174 <__ssputs_r+0x58>
 80101bc:	462a      	mov	r2, r5
 80101be:	f000 fe7b 	bl	8010eb8 <_realloc_r>
 80101c2:	4606      	mov	r6, r0
 80101c4:	2800      	cmp	r0, #0
 80101c6:	d1e1      	bne.n	801018c <__ssputs_r+0x70>
 80101c8:	6921      	ldr	r1, [r4, #16]
 80101ca:	4650      	mov	r0, sl
 80101cc:	f7ff fec6 	bl	800ff5c <_free_r>
 80101d0:	e7c7      	b.n	8010162 <__ssputs_r+0x46>
	...

080101d4 <_svfiprintf_r>:
 80101d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d8:	4698      	mov	r8, r3
 80101da:	898b      	ldrh	r3, [r1, #12]
 80101dc:	061b      	lsls	r3, r3, #24
 80101de:	b09d      	sub	sp, #116	; 0x74
 80101e0:	4607      	mov	r7, r0
 80101e2:	460d      	mov	r5, r1
 80101e4:	4614      	mov	r4, r2
 80101e6:	d50e      	bpl.n	8010206 <_svfiprintf_r+0x32>
 80101e8:	690b      	ldr	r3, [r1, #16]
 80101ea:	b963      	cbnz	r3, 8010206 <_svfiprintf_r+0x32>
 80101ec:	2140      	movs	r1, #64	; 0x40
 80101ee:	f7ff ff21 	bl	8010034 <_malloc_r>
 80101f2:	6028      	str	r0, [r5, #0]
 80101f4:	6128      	str	r0, [r5, #16]
 80101f6:	b920      	cbnz	r0, 8010202 <_svfiprintf_r+0x2e>
 80101f8:	230c      	movs	r3, #12
 80101fa:	603b      	str	r3, [r7, #0]
 80101fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010200:	e0d1      	b.n	80103a6 <_svfiprintf_r+0x1d2>
 8010202:	2340      	movs	r3, #64	; 0x40
 8010204:	616b      	str	r3, [r5, #20]
 8010206:	2300      	movs	r3, #0
 8010208:	9309      	str	r3, [sp, #36]	; 0x24
 801020a:	2320      	movs	r3, #32
 801020c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010210:	f8cd 800c 	str.w	r8, [sp, #12]
 8010214:	2330      	movs	r3, #48	; 0x30
 8010216:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103c0 <_svfiprintf_r+0x1ec>
 801021a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801021e:	f04f 0901 	mov.w	r9, #1
 8010222:	4623      	mov	r3, r4
 8010224:	469a      	mov	sl, r3
 8010226:	f813 2b01 	ldrb.w	r2, [r3], #1
 801022a:	b10a      	cbz	r2, 8010230 <_svfiprintf_r+0x5c>
 801022c:	2a25      	cmp	r2, #37	; 0x25
 801022e:	d1f9      	bne.n	8010224 <_svfiprintf_r+0x50>
 8010230:	ebba 0b04 	subs.w	fp, sl, r4
 8010234:	d00b      	beq.n	801024e <_svfiprintf_r+0x7a>
 8010236:	465b      	mov	r3, fp
 8010238:	4622      	mov	r2, r4
 801023a:	4629      	mov	r1, r5
 801023c:	4638      	mov	r0, r7
 801023e:	f7ff ff6d 	bl	801011c <__ssputs_r>
 8010242:	3001      	adds	r0, #1
 8010244:	f000 80aa 	beq.w	801039c <_svfiprintf_r+0x1c8>
 8010248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801024a:	445a      	add	r2, fp
 801024c:	9209      	str	r2, [sp, #36]	; 0x24
 801024e:	f89a 3000 	ldrb.w	r3, [sl]
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 80a2 	beq.w	801039c <_svfiprintf_r+0x1c8>
 8010258:	2300      	movs	r3, #0
 801025a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801025e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010262:	f10a 0a01 	add.w	sl, sl, #1
 8010266:	9304      	str	r3, [sp, #16]
 8010268:	9307      	str	r3, [sp, #28]
 801026a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801026e:	931a      	str	r3, [sp, #104]	; 0x68
 8010270:	4654      	mov	r4, sl
 8010272:	2205      	movs	r2, #5
 8010274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010278:	4851      	ldr	r0, [pc, #324]	; (80103c0 <_svfiprintf_r+0x1ec>)
 801027a:	f7ef ffc9 	bl	8000210 <memchr>
 801027e:	9a04      	ldr	r2, [sp, #16]
 8010280:	b9d8      	cbnz	r0, 80102ba <_svfiprintf_r+0xe6>
 8010282:	06d0      	lsls	r0, r2, #27
 8010284:	bf44      	itt	mi
 8010286:	2320      	movmi	r3, #32
 8010288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801028c:	0711      	lsls	r1, r2, #28
 801028e:	bf44      	itt	mi
 8010290:	232b      	movmi	r3, #43	; 0x2b
 8010292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010296:	f89a 3000 	ldrb.w	r3, [sl]
 801029a:	2b2a      	cmp	r3, #42	; 0x2a
 801029c:	d015      	beq.n	80102ca <_svfiprintf_r+0xf6>
 801029e:	9a07      	ldr	r2, [sp, #28]
 80102a0:	4654      	mov	r4, sl
 80102a2:	2000      	movs	r0, #0
 80102a4:	f04f 0c0a 	mov.w	ip, #10
 80102a8:	4621      	mov	r1, r4
 80102aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ae:	3b30      	subs	r3, #48	; 0x30
 80102b0:	2b09      	cmp	r3, #9
 80102b2:	d94e      	bls.n	8010352 <_svfiprintf_r+0x17e>
 80102b4:	b1b0      	cbz	r0, 80102e4 <_svfiprintf_r+0x110>
 80102b6:	9207      	str	r2, [sp, #28]
 80102b8:	e014      	b.n	80102e4 <_svfiprintf_r+0x110>
 80102ba:	eba0 0308 	sub.w	r3, r0, r8
 80102be:	fa09 f303 	lsl.w	r3, r9, r3
 80102c2:	4313      	orrs	r3, r2
 80102c4:	9304      	str	r3, [sp, #16]
 80102c6:	46a2      	mov	sl, r4
 80102c8:	e7d2      	b.n	8010270 <_svfiprintf_r+0x9c>
 80102ca:	9b03      	ldr	r3, [sp, #12]
 80102cc:	1d19      	adds	r1, r3, #4
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	9103      	str	r1, [sp, #12]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	bfbb      	ittet	lt
 80102d6:	425b      	neglt	r3, r3
 80102d8:	f042 0202 	orrlt.w	r2, r2, #2
 80102dc:	9307      	strge	r3, [sp, #28]
 80102de:	9307      	strlt	r3, [sp, #28]
 80102e0:	bfb8      	it	lt
 80102e2:	9204      	strlt	r2, [sp, #16]
 80102e4:	7823      	ldrb	r3, [r4, #0]
 80102e6:	2b2e      	cmp	r3, #46	; 0x2e
 80102e8:	d10c      	bne.n	8010304 <_svfiprintf_r+0x130>
 80102ea:	7863      	ldrb	r3, [r4, #1]
 80102ec:	2b2a      	cmp	r3, #42	; 0x2a
 80102ee:	d135      	bne.n	801035c <_svfiprintf_r+0x188>
 80102f0:	9b03      	ldr	r3, [sp, #12]
 80102f2:	1d1a      	adds	r2, r3, #4
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	9203      	str	r2, [sp, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bfb8      	it	lt
 80102fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010300:	3402      	adds	r4, #2
 8010302:	9305      	str	r3, [sp, #20]
 8010304:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103d0 <_svfiprintf_r+0x1fc>
 8010308:	7821      	ldrb	r1, [r4, #0]
 801030a:	2203      	movs	r2, #3
 801030c:	4650      	mov	r0, sl
 801030e:	f7ef ff7f 	bl	8000210 <memchr>
 8010312:	b140      	cbz	r0, 8010326 <_svfiprintf_r+0x152>
 8010314:	2340      	movs	r3, #64	; 0x40
 8010316:	eba0 000a 	sub.w	r0, r0, sl
 801031a:	fa03 f000 	lsl.w	r0, r3, r0
 801031e:	9b04      	ldr	r3, [sp, #16]
 8010320:	4303      	orrs	r3, r0
 8010322:	3401      	adds	r4, #1
 8010324:	9304      	str	r3, [sp, #16]
 8010326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801032a:	4826      	ldr	r0, [pc, #152]	; (80103c4 <_svfiprintf_r+0x1f0>)
 801032c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010330:	2206      	movs	r2, #6
 8010332:	f7ef ff6d 	bl	8000210 <memchr>
 8010336:	2800      	cmp	r0, #0
 8010338:	d038      	beq.n	80103ac <_svfiprintf_r+0x1d8>
 801033a:	4b23      	ldr	r3, [pc, #140]	; (80103c8 <_svfiprintf_r+0x1f4>)
 801033c:	bb1b      	cbnz	r3, 8010386 <_svfiprintf_r+0x1b2>
 801033e:	9b03      	ldr	r3, [sp, #12]
 8010340:	3307      	adds	r3, #7
 8010342:	f023 0307 	bic.w	r3, r3, #7
 8010346:	3308      	adds	r3, #8
 8010348:	9303      	str	r3, [sp, #12]
 801034a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034c:	4433      	add	r3, r6
 801034e:	9309      	str	r3, [sp, #36]	; 0x24
 8010350:	e767      	b.n	8010222 <_svfiprintf_r+0x4e>
 8010352:	fb0c 3202 	mla	r2, ip, r2, r3
 8010356:	460c      	mov	r4, r1
 8010358:	2001      	movs	r0, #1
 801035a:	e7a5      	b.n	80102a8 <_svfiprintf_r+0xd4>
 801035c:	2300      	movs	r3, #0
 801035e:	3401      	adds	r4, #1
 8010360:	9305      	str	r3, [sp, #20]
 8010362:	4619      	mov	r1, r3
 8010364:	f04f 0c0a 	mov.w	ip, #10
 8010368:	4620      	mov	r0, r4
 801036a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801036e:	3a30      	subs	r2, #48	; 0x30
 8010370:	2a09      	cmp	r2, #9
 8010372:	d903      	bls.n	801037c <_svfiprintf_r+0x1a8>
 8010374:	2b00      	cmp	r3, #0
 8010376:	d0c5      	beq.n	8010304 <_svfiprintf_r+0x130>
 8010378:	9105      	str	r1, [sp, #20]
 801037a:	e7c3      	b.n	8010304 <_svfiprintf_r+0x130>
 801037c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010380:	4604      	mov	r4, r0
 8010382:	2301      	movs	r3, #1
 8010384:	e7f0      	b.n	8010368 <_svfiprintf_r+0x194>
 8010386:	ab03      	add	r3, sp, #12
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	462a      	mov	r2, r5
 801038c:	4b0f      	ldr	r3, [pc, #60]	; (80103cc <_svfiprintf_r+0x1f8>)
 801038e:	a904      	add	r1, sp, #16
 8010390:	4638      	mov	r0, r7
 8010392:	f3af 8000 	nop.w
 8010396:	1c42      	adds	r2, r0, #1
 8010398:	4606      	mov	r6, r0
 801039a:	d1d6      	bne.n	801034a <_svfiprintf_r+0x176>
 801039c:	89ab      	ldrh	r3, [r5, #12]
 801039e:	065b      	lsls	r3, r3, #25
 80103a0:	f53f af2c 	bmi.w	80101fc <_svfiprintf_r+0x28>
 80103a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103a6:	b01d      	add	sp, #116	; 0x74
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ac:	ab03      	add	r3, sp, #12
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	462a      	mov	r2, r5
 80103b2:	4b06      	ldr	r3, [pc, #24]	; (80103cc <_svfiprintf_r+0x1f8>)
 80103b4:	a904      	add	r1, sp, #16
 80103b6:	4638      	mov	r0, r7
 80103b8:	f000 f9d4 	bl	8010764 <_printf_i>
 80103bc:	e7eb      	b.n	8010396 <_svfiprintf_r+0x1c2>
 80103be:	bf00      	nop
 80103c0:	08013c48 	.word	0x08013c48
 80103c4:	08013c52 	.word	0x08013c52
 80103c8:	00000000 	.word	0x00000000
 80103cc:	0801011d 	.word	0x0801011d
 80103d0:	08013c4e 	.word	0x08013c4e

080103d4 <__sfputc_r>:
 80103d4:	6893      	ldr	r3, [r2, #8]
 80103d6:	3b01      	subs	r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	b410      	push	{r4}
 80103dc:	6093      	str	r3, [r2, #8]
 80103de:	da08      	bge.n	80103f2 <__sfputc_r+0x1e>
 80103e0:	6994      	ldr	r4, [r2, #24]
 80103e2:	42a3      	cmp	r3, r4
 80103e4:	db01      	blt.n	80103ea <__sfputc_r+0x16>
 80103e6:	290a      	cmp	r1, #10
 80103e8:	d103      	bne.n	80103f2 <__sfputc_r+0x1e>
 80103ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ee:	f000 bb33 	b.w	8010a58 <__swbuf_r>
 80103f2:	6813      	ldr	r3, [r2, #0]
 80103f4:	1c58      	adds	r0, r3, #1
 80103f6:	6010      	str	r0, [r2, #0]
 80103f8:	7019      	strb	r1, [r3, #0]
 80103fa:	4608      	mov	r0, r1
 80103fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010400:	4770      	bx	lr

08010402 <__sfputs_r>:
 8010402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010404:	4606      	mov	r6, r0
 8010406:	460f      	mov	r7, r1
 8010408:	4614      	mov	r4, r2
 801040a:	18d5      	adds	r5, r2, r3
 801040c:	42ac      	cmp	r4, r5
 801040e:	d101      	bne.n	8010414 <__sfputs_r+0x12>
 8010410:	2000      	movs	r0, #0
 8010412:	e007      	b.n	8010424 <__sfputs_r+0x22>
 8010414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010418:	463a      	mov	r2, r7
 801041a:	4630      	mov	r0, r6
 801041c:	f7ff ffda 	bl	80103d4 <__sfputc_r>
 8010420:	1c43      	adds	r3, r0, #1
 8010422:	d1f3      	bne.n	801040c <__sfputs_r+0xa>
 8010424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010428 <_vfiprintf_r>:
 8010428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042c:	460d      	mov	r5, r1
 801042e:	b09d      	sub	sp, #116	; 0x74
 8010430:	4614      	mov	r4, r2
 8010432:	4698      	mov	r8, r3
 8010434:	4606      	mov	r6, r0
 8010436:	b118      	cbz	r0, 8010440 <_vfiprintf_r+0x18>
 8010438:	6983      	ldr	r3, [r0, #24]
 801043a:	b90b      	cbnz	r3, 8010440 <_vfiprintf_r+0x18>
 801043c:	f7ff fcd4 	bl	800fde8 <__sinit>
 8010440:	4b89      	ldr	r3, [pc, #548]	; (8010668 <_vfiprintf_r+0x240>)
 8010442:	429d      	cmp	r5, r3
 8010444:	d11b      	bne.n	801047e <_vfiprintf_r+0x56>
 8010446:	6875      	ldr	r5, [r6, #4]
 8010448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801044a:	07d9      	lsls	r1, r3, #31
 801044c:	d405      	bmi.n	801045a <_vfiprintf_r+0x32>
 801044e:	89ab      	ldrh	r3, [r5, #12]
 8010450:	059a      	lsls	r2, r3, #22
 8010452:	d402      	bmi.n	801045a <_vfiprintf_r+0x32>
 8010454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010456:	f7ff fd77 	bl	800ff48 <__retarget_lock_acquire_recursive>
 801045a:	89ab      	ldrh	r3, [r5, #12]
 801045c:	071b      	lsls	r3, r3, #28
 801045e:	d501      	bpl.n	8010464 <_vfiprintf_r+0x3c>
 8010460:	692b      	ldr	r3, [r5, #16]
 8010462:	b9eb      	cbnz	r3, 80104a0 <_vfiprintf_r+0x78>
 8010464:	4629      	mov	r1, r5
 8010466:	4630      	mov	r0, r6
 8010468:	f000 fb5a 	bl	8010b20 <__swsetup_r>
 801046c:	b1c0      	cbz	r0, 80104a0 <_vfiprintf_r+0x78>
 801046e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010470:	07dc      	lsls	r4, r3, #31
 8010472:	d50e      	bpl.n	8010492 <_vfiprintf_r+0x6a>
 8010474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010478:	b01d      	add	sp, #116	; 0x74
 801047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047e:	4b7b      	ldr	r3, [pc, #492]	; (801066c <_vfiprintf_r+0x244>)
 8010480:	429d      	cmp	r5, r3
 8010482:	d101      	bne.n	8010488 <_vfiprintf_r+0x60>
 8010484:	68b5      	ldr	r5, [r6, #8]
 8010486:	e7df      	b.n	8010448 <_vfiprintf_r+0x20>
 8010488:	4b79      	ldr	r3, [pc, #484]	; (8010670 <_vfiprintf_r+0x248>)
 801048a:	429d      	cmp	r5, r3
 801048c:	bf08      	it	eq
 801048e:	68f5      	ldreq	r5, [r6, #12]
 8010490:	e7da      	b.n	8010448 <_vfiprintf_r+0x20>
 8010492:	89ab      	ldrh	r3, [r5, #12]
 8010494:	0598      	lsls	r0, r3, #22
 8010496:	d4ed      	bmi.n	8010474 <_vfiprintf_r+0x4c>
 8010498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801049a:	f7ff fd56 	bl	800ff4a <__retarget_lock_release_recursive>
 801049e:	e7e9      	b.n	8010474 <_vfiprintf_r+0x4c>
 80104a0:	2300      	movs	r3, #0
 80104a2:	9309      	str	r3, [sp, #36]	; 0x24
 80104a4:	2320      	movs	r3, #32
 80104a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80104ae:	2330      	movs	r3, #48	; 0x30
 80104b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010674 <_vfiprintf_r+0x24c>
 80104b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104b8:	f04f 0901 	mov.w	r9, #1
 80104bc:	4623      	mov	r3, r4
 80104be:	469a      	mov	sl, r3
 80104c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104c4:	b10a      	cbz	r2, 80104ca <_vfiprintf_r+0xa2>
 80104c6:	2a25      	cmp	r2, #37	; 0x25
 80104c8:	d1f9      	bne.n	80104be <_vfiprintf_r+0x96>
 80104ca:	ebba 0b04 	subs.w	fp, sl, r4
 80104ce:	d00b      	beq.n	80104e8 <_vfiprintf_r+0xc0>
 80104d0:	465b      	mov	r3, fp
 80104d2:	4622      	mov	r2, r4
 80104d4:	4629      	mov	r1, r5
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ff93 	bl	8010402 <__sfputs_r>
 80104dc:	3001      	adds	r0, #1
 80104de:	f000 80aa 	beq.w	8010636 <_vfiprintf_r+0x20e>
 80104e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104e4:	445a      	add	r2, fp
 80104e6:	9209      	str	r2, [sp, #36]	; 0x24
 80104e8:	f89a 3000 	ldrb.w	r3, [sl]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f000 80a2 	beq.w	8010636 <_vfiprintf_r+0x20e>
 80104f2:	2300      	movs	r3, #0
 80104f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104fc:	f10a 0a01 	add.w	sl, sl, #1
 8010500:	9304      	str	r3, [sp, #16]
 8010502:	9307      	str	r3, [sp, #28]
 8010504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010508:	931a      	str	r3, [sp, #104]	; 0x68
 801050a:	4654      	mov	r4, sl
 801050c:	2205      	movs	r2, #5
 801050e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010512:	4858      	ldr	r0, [pc, #352]	; (8010674 <_vfiprintf_r+0x24c>)
 8010514:	f7ef fe7c 	bl	8000210 <memchr>
 8010518:	9a04      	ldr	r2, [sp, #16]
 801051a:	b9d8      	cbnz	r0, 8010554 <_vfiprintf_r+0x12c>
 801051c:	06d1      	lsls	r1, r2, #27
 801051e:	bf44      	itt	mi
 8010520:	2320      	movmi	r3, #32
 8010522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010526:	0713      	lsls	r3, r2, #28
 8010528:	bf44      	itt	mi
 801052a:	232b      	movmi	r3, #43	; 0x2b
 801052c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010530:	f89a 3000 	ldrb.w	r3, [sl]
 8010534:	2b2a      	cmp	r3, #42	; 0x2a
 8010536:	d015      	beq.n	8010564 <_vfiprintf_r+0x13c>
 8010538:	9a07      	ldr	r2, [sp, #28]
 801053a:	4654      	mov	r4, sl
 801053c:	2000      	movs	r0, #0
 801053e:	f04f 0c0a 	mov.w	ip, #10
 8010542:	4621      	mov	r1, r4
 8010544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010548:	3b30      	subs	r3, #48	; 0x30
 801054a:	2b09      	cmp	r3, #9
 801054c:	d94e      	bls.n	80105ec <_vfiprintf_r+0x1c4>
 801054e:	b1b0      	cbz	r0, 801057e <_vfiprintf_r+0x156>
 8010550:	9207      	str	r2, [sp, #28]
 8010552:	e014      	b.n	801057e <_vfiprintf_r+0x156>
 8010554:	eba0 0308 	sub.w	r3, r0, r8
 8010558:	fa09 f303 	lsl.w	r3, r9, r3
 801055c:	4313      	orrs	r3, r2
 801055e:	9304      	str	r3, [sp, #16]
 8010560:	46a2      	mov	sl, r4
 8010562:	e7d2      	b.n	801050a <_vfiprintf_r+0xe2>
 8010564:	9b03      	ldr	r3, [sp, #12]
 8010566:	1d19      	adds	r1, r3, #4
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	9103      	str	r1, [sp, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	bfbb      	ittet	lt
 8010570:	425b      	neglt	r3, r3
 8010572:	f042 0202 	orrlt.w	r2, r2, #2
 8010576:	9307      	strge	r3, [sp, #28]
 8010578:	9307      	strlt	r3, [sp, #28]
 801057a:	bfb8      	it	lt
 801057c:	9204      	strlt	r2, [sp, #16]
 801057e:	7823      	ldrb	r3, [r4, #0]
 8010580:	2b2e      	cmp	r3, #46	; 0x2e
 8010582:	d10c      	bne.n	801059e <_vfiprintf_r+0x176>
 8010584:	7863      	ldrb	r3, [r4, #1]
 8010586:	2b2a      	cmp	r3, #42	; 0x2a
 8010588:	d135      	bne.n	80105f6 <_vfiprintf_r+0x1ce>
 801058a:	9b03      	ldr	r3, [sp, #12]
 801058c:	1d1a      	adds	r2, r3, #4
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	9203      	str	r2, [sp, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	bfb8      	it	lt
 8010596:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801059a:	3402      	adds	r4, #2
 801059c:	9305      	str	r3, [sp, #20]
 801059e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010684 <_vfiprintf_r+0x25c>
 80105a2:	7821      	ldrb	r1, [r4, #0]
 80105a4:	2203      	movs	r2, #3
 80105a6:	4650      	mov	r0, sl
 80105a8:	f7ef fe32 	bl	8000210 <memchr>
 80105ac:	b140      	cbz	r0, 80105c0 <_vfiprintf_r+0x198>
 80105ae:	2340      	movs	r3, #64	; 0x40
 80105b0:	eba0 000a 	sub.w	r0, r0, sl
 80105b4:	fa03 f000 	lsl.w	r0, r3, r0
 80105b8:	9b04      	ldr	r3, [sp, #16]
 80105ba:	4303      	orrs	r3, r0
 80105bc:	3401      	adds	r4, #1
 80105be:	9304      	str	r3, [sp, #16]
 80105c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c4:	482c      	ldr	r0, [pc, #176]	; (8010678 <_vfiprintf_r+0x250>)
 80105c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105ca:	2206      	movs	r2, #6
 80105cc:	f7ef fe20 	bl	8000210 <memchr>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d03f      	beq.n	8010654 <_vfiprintf_r+0x22c>
 80105d4:	4b29      	ldr	r3, [pc, #164]	; (801067c <_vfiprintf_r+0x254>)
 80105d6:	bb1b      	cbnz	r3, 8010620 <_vfiprintf_r+0x1f8>
 80105d8:	9b03      	ldr	r3, [sp, #12]
 80105da:	3307      	adds	r3, #7
 80105dc:	f023 0307 	bic.w	r3, r3, #7
 80105e0:	3308      	adds	r3, #8
 80105e2:	9303      	str	r3, [sp, #12]
 80105e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105e6:	443b      	add	r3, r7
 80105e8:	9309      	str	r3, [sp, #36]	; 0x24
 80105ea:	e767      	b.n	80104bc <_vfiprintf_r+0x94>
 80105ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f0:	460c      	mov	r4, r1
 80105f2:	2001      	movs	r0, #1
 80105f4:	e7a5      	b.n	8010542 <_vfiprintf_r+0x11a>
 80105f6:	2300      	movs	r3, #0
 80105f8:	3401      	adds	r4, #1
 80105fa:	9305      	str	r3, [sp, #20]
 80105fc:	4619      	mov	r1, r3
 80105fe:	f04f 0c0a 	mov.w	ip, #10
 8010602:	4620      	mov	r0, r4
 8010604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010608:	3a30      	subs	r2, #48	; 0x30
 801060a:	2a09      	cmp	r2, #9
 801060c:	d903      	bls.n	8010616 <_vfiprintf_r+0x1ee>
 801060e:	2b00      	cmp	r3, #0
 8010610:	d0c5      	beq.n	801059e <_vfiprintf_r+0x176>
 8010612:	9105      	str	r1, [sp, #20]
 8010614:	e7c3      	b.n	801059e <_vfiprintf_r+0x176>
 8010616:	fb0c 2101 	mla	r1, ip, r1, r2
 801061a:	4604      	mov	r4, r0
 801061c:	2301      	movs	r3, #1
 801061e:	e7f0      	b.n	8010602 <_vfiprintf_r+0x1da>
 8010620:	ab03      	add	r3, sp, #12
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	462a      	mov	r2, r5
 8010626:	4b16      	ldr	r3, [pc, #88]	; (8010680 <_vfiprintf_r+0x258>)
 8010628:	a904      	add	r1, sp, #16
 801062a:	4630      	mov	r0, r6
 801062c:	f3af 8000 	nop.w
 8010630:	4607      	mov	r7, r0
 8010632:	1c78      	adds	r0, r7, #1
 8010634:	d1d6      	bne.n	80105e4 <_vfiprintf_r+0x1bc>
 8010636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010638:	07d9      	lsls	r1, r3, #31
 801063a:	d405      	bmi.n	8010648 <_vfiprintf_r+0x220>
 801063c:	89ab      	ldrh	r3, [r5, #12]
 801063e:	059a      	lsls	r2, r3, #22
 8010640:	d402      	bmi.n	8010648 <_vfiprintf_r+0x220>
 8010642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010644:	f7ff fc81 	bl	800ff4a <__retarget_lock_release_recursive>
 8010648:	89ab      	ldrh	r3, [r5, #12]
 801064a:	065b      	lsls	r3, r3, #25
 801064c:	f53f af12 	bmi.w	8010474 <_vfiprintf_r+0x4c>
 8010650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010652:	e711      	b.n	8010478 <_vfiprintf_r+0x50>
 8010654:	ab03      	add	r3, sp, #12
 8010656:	9300      	str	r3, [sp, #0]
 8010658:	462a      	mov	r2, r5
 801065a:	4b09      	ldr	r3, [pc, #36]	; (8010680 <_vfiprintf_r+0x258>)
 801065c:	a904      	add	r1, sp, #16
 801065e:	4630      	mov	r0, r6
 8010660:	f000 f880 	bl	8010764 <_printf_i>
 8010664:	e7e4      	b.n	8010630 <_vfiprintf_r+0x208>
 8010666:	bf00      	nop
 8010668:	08013c08 	.word	0x08013c08
 801066c:	08013c28 	.word	0x08013c28
 8010670:	08013be8 	.word	0x08013be8
 8010674:	08013c48 	.word	0x08013c48
 8010678:	08013c52 	.word	0x08013c52
 801067c:	00000000 	.word	0x00000000
 8010680:	08010403 	.word	0x08010403
 8010684:	08013c4e 	.word	0x08013c4e

08010688 <_printf_common>:
 8010688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801068c:	4616      	mov	r6, r2
 801068e:	4699      	mov	r9, r3
 8010690:	688a      	ldr	r2, [r1, #8]
 8010692:	690b      	ldr	r3, [r1, #16]
 8010694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010698:	4293      	cmp	r3, r2
 801069a:	bfb8      	it	lt
 801069c:	4613      	movlt	r3, r2
 801069e:	6033      	str	r3, [r6, #0]
 80106a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80106a4:	4607      	mov	r7, r0
 80106a6:	460c      	mov	r4, r1
 80106a8:	b10a      	cbz	r2, 80106ae <_printf_common+0x26>
 80106aa:	3301      	adds	r3, #1
 80106ac:	6033      	str	r3, [r6, #0]
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	0699      	lsls	r1, r3, #26
 80106b2:	bf42      	ittt	mi
 80106b4:	6833      	ldrmi	r3, [r6, #0]
 80106b6:	3302      	addmi	r3, #2
 80106b8:	6033      	strmi	r3, [r6, #0]
 80106ba:	6825      	ldr	r5, [r4, #0]
 80106bc:	f015 0506 	ands.w	r5, r5, #6
 80106c0:	d106      	bne.n	80106d0 <_printf_common+0x48>
 80106c2:	f104 0a19 	add.w	sl, r4, #25
 80106c6:	68e3      	ldr	r3, [r4, #12]
 80106c8:	6832      	ldr	r2, [r6, #0]
 80106ca:	1a9b      	subs	r3, r3, r2
 80106cc:	42ab      	cmp	r3, r5
 80106ce:	dc26      	bgt.n	801071e <_printf_common+0x96>
 80106d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106d4:	1e13      	subs	r3, r2, #0
 80106d6:	6822      	ldr	r2, [r4, #0]
 80106d8:	bf18      	it	ne
 80106da:	2301      	movne	r3, #1
 80106dc:	0692      	lsls	r2, r2, #26
 80106de:	d42b      	bmi.n	8010738 <_printf_common+0xb0>
 80106e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106e4:	4649      	mov	r1, r9
 80106e6:	4638      	mov	r0, r7
 80106e8:	47c0      	blx	r8
 80106ea:	3001      	adds	r0, #1
 80106ec:	d01e      	beq.n	801072c <_printf_common+0xa4>
 80106ee:	6823      	ldr	r3, [r4, #0]
 80106f0:	68e5      	ldr	r5, [r4, #12]
 80106f2:	6832      	ldr	r2, [r6, #0]
 80106f4:	f003 0306 	and.w	r3, r3, #6
 80106f8:	2b04      	cmp	r3, #4
 80106fa:	bf08      	it	eq
 80106fc:	1aad      	subeq	r5, r5, r2
 80106fe:	68a3      	ldr	r3, [r4, #8]
 8010700:	6922      	ldr	r2, [r4, #16]
 8010702:	bf0c      	ite	eq
 8010704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010708:	2500      	movne	r5, #0
 801070a:	4293      	cmp	r3, r2
 801070c:	bfc4      	itt	gt
 801070e:	1a9b      	subgt	r3, r3, r2
 8010710:	18ed      	addgt	r5, r5, r3
 8010712:	2600      	movs	r6, #0
 8010714:	341a      	adds	r4, #26
 8010716:	42b5      	cmp	r5, r6
 8010718:	d11a      	bne.n	8010750 <_printf_common+0xc8>
 801071a:	2000      	movs	r0, #0
 801071c:	e008      	b.n	8010730 <_printf_common+0xa8>
 801071e:	2301      	movs	r3, #1
 8010720:	4652      	mov	r2, sl
 8010722:	4649      	mov	r1, r9
 8010724:	4638      	mov	r0, r7
 8010726:	47c0      	blx	r8
 8010728:	3001      	adds	r0, #1
 801072a:	d103      	bne.n	8010734 <_printf_common+0xac>
 801072c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010734:	3501      	adds	r5, #1
 8010736:	e7c6      	b.n	80106c6 <_printf_common+0x3e>
 8010738:	18e1      	adds	r1, r4, r3
 801073a:	1c5a      	adds	r2, r3, #1
 801073c:	2030      	movs	r0, #48	; 0x30
 801073e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010742:	4422      	add	r2, r4
 8010744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801074c:	3302      	adds	r3, #2
 801074e:	e7c7      	b.n	80106e0 <_printf_common+0x58>
 8010750:	2301      	movs	r3, #1
 8010752:	4622      	mov	r2, r4
 8010754:	4649      	mov	r1, r9
 8010756:	4638      	mov	r0, r7
 8010758:	47c0      	blx	r8
 801075a:	3001      	adds	r0, #1
 801075c:	d0e6      	beq.n	801072c <_printf_common+0xa4>
 801075e:	3601      	adds	r6, #1
 8010760:	e7d9      	b.n	8010716 <_printf_common+0x8e>
	...

08010764 <_printf_i>:
 8010764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010768:	7e0f      	ldrb	r7, [r1, #24]
 801076a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801076c:	2f78      	cmp	r7, #120	; 0x78
 801076e:	4691      	mov	r9, r2
 8010770:	4680      	mov	r8, r0
 8010772:	460c      	mov	r4, r1
 8010774:	469a      	mov	sl, r3
 8010776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801077a:	d807      	bhi.n	801078c <_printf_i+0x28>
 801077c:	2f62      	cmp	r7, #98	; 0x62
 801077e:	d80a      	bhi.n	8010796 <_printf_i+0x32>
 8010780:	2f00      	cmp	r7, #0
 8010782:	f000 80d8 	beq.w	8010936 <_printf_i+0x1d2>
 8010786:	2f58      	cmp	r7, #88	; 0x58
 8010788:	f000 80a3 	beq.w	80108d2 <_printf_i+0x16e>
 801078c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010794:	e03a      	b.n	801080c <_printf_i+0xa8>
 8010796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801079a:	2b15      	cmp	r3, #21
 801079c:	d8f6      	bhi.n	801078c <_printf_i+0x28>
 801079e:	a101      	add	r1, pc, #4	; (adr r1, 80107a4 <_printf_i+0x40>)
 80107a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80107a4:	080107fd 	.word	0x080107fd
 80107a8:	08010811 	.word	0x08010811
 80107ac:	0801078d 	.word	0x0801078d
 80107b0:	0801078d 	.word	0x0801078d
 80107b4:	0801078d 	.word	0x0801078d
 80107b8:	0801078d 	.word	0x0801078d
 80107bc:	08010811 	.word	0x08010811
 80107c0:	0801078d 	.word	0x0801078d
 80107c4:	0801078d 	.word	0x0801078d
 80107c8:	0801078d 	.word	0x0801078d
 80107cc:	0801078d 	.word	0x0801078d
 80107d0:	0801091d 	.word	0x0801091d
 80107d4:	08010841 	.word	0x08010841
 80107d8:	080108ff 	.word	0x080108ff
 80107dc:	0801078d 	.word	0x0801078d
 80107e0:	0801078d 	.word	0x0801078d
 80107e4:	0801093f 	.word	0x0801093f
 80107e8:	0801078d 	.word	0x0801078d
 80107ec:	08010841 	.word	0x08010841
 80107f0:	0801078d 	.word	0x0801078d
 80107f4:	0801078d 	.word	0x0801078d
 80107f8:	08010907 	.word	0x08010907
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	1d1a      	adds	r2, r3, #4
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	602a      	str	r2, [r5, #0]
 8010804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801080c:	2301      	movs	r3, #1
 801080e:	e0a3      	b.n	8010958 <_printf_i+0x1f4>
 8010810:	6820      	ldr	r0, [r4, #0]
 8010812:	6829      	ldr	r1, [r5, #0]
 8010814:	0606      	lsls	r6, r0, #24
 8010816:	f101 0304 	add.w	r3, r1, #4
 801081a:	d50a      	bpl.n	8010832 <_printf_i+0xce>
 801081c:	680e      	ldr	r6, [r1, #0]
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	2e00      	cmp	r6, #0
 8010822:	da03      	bge.n	801082c <_printf_i+0xc8>
 8010824:	232d      	movs	r3, #45	; 0x2d
 8010826:	4276      	negs	r6, r6
 8010828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801082c:	485e      	ldr	r0, [pc, #376]	; (80109a8 <_printf_i+0x244>)
 801082e:	230a      	movs	r3, #10
 8010830:	e019      	b.n	8010866 <_printf_i+0x102>
 8010832:	680e      	ldr	r6, [r1, #0]
 8010834:	602b      	str	r3, [r5, #0]
 8010836:	f010 0f40 	tst.w	r0, #64	; 0x40
 801083a:	bf18      	it	ne
 801083c:	b236      	sxthne	r6, r6
 801083e:	e7ef      	b.n	8010820 <_printf_i+0xbc>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	6820      	ldr	r0, [r4, #0]
 8010844:	1d19      	adds	r1, r3, #4
 8010846:	6029      	str	r1, [r5, #0]
 8010848:	0601      	lsls	r1, r0, #24
 801084a:	d501      	bpl.n	8010850 <_printf_i+0xec>
 801084c:	681e      	ldr	r6, [r3, #0]
 801084e:	e002      	b.n	8010856 <_printf_i+0xf2>
 8010850:	0646      	lsls	r6, r0, #25
 8010852:	d5fb      	bpl.n	801084c <_printf_i+0xe8>
 8010854:	881e      	ldrh	r6, [r3, #0]
 8010856:	4854      	ldr	r0, [pc, #336]	; (80109a8 <_printf_i+0x244>)
 8010858:	2f6f      	cmp	r7, #111	; 0x6f
 801085a:	bf0c      	ite	eq
 801085c:	2308      	moveq	r3, #8
 801085e:	230a      	movne	r3, #10
 8010860:	2100      	movs	r1, #0
 8010862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010866:	6865      	ldr	r5, [r4, #4]
 8010868:	60a5      	str	r5, [r4, #8]
 801086a:	2d00      	cmp	r5, #0
 801086c:	bfa2      	ittt	ge
 801086e:	6821      	ldrge	r1, [r4, #0]
 8010870:	f021 0104 	bicge.w	r1, r1, #4
 8010874:	6021      	strge	r1, [r4, #0]
 8010876:	b90e      	cbnz	r6, 801087c <_printf_i+0x118>
 8010878:	2d00      	cmp	r5, #0
 801087a:	d04d      	beq.n	8010918 <_printf_i+0x1b4>
 801087c:	4615      	mov	r5, r2
 801087e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010882:	fb03 6711 	mls	r7, r3, r1, r6
 8010886:	5dc7      	ldrb	r7, [r0, r7]
 8010888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801088c:	4637      	mov	r7, r6
 801088e:	42bb      	cmp	r3, r7
 8010890:	460e      	mov	r6, r1
 8010892:	d9f4      	bls.n	801087e <_printf_i+0x11a>
 8010894:	2b08      	cmp	r3, #8
 8010896:	d10b      	bne.n	80108b0 <_printf_i+0x14c>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	07de      	lsls	r6, r3, #31
 801089c:	d508      	bpl.n	80108b0 <_printf_i+0x14c>
 801089e:	6923      	ldr	r3, [r4, #16]
 80108a0:	6861      	ldr	r1, [r4, #4]
 80108a2:	4299      	cmp	r1, r3
 80108a4:	bfde      	ittt	le
 80108a6:	2330      	movle	r3, #48	; 0x30
 80108a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80108ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80108b0:	1b52      	subs	r2, r2, r5
 80108b2:	6122      	str	r2, [r4, #16]
 80108b4:	f8cd a000 	str.w	sl, [sp]
 80108b8:	464b      	mov	r3, r9
 80108ba:	aa03      	add	r2, sp, #12
 80108bc:	4621      	mov	r1, r4
 80108be:	4640      	mov	r0, r8
 80108c0:	f7ff fee2 	bl	8010688 <_printf_common>
 80108c4:	3001      	adds	r0, #1
 80108c6:	d14c      	bne.n	8010962 <_printf_i+0x1fe>
 80108c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108cc:	b004      	add	sp, #16
 80108ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d2:	4835      	ldr	r0, [pc, #212]	; (80109a8 <_printf_i+0x244>)
 80108d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108d8:	6829      	ldr	r1, [r5, #0]
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80108e0:	6029      	str	r1, [r5, #0]
 80108e2:	061d      	lsls	r5, r3, #24
 80108e4:	d514      	bpl.n	8010910 <_printf_i+0x1ac>
 80108e6:	07df      	lsls	r7, r3, #31
 80108e8:	bf44      	itt	mi
 80108ea:	f043 0320 	orrmi.w	r3, r3, #32
 80108ee:	6023      	strmi	r3, [r4, #0]
 80108f0:	b91e      	cbnz	r6, 80108fa <_printf_i+0x196>
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	f023 0320 	bic.w	r3, r3, #32
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	2310      	movs	r3, #16
 80108fc:	e7b0      	b.n	8010860 <_printf_i+0xfc>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	f043 0320 	orr.w	r3, r3, #32
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	2378      	movs	r3, #120	; 0x78
 8010908:	4828      	ldr	r0, [pc, #160]	; (80109ac <_printf_i+0x248>)
 801090a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801090e:	e7e3      	b.n	80108d8 <_printf_i+0x174>
 8010910:	0659      	lsls	r1, r3, #25
 8010912:	bf48      	it	mi
 8010914:	b2b6      	uxthmi	r6, r6
 8010916:	e7e6      	b.n	80108e6 <_printf_i+0x182>
 8010918:	4615      	mov	r5, r2
 801091a:	e7bb      	b.n	8010894 <_printf_i+0x130>
 801091c:	682b      	ldr	r3, [r5, #0]
 801091e:	6826      	ldr	r6, [r4, #0]
 8010920:	6961      	ldr	r1, [r4, #20]
 8010922:	1d18      	adds	r0, r3, #4
 8010924:	6028      	str	r0, [r5, #0]
 8010926:	0635      	lsls	r5, r6, #24
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	d501      	bpl.n	8010930 <_printf_i+0x1cc>
 801092c:	6019      	str	r1, [r3, #0]
 801092e:	e002      	b.n	8010936 <_printf_i+0x1d2>
 8010930:	0670      	lsls	r0, r6, #25
 8010932:	d5fb      	bpl.n	801092c <_printf_i+0x1c8>
 8010934:	8019      	strh	r1, [r3, #0]
 8010936:	2300      	movs	r3, #0
 8010938:	6123      	str	r3, [r4, #16]
 801093a:	4615      	mov	r5, r2
 801093c:	e7ba      	b.n	80108b4 <_printf_i+0x150>
 801093e:	682b      	ldr	r3, [r5, #0]
 8010940:	1d1a      	adds	r2, r3, #4
 8010942:	602a      	str	r2, [r5, #0]
 8010944:	681d      	ldr	r5, [r3, #0]
 8010946:	6862      	ldr	r2, [r4, #4]
 8010948:	2100      	movs	r1, #0
 801094a:	4628      	mov	r0, r5
 801094c:	f7ef fc60 	bl	8000210 <memchr>
 8010950:	b108      	cbz	r0, 8010956 <_printf_i+0x1f2>
 8010952:	1b40      	subs	r0, r0, r5
 8010954:	6060      	str	r0, [r4, #4]
 8010956:	6863      	ldr	r3, [r4, #4]
 8010958:	6123      	str	r3, [r4, #16]
 801095a:	2300      	movs	r3, #0
 801095c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010960:	e7a8      	b.n	80108b4 <_printf_i+0x150>
 8010962:	6923      	ldr	r3, [r4, #16]
 8010964:	462a      	mov	r2, r5
 8010966:	4649      	mov	r1, r9
 8010968:	4640      	mov	r0, r8
 801096a:	47d0      	blx	sl
 801096c:	3001      	adds	r0, #1
 801096e:	d0ab      	beq.n	80108c8 <_printf_i+0x164>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	079b      	lsls	r3, r3, #30
 8010974:	d413      	bmi.n	801099e <_printf_i+0x23a>
 8010976:	68e0      	ldr	r0, [r4, #12]
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	4298      	cmp	r0, r3
 801097c:	bfb8      	it	lt
 801097e:	4618      	movlt	r0, r3
 8010980:	e7a4      	b.n	80108cc <_printf_i+0x168>
 8010982:	2301      	movs	r3, #1
 8010984:	4632      	mov	r2, r6
 8010986:	4649      	mov	r1, r9
 8010988:	4640      	mov	r0, r8
 801098a:	47d0      	blx	sl
 801098c:	3001      	adds	r0, #1
 801098e:	d09b      	beq.n	80108c8 <_printf_i+0x164>
 8010990:	3501      	adds	r5, #1
 8010992:	68e3      	ldr	r3, [r4, #12]
 8010994:	9903      	ldr	r1, [sp, #12]
 8010996:	1a5b      	subs	r3, r3, r1
 8010998:	42ab      	cmp	r3, r5
 801099a:	dcf2      	bgt.n	8010982 <_printf_i+0x21e>
 801099c:	e7eb      	b.n	8010976 <_printf_i+0x212>
 801099e:	2500      	movs	r5, #0
 80109a0:	f104 0619 	add.w	r6, r4, #25
 80109a4:	e7f5      	b.n	8010992 <_printf_i+0x22e>
 80109a6:	bf00      	nop
 80109a8:	08013c59 	.word	0x08013c59
 80109ac:	08013c6a 	.word	0x08013c6a

080109b0 <_sbrk_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	4d06      	ldr	r5, [pc, #24]	; (80109cc <_sbrk_r+0x1c>)
 80109b4:	2300      	movs	r3, #0
 80109b6:	4604      	mov	r4, r0
 80109b8:	4608      	mov	r0, r1
 80109ba:	602b      	str	r3, [r5, #0]
 80109bc:	f7f0 f968 	bl	8000c90 <_sbrk>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d102      	bne.n	80109ca <_sbrk_r+0x1a>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	b103      	cbz	r3, 80109ca <_sbrk_r+0x1a>
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	20008940 	.word	0x20008940

080109d0 <__sread>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	460c      	mov	r4, r1
 80109d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d8:	f000 fa9e 	bl	8010f18 <_read_r>
 80109dc:	2800      	cmp	r0, #0
 80109de:	bfab      	itete	ge
 80109e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109e2:	89a3      	ldrhlt	r3, [r4, #12]
 80109e4:	181b      	addge	r3, r3, r0
 80109e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109ea:	bfac      	ite	ge
 80109ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80109ee:	81a3      	strhlt	r3, [r4, #12]
 80109f0:	bd10      	pop	{r4, pc}

080109f2 <__swrite>:
 80109f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f6:	461f      	mov	r7, r3
 80109f8:	898b      	ldrh	r3, [r1, #12]
 80109fa:	05db      	lsls	r3, r3, #23
 80109fc:	4605      	mov	r5, r0
 80109fe:	460c      	mov	r4, r1
 8010a00:	4616      	mov	r6, r2
 8010a02:	d505      	bpl.n	8010a10 <__swrite+0x1e>
 8010a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a08:	2302      	movs	r3, #2
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f000 f9d0 	bl	8010db0 <_lseek_r>
 8010a10:	89a3      	ldrh	r3, [r4, #12]
 8010a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a1a:	81a3      	strh	r3, [r4, #12]
 8010a1c:	4632      	mov	r2, r6
 8010a1e:	463b      	mov	r3, r7
 8010a20:	4628      	mov	r0, r5
 8010a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a26:	f000 b869 	b.w	8010afc <_write_r>

08010a2a <__sseek>:
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a32:	f000 f9bd 	bl	8010db0 <_lseek_r>
 8010a36:	1c43      	adds	r3, r0, #1
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	bf15      	itete	ne
 8010a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a46:	81a3      	strheq	r3, [r4, #12]
 8010a48:	bf18      	it	ne
 8010a4a:	81a3      	strhne	r3, [r4, #12]
 8010a4c:	bd10      	pop	{r4, pc}

08010a4e <__sclose>:
 8010a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a52:	f000 b8db 	b.w	8010c0c <_close_r>
	...

08010a58 <__swbuf_r>:
 8010a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a5a:	460e      	mov	r6, r1
 8010a5c:	4614      	mov	r4, r2
 8010a5e:	4605      	mov	r5, r0
 8010a60:	b118      	cbz	r0, 8010a6a <__swbuf_r+0x12>
 8010a62:	6983      	ldr	r3, [r0, #24]
 8010a64:	b90b      	cbnz	r3, 8010a6a <__swbuf_r+0x12>
 8010a66:	f7ff f9bf 	bl	800fde8 <__sinit>
 8010a6a:	4b21      	ldr	r3, [pc, #132]	; (8010af0 <__swbuf_r+0x98>)
 8010a6c:	429c      	cmp	r4, r3
 8010a6e:	d12b      	bne.n	8010ac8 <__swbuf_r+0x70>
 8010a70:	686c      	ldr	r4, [r5, #4]
 8010a72:	69a3      	ldr	r3, [r4, #24]
 8010a74:	60a3      	str	r3, [r4, #8]
 8010a76:	89a3      	ldrh	r3, [r4, #12]
 8010a78:	071a      	lsls	r2, r3, #28
 8010a7a:	d52f      	bpl.n	8010adc <__swbuf_r+0x84>
 8010a7c:	6923      	ldr	r3, [r4, #16]
 8010a7e:	b36b      	cbz	r3, 8010adc <__swbuf_r+0x84>
 8010a80:	6923      	ldr	r3, [r4, #16]
 8010a82:	6820      	ldr	r0, [r4, #0]
 8010a84:	1ac0      	subs	r0, r0, r3
 8010a86:	6963      	ldr	r3, [r4, #20]
 8010a88:	b2f6      	uxtb	r6, r6
 8010a8a:	4283      	cmp	r3, r0
 8010a8c:	4637      	mov	r7, r6
 8010a8e:	dc04      	bgt.n	8010a9a <__swbuf_r+0x42>
 8010a90:	4621      	mov	r1, r4
 8010a92:	4628      	mov	r0, r5
 8010a94:	f000 f950 	bl	8010d38 <_fflush_r>
 8010a98:	bb30      	cbnz	r0, 8010ae8 <__swbuf_r+0x90>
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	60a3      	str	r3, [r4, #8]
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	1c5a      	adds	r2, r3, #1
 8010aa4:	6022      	str	r2, [r4, #0]
 8010aa6:	701e      	strb	r6, [r3, #0]
 8010aa8:	6963      	ldr	r3, [r4, #20]
 8010aaa:	3001      	adds	r0, #1
 8010aac:	4283      	cmp	r3, r0
 8010aae:	d004      	beq.n	8010aba <__swbuf_r+0x62>
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	07db      	lsls	r3, r3, #31
 8010ab4:	d506      	bpl.n	8010ac4 <__swbuf_r+0x6c>
 8010ab6:	2e0a      	cmp	r6, #10
 8010ab8:	d104      	bne.n	8010ac4 <__swbuf_r+0x6c>
 8010aba:	4621      	mov	r1, r4
 8010abc:	4628      	mov	r0, r5
 8010abe:	f000 f93b 	bl	8010d38 <_fflush_r>
 8010ac2:	b988      	cbnz	r0, 8010ae8 <__swbuf_r+0x90>
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ac8:	4b0a      	ldr	r3, [pc, #40]	; (8010af4 <__swbuf_r+0x9c>)
 8010aca:	429c      	cmp	r4, r3
 8010acc:	d101      	bne.n	8010ad2 <__swbuf_r+0x7a>
 8010ace:	68ac      	ldr	r4, [r5, #8]
 8010ad0:	e7cf      	b.n	8010a72 <__swbuf_r+0x1a>
 8010ad2:	4b09      	ldr	r3, [pc, #36]	; (8010af8 <__swbuf_r+0xa0>)
 8010ad4:	429c      	cmp	r4, r3
 8010ad6:	bf08      	it	eq
 8010ad8:	68ec      	ldreq	r4, [r5, #12]
 8010ada:	e7ca      	b.n	8010a72 <__swbuf_r+0x1a>
 8010adc:	4621      	mov	r1, r4
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f000 f81e 	bl	8010b20 <__swsetup_r>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	d0cb      	beq.n	8010a80 <__swbuf_r+0x28>
 8010ae8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010aec:	e7ea      	b.n	8010ac4 <__swbuf_r+0x6c>
 8010aee:	bf00      	nop
 8010af0:	08013c08 	.word	0x08013c08
 8010af4:	08013c28 	.word	0x08013c28
 8010af8:	08013be8 	.word	0x08013be8

08010afc <_write_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d07      	ldr	r5, [pc, #28]	; (8010b1c <_write_r+0x20>)
 8010b00:	4604      	mov	r4, r0
 8010b02:	4608      	mov	r0, r1
 8010b04:	4611      	mov	r1, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	602a      	str	r2, [r5, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	f7f0 f86f 	bl	8000bee <_write>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_write_r+0x1e>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_write_r+0x1e>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	20008940 	.word	0x20008940

08010b20 <__swsetup_r>:
 8010b20:	4b32      	ldr	r3, [pc, #200]	; (8010bec <__swsetup_r+0xcc>)
 8010b22:	b570      	push	{r4, r5, r6, lr}
 8010b24:	681d      	ldr	r5, [r3, #0]
 8010b26:	4606      	mov	r6, r0
 8010b28:	460c      	mov	r4, r1
 8010b2a:	b125      	cbz	r5, 8010b36 <__swsetup_r+0x16>
 8010b2c:	69ab      	ldr	r3, [r5, #24]
 8010b2e:	b913      	cbnz	r3, 8010b36 <__swsetup_r+0x16>
 8010b30:	4628      	mov	r0, r5
 8010b32:	f7ff f959 	bl	800fde8 <__sinit>
 8010b36:	4b2e      	ldr	r3, [pc, #184]	; (8010bf0 <__swsetup_r+0xd0>)
 8010b38:	429c      	cmp	r4, r3
 8010b3a:	d10f      	bne.n	8010b5c <__swsetup_r+0x3c>
 8010b3c:	686c      	ldr	r4, [r5, #4]
 8010b3e:	89a3      	ldrh	r3, [r4, #12]
 8010b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b44:	0719      	lsls	r1, r3, #28
 8010b46:	d42c      	bmi.n	8010ba2 <__swsetup_r+0x82>
 8010b48:	06dd      	lsls	r5, r3, #27
 8010b4a:	d411      	bmi.n	8010b70 <__swsetup_r+0x50>
 8010b4c:	2309      	movs	r3, #9
 8010b4e:	6033      	str	r3, [r6, #0]
 8010b50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b54:	81a3      	strh	r3, [r4, #12]
 8010b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b5a:	e03e      	b.n	8010bda <__swsetup_r+0xba>
 8010b5c:	4b25      	ldr	r3, [pc, #148]	; (8010bf4 <__swsetup_r+0xd4>)
 8010b5e:	429c      	cmp	r4, r3
 8010b60:	d101      	bne.n	8010b66 <__swsetup_r+0x46>
 8010b62:	68ac      	ldr	r4, [r5, #8]
 8010b64:	e7eb      	b.n	8010b3e <__swsetup_r+0x1e>
 8010b66:	4b24      	ldr	r3, [pc, #144]	; (8010bf8 <__swsetup_r+0xd8>)
 8010b68:	429c      	cmp	r4, r3
 8010b6a:	bf08      	it	eq
 8010b6c:	68ec      	ldreq	r4, [r5, #12]
 8010b6e:	e7e6      	b.n	8010b3e <__swsetup_r+0x1e>
 8010b70:	0758      	lsls	r0, r3, #29
 8010b72:	d512      	bpl.n	8010b9a <__swsetup_r+0x7a>
 8010b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b76:	b141      	cbz	r1, 8010b8a <__swsetup_r+0x6a>
 8010b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b7c:	4299      	cmp	r1, r3
 8010b7e:	d002      	beq.n	8010b86 <__swsetup_r+0x66>
 8010b80:	4630      	mov	r0, r6
 8010b82:	f7ff f9eb 	bl	800ff5c <_free_r>
 8010b86:	2300      	movs	r3, #0
 8010b88:	6363      	str	r3, [r4, #52]	; 0x34
 8010b8a:	89a3      	ldrh	r3, [r4, #12]
 8010b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b90:	81a3      	strh	r3, [r4, #12]
 8010b92:	2300      	movs	r3, #0
 8010b94:	6063      	str	r3, [r4, #4]
 8010b96:	6923      	ldr	r3, [r4, #16]
 8010b98:	6023      	str	r3, [r4, #0]
 8010b9a:	89a3      	ldrh	r3, [r4, #12]
 8010b9c:	f043 0308 	orr.w	r3, r3, #8
 8010ba0:	81a3      	strh	r3, [r4, #12]
 8010ba2:	6923      	ldr	r3, [r4, #16]
 8010ba4:	b94b      	cbnz	r3, 8010bba <__swsetup_r+0x9a>
 8010ba6:	89a3      	ldrh	r3, [r4, #12]
 8010ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bb0:	d003      	beq.n	8010bba <__swsetup_r+0x9a>
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f000 f933 	bl	8010e20 <__smakebuf_r>
 8010bba:	89a0      	ldrh	r0, [r4, #12]
 8010bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bc0:	f010 0301 	ands.w	r3, r0, #1
 8010bc4:	d00a      	beq.n	8010bdc <__swsetup_r+0xbc>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	60a3      	str	r3, [r4, #8]
 8010bca:	6963      	ldr	r3, [r4, #20]
 8010bcc:	425b      	negs	r3, r3
 8010bce:	61a3      	str	r3, [r4, #24]
 8010bd0:	6923      	ldr	r3, [r4, #16]
 8010bd2:	b943      	cbnz	r3, 8010be6 <__swsetup_r+0xc6>
 8010bd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bd8:	d1ba      	bne.n	8010b50 <__swsetup_r+0x30>
 8010bda:	bd70      	pop	{r4, r5, r6, pc}
 8010bdc:	0781      	lsls	r1, r0, #30
 8010bde:	bf58      	it	pl
 8010be0:	6963      	ldrpl	r3, [r4, #20]
 8010be2:	60a3      	str	r3, [r4, #8]
 8010be4:	e7f4      	b.n	8010bd0 <__swsetup_r+0xb0>
 8010be6:	2000      	movs	r0, #0
 8010be8:	e7f7      	b.n	8010bda <__swsetup_r+0xba>
 8010bea:	bf00      	nop
 8010bec:	2000002c 	.word	0x2000002c
 8010bf0:	08013c08 	.word	0x08013c08
 8010bf4:	08013c28 	.word	0x08013c28
 8010bf8:	08013be8 	.word	0x08013be8

08010bfc <abort>:
 8010bfc:	b508      	push	{r3, lr}
 8010bfe:	2006      	movs	r0, #6
 8010c00:	f000 f9c4 	bl	8010f8c <raise>
 8010c04:	2001      	movs	r0, #1
 8010c06:	f7ef ffcb 	bl	8000ba0 <_exit>
	...

08010c0c <_close_r>:
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	4d06      	ldr	r5, [pc, #24]	; (8010c28 <_close_r+0x1c>)
 8010c10:	2300      	movs	r3, #0
 8010c12:	4604      	mov	r4, r0
 8010c14:	4608      	mov	r0, r1
 8010c16:	602b      	str	r3, [r5, #0]
 8010c18:	f7f0 f805 	bl	8000c26 <_close>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_close_r+0x1a>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_close_r+0x1a>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20008940 	.word	0x20008940

08010c2c <__sflush_r>:
 8010c2c:	898a      	ldrh	r2, [r1, #12]
 8010c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c32:	4605      	mov	r5, r0
 8010c34:	0710      	lsls	r0, r2, #28
 8010c36:	460c      	mov	r4, r1
 8010c38:	d458      	bmi.n	8010cec <__sflush_r+0xc0>
 8010c3a:	684b      	ldr	r3, [r1, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dc05      	bgt.n	8010c4c <__sflush_r+0x20>
 8010c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	dc02      	bgt.n	8010c4c <__sflush_r+0x20>
 8010c46:	2000      	movs	r0, #0
 8010c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c4e:	2e00      	cmp	r6, #0
 8010c50:	d0f9      	beq.n	8010c46 <__sflush_r+0x1a>
 8010c52:	2300      	movs	r3, #0
 8010c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c58:	682f      	ldr	r7, [r5, #0]
 8010c5a:	602b      	str	r3, [r5, #0]
 8010c5c:	d032      	beq.n	8010cc4 <__sflush_r+0x98>
 8010c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c60:	89a3      	ldrh	r3, [r4, #12]
 8010c62:	075a      	lsls	r2, r3, #29
 8010c64:	d505      	bpl.n	8010c72 <__sflush_r+0x46>
 8010c66:	6863      	ldr	r3, [r4, #4]
 8010c68:	1ac0      	subs	r0, r0, r3
 8010c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c6c:	b10b      	cbz	r3, 8010c72 <__sflush_r+0x46>
 8010c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c70:	1ac0      	subs	r0, r0, r3
 8010c72:	2300      	movs	r3, #0
 8010c74:	4602      	mov	r2, r0
 8010c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c78:	6a21      	ldr	r1, [r4, #32]
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	47b0      	blx	r6
 8010c7e:	1c43      	adds	r3, r0, #1
 8010c80:	89a3      	ldrh	r3, [r4, #12]
 8010c82:	d106      	bne.n	8010c92 <__sflush_r+0x66>
 8010c84:	6829      	ldr	r1, [r5, #0]
 8010c86:	291d      	cmp	r1, #29
 8010c88:	d82c      	bhi.n	8010ce4 <__sflush_r+0xb8>
 8010c8a:	4a2a      	ldr	r2, [pc, #168]	; (8010d34 <__sflush_r+0x108>)
 8010c8c:	40ca      	lsrs	r2, r1
 8010c8e:	07d6      	lsls	r6, r2, #31
 8010c90:	d528      	bpl.n	8010ce4 <__sflush_r+0xb8>
 8010c92:	2200      	movs	r2, #0
 8010c94:	6062      	str	r2, [r4, #4]
 8010c96:	04d9      	lsls	r1, r3, #19
 8010c98:	6922      	ldr	r2, [r4, #16]
 8010c9a:	6022      	str	r2, [r4, #0]
 8010c9c:	d504      	bpl.n	8010ca8 <__sflush_r+0x7c>
 8010c9e:	1c42      	adds	r2, r0, #1
 8010ca0:	d101      	bne.n	8010ca6 <__sflush_r+0x7a>
 8010ca2:	682b      	ldr	r3, [r5, #0]
 8010ca4:	b903      	cbnz	r3, 8010ca8 <__sflush_r+0x7c>
 8010ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8010ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010caa:	602f      	str	r7, [r5, #0]
 8010cac:	2900      	cmp	r1, #0
 8010cae:	d0ca      	beq.n	8010c46 <__sflush_r+0x1a>
 8010cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010cb4:	4299      	cmp	r1, r3
 8010cb6:	d002      	beq.n	8010cbe <__sflush_r+0x92>
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f7ff f94f 	bl	800ff5c <_free_r>
 8010cbe:	2000      	movs	r0, #0
 8010cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8010cc2:	e7c1      	b.n	8010c48 <__sflush_r+0x1c>
 8010cc4:	6a21      	ldr	r1, [r4, #32]
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4628      	mov	r0, r5
 8010cca:	47b0      	blx	r6
 8010ccc:	1c41      	adds	r1, r0, #1
 8010cce:	d1c7      	bne.n	8010c60 <__sflush_r+0x34>
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0c4      	beq.n	8010c60 <__sflush_r+0x34>
 8010cd6:	2b1d      	cmp	r3, #29
 8010cd8:	d001      	beq.n	8010cde <__sflush_r+0xb2>
 8010cda:	2b16      	cmp	r3, #22
 8010cdc:	d101      	bne.n	8010ce2 <__sflush_r+0xb6>
 8010cde:	602f      	str	r7, [r5, #0]
 8010ce0:	e7b1      	b.n	8010c46 <__sflush_r+0x1a>
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce8:	81a3      	strh	r3, [r4, #12]
 8010cea:	e7ad      	b.n	8010c48 <__sflush_r+0x1c>
 8010cec:	690f      	ldr	r7, [r1, #16]
 8010cee:	2f00      	cmp	r7, #0
 8010cf0:	d0a9      	beq.n	8010c46 <__sflush_r+0x1a>
 8010cf2:	0793      	lsls	r3, r2, #30
 8010cf4:	680e      	ldr	r6, [r1, #0]
 8010cf6:	bf08      	it	eq
 8010cf8:	694b      	ldreq	r3, [r1, #20]
 8010cfa:	600f      	str	r7, [r1, #0]
 8010cfc:	bf18      	it	ne
 8010cfe:	2300      	movne	r3, #0
 8010d00:	eba6 0807 	sub.w	r8, r6, r7
 8010d04:	608b      	str	r3, [r1, #8]
 8010d06:	f1b8 0f00 	cmp.w	r8, #0
 8010d0a:	dd9c      	ble.n	8010c46 <__sflush_r+0x1a>
 8010d0c:	6a21      	ldr	r1, [r4, #32]
 8010d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d10:	4643      	mov	r3, r8
 8010d12:	463a      	mov	r2, r7
 8010d14:	4628      	mov	r0, r5
 8010d16:	47b0      	blx	r6
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	dc06      	bgt.n	8010d2a <__sflush_r+0xfe>
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d22:	81a3      	strh	r3, [r4, #12]
 8010d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d28:	e78e      	b.n	8010c48 <__sflush_r+0x1c>
 8010d2a:	4407      	add	r7, r0
 8010d2c:	eba8 0800 	sub.w	r8, r8, r0
 8010d30:	e7e9      	b.n	8010d06 <__sflush_r+0xda>
 8010d32:	bf00      	nop
 8010d34:	20400001 	.word	0x20400001

08010d38 <_fflush_r>:
 8010d38:	b538      	push	{r3, r4, r5, lr}
 8010d3a:	690b      	ldr	r3, [r1, #16]
 8010d3c:	4605      	mov	r5, r0
 8010d3e:	460c      	mov	r4, r1
 8010d40:	b913      	cbnz	r3, 8010d48 <_fflush_r+0x10>
 8010d42:	2500      	movs	r5, #0
 8010d44:	4628      	mov	r0, r5
 8010d46:	bd38      	pop	{r3, r4, r5, pc}
 8010d48:	b118      	cbz	r0, 8010d52 <_fflush_r+0x1a>
 8010d4a:	6983      	ldr	r3, [r0, #24]
 8010d4c:	b90b      	cbnz	r3, 8010d52 <_fflush_r+0x1a>
 8010d4e:	f7ff f84b 	bl	800fde8 <__sinit>
 8010d52:	4b14      	ldr	r3, [pc, #80]	; (8010da4 <_fflush_r+0x6c>)
 8010d54:	429c      	cmp	r4, r3
 8010d56:	d11b      	bne.n	8010d90 <_fflush_r+0x58>
 8010d58:	686c      	ldr	r4, [r5, #4]
 8010d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d0ef      	beq.n	8010d42 <_fflush_r+0xa>
 8010d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d64:	07d0      	lsls	r0, r2, #31
 8010d66:	d404      	bmi.n	8010d72 <_fflush_r+0x3a>
 8010d68:	0599      	lsls	r1, r3, #22
 8010d6a:	d402      	bmi.n	8010d72 <_fflush_r+0x3a>
 8010d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d6e:	f7ff f8eb 	bl	800ff48 <__retarget_lock_acquire_recursive>
 8010d72:	4628      	mov	r0, r5
 8010d74:	4621      	mov	r1, r4
 8010d76:	f7ff ff59 	bl	8010c2c <__sflush_r>
 8010d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d7c:	07da      	lsls	r2, r3, #31
 8010d7e:	4605      	mov	r5, r0
 8010d80:	d4e0      	bmi.n	8010d44 <_fflush_r+0xc>
 8010d82:	89a3      	ldrh	r3, [r4, #12]
 8010d84:	059b      	lsls	r3, r3, #22
 8010d86:	d4dd      	bmi.n	8010d44 <_fflush_r+0xc>
 8010d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d8a:	f7ff f8de 	bl	800ff4a <__retarget_lock_release_recursive>
 8010d8e:	e7d9      	b.n	8010d44 <_fflush_r+0xc>
 8010d90:	4b05      	ldr	r3, [pc, #20]	; (8010da8 <_fflush_r+0x70>)
 8010d92:	429c      	cmp	r4, r3
 8010d94:	d101      	bne.n	8010d9a <_fflush_r+0x62>
 8010d96:	68ac      	ldr	r4, [r5, #8]
 8010d98:	e7df      	b.n	8010d5a <_fflush_r+0x22>
 8010d9a:	4b04      	ldr	r3, [pc, #16]	; (8010dac <_fflush_r+0x74>)
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	bf08      	it	eq
 8010da0:	68ec      	ldreq	r4, [r5, #12]
 8010da2:	e7da      	b.n	8010d5a <_fflush_r+0x22>
 8010da4:	08013c08 	.word	0x08013c08
 8010da8:	08013c28 	.word	0x08013c28
 8010dac:	08013be8 	.word	0x08013be8

08010db0 <_lseek_r>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	4d07      	ldr	r5, [pc, #28]	; (8010dd0 <_lseek_r+0x20>)
 8010db4:	4604      	mov	r4, r0
 8010db6:	4608      	mov	r0, r1
 8010db8:	4611      	mov	r1, r2
 8010dba:	2200      	movs	r2, #0
 8010dbc:	602a      	str	r2, [r5, #0]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	f7ef ff58 	bl	8000c74 <_lseek>
 8010dc4:	1c43      	adds	r3, r0, #1
 8010dc6:	d102      	bne.n	8010dce <_lseek_r+0x1e>
 8010dc8:	682b      	ldr	r3, [r5, #0]
 8010dca:	b103      	cbz	r3, 8010dce <_lseek_r+0x1e>
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	bd38      	pop	{r3, r4, r5, pc}
 8010dd0:	20008940 	.word	0x20008940

08010dd4 <__swhatbuf_r>:
 8010dd4:	b570      	push	{r4, r5, r6, lr}
 8010dd6:	460e      	mov	r6, r1
 8010dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ddc:	2900      	cmp	r1, #0
 8010dde:	b096      	sub	sp, #88	; 0x58
 8010de0:	4614      	mov	r4, r2
 8010de2:	461d      	mov	r5, r3
 8010de4:	da08      	bge.n	8010df8 <__swhatbuf_r+0x24>
 8010de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010dea:	2200      	movs	r2, #0
 8010dec:	602a      	str	r2, [r5, #0]
 8010dee:	061a      	lsls	r2, r3, #24
 8010df0:	d410      	bmi.n	8010e14 <__swhatbuf_r+0x40>
 8010df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010df6:	e00e      	b.n	8010e16 <__swhatbuf_r+0x42>
 8010df8:	466a      	mov	r2, sp
 8010dfa:	f000 f8e3 	bl	8010fc4 <_fstat_r>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	dbf1      	blt.n	8010de6 <__swhatbuf_r+0x12>
 8010e02:	9a01      	ldr	r2, [sp, #4]
 8010e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010e0c:	425a      	negs	r2, r3
 8010e0e:	415a      	adcs	r2, r3
 8010e10:	602a      	str	r2, [r5, #0]
 8010e12:	e7ee      	b.n	8010df2 <__swhatbuf_r+0x1e>
 8010e14:	2340      	movs	r3, #64	; 0x40
 8010e16:	2000      	movs	r0, #0
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	b016      	add	sp, #88	; 0x58
 8010e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e20 <__smakebuf_r>:
 8010e20:	898b      	ldrh	r3, [r1, #12]
 8010e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e24:	079d      	lsls	r5, r3, #30
 8010e26:	4606      	mov	r6, r0
 8010e28:	460c      	mov	r4, r1
 8010e2a:	d507      	bpl.n	8010e3c <__smakebuf_r+0x1c>
 8010e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e30:	6023      	str	r3, [r4, #0]
 8010e32:	6123      	str	r3, [r4, #16]
 8010e34:	2301      	movs	r3, #1
 8010e36:	6163      	str	r3, [r4, #20]
 8010e38:	b002      	add	sp, #8
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	ab01      	add	r3, sp, #4
 8010e3e:	466a      	mov	r2, sp
 8010e40:	f7ff ffc8 	bl	8010dd4 <__swhatbuf_r>
 8010e44:	9900      	ldr	r1, [sp, #0]
 8010e46:	4605      	mov	r5, r0
 8010e48:	4630      	mov	r0, r6
 8010e4a:	f7ff f8f3 	bl	8010034 <_malloc_r>
 8010e4e:	b948      	cbnz	r0, 8010e64 <__smakebuf_r+0x44>
 8010e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e54:	059a      	lsls	r2, r3, #22
 8010e56:	d4ef      	bmi.n	8010e38 <__smakebuf_r+0x18>
 8010e58:	f023 0303 	bic.w	r3, r3, #3
 8010e5c:	f043 0302 	orr.w	r3, r3, #2
 8010e60:	81a3      	strh	r3, [r4, #12]
 8010e62:	e7e3      	b.n	8010e2c <__smakebuf_r+0xc>
 8010e64:	4b0d      	ldr	r3, [pc, #52]	; (8010e9c <__smakebuf_r+0x7c>)
 8010e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e68:	89a3      	ldrh	r3, [r4, #12]
 8010e6a:	6020      	str	r0, [r4, #0]
 8010e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e70:	81a3      	strh	r3, [r4, #12]
 8010e72:	9b00      	ldr	r3, [sp, #0]
 8010e74:	6163      	str	r3, [r4, #20]
 8010e76:	9b01      	ldr	r3, [sp, #4]
 8010e78:	6120      	str	r0, [r4, #16]
 8010e7a:	b15b      	cbz	r3, 8010e94 <__smakebuf_r+0x74>
 8010e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e80:	4630      	mov	r0, r6
 8010e82:	f000 f8b1 	bl	8010fe8 <_isatty_r>
 8010e86:	b128      	cbz	r0, 8010e94 <__smakebuf_r+0x74>
 8010e88:	89a3      	ldrh	r3, [r4, #12]
 8010e8a:	f023 0303 	bic.w	r3, r3, #3
 8010e8e:	f043 0301 	orr.w	r3, r3, #1
 8010e92:	81a3      	strh	r3, [r4, #12]
 8010e94:	89a0      	ldrh	r0, [r4, #12]
 8010e96:	4305      	orrs	r5, r0
 8010e98:	81a5      	strh	r5, [r4, #12]
 8010e9a:	e7cd      	b.n	8010e38 <__smakebuf_r+0x18>
 8010e9c:	0800fd81 	.word	0x0800fd81

08010ea0 <__malloc_lock>:
 8010ea0:	4801      	ldr	r0, [pc, #4]	; (8010ea8 <__malloc_lock+0x8>)
 8010ea2:	f7ff b851 	b.w	800ff48 <__retarget_lock_acquire_recursive>
 8010ea6:	bf00      	nop
 8010ea8:	20008944 	.word	0x20008944

08010eac <__malloc_unlock>:
 8010eac:	4801      	ldr	r0, [pc, #4]	; (8010eb4 <__malloc_unlock+0x8>)
 8010eae:	f7ff b84c 	b.w	800ff4a <__retarget_lock_release_recursive>
 8010eb2:	bf00      	nop
 8010eb4:	20008944 	.word	0x20008944

08010eb8 <_realloc_r>:
 8010eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ebc:	4680      	mov	r8, r0
 8010ebe:	4614      	mov	r4, r2
 8010ec0:	460e      	mov	r6, r1
 8010ec2:	b921      	cbnz	r1, 8010ece <_realloc_r+0x16>
 8010ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec8:	4611      	mov	r1, r2
 8010eca:	f7ff b8b3 	b.w	8010034 <_malloc_r>
 8010ece:	b92a      	cbnz	r2, 8010edc <_realloc_r+0x24>
 8010ed0:	f7ff f844 	bl	800ff5c <_free_r>
 8010ed4:	4625      	mov	r5, r4
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010edc:	f000 f894 	bl	8011008 <_malloc_usable_size_r>
 8010ee0:	4284      	cmp	r4, r0
 8010ee2:	4607      	mov	r7, r0
 8010ee4:	d802      	bhi.n	8010eec <_realloc_r+0x34>
 8010ee6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010eea:	d812      	bhi.n	8010f12 <_realloc_r+0x5a>
 8010eec:	4621      	mov	r1, r4
 8010eee:	4640      	mov	r0, r8
 8010ef0:	f7ff f8a0 	bl	8010034 <_malloc_r>
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	d0ed      	beq.n	8010ed6 <_realloc_r+0x1e>
 8010efa:	42bc      	cmp	r4, r7
 8010efc:	4622      	mov	r2, r4
 8010efe:	4631      	mov	r1, r6
 8010f00:	bf28      	it	cs
 8010f02:	463a      	movcs	r2, r7
 8010f04:	f7fe fe54 	bl	800fbb0 <memcpy>
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4640      	mov	r0, r8
 8010f0c:	f7ff f826 	bl	800ff5c <_free_r>
 8010f10:	e7e1      	b.n	8010ed6 <_realloc_r+0x1e>
 8010f12:	4635      	mov	r5, r6
 8010f14:	e7df      	b.n	8010ed6 <_realloc_r+0x1e>
	...

08010f18 <_read_r>:
 8010f18:	b538      	push	{r3, r4, r5, lr}
 8010f1a:	4d07      	ldr	r5, [pc, #28]	; (8010f38 <_read_r+0x20>)
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	4608      	mov	r0, r1
 8010f20:	4611      	mov	r1, r2
 8010f22:	2200      	movs	r2, #0
 8010f24:	602a      	str	r2, [r5, #0]
 8010f26:	461a      	mov	r2, r3
 8010f28:	f7ef fe44 	bl	8000bb4 <_read>
 8010f2c:	1c43      	adds	r3, r0, #1
 8010f2e:	d102      	bne.n	8010f36 <_read_r+0x1e>
 8010f30:	682b      	ldr	r3, [r5, #0]
 8010f32:	b103      	cbz	r3, 8010f36 <_read_r+0x1e>
 8010f34:	6023      	str	r3, [r4, #0]
 8010f36:	bd38      	pop	{r3, r4, r5, pc}
 8010f38:	20008940 	.word	0x20008940

08010f3c <_raise_r>:
 8010f3c:	291f      	cmp	r1, #31
 8010f3e:	b538      	push	{r3, r4, r5, lr}
 8010f40:	4604      	mov	r4, r0
 8010f42:	460d      	mov	r5, r1
 8010f44:	d904      	bls.n	8010f50 <_raise_r+0x14>
 8010f46:	2316      	movs	r3, #22
 8010f48:	6003      	str	r3, [r0, #0]
 8010f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f4e:	bd38      	pop	{r3, r4, r5, pc}
 8010f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f52:	b112      	cbz	r2, 8010f5a <_raise_r+0x1e>
 8010f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f58:	b94b      	cbnz	r3, 8010f6e <_raise_r+0x32>
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f000 f830 	bl	8010fc0 <_getpid_r>
 8010f60:	462a      	mov	r2, r5
 8010f62:	4601      	mov	r1, r0
 8010f64:	4620      	mov	r0, r4
 8010f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f6a:	f000 b817 	b.w	8010f9c <_kill_r>
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d00a      	beq.n	8010f88 <_raise_r+0x4c>
 8010f72:	1c59      	adds	r1, r3, #1
 8010f74:	d103      	bne.n	8010f7e <_raise_r+0x42>
 8010f76:	2316      	movs	r3, #22
 8010f78:	6003      	str	r3, [r0, #0]
 8010f7a:	2001      	movs	r0, #1
 8010f7c:	e7e7      	b.n	8010f4e <_raise_r+0x12>
 8010f7e:	2400      	movs	r4, #0
 8010f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f84:	4628      	mov	r0, r5
 8010f86:	4798      	blx	r3
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e7e0      	b.n	8010f4e <_raise_r+0x12>

08010f8c <raise>:
 8010f8c:	4b02      	ldr	r3, [pc, #8]	; (8010f98 <raise+0xc>)
 8010f8e:	4601      	mov	r1, r0
 8010f90:	6818      	ldr	r0, [r3, #0]
 8010f92:	f7ff bfd3 	b.w	8010f3c <_raise_r>
 8010f96:	bf00      	nop
 8010f98:	2000002c 	.word	0x2000002c

08010f9c <_kill_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4d07      	ldr	r5, [pc, #28]	; (8010fbc <_kill_r+0x20>)
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	602b      	str	r3, [r5, #0]
 8010faa:	f7ef fde7 	bl	8000b7c <_kill>
 8010fae:	1c43      	adds	r3, r0, #1
 8010fb0:	d102      	bne.n	8010fb8 <_kill_r+0x1c>
 8010fb2:	682b      	ldr	r3, [r5, #0]
 8010fb4:	b103      	cbz	r3, 8010fb8 <_kill_r+0x1c>
 8010fb6:	6023      	str	r3, [r4, #0]
 8010fb8:	bd38      	pop	{r3, r4, r5, pc}
 8010fba:	bf00      	nop
 8010fbc:	20008940 	.word	0x20008940

08010fc0 <_getpid_r>:
 8010fc0:	f7ef bdd4 	b.w	8000b6c <_getpid>

08010fc4 <_fstat_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4d07      	ldr	r5, [pc, #28]	; (8010fe4 <_fstat_r+0x20>)
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4608      	mov	r0, r1
 8010fce:	4611      	mov	r1, r2
 8010fd0:	602b      	str	r3, [r5, #0]
 8010fd2:	f7ef fe34 	bl	8000c3e <_fstat>
 8010fd6:	1c43      	adds	r3, r0, #1
 8010fd8:	d102      	bne.n	8010fe0 <_fstat_r+0x1c>
 8010fda:	682b      	ldr	r3, [r5, #0]
 8010fdc:	b103      	cbz	r3, 8010fe0 <_fstat_r+0x1c>
 8010fde:	6023      	str	r3, [r4, #0]
 8010fe0:	bd38      	pop	{r3, r4, r5, pc}
 8010fe2:	bf00      	nop
 8010fe4:	20008940 	.word	0x20008940

08010fe8 <_isatty_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	4d06      	ldr	r5, [pc, #24]	; (8011004 <_isatty_r+0x1c>)
 8010fec:	2300      	movs	r3, #0
 8010fee:	4604      	mov	r4, r0
 8010ff0:	4608      	mov	r0, r1
 8010ff2:	602b      	str	r3, [r5, #0]
 8010ff4:	f7ef fe33 	bl	8000c5e <_isatty>
 8010ff8:	1c43      	adds	r3, r0, #1
 8010ffa:	d102      	bne.n	8011002 <_isatty_r+0x1a>
 8010ffc:	682b      	ldr	r3, [r5, #0]
 8010ffe:	b103      	cbz	r3, 8011002 <_isatty_r+0x1a>
 8011000:	6023      	str	r3, [r4, #0]
 8011002:	bd38      	pop	{r3, r4, r5, pc}
 8011004:	20008940 	.word	0x20008940

08011008 <_malloc_usable_size_r>:
 8011008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801100c:	1f18      	subs	r0, r3, #4
 801100e:	2b00      	cmp	r3, #0
 8011010:	bfbc      	itt	lt
 8011012:	580b      	ldrlt	r3, [r1, r0]
 8011014:	18c0      	addlt	r0, r0, r3
 8011016:	4770      	bx	lr

08011018 <_init>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	bf00      	nop
 801101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101e:	bc08      	pop	{r3}
 8011020:	469e      	mov	lr, r3
 8011022:	4770      	bx	lr

08011024 <_fini>:
 8011024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011026:	bf00      	nop
 8011028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102a:	bc08      	pop	{r3}
 801102c:	469e      	mov	lr, r3
 801102e:	4770      	bx	lr
