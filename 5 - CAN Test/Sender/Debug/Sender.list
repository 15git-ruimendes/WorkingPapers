
Sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080068d8  080068d8  000168d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ccc  08006ccc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd4  08006cd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200001dc  08006eb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08006eb8  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea86  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  0002ec92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00030e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00031a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020652  00000000  00000000  00032550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df8b  00000000  00000000  00052ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf8a3  00000000  00000000  00060b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001203d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d8  00000000  00000000  00120420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068c0 	.word	0x080068c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080068c0 	.word	0x080068c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f000 fc18 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f85e 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 f978 	bl	80011ec <MX_GPIO_Init>
  MX_CAN1_Init();
 8000efc:	f000 f8c8 	bl	8001090 <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f00:	f000 f944 	bl	800118c <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8000f04:	f000 f918 	bl	8001138 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000f08:	4822      	ldr	r0, [pc, #136]	; (8000f94 <main+0xa8>)
 8000f0a:	f000 fe7d 	bl	8001c08 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4820      	ldr	r0, [pc, #128]	; (8000f94 <main+0xa8>)
 8000f12:	f000 ff98 	bl	8001e46 <HAL_CAN_ActivateNotification>

  TxHeader.StdId = 0x406;
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <main+0xac>)
 8000f18:	f240 4206 	movw	r2, #1030	; 0x406
 8000f1c:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <main+0xac>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <main+0xac>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]

  FData.Number = 0.0012345;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <main+0xb0>)
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <main+0xb4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  TxData[0] = FData.Data[0];
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <main+0xb0>)
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <main+0xb8>)
 8000f36:	701a      	strb	r2, [r3, #0]
  TxData[1] = FData.Data[1];
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <main+0xb0>)
 8000f3a:	785a      	ldrb	r2, [r3, #1]
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <main+0xb8>)
 8000f3e:	705a      	strb	r2, [r3, #1]
  TxData[2] = FData.Data[2];
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <main+0xb0>)
 8000f42:	789a      	ldrb	r2, [r3, #2]
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0xb8>)
 8000f46:	709a      	strb	r2, [r3, #2]
  TxData[3] = FData.Data[3];
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <main+0xb0>)
 8000f4a:	78da      	ldrb	r2, [r3, #3]
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <main+0xb8>)
 8000f4e:	70da      	strb	r2, [r3, #3]

  FData.Number = 0.54321;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <main+0xb0>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <main+0xbc>)
 8000f54:	601a      	str	r2, [r3, #0]
  TxData[4] = FData.Data[0];
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <main+0xb0>)
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <main+0xb8>)
 8000f5c:	711a      	strb	r2, [r3, #4]
  TxData[5] = FData.Data[1];
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <main+0xb0>)
 8000f60:	785a      	ldrb	r2, [r3, #1]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <main+0xb8>)
 8000f64:	715a      	strb	r2, [r3, #5]
  TxData[6] = FData.Data[2];
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <main+0xb0>)
 8000f68:	789a      	ldrb	r2, [r3, #2]
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <main+0xb8>)
 8000f6c:	719a      	strb	r2, [r3, #6]
  TxData[7] = FData.Data[3];
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <main+0xb0>)
 8000f70:	78da      	ldrb	r2, [r3, #3]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <main+0xb8>)
 8000f74:	71da      	strb	r2, [r3, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&MailBox);
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <main+0xc0>)
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <main+0xb8>)
 8000f7a:	4907      	ldr	r1, [pc, #28]	; (8000f98 <main+0xac>)
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <main+0xa8>)
 8000f7e:	f000 fe87 	bl	8001c90 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(Led_GPIO_Port,Led_Pin);
 8000f82:	2104      	movs	r1, #4
 8000f84:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <main+0xc4>)
 8000f86:	f001 fa00 	bl	800238a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000f8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8e:	f000 fc3b 	bl	8001808 <HAL_Delay>
	HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&MailBox);
 8000f92:	e7f0      	b.n	8000f76 <main+0x8a>
 8000f94:	200001fc 	.word	0x200001fc
 8000f98:	20000774 	.word	0x20000774
 8000f9c:	200001f8 	.word	0x200001f8
 8000fa0:	3aa1cef2 	.word	0x3aa1cef2
 8000fa4:	20000790 	.word	0x20000790
 8000fa8:	3f0b0fd0 	.word	0x3f0b0fd0
 8000fac:	2000078c 	.word	0x2000078c
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2234      	movs	r2, #52	; 0x34
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 ff5e 	bl	8003e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <SystemClock_Config+0xd4>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a29      	ldr	r2, [pc, #164]	; (8001088 <SystemClock_Config+0xd4>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <SystemClock_Config+0xd4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <SystemClock_Config+0xd8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <SystemClock_Config+0xd8>)
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <SystemClock_Config+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001010:	2303      	movs	r3, #3
 8001012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800101e:	2310      	movs	r3, #16
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001022:	2302      	movs	r3, #2
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 800102c:	230f      	movs	r3, #15
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001030:	2390      	movs	r3, #144	; 0x90
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001038:	2305      	movs	r3, #5
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4618      	mov	r0, r3
 8001046:	f001 feb1 	bl	8002dac <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001050:	f000 f91c 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f001 faee 	bl	8002650 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800107a:	f000 f907 	bl	800128c <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_CAN1_Init+0x9c>)
 8001098:	4a25      	ldr	r2, [pc, #148]	; (8001130 <MX_CAN1_Init+0xa0>)
 800109a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_CAN1_Init+0x9c>)
 800109e:	2208      	movs	r2, #8
 80010a0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_CAN1_Init+0x9c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_CAN1_Init+0x9c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_CAN1_Init+0x9c>)
 80010b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_CAN1_Init+0x9c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_CAN1_Init+0x9c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_CAN1_Init+0x9c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_CAN1_Init+0x9c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_CAN1_Init+0x9c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_CAN1_Init+0x9c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_CAN1_Init+0x9c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010e0:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_CAN1_Init+0x9c>)
 80010e2:	f000 fbb5 	bl	8001850 <HAL_CAN_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 f8ce 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef CAN_Filt;

  CAN_Filt.FilterActivation = CAN_FILTER_ENABLE;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  CAN_Filt.FilterBank = 18;  // which filter bank to use from the assigned ones
 80010f4:	2312      	movs	r3, #18
 80010f6:	617b      	str	r3, [r7, #20]
  CAN_Filt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  CAN_Filt.FilterIdHigh = 0xFFF<<5;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_CAN1_Init+0xa4>)
 80010fe:	603b      	str	r3, [r7, #0]
  CAN_Filt.FilterIdLow = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  CAN_Filt.FilterMaskIdHigh = 0xFFF<<5;
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_CAN1_Init+0xa4>)
 8001106:	60bb      	str	r3, [r7, #8]
  CAN_Filt.FilterMaskIdLow = 0x0000;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  CAN_Filt.FilterMode = CAN_FILTERMODE_IDMASK;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
  CAN_Filt.FilterScale = CAN_FILTERSCALE_32BIT;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
  CAN_Filt.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001114:	2314      	movs	r3, #20
 8001116:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &CAN_Filt);
 8001118:	463b      	mov	r3, r7
 800111a:	4619      	mov	r1, r3
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_CAN1_Init+0x9c>)
 800111e:	f000 fc93 	bl	8001a48 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001fc 	.word	0x200001fc
 8001130:	40006400 	.word	0x40006400
 8001134:	0001ffe0 	.word	0x0001ffe0

08001138 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MX_USART1_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART1_UART_Init+0x4c>)
 8001170:	f002 f8a0 	bl	80032b4 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 f887 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000224 	.word	0x20000224
 8001188:	40011000 	.word	0x40011000

0800118c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001192:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001196:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800119a:	2206      	movs	r2, #6
 800119c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d6:	f001 f8f2 	bl	80023be <HAL_PCD_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80011e0:	f000 f854 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000268 	.word	0x20000268

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <MX_GPIO_Init+0x98>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <MX_GPIO_Init+0x98>)
 800120c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <MX_GPIO_Init+0x98>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_GPIO_Init+0x98>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <MX_GPIO_Init+0x98>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_GPIO_Init+0x98>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_GPIO_Init+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <MX_GPIO_Init+0x98>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_GPIO_Init+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2104      	movs	r1, #4
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_GPIO_Init+0x9c>)
 800125c:	f001 f87c 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <MX_GPIO_Init+0x9c>)
 8001278:	f000 fef2 	bl	8002060 <HAL_GPIO_Init>

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_CAN_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12c      	bne.n	8001364 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_CAN_MspInit+0x88>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_CAN_MspInit+0x88>)
 8001314:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_CAN_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_CAN_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_CAN_MspInit+0x88>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_CAN_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN1;
 8001354:	2308      	movs	r3, #8
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <HAL_CAN_MspInit+0x8c>)
 8001360:	f000 fe7e 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40006400 	.word	0x40006400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_UART_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12c      	bne.n	80013f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_UART_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e4:	2307      	movs	r3, #7
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013f0:	f000 fe36 	bl	8002060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40011000 	.word	0x40011000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b098      	sub	sp, #96	; 0x60
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	223c      	movs	r2, #60	; 0x3c
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fd2b 	bl	8003e84 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001436:	d140      	bne.n	80014ba <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001438:	2320      	movs	r3, #32
 800143a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fae3 	bl	8002a10 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8001450:	f7ff ff1c 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001470:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001474:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001482:	230a      	movs	r3, #10
 8001484:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148a:	4619      	mov	r1, r3
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <HAL_PCD_MspInit+0xc0>)
 800148e:	f000 fde7 	bl	8002060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6353      	str	r3, [r2, #52]	; 0x34
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_PCD_MspInit+0xbc>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3760      	adds	r7, #96	; 0x60
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020000 	.word	0x40020000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f956 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_kill>:

int _kill(int pid, int sig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800153a:	f002 fc79 	bl	8003e30 <__errno>
 800153e:	4603      	mov	r3, r0
 8001540:	2216      	movs	r2, #22
 8001542:	601a      	str	r2, [r3, #0]
  return -1;
 8001544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_exit>:

void _exit (int status)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ffe7 	bl	8001530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001562:	e7fe      	b.n	8001562 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e009      	b.n	80015c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf1      	blt.n	80015b0 <_write+0x12>
  }
  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_close>:

int _close(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_isatty>:

int _isatty(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f002 fbde 	bl	8003e30 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20040000 	.word	0x20040000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	20000798 	.word	0x20000798
 80016a8:	200007b0 	.word	0x200007b0

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ec:	4c0b      	ldr	r4, [pc, #44]	; (800171c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd7 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 fb9d 	bl	8003e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff fbf3 	bl	8000eec <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001708:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001714:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8001718:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800171c:	200007b0 	.word	0x200007b0

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 fc53 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fd9e 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fc5d 	bl	8002046 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a4:	f000 fc33 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	2000079c 	.word	0x2000079c

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000079c 	.word	0x2000079c

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0ed      	b.n	8001a3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd3a 	bl	80012e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001884:	f7ff ffb4 	bl	80017f0 <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800188a:	e012      	b.n	80018b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800188c:	f7ff ffb0 	bl	80017f0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b0a      	cmp	r3, #10
 8001898:	d90b      	bls.n	80018b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2205      	movs	r2, #5
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0c5      	b.n	8001a3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0e5      	beq.n	800188c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0202 	bic.w	r2, r2, #2
 80018ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d0:	f7ff ff8e 	bl	80017f0 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018d6:	e012      	b.n	80018fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d8:	f7ff ff8a 	bl	80017f0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d90b      	bls.n	80018fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2205      	movs	r2, #5
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e09f      	b.n	8001a3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e5      	bne.n	80018d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7e5b      	ldrb	r3, [r3, #25]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e007      	b.n	8001960 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7e9b      	ldrb	r3, [r3, #26]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e007      	b.n	800198a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0220 	bic.w	r2, r2, #32
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7edb      	ldrb	r3, [r3, #27]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0210 	bic.w	r2, r2, #16
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0210 	orr.w	r2, r2, #16
 80019b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7f1b      	ldrb	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d108      	bne.n	80019ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0208 	orr.w	r2, r2, #8
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e007      	b.n	80019de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	7f5b      	ldrb	r3, [r3, #29]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d108      	bne.n	80019f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0204 	orr.w	r2, r2, #4
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e007      	b.n	8001a08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	ea42 0103 	orr.w	r1, r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	1e5a      	subs	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a60:	7cfb      	ldrb	r3, [r7, #19]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d003      	beq.n	8001a6e <HAL_CAN_ConfigFilter+0x26>
 8001a66:	7cfb      	ldrb	r3, [r7, #19]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80be 	bne.w	8001bea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d123      	bne.n	8001b18 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001af2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3248      	adds	r2, #72	; 0x48
 8001af8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	3348      	adds	r3, #72	; 0x48
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d122      	bne.n	8001b66 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3248      	adds	r2, #72	; 0x48
 8001b46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b5c:	6979      	ldr	r1, [r7, #20]
 8001b5e:	3348      	adds	r3, #72	; 0x48
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b80:	e007      	b.n	8001b92 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bac:	e007      	b.n	8001bbe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bdc:	f023 0201 	bic.w	r2, r3, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e006      	b.n	8001bf8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40006400 	.word	0x40006400

08001c08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d12e      	bne.n	8001c7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff fddc 	bl	80017f0 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3a:	e012      	b.n	8001c62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c3c:	f7ff fdd8 	bl	80017f0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d90b      	bls.n	8001c62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e012      	b.n	8001c88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e5      	bne.n	8001c3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e006      	b.n	8001c88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_AddTxMessage+0x2c>
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	f040 80b8 	bne.w	8001e2c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80a0 	beq.w	8001e1c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	0e1b      	lsrs	r3, r3, #24
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d907      	bls.n	8001cfc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e09e      	b.n	8001e3a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	409a      	lsls	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	6809      	ldr	r1, [r1, #0]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3318      	adds	r3, #24
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	440b      	add	r3, r1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e00f      	b.n	8001d4a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3318      	adds	r3, #24
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	440b      	add	r3, r1
 8001d48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6819      	ldr	r1, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3318      	adds	r3, #24
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	440b      	add	r3, r1
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	7d1b      	ldrb	r3, [r3, #20]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d111      	bne.n	8001d8a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	6811      	ldr	r1, [r2, #0]
 8001d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3318      	adds	r3, #24
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	440b      	add	r3, r1
 8001d86:	3304      	adds	r3, #4
 8001d88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3307      	adds	r3, #7
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	061a      	lsls	r2, r3, #24
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3306      	adds	r3, #6
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3305      	adds	r3, #5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	4313      	orrs	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	3204      	adds	r2, #4
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	4610      	mov	r0, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	6811      	ldr	r1, [r2, #0]
 8001db2:	ea43 0200 	orr.w	r2, r3, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	061a      	lsls	r2, r3, #24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4610      	mov	r0, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	6811      	ldr	r1, [r2, #0]
 8001de8:	ea43 0200 	orr.w	r2, r3, r0
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001df6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3318      	adds	r3, #24
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6811      	ldr	r1, [r2, #0]
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3318      	adds	r3, #24
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	440b      	add	r3, r1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e00e      	b.n	8001e3a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e006      	b.n	8001e3a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d002      	beq.n	8001e64 <HAL_CAN_ActivateNotification+0x1e>
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d109      	bne.n	8001e78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6959      	ldr	r1, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e006      	b.n	8001e86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff47 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff5c 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff8e 	bl	8001f4c <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5d 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffb0 	bl	8001fb4 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e153      	b.n	8002324 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	f040 8142 	bne.w	800231e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d005      	beq.n	80020b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d130      	bne.n	8002114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 0201 	and.w	r2, r3, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b03      	cmp	r3, #3
 800211e:	d017      	beq.n	8002150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d123      	bne.n	80021a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3208      	adds	r2, #8
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 809c 	beq.w	800231e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a53      	ldr	r2, [pc, #332]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_GPIO_Init+0x2dc>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_GPIO_Init+0x2e0>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	220f      	movs	r2, #15
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a46      	ldr	r2, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2e4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x1f6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a45      	ldr	r2, [pc, #276]	; (8002348 <HAL_GPIO_Init+0x2e8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x1f2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a44      	ldr	r2, [pc, #272]	; (800234c <HAL_GPIO_Init+0x2ec>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x1ee>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a43      	ldr	r2, [pc, #268]	; (8002350 <HAL_GPIO_Init+0x2f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x1ea>
 8002246:	2303      	movs	r3, #3
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x1f8>
 800224a:	2307      	movs	r3, #7
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x1f8>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x1f8>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x1f8>
 8002256:	2300      	movs	r3, #0
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002268:	4935      	ldr	r1, [pc, #212]	; (8002340 <HAL_GPIO_Init+0x2e0>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ee:	4a19      	ldr	r2, [pc, #100]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_GPIO_Init+0x2f4>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	f67f aea8 	bls.w	800207c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40013c00 	.word	0x40013c00

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	041a      	lsls	r2, r3, #16
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	400b      	ands	r3, r1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c0:	b08f      	sub	sp, #60	; 0x3c
 80023c2:	af0a      	add	r7, sp, #40	; 0x28
 80023c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e116      	b.n	80025fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff f80c 	bl	8001408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2203      	movs	r2, #3
 80023f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fa73 	bl	80038fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	687e      	ldr	r6, [r7, #4]
 800241c:	466d      	mov	r5, sp
 800241e:	f106 0410 	add.w	r4, r6, #16
 8002422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800242e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002432:	1d33      	adds	r3, r6, #4
 8002434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	f001 f9fe 	bl	8003838 <USB_CoreInit>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0d7      	b.n	80025fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f001 fa61 	bl	800391c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e04a      	b.n	80024f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	333d      	adds	r3, #61	; 0x3d
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	333c      	adds	r3, #60	; 0x3c
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	b298      	uxth	r0, r3
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3344      	adds	r3, #68	; 0x44
 800249c:	4602      	mov	r2, r0
 800249e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3340      	adds	r3, #64	; 0x40
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3348      	adds	r3, #72	; 0x48
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	334c      	adds	r3, #76	; 0x4c
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3354      	adds	r3, #84	; 0x54
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	3301      	adds	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d3af      	bcc.n	8002460 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e044      	b.n	8002590 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3b5      	bcc.n	8002506 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	687e      	ldr	r6, [r7, #4]
 80025a2:	466d      	mov	r5, sp
 80025a4:	f106 0410 	add.w	r4, r6, #16
 80025a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025b8:	1d33      	adds	r3, r6, #4
 80025ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025bc:	6838      	ldr	r0, [r7, #0]
 80025be:	f001 f9f9 	bl	80039b4 <USB_DevInit>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e014      	b.n	80025fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f80a 	bl	8002606 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fbb7 	bl	8003d6a <USB_DevDisconnect>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002606 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	f043 0303 	orr.w	r3, r3, #3
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff f856 	bl	80017f0 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff f852 	bl	80017f0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe ffb6 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	080068d8 	.word	0x080068d8
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b090      	sub	sp, #64	; 0x40
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
 8002828:	2300      	movs	r3, #0
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800282c:	2300      	movs	r3, #0
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80a1 	bhi.w	8002988 <HAL_RCC_GetSysClockFreq+0x16c>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e09b      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002854:	e09b      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285a:	e098      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002866:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d028      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	627a      	str	r2, [r7, #36]	; 0x24
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002884:	2100      	movs	r1, #0
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002888:	fb03 f201 	mul.w	r2, r3, r1
 800288c:	2300      	movs	r3, #0
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	4413      	add	r3, r2
 8002894:	4a43      	ldr	r2, [pc, #268]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002896:	fba0 1202 	umull	r1, r2, r0, r2
 800289a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800289c:	460a      	mov	r2, r1
 800289e:	62ba      	str	r2, [r7, #40]	; 0x28
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	4413      	add	r3, r2
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a8:	2200      	movs	r2, #0
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	61fa      	str	r2, [r7, #28]
 80028ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028b6:	f7fe f997 	bl	8000be8 <__aeabi_uldivmod>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4613      	mov	r3, r2
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c2:	e053      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	099b      	lsrs	r3, r3, #6
 80028ca:	2200      	movs	r2, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028d6:	f04f 0b00 	mov.w	fp, #0
 80028da:	4652      	mov	r2, sl
 80028dc:	465b      	mov	r3, fp
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	0159      	lsls	r1, r3, #5
 80028e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ec:	0150      	lsls	r0, r2, #5
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	ebb2 080a 	subs.w	r8, r2, sl
 80028f6:	eb63 090b 	sbc.w	r9, r3, fp
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002906:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800290a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800290e:	ebb2 0408 	subs.w	r4, r2, r8
 8002912:	eb63 0509 	sbc.w	r5, r3, r9
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	00eb      	lsls	r3, r5, #3
 8002920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002924:	00e2      	lsls	r2, r4, #3
 8002926:	4614      	mov	r4, r2
 8002928:	461d      	mov	r5, r3
 800292a:	eb14 030a 	adds.w	r3, r4, sl
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	eb45 030b 	adc.w	r3, r5, fp
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002942:	4629      	mov	r1, r5
 8002944:	028b      	lsls	r3, r1, #10
 8002946:	4621      	mov	r1, r4
 8002948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800294c:	4621      	mov	r1, r4
 800294e:	028a      	lsls	r2, r1, #10
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	2200      	movs	r2, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002960:	f7fe f942 	bl	8000be8 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_GetSysClockFreq+0x180>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800297c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002990:	4618      	mov	r0, r3
 8002992:	3740      	adds	r7, #64	; 0x40
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	017d7840 	.word	0x017d7840

080029a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000000 	.word	0x20000000

080029c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c4:	f7ff fff0 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0a9b      	lsrs	r3, r3, #10
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	080068e8 	.word	0x080068e8

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029ec:	f7ff ffdc 	bl	80029a8 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0b5b      	lsrs	r3, r3, #13
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	080068e8 	.word	0x080068e8

08002a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002a30:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4984      	ldr	r1, [pc, #528]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4978      	ldr	r1, [pc, #480]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8083 	beq.w	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b6f      	ldr	r3, [pc, #444]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a6e      	ldr	r2, [pc, #440]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a69      	ldr	r2, [pc, #420]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fe9b 	bl	80017f0 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fe97 	bl	80017f0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e162      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ad0:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002adc:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d028      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afa:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0a:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d114      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe fe65 	bl	80017f0 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fe61 	bl	80017f0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e12a      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b58:	d10d      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	4938      	ldr	r1, [pc, #224]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	4a35      	ldr	r2, [pc, #212]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8e:	4930      	ldr	r1, [pc, #192]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ba8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	4922      	ldr	r1, [pc, #136]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	491a      	ldr	r1, [pc, #104]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	490e      	ldr	r1, [pc, #56]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d004      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	f040 8091 	bne.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c34:	f7fe fddc 	bl	80017f0 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3a:	e013      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c3c:	f7fe fdd8 	bl	80017f0 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d90c      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0a3      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
 8002c58:	42470e40 	.word	0x42470e40
 8002c5c:	424711e0 	.word	0x424711e0
 8002c60:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c64:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d023      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb4:	d00e      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd2:	d110      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	019b      	lsls	r3, r3, #6
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	492c      	ldr	r1, [pc, #176]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	019b      	lsls	r3, r3, #6
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	071b      	lsls	r3, r3, #28
 8002d1c:	4920      	ldr	r1, [pc, #128]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fd61 	bl	80017f0 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d32:	f7fe fd5d 	bl	80017f0 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e028      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	490d      	ldr	r1, [pc, #52]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d84:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	424710d8 	.word	0x424710d8
 8002da8:	42470068 	.word	0x42470068

08002dac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e273      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d075      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d112      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4b7e      	ldr	r3, [pc, #504]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05b      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d157      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e24e      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x74>
 8002e12:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a75      	ldr	r2, [pc, #468]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x98>
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6f      	ldr	r2, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6d      	ldr	r3, [pc, #436]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6c      	ldr	r2, [pc, #432]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e44:	4b69      	ldr	r3, [pc, #420]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fcc4 	bl	80017f0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fcc0 	bl	80017f0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e213      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xc0>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fcb0 	bl	80017f0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fcac 	bl	80017f0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1ff      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b51      	ldr	r3, [pc, #324]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0xe8>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b44      	ldr	r3, [pc, #272]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1d3      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7fe fc65 	bl	80017f0 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fc61 	bl	80017f0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1b4      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fc44 	bl	80017f0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fc40 	bl	80017f0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e193      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d036      	beq.n	8003004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe fc24 	bl	80017f0 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fc20 	bl	80017f0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e173      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_OscConfig+0x240>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x200>
 8002fca:	e01b      	b.n	8003004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fc0d 	bl	80017f0 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	e00e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fda:	f7fe fc09 	bl	80017f0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d907      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e15c      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470000 	.word	0x42470000
 8002ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	4b8a      	ldr	r3, [pc, #552]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ea      	bne.n	8002fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8097 	beq.w	8003140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b83      	ldr	r3, [pc, #524]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b7f      	ldr	r3, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a7e      	ldr	r2, [pc, #504]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b7c      	ldr	r3, [pc, #496]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b79      	ldr	r3, [pc, #484]	; (8003228 <HAL_RCC_OscConfig+0x47c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x47c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a75      	ldr	r2, [pc, #468]	; (8003228 <HAL_RCC_OscConfig+0x47c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe fbc9 	bl	80017f0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe fbc5 	bl	80017f0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e118      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x47c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x2ea>
 8003088:	4b66      	ldr	r3, [pc, #408]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	4a65      	ldr	r2, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	; 0x70
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x30c>
 800309e:	4b61      	ldr	r3, [pc, #388]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a60      	ldr	r2, [pc, #384]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a5d      	ldr	r2, [pc, #372]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 80030b8:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a59      	ldr	r2, [pc, #356]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	4b57      	ldr	r3, [pc, #348]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a56      	ldr	r2, [pc, #344]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fb8a 	bl	80017f0 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe fb86 	bl	80017f0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0d7      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ee      	beq.n	80030e0 <HAL_RCC_OscConfig+0x334>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fb74 	bl	80017f0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fb70 	bl	80017f0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	; 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0c1      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80ad 	beq.w	80032a4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d060      	beq.n	8003218 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d145      	bne.n	80031ea <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_OscConfig+0x480>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fb44 	bl	80017f0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe fb40 	bl	80017f0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e093      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	071b      	lsls	r3, r3, #28
 80031b6:	491b      	ldr	r1, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x480>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c2:	f7fe fb15 	bl	80017f0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe fb11 	bl	80017f0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e064      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x41e>
 80031e8:	e05c      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_RCC_OscConfig+0x480>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fafe 	bl	80017f0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fafa 	bl	80017f0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e04d      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCC_OscConfig+0x478>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x44c>
 8003216:	e045      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e040      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000
 800322c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCC_OscConfig+0x504>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d030      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d129      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d122      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	4293      	cmp	r3, r2
 800326a:	d119      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	3b01      	subs	r3, #1
 800327a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d10f      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e03f      	b.n	8003346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f84c 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f829 	bl	8003350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800330c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800331c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800332c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003354:	b0c0      	sub	sp, #256	; 0x100
 8003356:	af00      	add	r7, sp, #0
 8003358:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	ea40 0301 	orr.w	r3, r0, r1
 8003378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	431a      	orrs	r2, r3
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	431a      	orrs	r2, r3
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033a8:	f021 010c 	bic.w	r1, r1, #12
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033b6:	430b      	orrs	r3, r1
 80033b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ca:	6999      	ldr	r1, [r3, #24]
 80033cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	ea40 0301 	orr.w	r3, r0, r1
 80033d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	4b8f      	ldr	r3, [pc, #572]	; (800361c <UART_SetConfig+0x2cc>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d005      	beq.n	80033f0 <UART_SetConfig+0xa0>
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b8d      	ldr	r3, [pc, #564]	; (8003620 <UART_SetConfig+0x2d0>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d104      	bne.n	80033fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f0:	f7ff fafa 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 80033f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033f8:	e003      	b.n	8003402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033fa:	f7ff fae1 	bl	80029c0 <HAL_RCC_GetPCLK1Freq>
 80033fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	f040 810c 	bne.w	8003628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003414:	2200      	movs	r2, #0
 8003416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800341a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800341e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003422:	4622      	mov	r2, r4
 8003424:	462b      	mov	r3, r5
 8003426:	1891      	adds	r1, r2, r2
 8003428:	65b9      	str	r1, [r7, #88]	; 0x58
 800342a:	415b      	adcs	r3, r3
 800342c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800342e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003432:	4621      	mov	r1, r4
 8003434:	eb12 0801 	adds.w	r8, r2, r1
 8003438:	4629      	mov	r1, r5
 800343a:	eb43 0901 	adc.w	r9, r3, r1
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800344e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003452:	4690      	mov	r8, r2
 8003454:	4699      	mov	r9, r3
 8003456:	4623      	mov	r3, r4
 8003458:	eb18 0303 	adds.w	r3, r8, r3
 800345c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003460:	462b      	mov	r3, r5
 8003462:	eb49 0303 	adc.w	r3, r9, r3
 8003466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003476:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800347a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800347e:	460b      	mov	r3, r1
 8003480:	18db      	adds	r3, r3, r3
 8003482:	653b      	str	r3, [r7, #80]	; 0x50
 8003484:	4613      	mov	r3, r2
 8003486:	eb42 0303 	adc.w	r3, r2, r3
 800348a:	657b      	str	r3, [r7, #84]	; 0x54
 800348c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003494:	f7fd fba8 	bl	8000be8 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b61      	ldr	r3, [pc, #388]	; (8003624 <UART_SetConfig+0x2d4>)
 800349e:	fba3 2302 	umull	r2, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	011c      	lsls	r4, r3, #4
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c0:	415b      	adcs	r3, r3
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034c8:	4641      	mov	r1, r8
 80034ca:	eb12 0a01 	adds.w	sl, r2, r1
 80034ce:	4649      	mov	r1, r9
 80034d0:	eb43 0b01 	adc.w	fp, r3, r1
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e8:	4692      	mov	sl, r2
 80034ea:	469b      	mov	fp, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	eb1a 0303 	adds.w	r3, sl, r3
 80034f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb4b 0303 	adc.w	r3, fp, r3
 80034fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800350c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003514:	460b      	mov	r3, r1
 8003516:	18db      	adds	r3, r3, r3
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
 800351a:	4613      	mov	r3, r2
 800351c:	eb42 0303 	adc.w	r3, r2, r3
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
 8003522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800352a:	f7fd fb5d 	bl	8000be8 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4611      	mov	r1, r2
 8003534:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <UART_SetConfig+0x2d4>)
 8003536:	fba3 2301 	umull	r2, r3, r3, r1
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2264      	movs	r2, #100	; 0x64
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	1acb      	subs	r3, r1, r3
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800354a:	4b36      	ldr	r3, [pc, #216]	; (8003624 <UART_SetConfig+0x2d4>)
 800354c:	fba3 2302 	umull	r2, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003558:	441c      	add	r4, r3
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003564:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	63b9      	str	r1, [r7, #56]	; 0x38
 8003574:	415b      	adcs	r3, r3
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800357c:	4641      	mov	r1, r8
 800357e:	1851      	adds	r1, r2, r1
 8003580:	6339      	str	r1, [r7, #48]	; 0x30
 8003582:	4649      	mov	r1, r9
 8003584:	414b      	adcs	r3, r1
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003594:	4659      	mov	r1, fp
 8003596:	00cb      	lsls	r3, r1, #3
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359e:	4651      	mov	r1, sl
 80035a0:	00ca      	lsls	r2, r1, #3
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	4642      	mov	r2, r8
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b0:	464b      	mov	r3, r9
 80035b2:	460a      	mov	r2, r1
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035d0:	460b      	mov	r3, r1
 80035d2:	18db      	adds	r3, r3, r3
 80035d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d6:	4613      	mov	r3, r2
 80035d8:	eb42 0303 	adc.w	r3, r2, r3
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035e6:	f7fd faff 	bl	8000be8 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <UART_SetConfig+0x2d4>)
 80035f0:	fba3 1302 	umull	r1, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	2164      	movs	r1, #100	; 0x64
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	3332      	adds	r3, #50	; 0x32
 8003602:	4a08      	ldr	r2, [pc, #32]	; (8003624 <UART_SetConfig+0x2d4>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	f003 0207 	and.w	r2, r3, #7
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4422      	add	r2, r4
 8003616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003618:	e105      	b.n	8003826 <UART_SetConfig+0x4d6>
 800361a:	bf00      	nop
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800363a:	4642      	mov	r2, r8
 800363c:	464b      	mov	r3, r9
 800363e:	1891      	adds	r1, r2, r2
 8003640:	6239      	str	r1, [r7, #32]
 8003642:	415b      	adcs	r3, r3
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364a:	4641      	mov	r1, r8
 800364c:	1854      	adds	r4, r2, r1
 800364e:	4649      	mov	r1, r9
 8003650:	eb43 0501 	adc.w	r5, r3, r1
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003670:	464b      	mov	r3, r9
 8003672:	eb45 0303 	adc.w	r3, r5, r3
 8003676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003696:	4629      	mov	r1, r5
 8003698:	008b      	lsls	r3, r1, #2
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a0:	4621      	mov	r1, r4
 80036a2:	008a      	lsls	r2, r1, #2
 80036a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036a8:	f7fd fa9e 	bl	8000be8 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4b60      	ldr	r3, [pc, #384]	; (8003834 <UART_SetConfig+0x4e4>)
 80036b2:	fba3 2302 	umull	r2, r3, r3, r2
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	011c      	lsls	r4, r3, #4
 80036ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036be:	2200      	movs	r2, #0
 80036c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	1891      	adds	r1, r2, r2
 80036d2:	61b9      	str	r1, [r7, #24]
 80036d4:	415b      	adcs	r3, r3
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036dc:	4641      	mov	r1, r8
 80036de:	1851      	adds	r1, r2, r1
 80036e0:	6139      	str	r1, [r7, #16]
 80036e2:	4649      	mov	r1, r9
 80036e4:	414b      	adcs	r3, r1
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f4:	4659      	mov	r1, fp
 80036f6:	00cb      	lsls	r3, r1, #3
 80036f8:	4651      	mov	r1, sl
 80036fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fe:	4651      	mov	r1, sl
 8003700:	00ca      	lsls	r2, r1, #3
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	4603      	mov	r3, r0
 8003708:	4642      	mov	r2, r8
 800370a:	189b      	adds	r3, r3, r2
 800370c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003710:	464b      	mov	r3, r9
 8003712:	460a      	mov	r2, r1
 8003714:	eb42 0303 	adc.w	r3, r2, r3
 8003718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	67bb      	str	r3, [r7, #120]	; 0x78
 8003726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003734:	4649      	mov	r1, r9
 8003736:	008b      	lsls	r3, r1, #2
 8003738:	4641      	mov	r1, r8
 800373a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800373e:	4641      	mov	r1, r8
 8003740:	008a      	lsls	r2, r1, #2
 8003742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003746:	f7fd fa4f 	bl	8000be8 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4b39      	ldr	r3, [pc, #228]	; (8003834 <UART_SetConfig+0x4e4>)
 8003750:	fba3 1302 	umull	r1, r3, r3, r2
 8003754:	095b      	lsrs	r3, r3, #5
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	3332      	adds	r3, #50	; 0x32
 8003762:	4a34      	ldr	r2, [pc, #208]	; (8003834 <UART_SetConfig+0x4e4>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800376e:	441c      	add	r4, r3
 8003770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003774:	2200      	movs	r2, #0
 8003776:	673b      	str	r3, [r7, #112]	; 0x70
 8003778:	677a      	str	r2, [r7, #116]	; 0x74
 800377a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800377e:	4642      	mov	r2, r8
 8003780:	464b      	mov	r3, r9
 8003782:	1891      	adds	r1, r2, r2
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	415b      	adcs	r3, r3
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378e:	4641      	mov	r1, r8
 8003790:	1851      	adds	r1, r2, r1
 8003792:	6039      	str	r1, [r7, #0]
 8003794:	4649      	mov	r1, r9
 8003796:	414b      	adcs	r3, r1
 8003798:	607b      	str	r3, [r7, #4]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037a6:	4659      	mov	r1, fp
 80037a8:	00cb      	lsls	r3, r1, #3
 80037aa:	4651      	mov	r1, sl
 80037ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b0:	4651      	mov	r1, sl
 80037b2:	00ca      	lsls	r2, r1, #3
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	4603      	mov	r3, r0
 80037ba:	4642      	mov	r2, r8
 80037bc:	189b      	adds	r3, r3, r2
 80037be:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c0:	464b      	mov	r3, r9
 80037c2:	460a      	mov	r2, r1
 80037c4:	eb42 0303 	adc.w	r3, r2, r3
 80037c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	663b      	str	r3, [r7, #96]	; 0x60
 80037d4:	667a      	str	r2, [r7, #100]	; 0x64
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037e2:	4649      	mov	r1, r9
 80037e4:	008b      	lsls	r3, r1, #2
 80037e6:	4641      	mov	r1, r8
 80037e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ec:	4641      	mov	r1, r8
 80037ee:	008a      	lsls	r2, r1, #2
 80037f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037f4:	f7fd f9f8 	bl	8000be8 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <UART_SetConfig+0x4e4>)
 80037fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2164      	movs	r1, #100	; 0x64
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a08      	ldr	r2, [pc, #32]	; (8003834 <UART_SetConfig+0x4e4>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4422      	add	r2, r4
 8003824:	609a      	str	r2, [r3, #8]
}
 8003826:	bf00      	nop
 8003828:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003832:	bf00      	nop
 8003834:	51eb851f 	.word	0x51eb851f

08003838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003838:	b084      	sub	sp, #16
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	f107 001c 	add.w	r0, r7, #28
 8003846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	2b01      	cmp	r3, #1
 800384e:	d122      	bne.n	8003896 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d105      	bne.n	800388a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa9c 	bl	8003dc8 <USB_CoreReset>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e01a      	b.n	80038cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa90 	bl	8003dc8 <USB_CoreReset>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
 80038be:	e005      	b.n	80038cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10b      	bne.n	80038ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f043 0206 	orr.w	r2, r3, #6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f6:	b004      	add	sp, #16
 80038f8:	4770      	bx	lr

080038fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d115      	bne.n	800396a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800394a:	2001      	movs	r0, #1
 800394c:	f7fd ff5c 	bl	8001808 <HAL_Delay>
      ms++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa28 	bl	8003dac <USB_GetMode>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d01e      	beq.n	80039a0 <USB_SetCurrentMode+0x84>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b31      	cmp	r3, #49	; 0x31
 8003966:	d9f0      	bls.n	800394a <USB_SetCurrentMode+0x2e>
 8003968:	e01a      	b.n	80039a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d115      	bne.n	800399c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800397c:	2001      	movs	r0, #1
 800397e:	f7fd ff43 	bl	8001808 <HAL_Delay>
      ms++;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa0f 	bl	8003dac <USB_GetMode>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <USB_SetCurrentMode+0x84>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b31      	cmp	r3, #49	; 0x31
 8003998:	d9f0      	bls.n	800397c <USB_SetCurrentMode+0x60>
 800399a:	e001      	b.n	80039a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e005      	b.n	80039ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b32      	cmp	r3, #50	; 0x32
 80039a4:	d101      	bne.n	80039aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039b4:	b084      	sub	sp, #16
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e009      	b.n	80039e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3340      	adds	r3, #64	; 0x40
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b0e      	cmp	r3, #14
 80039ec:	d9f2      	bls.n	80039d4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11c      	bne.n	8003a2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e005      	b.n	8003a3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2300      	movs	r3, #0
 8003a44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	680b      	ldr	r3, [r1, #0]
 8003a58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d10c      	bne.n	8003a7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f965 	bl	8003d38 <USB_SetDevSpeed>
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a70:	2101      	movs	r1, #1
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f960 	bl	8003d38 <USB_SetDevSpeed>
 8003a78:	e003      	b.n	8003a82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f95b 	bl	8003d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a82:	2110      	movs	r1, #16
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8f3 	bl	8003c70 <USB_FlushTxFifo>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f91f 	bl	8003cd8 <USB_FlushRxFifo>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2300      	movs	r3, #0
 8003aae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e043      	b.n	8003b56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae4:	d118      	bne.n	8003b18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e013      	b.n	8003b2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e008      	b.n	8003b2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	2300      	movs	r3, #0
 8003b28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	3301      	adds	r3, #1
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d3b7      	bcc.n	8003ace <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	e043      	b.n	8003bec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7a:	d118      	bne.n	8003bae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e013      	b.n	8003bc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e008      	b.n	8003bc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3301      	adds	r3, #1
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3b7      	bcc.n	8003b64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f043 0210 	orr.w	r2, r3, #16
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <USB_DevInit+0x2b8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f043 0208 	orr.w	r2, r3, #8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c68:	b004      	add	sp, #16
 8003c6a:	4770      	bx	lr
 8003c6c:	803c3800 	.word	0x803c3800

08003c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <USB_FlushTxFifo+0x64>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e01b      	b.n	8003cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	daf2      	bge.n	8003c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <USB_FlushTxFifo+0x64>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e006      	b.n	8003cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d0f0      	beq.n	8003ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	00030d40 	.word	0x00030d40

08003cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <USB_FlushRxFifo+0x5c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e018      	b.n	8003d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	daf2      	bge.n	8003ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2210      	movs	r2, #16
 8003d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <USB_FlushRxFifo+0x5c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e006      	b.n	8003d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d0f0      	beq.n	8003d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	00030d40 	.word	0x00030d40

08003d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d84:	f023 0303 	bic.w	r3, r3, #3
 8003d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d98:	f043 0302 	orr.w	r3, r3, #2
 8003d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0301 	and.w	r3, r3, #1
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <USB_CoreReset+0x64>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e01b      	b.n	8003e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	daf2      	bge.n	8003dd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <USB_CoreReset+0x64>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e006      	b.n	8003e1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d0f0      	beq.n	8003dfe <USB_CoreReset+0x36>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	00030d40 	.word	0x00030d40

08003e30 <__errno>:
 8003e30:	4b01      	ldr	r3, [pc, #4]	; (8003e38 <__errno+0x8>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <__libc_init_array>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	4d0d      	ldr	r5, [pc, #52]	; (8003e74 <__libc_init_array+0x38>)
 8003e40:	4c0d      	ldr	r4, [pc, #52]	; (8003e78 <__libc_init_array+0x3c>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	2600      	movs	r6, #0
 8003e48:	42a6      	cmp	r6, r4
 8003e4a:	d109      	bne.n	8003e60 <__libc_init_array+0x24>
 8003e4c:	4d0b      	ldr	r5, [pc, #44]	; (8003e7c <__libc_init_array+0x40>)
 8003e4e:	4c0c      	ldr	r4, [pc, #48]	; (8003e80 <__libc_init_array+0x44>)
 8003e50:	f002 fd36 	bl	80068c0 <_init>
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	2600      	movs	r6, #0
 8003e5a:	42a6      	cmp	r6, r4
 8003e5c:	d105      	bne.n	8003e6a <__libc_init_array+0x2e>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e64:	4798      	blx	r3
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7ee      	b.n	8003e48 <__libc_init_array+0xc>
 8003e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e6e:	4798      	blx	r3
 8003e70:	3601      	adds	r6, #1
 8003e72:	e7f2      	b.n	8003e5a <__libc_init_array+0x1e>
 8003e74:	08006cd4 	.word	0x08006cd4
 8003e78:	08006cd4 	.word	0x08006cd4
 8003e7c:	08006cd4 	.word	0x08006cd4
 8003e80:	08006cd8 	.word	0x08006cd8

08003e84 <memset>:
 8003e84:	4402      	add	r2, r0
 8003e86:	4603      	mov	r3, r0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d100      	bne.n	8003e8e <memset+0xa>
 8003e8c:	4770      	bx	lr
 8003e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e92:	e7f9      	b.n	8003e88 <memset+0x4>

08003e94 <__cvt>:
 8003e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	ec55 4b10 	vmov	r4, r5, d0
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	460e      	mov	r6, r1
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	bfbb      	ittet	lt
 8003ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003eaa:	461d      	movlt	r5, r3
 8003eac:	2300      	movge	r3, #0
 8003eae:	232d      	movlt	r3, #45	; 0x2d
 8003eb0:	700b      	strb	r3, [r1, #0]
 8003eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003eb8:	4691      	mov	r9, r2
 8003eba:	f023 0820 	bic.w	r8, r3, #32
 8003ebe:	bfbc      	itt	lt
 8003ec0:	4622      	movlt	r2, r4
 8003ec2:	4614      	movlt	r4, r2
 8003ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ec8:	d005      	beq.n	8003ed6 <__cvt+0x42>
 8003eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ece:	d100      	bne.n	8003ed2 <__cvt+0x3e>
 8003ed0:	3601      	adds	r6, #1
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	e000      	b.n	8003ed8 <__cvt+0x44>
 8003ed6:	2103      	movs	r1, #3
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	ab02      	add	r3, sp, #8
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	ec45 4b10 	vmov	d0, r4, r5
 8003ee4:	4653      	mov	r3, sl
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	f000 fcca 	bl	8004880 <_dtoa_r>
 8003eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	d102      	bne.n	8003efa <__cvt+0x66>
 8003ef4:	f019 0f01 	tst.w	r9, #1
 8003ef8:	d022      	beq.n	8003f40 <__cvt+0xac>
 8003efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003efe:	eb07 0906 	add.w	r9, r7, r6
 8003f02:	d110      	bne.n	8003f26 <__cvt+0x92>
 8003f04:	783b      	ldrb	r3, [r7, #0]
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d10a      	bne.n	8003f20 <__cvt+0x8c>
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4620      	mov	r0, r4
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7fc fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8003f16:	b918      	cbnz	r0, 8003f20 <__cvt+0x8c>
 8003f18:	f1c6 0601 	rsb	r6, r6, #1
 8003f1c:	f8ca 6000 	str.w	r6, [sl]
 8003f20:	f8da 3000 	ldr.w	r3, [sl]
 8003f24:	4499      	add	r9, r3
 8003f26:	2200      	movs	r2, #0
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	f7fc fdeb 	bl	8000b08 <__aeabi_dcmpeq>
 8003f32:	b108      	cbz	r0, 8003f38 <__cvt+0xa4>
 8003f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f38:	2230      	movs	r2, #48	; 0x30
 8003f3a:	9b03      	ldr	r3, [sp, #12]
 8003f3c:	454b      	cmp	r3, r9
 8003f3e:	d307      	bcc.n	8003f50 <__cvt+0xbc>
 8003f40:	9b03      	ldr	r3, [sp, #12]
 8003f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f44:	1bdb      	subs	r3, r3, r7
 8003f46:	4638      	mov	r0, r7
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	b004      	add	sp, #16
 8003f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f50:	1c59      	adds	r1, r3, #1
 8003f52:	9103      	str	r1, [sp, #12]
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e7f0      	b.n	8003f3a <__cvt+0xa6>

08003f58 <__exponent>:
 8003f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	bfb8      	it	lt
 8003f60:	4249      	neglt	r1, r1
 8003f62:	f803 2b02 	strb.w	r2, [r3], #2
 8003f66:	bfb4      	ite	lt
 8003f68:	222d      	movlt	r2, #45	; 0x2d
 8003f6a:	222b      	movge	r2, #43	; 0x2b
 8003f6c:	2909      	cmp	r1, #9
 8003f6e:	7042      	strb	r2, [r0, #1]
 8003f70:	dd2a      	ble.n	8003fc8 <__exponent+0x70>
 8003f72:	f10d 0407 	add.w	r4, sp, #7
 8003f76:	46a4      	mov	ip, r4
 8003f78:	270a      	movs	r7, #10
 8003f7a:	46a6      	mov	lr, r4
 8003f7c:	460a      	mov	r2, r1
 8003f7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f82:	fb07 1516 	mls	r5, r7, r6, r1
 8003f86:	3530      	adds	r5, #48	; 0x30
 8003f88:	2a63      	cmp	r2, #99	; 0x63
 8003f8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f92:	4631      	mov	r1, r6
 8003f94:	dcf1      	bgt.n	8003f7a <__exponent+0x22>
 8003f96:	3130      	adds	r1, #48	; 0x30
 8003f98:	f1ae 0502 	sub.w	r5, lr, #2
 8003f9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003fa0:	1c44      	adds	r4, r0, #1
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4561      	cmp	r1, ip
 8003fa6:	d30a      	bcc.n	8003fbe <__exponent+0x66>
 8003fa8:	f10d 0209 	add.w	r2, sp, #9
 8003fac:	eba2 020e 	sub.w	r2, r2, lr
 8003fb0:	4565      	cmp	r5, ip
 8003fb2:	bf88      	it	hi
 8003fb4:	2200      	movhi	r2, #0
 8003fb6:	4413      	add	r3, r2
 8003fb8:	1a18      	subs	r0, r3, r0
 8003fba:	b003      	add	sp, #12
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003fc6:	e7ed      	b.n	8003fa4 <__exponent+0x4c>
 8003fc8:	2330      	movs	r3, #48	; 0x30
 8003fca:	3130      	adds	r1, #48	; 0x30
 8003fcc:	7083      	strb	r3, [r0, #2]
 8003fce:	70c1      	strb	r1, [r0, #3]
 8003fd0:	1d03      	adds	r3, r0, #4
 8003fd2:	e7f1      	b.n	8003fb8 <__exponent+0x60>

08003fd4 <_printf_float>:
 8003fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd8:	ed2d 8b02 	vpush	{d8}
 8003fdc:	b08d      	sub	sp, #52	; 0x34
 8003fde:	460c      	mov	r4, r1
 8003fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fe4:	4616      	mov	r6, r2
 8003fe6:	461f      	mov	r7, r3
 8003fe8:	4605      	mov	r5, r0
 8003fea:	f001 fa37 	bl	800545c <_localeconv_r>
 8003fee:	f8d0 a000 	ldr.w	sl, [r0]
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	f7fc f90c 	bl	8000210 <strlen>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	9305      	str	r3, [sp, #20]
 8004000:	f8d8 3000 	ldr.w	r3, [r8]
 8004004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004008:	3307      	adds	r3, #7
 800400a:	f023 0307 	bic.w	r3, r3, #7
 800400e:	f103 0208 	add.w	r2, r3, #8
 8004012:	f8c8 2000 	str.w	r2, [r8]
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800401e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004026:	9307      	str	r3, [sp, #28]
 8004028:	f8cd 8018 	str.w	r8, [sp, #24]
 800402c:	ee08 0a10 	vmov	s16, r0
 8004030:	4b9f      	ldr	r3, [pc, #636]	; (80042b0 <_printf_float+0x2dc>)
 8004032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403a:	f7fc fd97 	bl	8000b6c <__aeabi_dcmpun>
 800403e:	bb88      	cbnz	r0, 80040a4 <_printf_float+0xd0>
 8004040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004044:	4b9a      	ldr	r3, [pc, #616]	; (80042b0 <_printf_float+0x2dc>)
 8004046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800404a:	f7fc fd71 	bl	8000b30 <__aeabi_dcmple>
 800404e:	bb48      	cbnz	r0, 80040a4 <_printf_float+0xd0>
 8004050:	2200      	movs	r2, #0
 8004052:	2300      	movs	r3, #0
 8004054:	4640      	mov	r0, r8
 8004056:	4649      	mov	r1, r9
 8004058:	f7fc fd60 	bl	8000b1c <__aeabi_dcmplt>
 800405c:	b110      	cbz	r0, 8004064 <_printf_float+0x90>
 800405e:	232d      	movs	r3, #45	; 0x2d
 8004060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004064:	4b93      	ldr	r3, [pc, #588]	; (80042b4 <_printf_float+0x2e0>)
 8004066:	4894      	ldr	r0, [pc, #592]	; (80042b8 <_printf_float+0x2e4>)
 8004068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800406c:	bf94      	ite	ls
 800406e:	4698      	movls	r8, r3
 8004070:	4680      	movhi	r8, r0
 8004072:	2303      	movs	r3, #3
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	9b05      	ldr	r3, [sp, #20]
 8004078:	f023 0204 	bic.w	r2, r3, #4
 800407c:	6022      	str	r2, [r4, #0]
 800407e:	f04f 0900 	mov.w	r9, #0
 8004082:	9700      	str	r7, [sp, #0]
 8004084:	4633      	mov	r3, r6
 8004086:	aa0b      	add	r2, sp, #44	; 0x2c
 8004088:	4621      	mov	r1, r4
 800408a:	4628      	mov	r0, r5
 800408c:	f000 f9d8 	bl	8004440 <_printf_common>
 8004090:	3001      	adds	r0, #1
 8004092:	f040 8090 	bne.w	80041b6 <_printf_float+0x1e2>
 8004096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800409a:	b00d      	add	sp, #52	; 0x34
 800409c:	ecbd 8b02 	vpop	{d8}
 80040a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	4640      	mov	r0, r8
 80040aa:	4649      	mov	r1, r9
 80040ac:	f7fc fd5e 	bl	8000b6c <__aeabi_dcmpun>
 80040b0:	b140      	cbz	r0, 80040c4 <_printf_float+0xf0>
 80040b2:	464b      	mov	r3, r9
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bfbc      	itt	lt
 80040b8:	232d      	movlt	r3, #45	; 0x2d
 80040ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040be:	487f      	ldr	r0, [pc, #508]	; (80042bc <_printf_float+0x2e8>)
 80040c0:	4b7f      	ldr	r3, [pc, #508]	; (80042c0 <_printf_float+0x2ec>)
 80040c2:	e7d1      	b.n	8004068 <_printf_float+0x94>
 80040c4:	6863      	ldr	r3, [r4, #4]
 80040c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040ca:	9206      	str	r2, [sp, #24]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	d13f      	bne.n	8004150 <_printf_float+0x17c>
 80040d0:	2306      	movs	r3, #6
 80040d2:	6063      	str	r3, [r4, #4]
 80040d4:	9b05      	ldr	r3, [sp, #20]
 80040d6:	6861      	ldr	r1, [r4, #4]
 80040d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040dc:	2300      	movs	r3, #0
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	ab0a      	add	r3, sp, #40	; 0x28
 80040e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040e6:	ab09      	add	r3, sp, #36	; 0x24
 80040e8:	ec49 8b10 	vmov	d0, r8, r9
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	6022      	str	r2, [r4, #0]
 80040f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040f4:	4628      	mov	r0, r5
 80040f6:	f7ff fecd 	bl	8003e94 <__cvt>
 80040fa:	9b06      	ldr	r3, [sp, #24]
 80040fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040fe:	2b47      	cmp	r3, #71	; 0x47
 8004100:	4680      	mov	r8, r0
 8004102:	d108      	bne.n	8004116 <_printf_float+0x142>
 8004104:	1cc8      	adds	r0, r1, #3
 8004106:	db02      	blt.n	800410e <_printf_float+0x13a>
 8004108:	6863      	ldr	r3, [r4, #4]
 800410a:	4299      	cmp	r1, r3
 800410c:	dd41      	ble.n	8004192 <_printf_float+0x1be>
 800410e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004112:	fa5f fb8b 	uxtb.w	fp, fp
 8004116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800411a:	d820      	bhi.n	800415e <_printf_float+0x18a>
 800411c:	3901      	subs	r1, #1
 800411e:	465a      	mov	r2, fp
 8004120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004124:	9109      	str	r1, [sp, #36]	; 0x24
 8004126:	f7ff ff17 	bl	8003f58 <__exponent>
 800412a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800412c:	1813      	adds	r3, r2, r0
 800412e:	2a01      	cmp	r2, #1
 8004130:	4681      	mov	r9, r0
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	dc02      	bgt.n	800413c <_printf_float+0x168>
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	07d2      	lsls	r2, r2, #31
 800413a:	d501      	bpl.n	8004140 <_printf_float+0x16c>
 800413c:	3301      	adds	r3, #1
 800413e:	6123      	str	r3, [r4, #16]
 8004140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004144:	2b00      	cmp	r3, #0
 8004146:	d09c      	beq.n	8004082 <_printf_float+0xae>
 8004148:	232d      	movs	r3, #45	; 0x2d
 800414a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414e:	e798      	b.n	8004082 <_printf_float+0xae>
 8004150:	9a06      	ldr	r2, [sp, #24]
 8004152:	2a47      	cmp	r2, #71	; 0x47
 8004154:	d1be      	bne.n	80040d4 <_printf_float+0x100>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1bc      	bne.n	80040d4 <_printf_float+0x100>
 800415a:	2301      	movs	r3, #1
 800415c:	e7b9      	b.n	80040d2 <_printf_float+0xfe>
 800415e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004162:	d118      	bne.n	8004196 <_printf_float+0x1c2>
 8004164:	2900      	cmp	r1, #0
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	dd0b      	ble.n	8004182 <_printf_float+0x1ae>
 800416a:	6121      	str	r1, [r4, #16]
 800416c:	b913      	cbnz	r3, 8004174 <_printf_float+0x1a0>
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	07d0      	lsls	r0, r2, #31
 8004172:	d502      	bpl.n	800417a <_printf_float+0x1a6>
 8004174:	3301      	adds	r3, #1
 8004176:	440b      	add	r3, r1
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	65a1      	str	r1, [r4, #88]	; 0x58
 800417c:	f04f 0900 	mov.w	r9, #0
 8004180:	e7de      	b.n	8004140 <_printf_float+0x16c>
 8004182:	b913      	cbnz	r3, 800418a <_printf_float+0x1b6>
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	07d2      	lsls	r2, r2, #31
 8004188:	d501      	bpl.n	800418e <_printf_float+0x1ba>
 800418a:	3302      	adds	r3, #2
 800418c:	e7f4      	b.n	8004178 <_printf_float+0x1a4>
 800418e:	2301      	movs	r3, #1
 8004190:	e7f2      	b.n	8004178 <_printf_float+0x1a4>
 8004192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004198:	4299      	cmp	r1, r3
 800419a:	db05      	blt.n	80041a8 <_printf_float+0x1d4>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	6121      	str	r1, [r4, #16]
 80041a0:	07d8      	lsls	r0, r3, #31
 80041a2:	d5ea      	bpl.n	800417a <_printf_float+0x1a6>
 80041a4:	1c4b      	adds	r3, r1, #1
 80041a6:	e7e7      	b.n	8004178 <_printf_float+0x1a4>
 80041a8:	2900      	cmp	r1, #0
 80041aa:	bfd4      	ite	le
 80041ac:	f1c1 0202 	rsble	r2, r1, #2
 80041b0:	2201      	movgt	r2, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	e7e0      	b.n	8004178 <_printf_float+0x1a4>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	055a      	lsls	r2, r3, #21
 80041ba:	d407      	bmi.n	80041cc <_printf_float+0x1f8>
 80041bc:	6923      	ldr	r3, [r4, #16]
 80041be:	4642      	mov	r2, r8
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	d12c      	bne.n	8004224 <_printf_float+0x250>
 80041ca:	e764      	b.n	8004096 <_printf_float+0xc2>
 80041cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041d0:	f240 80e0 	bls.w	8004394 <_printf_float+0x3c0>
 80041d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041d8:	2200      	movs	r2, #0
 80041da:	2300      	movs	r3, #0
 80041dc:	f7fc fc94 	bl	8000b08 <__aeabi_dcmpeq>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d034      	beq.n	800424e <_printf_float+0x27a>
 80041e4:	4a37      	ldr	r2, [pc, #220]	; (80042c4 <_printf_float+0x2f0>)
 80041e6:	2301      	movs	r3, #1
 80041e8:	4631      	mov	r1, r6
 80041ea:	4628      	mov	r0, r5
 80041ec:	47b8      	blx	r7
 80041ee:	3001      	adds	r0, #1
 80041f0:	f43f af51 	beq.w	8004096 <_printf_float+0xc2>
 80041f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041f8:	429a      	cmp	r2, r3
 80041fa:	db02      	blt.n	8004202 <_printf_float+0x22e>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07d8      	lsls	r0, r3, #31
 8004200:	d510      	bpl.n	8004224 <_printf_float+0x250>
 8004202:	ee18 3a10 	vmov	r3, s16
 8004206:	4652      	mov	r2, sl
 8004208:	4631      	mov	r1, r6
 800420a:	4628      	mov	r0, r5
 800420c:	47b8      	blx	r7
 800420e:	3001      	adds	r0, #1
 8004210:	f43f af41 	beq.w	8004096 <_printf_float+0xc2>
 8004214:	f04f 0800 	mov.w	r8, #0
 8004218:	f104 091a 	add.w	r9, r4, #26
 800421c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	4543      	cmp	r3, r8
 8004222:	dc09      	bgt.n	8004238 <_printf_float+0x264>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	079b      	lsls	r3, r3, #30
 8004228:	f100 8105 	bmi.w	8004436 <_printf_float+0x462>
 800422c:	68e0      	ldr	r0, [r4, #12]
 800422e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004230:	4298      	cmp	r0, r3
 8004232:	bfb8      	it	lt
 8004234:	4618      	movlt	r0, r3
 8004236:	e730      	b.n	800409a <_printf_float+0xc6>
 8004238:	2301      	movs	r3, #1
 800423a:	464a      	mov	r2, r9
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f af27 	beq.w	8004096 <_printf_float+0xc2>
 8004248:	f108 0801 	add.w	r8, r8, #1
 800424c:	e7e6      	b.n	800421c <_printf_float+0x248>
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	dc39      	bgt.n	80042c8 <_printf_float+0x2f4>
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <_printf_float+0x2f0>)
 8004256:	2301      	movs	r3, #1
 8004258:	4631      	mov	r1, r6
 800425a:	4628      	mov	r0, r5
 800425c:	47b8      	blx	r7
 800425e:	3001      	adds	r0, #1
 8004260:	f43f af19 	beq.w	8004096 <_printf_float+0xc2>
 8004264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004268:	4313      	orrs	r3, r2
 800426a:	d102      	bne.n	8004272 <_printf_float+0x29e>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	07d9      	lsls	r1, r3, #31
 8004270:	d5d8      	bpl.n	8004224 <_printf_float+0x250>
 8004272:	ee18 3a10 	vmov	r3, s16
 8004276:	4652      	mov	r2, sl
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f af09 	beq.w	8004096 <_printf_float+0xc2>
 8004284:	f04f 0900 	mov.w	r9, #0
 8004288:	f104 0a1a 	add.w	sl, r4, #26
 800428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428e:	425b      	negs	r3, r3
 8004290:	454b      	cmp	r3, r9
 8004292:	dc01      	bgt.n	8004298 <_printf_float+0x2c4>
 8004294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004296:	e792      	b.n	80041be <_printf_float+0x1ea>
 8004298:	2301      	movs	r3, #1
 800429a:	4652      	mov	r2, sl
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	47b8      	blx	r7
 80042a2:	3001      	adds	r0, #1
 80042a4:	f43f aef7 	beq.w	8004096 <_printf_float+0xc2>
 80042a8:	f109 0901 	add.w	r9, r9, #1
 80042ac:	e7ee      	b.n	800428c <_printf_float+0x2b8>
 80042ae:	bf00      	nop
 80042b0:	7fefffff 	.word	0x7fefffff
 80042b4:	080068f4 	.word	0x080068f4
 80042b8:	080068f8 	.word	0x080068f8
 80042bc:	08006900 	.word	0x08006900
 80042c0:	080068fc 	.word	0x080068fc
 80042c4:	08006904 	.word	0x08006904
 80042c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042cc:	429a      	cmp	r2, r3
 80042ce:	bfa8      	it	ge
 80042d0:	461a      	movge	r2, r3
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	4691      	mov	r9, r2
 80042d6:	dc37      	bgt.n	8004348 <_printf_float+0x374>
 80042d8:	f04f 0b00 	mov.w	fp, #0
 80042dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042e0:	f104 021a 	add.w	r2, r4, #26
 80042e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e6:	9305      	str	r3, [sp, #20]
 80042e8:	eba3 0309 	sub.w	r3, r3, r9
 80042ec:	455b      	cmp	r3, fp
 80042ee:	dc33      	bgt.n	8004358 <_printf_float+0x384>
 80042f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042f4:	429a      	cmp	r2, r3
 80042f6:	db3b      	blt.n	8004370 <_printf_float+0x39c>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	07da      	lsls	r2, r3, #31
 80042fc:	d438      	bmi.n	8004370 <_printf_float+0x39c>
 80042fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004300:	9a05      	ldr	r2, [sp, #20]
 8004302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004304:	1a9a      	subs	r2, r3, r2
 8004306:	eba3 0901 	sub.w	r9, r3, r1
 800430a:	4591      	cmp	r9, r2
 800430c:	bfa8      	it	ge
 800430e:	4691      	movge	r9, r2
 8004310:	f1b9 0f00 	cmp.w	r9, #0
 8004314:	dc35      	bgt.n	8004382 <_printf_float+0x3ae>
 8004316:	f04f 0800 	mov.w	r8, #0
 800431a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800431e:	f104 0a1a 	add.w	sl, r4, #26
 8004322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	eba3 0309 	sub.w	r3, r3, r9
 800432c:	4543      	cmp	r3, r8
 800432e:	f77f af79 	ble.w	8004224 <_printf_float+0x250>
 8004332:	2301      	movs	r3, #1
 8004334:	4652      	mov	r2, sl
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	f43f aeaa 	beq.w	8004096 <_printf_float+0xc2>
 8004342:	f108 0801 	add.w	r8, r8, #1
 8004346:	e7ec      	b.n	8004322 <_printf_float+0x34e>
 8004348:	4613      	mov	r3, r2
 800434a:	4631      	mov	r1, r6
 800434c:	4642      	mov	r2, r8
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	d1c0      	bne.n	80042d8 <_printf_float+0x304>
 8004356:	e69e      	b.n	8004096 <_printf_float+0xc2>
 8004358:	2301      	movs	r3, #1
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	9205      	str	r2, [sp, #20]
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f ae97 	beq.w	8004096 <_printf_float+0xc2>
 8004368:	9a05      	ldr	r2, [sp, #20]
 800436a:	f10b 0b01 	add.w	fp, fp, #1
 800436e:	e7b9      	b.n	80042e4 <_printf_float+0x310>
 8004370:	ee18 3a10 	vmov	r3, s16
 8004374:	4652      	mov	r2, sl
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	47b8      	blx	r7
 800437c:	3001      	adds	r0, #1
 800437e:	d1be      	bne.n	80042fe <_printf_float+0x32a>
 8004380:	e689      	b.n	8004096 <_printf_float+0xc2>
 8004382:	9a05      	ldr	r2, [sp, #20]
 8004384:	464b      	mov	r3, r9
 8004386:	4442      	add	r2, r8
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	d1c1      	bne.n	8004316 <_printf_float+0x342>
 8004392:	e680      	b.n	8004096 <_printf_float+0xc2>
 8004394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004396:	2a01      	cmp	r2, #1
 8004398:	dc01      	bgt.n	800439e <_printf_float+0x3ca>
 800439a:	07db      	lsls	r3, r3, #31
 800439c:	d538      	bpl.n	8004410 <_printf_float+0x43c>
 800439e:	2301      	movs	r3, #1
 80043a0:	4642      	mov	r2, r8
 80043a2:	4631      	mov	r1, r6
 80043a4:	4628      	mov	r0, r5
 80043a6:	47b8      	blx	r7
 80043a8:	3001      	adds	r0, #1
 80043aa:	f43f ae74 	beq.w	8004096 <_printf_float+0xc2>
 80043ae:	ee18 3a10 	vmov	r3, s16
 80043b2:	4652      	mov	r2, sl
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	f43f ae6b 	beq.w	8004096 <_printf_float+0xc2>
 80043c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043c4:	2200      	movs	r2, #0
 80043c6:	2300      	movs	r3, #0
 80043c8:	f7fc fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 80043cc:	b9d8      	cbnz	r0, 8004406 <_printf_float+0x432>
 80043ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043d0:	f108 0201 	add.w	r2, r8, #1
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	47b8      	blx	r7
 80043dc:	3001      	adds	r0, #1
 80043de:	d10e      	bne.n	80043fe <_printf_float+0x42a>
 80043e0:	e659      	b.n	8004096 <_printf_float+0xc2>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4652      	mov	r2, sl
 80043e6:	4631      	mov	r1, r6
 80043e8:	4628      	mov	r0, r5
 80043ea:	47b8      	blx	r7
 80043ec:	3001      	adds	r0, #1
 80043ee:	f43f ae52 	beq.w	8004096 <_printf_float+0xc2>
 80043f2:	f108 0801 	add.w	r8, r8, #1
 80043f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	4543      	cmp	r3, r8
 80043fc:	dcf1      	bgt.n	80043e2 <_printf_float+0x40e>
 80043fe:	464b      	mov	r3, r9
 8004400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004404:	e6dc      	b.n	80041c0 <_printf_float+0x1ec>
 8004406:	f04f 0800 	mov.w	r8, #0
 800440a:	f104 0a1a 	add.w	sl, r4, #26
 800440e:	e7f2      	b.n	80043f6 <_printf_float+0x422>
 8004410:	2301      	movs	r3, #1
 8004412:	4642      	mov	r2, r8
 8004414:	e7df      	b.n	80043d6 <_printf_float+0x402>
 8004416:	2301      	movs	r3, #1
 8004418:	464a      	mov	r2, r9
 800441a:	4631      	mov	r1, r6
 800441c:	4628      	mov	r0, r5
 800441e:	47b8      	blx	r7
 8004420:	3001      	adds	r0, #1
 8004422:	f43f ae38 	beq.w	8004096 <_printf_float+0xc2>
 8004426:	f108 0801 	add.w	r8, r8, #1
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800442e:	1a5b      	subs	r3, r3, r1
 8004430:	4543      	cmp	r3, r8
 8004432:	dcf0      	bgt.n	8004416 <_printf_float+0x442>
 8004434:	e6fa      	b.n	800422c <_printf_float+0x258>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	f104 0919 	add.w	r9, r4, #25
 800443e:	e7f4      	b.n	800442a <_printf_float+0x456>

08004440 <_printf_common>:
 8004440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004444:	4616      	mov	r6, r2
 8004446:	4699      	mov	r9, r3
 8004448:	688a      	ldr	r2, [r1, #8]
 800444a:	690b      	ldr	r3, [r1, #16]
 800444c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004450:	4293      	cmp	r3, r2
 8004452:	bfb8      	it	lt
 8004454:	4613      	movlt	r3, r2
 8004456:	6033      	str	r3, [r6, #0]
 8004458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800445c:	4607      	mov	r7, r0
 800445e:	460c      	mov	r4, r1
 8004460:	b10a      	cbz	r2, 8004466 <_printf_common+0x26>
 8004462:	3301      	adds	r3, #1
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	0699      	lsls	r1, r3, #26
 800446a:	bf42      	ittt	mi
 800446c:	6833      	ldrmi	r3, [r6, #0]
 800446e:	3302      	addmi	r3, #2
 8004470:	6033      	strmi	r3, [r6, #0]
 8004472:	6825      	ldr	r5, [r4, #0]
 8004474:	f015 0506 	ands.w	r5, r5, #6
 8004478:	d106      	bne.n	8004488 <_printf_common+0x48>
 800447a:	f104 0a19 	add.w	sl, r4, #25
 800447e:	68e3      	ldr	r3, [r4, #12]
 8004480:	6832      	ldr	r2, [r6, #0]
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	42ab      	cmp	r3, r5
 8004486:	dc26      	bgt.n	80044d6 <_printf_common+0x96>
 8004488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800448c:	1e13      	subs	r3, r2, #0
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	bf18      	it	ne
 8004492:	2301      	movne	r3, #1
 8004494:	0692      	lsls	r2, r2, #26
 8004496:	d42b      	bmi.n	80044f0 <_printf_common+0xb0>
 8004498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800449c:	4649      	mov	r1, r9
 800449e:	4638      	mov	r0, r7
 80044a0:	47c0      	blx	r8
 80044a2:	3001      	adds	r0, #1
 80044a4:	d01e      	beq.n	80044e4 <_printf_common+0xa4>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	68e5      	ldr	r5, [r4, #12]
 80044aa:	6832      	ldr	r2, [r6, #0]
 80044ac:	f003 0306 	and.w	r3, r3, #6
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	bf08      	it	eq
 80044b4:	1aad      	subeq	r5, r5, r2
 80044b6:	68a3      	ldr	r3, [r4, #8]
 80044b8:	6922      	ldr	r2, [r4, #16]
 80044ba:	bf0c      	ite	eq
 80044bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c0:	2500      	movne	r5, #0
 80044c2:	4293      	cmp	r3, r2
 80044c4:	bfc4      	itt	gt
 80044c6:	1a9b      	subgt	r3, r3, r2
 80044c8:	18ed      	addgt	r5, r5, r3
 80044ca:	2600      	movs	r6, #0
 80044cc:	341a      	adds	r4, #26
 80044ce:	42b5      	cmp	r5, r6
 80044d0:	d11a      	bne.n	8004508 <_printf_common+0xc8>
 80044d2:	2000      	movs	r0, #0
 80044d4:	e008      	b.n	80044e8 <_printf_common+0xa8>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4652      	mov	r2, sl
 80044da:	4649      	mov	r1, r9
 80044dc:	4638      	mov	r0, r7
 80044de:	47c0      	blx	r8
 80044e0:	3001      	adds	r0, #1
 80044e2:	d103      	bne.n	80044ec <_printf_common+0xac>
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ec:	3501      	adds	r5, #1
 80044ee:	e7c6      	b.n	800447e <_printf_common+0x3e>
 80044f0:	18e1      	adds	r1, r4, r3
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	2030      	movs	r0, #48	; 0x30
 80044f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044fa:	4422      	add	r2, r4
 80044fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004504:	3302      	adds	r3, #2
 8004506:	e7c7      	b.n	8004498 <_printf_common+0x58>
 8004508:	2301      	movs	r3, #1
 800450a:	4622      	mov	r2, r4
 800450c:	4649      	mov	r1, r9
 800450e:	4638      	mov	r0, r7
 8004510:	47c0      	blx	r8
 8004512:	3001      	adds	r0, #1
 8004514:	d0e6      	beq.n	80044e4 <_printf_common+0xa4>
 8004516:	3601      	adds	r6, #1
 8004518:	e7d9      	b.n	80044ce <_printf_common+0x8e>
	...

0800451c <_printf_i>:
 800451c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004520:	7e0f      	ldrb	r7, [r1, #24]
 8004522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004524:	2f78      	cmp	r7, #120	; 0x78
 8004526:	4691      	mov	r9, r2
 8004528:	4680      	mov	r8, r0
 800452a:	460c      	mov	r4, r1
 800452c:	469a      	mov	sl, r3
 800452e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004532:	d807      	bhi.n	8004544 <_printf_i+0x28>
 8004534:	2f62      	cmp	r7, #98	; 0x62
 8004536:	d80a      	bhi.n	800454e <_printf_i+0x32>
 8004538:	2f00      	cmp	r7, #0
 800453a:	f000 80d8 	beq.w	80046ee <_printf_i+0x1d2>
 800453e:	2f58      	cmp	r7, #88	; 0x58
 8004540:	f000 80a3 	beq.w	800468a <_printf_i+0x16e>
 8004544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800454c:	e03a      	b.n	80045c4 <_printf_i+0xa8>
 800454e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004552:	2b15      	cmp	r3, #21
 8004554:	d8f6      	bhi.n	8004544 <_printf_i+0x28>
 8004556:	a101      	add	r1, pc, #4	; (adr r1, 800455c <_printf_i+0x40>)
 8004558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800455c:	080045b5 	.word	0x080045b5
 8004560:	080045c9 	.word	0x080045c9
 8004564:	08004545 	.word	0x08004545
 8004568:	08004545 	.word	0x08004545
 800456c:	08004545 	.word	0x08004545
 8004570:	08004545 	.word	0x08004545
 8004574:	080045c9 	.word	0x080045c9
 8004578:	08004545 	.word	0x08004545
 800457c:	08004545 	.word	0x08004545
 8004580:	08004545 	.word	0x08004545
 8004584:	08004545 	.word	0x08004545
 8004588:	080046d5 	.word	0x080046d5
 800458c:	080045f9 	.word	0x080045f9
 8004590:	080046b7 	.word	0x080046b7
 8004594:	08004545 	.word	0x08004545
 8004598:	08004545 	.word	0x08004545
 800459c:	080046f7 	.word	0x080046f7
 80045a0:	08004545 	.word	0x08004545
 80045a4:	080045f9 	.word	0x080045f9
 80045a8:	08004545 	.word	0x08004545
 80045ac:	08004545 	.word	0x08004545
 80045b0:	080046bf 	.word	0x080046bf
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	1d1a      	adds	r2, r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	602a      	str	r2, [r5, #0]
 80045bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0a3      	b.n	8004710 <_printf_i+0x1f4>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	6829      	ldr	r1, [r5, #0]
 80045cc:	0606      	lsls	r6, r0, #24
 80045ce:	f101 0304 	add.w	r3, r1, #4
 80045d2:	d50a      	bpl.n	80045ea <_printf_i+0xce>
 80045d4:	680e      	ldr	r6, [r1, #0]
 80045d6:	602b      	str	r3, [r5, #0]
 80045d8:	2e00      	cmp	r6, #0
 80045da:	da03      	bge.n	80045e4 <_printf_i+0xc8>
 80045dc:	232d      	movs	r3, #45	; 0x2d
 80045de:	4276      	negs	r6, r6
 80045e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e4:	485e      	ldr	r0, [pc, #376]	; (8004760 <_printf_i+0x244>)
 80045e6:	230a      	movs	r3, #10
 80045e8:	e019      	b.n	800461e <_printf_i+0x102>
 80045ea:	680e      	ldr	r6, [r1, #0]
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045f2:	bf18      	it	ne
 80045f4:	b236      	sxthne	r6, r6
 80045f6:	e7ef      	b.n	80045d8 <_printf_i+0xbc>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	1d19      	adds	r1, r3, #4
 80045fe:	6029      	str	r1, [r5, #0]
 8004600:	0601      	lsls	r1, r0, #24
 8004602:	d501      	bpl.n	8004608 <_printf_i+0xec>
 8004604:	681e      	ldr	r6, [r3, #0]
 8004606:	e002      	b.n	800460e <_printf_i+0xf2>
 8004608:	0646      	lsls	r6, r0, #25
 800460a:	d5fb      	bpl.n	8004604 <_printf_i+0xe8>
 800460c:	881e      	ldrh	r6, [r3, #0]
 800460e:	4854      	ldr	r0, [pc, #336]	; (8004760 <_printf_i+0x244>)
 8004610:	2f6f      	cmp	r7, #111	; 0x6f
 8004612:	bf0c      	ite	eq
 8004614:	2308      	moveq	r3, #8
 8004616:	230a      	movne	r3, #10
 8004618:	2100      	movs	r1, #0
 800461a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800461e:	6865      	ldr	r5, [r4, #4]
 8004620:	60a5      	str	r5, [r4, #8]
 8004622:	2d00      	cmp	r5, #0
 8004624:	bfa2      	ittt	ge
 8004626:	6821      	ldrge	r1, [r4, #0]
 8004628:	f021 0104 	bicge.w	r1, r1, #4
 800462c:	6021      	strge	r1, [r4, #0]
 800462e:	b90e      	cbnz	r6, 8004634 <_printf_i+0x118>
 8004630:	2d00      	cmp	r5, #0
 8004632:	d04d      	beq.n	80046d0 <_printf_i+0x1b4>
 8004634:	4615      	mov	r5, r2
 8004636:	fbb6 f1f3 	udiv	r1, r6, r3
 800463a:	fb03 6711 	mls	r7, r3, r1, r6
 800463e:	5dc7      	ldrb	r7, [r0, r7]
 8004640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004644:	4637      	mov	r7, r6
 8004646:	42bb      	cmp	r3, r7
 8004648:	460e      	mov	r6, r1
 800464a:	d9f4      	bls.n	8004636 <_printf_i+0x11a>
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10b      	bne.n	8004668 <_printf_i+0x14c>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	07de      	lsls	r6, r3, #31
 8004654:	d508      	bpl.n	8004668 <_printf_i+0x14c>
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	6861      	ldr	r1, [r4, #4]
 800465a:	4299      	cmp	r1, r3
 800465c:	bfde      	ittt	le
 800465e:	2330      	movle	r3, #48	; 0x30
 8004660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004668:	1b52      	subs	r2, r2, r5
 800466a:	6122      	str	r2, [r4, #16]
 800466c:	f8cd a000 	str.w	sl, [sp]
 8004670:	464b      	mov	r3, r9
 8004672:	aa03      	add	r2, sp, #12
 8004674:	4621      	mov	r1, r4
 8004676:	4640      	mov	r0, r8
 8004678:	f7ff fee2 	bl	8004440 <_printf_common>
 800467c:	3001      	adds	r0, #1
 800467e:	d14c      	bne.n	800471a <_printf_i+0x1fe>
 8004680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004684:	b004      	add	sp, #16
 8004686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468a:	4835      	ldr	r0, [pc, #212]	; (8004760 <_printf_i+0x244>)
 800468c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004690:	6829      	ldr	r1, [r5, #0]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	f851 6b04 	ldr.w	r6, [r1], #4
 8004698:	6029      	str	r1, [r5, #0]
 800469a:	061d      	lsls	r5, r3, #24
 800469c:	d514      	bpl.n	80046c8 <_printf_i+0x1ac>
 800469e:	07df      	lsls	r7, r3, #31
 80046a0:	bf44      	itt	mi
 80046a2:	f043 0320 	orrmi.w	r3, r3, #32
 80046a6:	6023      	strmi	r3, [r4, #0]
 80046a8:	b91e      	cbnz	r6, 80046b2 <_printf_i+0x196>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	f023 0320 	bic.w	r3, r3, #32
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	2310      	movs	r3, #16
 80046b4:	e7b0      	b.n	8004618 <_printf_i+0xfc>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f043 0320 	orr.w	r3, r3, #32
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	2378      	movs	r3, #120	; 0x78
 80046c0:	4828      	ldr	r0, [pc, #160]	; (8004764 <_printf_i+0x248>)
 80046c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046c6:	e7e3      	b.n	8004690 <_printf_i+0x174>
 80046c8:	0659      	lsls	r1, r3, #25
 80046ca:	bf48      	it	mi
 80046cc:	b2b6      	uxthmi	r6, r6
 80046ce:	e7e6      	b.n	800469e <_printf_i+0x182>
 80046d0:	4615      	mov	r5, r2
 80046d2:	e7bb      	b.n	800464c <_printf_i+0x130>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	6826      	ldr	r6, [r4, #0]
 80046d8:	6961      	ldr	r1, [r4, #20]
 80046da:	1d18      	adds	r0, r3, #4
 80046dc:	6028      	str	r0, [r5, #0]
 80046de:	0635      	lsls	r5, r6, #24
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	d501      	bpl.n	80046e8 <_printf_i+0x1cc>
 80046e4:	6019      	str	r1, [r3, #0]
 80046e6:	e002      	b.n	80046ee <_printf_i+0x1d2>
 80046e8:	0670      	lsls	r0, r6, #25
 80046ea:	d5fb      	bpl.n	80046e4 <_printf_i+0x1c8>
 80046ec:	8019      	strh	r1, [r3, #0]
 80046ee:	2300      	movs	r3, #0
 80046f0:	6123      	str	r3, [r4, #16]
 80046f2:	4615      	mov	r5, r2
 80046f4:	e7ba      	b.n	800466c <_printf_i+0x150>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	1d1a      	adds	r2, r3, #4
 80046fa:	602a      	str	r2, [r5, #0]
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	6862      	ldr	r2, [r4, #4]
 8004700:	2100      	movs	r1, #0
 8004702:	4628      	mov	r0, r5
 8004704:	f7fb fd8c 	bl	8000220 <memchr>
 8004708:	b108      	cbz	r0, 800470e <_printf_i+0x1f2>
 800470a:	1b40      	subs	r0, r0, r5
 800470c:	6060      	str	r0, [r4, #4]
 800470e:	6863      	ldr	r3, [r4, #4]
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	2300      	movs	r3, #0
 8004714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004718:	e7a8      	b.n	800466c <_printf_i+0x150>
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	462a      	mov	r2, r5
 800471e:	4649      	mov	r1, r9
 8004720:	4640      	mov	r0, r8
 8004722:	47d0      	blx	sl
 8004724:	3001      	adds	r0, #1
 8004726:	d0ab      	beq.n	8004680 <_printf_i+0x164>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	079b      	lsls	r3, r3, #30
 800472c:	d413      	bmi.n	8004756 <_printf_i+0x23a>
 800472e:	68e0      	ldr	r0, [r4, #12]
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	4298      	cmp	r0, r3
 8004734:	bfb8      	it	lt
 8004736:	4618      	movlt	r0, r3
 8004738:	e7a4      	b.n	8004684 <_printf_i+0x168>
 800473a:	2301      	movs	r3, #1
 800473c:	4632      	mov	r2, r6
 800473e:	4649      	mov	r1, r9
 8004740:	4640      	mov	r0, r8
 8004742:	47d0      	blx	sl
 8004744:	3001      	adds	r0, #1
 8004746:	d09b      	beq.n	8004680 <_printf_i+0x164>
 8004748:	3501      	adds	r5, #1
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	9903      	ldr	r1, [sp, #12]
 800474e:	1a5b      	subs	r3, r3, r1
 8004750:	42ab      	cmp	r3, r5
 8004752:	dcf2      	bgt.n	800473a <_printf_i+0x21e>
 8004754:	e7eb      	b.n	800472e <_printf_i+0x212>
 8004756:	2500      	movs	r5, #0
 8004758:	f104 0619 	add.w	r6, r4, #25
 800475c:	e7f5      	b.n	800474a <_printf_i+0x22e>
 800475e:	bf00      	nop
 8004760:	08006906 	.word	0x08006906
 8004764:	08006917 	.word	0x08006917

08004768 <quorem>:
 8004768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	6903      	ldr	r3, [r0, #16]
 800476e:	690c      	ldr	r4, [r1, #16]
 8004770:	42a3      	cmp	r3, r4
 8004772:	4607      	mov	r7, r0
 8004774:	f2c0 8081 	blt.w	800487a <quorem+0x112>
 8004778:	3c01      	subs	r4, #1
 800477a:	f101 0814 	add.w	r8, r1, #20
 800477e:	f100 0514 	add.w	r5, r0, #20
 8004782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800478c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004790:	3301      	adds	r3, #1
 8004792:	429a      	cmp	r2, r3
 8004794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800479c:	fbb2 f6f3 	udiv	r6, r2, r3
 80047a0:	d331      	bcc.n	8004806 <quorem+0x9e>
 80047a2:	f04f 0e00 	mov.w	lr, #0
 80047a6:	4640      	mov	r0, r8
 80047a8:	46ac      	mov	ip, r5
 80047aa:	46f2      	mov	sl, lr
 80047ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80047b0:	b293      	uxth	r3, r2
 80047b2:	fb06 e303 	mla	r3, r6, r3, lr
 80047b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	ebaa 0303 	sub.w	r3, sl, r3
 80047c0:	f8dc a000 	ldr.w	sl, [ip]
 80047c4:	0c12      	lsrs	r2, r2, #16
 80047c6:	fa13 f38a 	uxtah	r3, r3, sl
 80047ca:	fb06 e202 	mla	r2, r6, r2, lr
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	9b00      	ldr	r3, [sp, #0]
 80047d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80047d6:	b292      	uxth	r2, r2
 80047d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80047dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80047e4:	4581      	cmp	r9, r0
 80047e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047ea:	f84c 3b04 	str.w	r3, [ip], #4
 80047ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047f2:	d2db      	bcs.n	80047ac <quorem+0x44>
 80047f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80047f8:	b92b      	cbnz	r3, 8004806 <quorem+0x9e>
 80047fa:	9b01      	ldr	r3, [sp, #4]
 80047fc:	3b04      	subs	r3, #4
 80047fe:	429d      	cmp	r5, r3
 8004800:	461a      	mov	r2, r3
 8004802:	d32e      	bcc.n	8004862 <quorem+0xfa>
 8004804:	613c      	str	r4, [r7, #16]
 8004806:	4638      	mov	r0, r7
 8004808:	f001 f8c4 	bl	8005994 <__mcmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	db24      	blt.n	800485a <quorem+0xf2>
 8004810:	3601      	adds	r6, #1
 8004812:	4628      	mov	r0, r5
 8004814:	f04f 0c00 	mov.w	ip, #0
 8004818:	f858 2b04 	ldr.w	r2, [r8], #4
 800481c:	f8d0 e000 	ldr.w	lr, [r0]
 8004820:	b293      	uxth	r3, r2
 8004822:	ebac 0303 	sub.w	r3, ip, r3
 8004826:	0c12      	lsrs	r2, r2, #16
 8004828:	fa13 f38e 	uxtah	r3, r3, lr
 800482c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004834:	b29b      	uxth	r3, r3
 8004836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800483a:	45c1      	cmp	r9, r8
 800483c:	f840 3b04 	str.w	r3, [r0], #4
 8004840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004844:	d2e8      	bcs.n	8004818 <quorem+0xb0>
 8004846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800484a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800484e:	b922      	cbnz	r2, 800485a <quorem+0xf2>
 8004850:	3b04      	subs	r3, #4
 8004852:	429d      	cmp	r5, r3
 8004854:	461a      	mov	r2, r3
 8004856:	d30a      	bcc.n	800486e <quorem+0x106>
 8004858:	613c      	str	r4, [r7, #16]
 800485a:	4630      	mov	r0, r6
 800485c:	b003      	add	sp, #12
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	3b04      	subs	r3, #4
 8004866:	2a00      	cmp	r2, #0
 8004868:	d1cc      	bne.n	8004804 <quorem+0x9c>
 800486a:	3c01      	subs	r4, #1
 800486c:	e7c7      	b.n	80047fe <quorem+0x96>
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	3b04      	subs	r3, #4
 8004872:	2a00      	cmp	r2, #0
 8004874:	d1f0      	bne.n	8004858 <quorem+0xf0>
 8004876:	3c01      	subs	r4, #1
 8004878:	e7eb      	b.n	8004852 <quorem+0xea>
 800487a:	2000      	movs	r0, #0
 800487c:	e7ee      	b.n	800485c <quorem+0xf4>
	...

08004880 <_dtoa_r>:
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004884:	ed2d 8b04 	vpush	{d8-d9}
 8004888:	ec57 6b10 	vmov	r6, r7, d0
 800488c:	b093      	sub	sp, #76	; 0x4c
 800488e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004894:	9106      	str	r1, [sp, #24]
 8004896:	ee10 aa10 	vmov	sl, s0
 800489a:	4604      	mov	r4, r0
 800489c:	9209      	str	r2, [sp, #36]	; 0x24
 800489e:	930c      	str	r3, [sp, #48]	; 0x30
 80048a0:	46bb      	mov	fp, r7
 80048a2:	b975      	cbnz	r5, 80048c2 <_dtoa_r+0x42>
 80048a4:	2010      	movs	r0, #16
 80048a6:	f000 fddd 	bl	8005464 <malloc>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6260      	str	r0, [r4, #36]	; 0x24
 80048ae:	b920      	cbnz	r0, 80048ba <_dtoa_r+0x3a>
 80048b0:	4ba7      	ldr	r3, [pc, #668]	; (8004b50 <_dtoa_r+0x2d0>)
 80048b2:	21ea      	movs	r1, #234	; 0xea
 80048b4:	48a7      	ldr	r0, [pc, #668]	; (8004b54 <_dtoa_r+0x2d4>)
 80048b6:	f001 fa75 	bl	8005da4 <__assert_func>
 80048ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	60c5      	str	r5, [r0, #12]
 80048c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	b151      	cbz	r1, 80048de <_dtoa_r+0x5e>
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	604a      	str	r2, [r1, #4]
 80048cc:	2301      	movs	r3, #1
 80048ce:	4093      	lsls	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 fe1c 	bl	8005510 <_Bfree>
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	1e3b      	subs	r3, r7, #0
 80048e0:	bfaa      	itet	ge
 80048e2:	2300      	movge	r3, #0
 80048e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80048e8:	f8c8 3000 	strge.w	r3, [r8]
 80048ec:	4b9a      	ldr	r3, [pc, #616]	; (8004b58 <_dtoa_r+0x2d8>)
 80048ee:	bfbc      	itt	lt
 80048f0:	2201      	movlt	r2, #1
 80048f2:	f8c8 2000 	strlt.w	r2, [r8]
 80048f6:	ea33 030b 	bics.w	r3, r3, fp
 80048fa:	d11b      	bne.n	8004934 <_dtoa_r+0xb4>
 80048fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004908:	4333      	orrs	r3, r6
 800490a:	f000 8592 	beq.w	8005432 <_dtoa_r+0xbb2>
 800490e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004910:	b963      	cbnz	r3, 800492c <_dtoa_r+0xac>
 8004912:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <_dtoa_r+0x2dc>)
 8004914:	e022      	b.n	800495c <_dtoa_r+0xdc>
 8004916:	4b92      	ldr	r3, [pc, #584]	; (8004b60 <_dtoa_r+0x2e0>)
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	3308      	adds	r3, #8
 800491c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	9801      	ldr	r0, [sp, #4]
 8004922:	b013      	add	sp, #76	; 0x4c
 8004924:	ecbd 8b04 	vpop	{d8-d9}
 8004928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492c:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <_dtoa_r+0x2dc>)
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	3303      	adds	r3, #3
 8004932:	e7f3      	b.n	800491c <_dtoa_r+0x9c>
 8004934:	2200      	movs	r2, #0
 8004936:	2300      	movs	r3, #0
 8004938:	4650      	mov	r0, sl
 800493a:	4659      	mov	r1, fp
 800493c:	f7fc f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 8004940:	ec4b ab19 	vmov	d9, sl, fp
 8004944:	4680      	mov	r8, r0
 8004946:	b158      	cbz	r0, 8004960 <_dtoa_r+0xe0>
 8004948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800494a:	2301      	movs	r3, #1
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 856b 	beq.w	800542c <_dtoa_r+0xbac>
 8004956:	4883      	ldr	r0, [pc, #524]	; (8004b64 <_dtoa_r+0x2e4>)
 8004958:	6018      	str	r0, [r3, #0]
 800495a:	1e43      	subs	r3, r0, #1
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	e7df      	b.n	8004920 <_dtoa_r+0xa0>
 8004960:	ec4b ab10 	vmov	d0, sl, fp
 8004964:	aa10      	add	r2, sp, #64	; 0x40
 8004966:	a911      	add	r1, sp, #68	; 0x44
 8004968:	4620      	mov	r0, r4
 800496a:	f001 f8b9 	bl	8005ae0 <__d2b>
 800496e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004972:	ee08 0a10 	vmov	s16, r0
 8004976:	2d00      	cmp	r5, #0
 8004978:	f000 8084 	beq.w	8004a84 <_dtoa_r+0x204>
 800497c:	ee19 3a90 	vmov	r3, s19
 8004980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004984:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004988:	4656      	mov	r6, sl
 800498a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800498e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004992:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004996:	4b74      	ldr	r3, [pc, #464]	; (8004b68 <_dtoa_r+0x2e8>)
 8004998:	2200      	movs	r2, #0
 800499a:	4630      	mov	r0, r6
 800499c:	4639      	mov	r1, r7
 800499e:	f7fb fc93 	bl	80002c8 <__aeabi_dsub>
 80049a2:	a365      	add	r3, pc, #404	; (adr r3, 8004b38 <_dtoa_r+0x2b8>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fe46 	bl	8000638 <__aeabi_dmul>
 80049ac:	a364      	add	r3, pc, #400	; (adr r3, 8004b40 <_dtoa_r+0x2c0>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb fc8b 	bl	80002cc <__adddf3>
 80049b6:	4606      	mov	r6, r0
 80049b8:	4628      	mov	r0, r5
 80049ba:	460f      	mov	r7, r1
 80049bc:	f7fb fdd2 	bl	8000564 <__aeabi_i2d>
 80049c0:	a361      	add	r3, pc, #388	; (adr r3, 8004b48 <_dtoa_r+0x2c8>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe37 	bl	8000638 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4630      	mov	r0, r6
 80049d0:	4639      	mov	r1, r7
 80049d2:	f7fb fc7b 	bl	80002cc <__adddf3>
 80049d6:	4606      	mov	r6, r0
 80049d8:	460f      	mov	r7, r1
 80049da:	f7fc f8dd 	bl	8000b98 <__aeabi_d2iz>
 80049de:	2200      	movs	r2, #0
 80049e0:	9000      	str	r0, [sp, #0]
 80049e2:	2300      	movs	r3, #0
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	f7fc f898 	bl	8000b1c <__aeabi_dcmplt>
 80049ec:	b150      	cbz	r0, 8004a04 <_dtoa_r+0x184>
 80049ee:	9800      	ldr	r0, [sp, #0]
 80049f0:	f7fb fdb8 	bl	8000564 <__aeabi_i2d>
 80049f4:	4632      	mov	r2, r6
 80049f6:	463b      	mov	r3, r7
 80049f8:	f7fc f886 	bl	8000b08 <__aeabi_dcmpeq>
 80049fc:	b910      	cbnz	r0, 8004a04 <_dtoa_r+0x184>
 80049fe:	9b00      	ldr	r3, [sp, #0]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	9b00      	ldr	r3, [sp, #0]
 8004a06:	2b16      	cmp	r3, #22
 8004a08:	d85a      	bhi.n	8004ac0 <_dtoa_r+0x240>
 8004a0a:	9a00      	ldr	r2, [sp, #0]
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <_dtoa_r+0x2ec>)
 8004a0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	ec51 0b19 	vmov	r0, r1, d9
 8004a1a:	f7fc f87f 	bl	8000b1c <__aeabi_dcmplt>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d050      	beq.n	8004ac4 <_dtoa_r+0x244>
 8004a22:	9b00      	ldr	r3, [sp, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a2e:	1b5d      	subs	r5, r3, r5
 8004a30:	1e6b      	subs	r3, r5, #1
 8004a32:	9305      	str	r3, [sp, #20]
 8004a34:	bf45      	ittet	mi
 8004a36:	f1c5 0301 	rsbmi	r3, r5, #1
 8004a3a:	9304      	strmi	r3, [sp, #16]
 8004a3c:	2300      	movpl	r3, #0
 8004a3e:	2300      	movmi	r3, #0
 8004a40:	bf4c      	ite	mi
 8004a42:	9305      	strmi	r3, [sp, #20]
 8004a44:	9304      	strpl	r3, [sp, #16]
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	db3d      	blt.n	8004ac8 <_dtoa_r+0x248>
 8004a4c:	9b05      	ldr	r3, [sp, #20]
 8004a4e:	9a00      	ldr	r2, [sp, #0]
 8004a50:	920a      	str	r2, [sp, #40]	; 0x28
 8004a52:	4413      	add	r3, r2
 8004a54:	9305      	str	r3, [sp, #20]
 8004a56:	2300      	movs	r3, #0
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	9b06      	ldr	r3, [sp, #24]
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	f200 8089 	bhi.w	8004b74 <_dtoa_r+0x2f4>
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	bfc4      	itt	gt
 8004a66:	3b04      	subgt	r3, #4
 8004a68:	9306      	strgt	r3, [sp, #24]
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	f1a3 0302 	sub.w	r3, r3, #2
 8004a70:	bfcc      	ite	gt
 8004a72:	2500      	movgt	r5, #0
 8004a74:	2501      	movle	r5, #1
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	f200 8087 	bhi.w	8004b8a <_dtoa_r+0x30a>
 8004a7c:	e8df f003 	tbb	[pc, r3]
 8004a80:	59383a2d 	.word	0x59383a2d
 8004a84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004a88:	441d      	add	r5, r3
 8004a8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	bfc1      	itttt	gt
 8004a92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004a9a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004a9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004aa2:	bfda      	itte	le
 8004aa4:	f1c3 0320 	rsble	r3, r3, #32
 8004aa8:	fa06 f003 	lslle.w	r0, r6, r3
 8004aac:	4318      	orrgt	r0, r3
 8004aae:	f7fb fd49 	bl	8000544 <__aeabi_ui2d>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004aba:	3d01      	subs	r5, #1
 8004abc:	930e      	str	r3, [sp, #56]	; 0x38
 8004abe:	e76a      	b.n	8004996 <_dtoa_r+0x116>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e7b2      	b.n	8004a2a <_dtoa_r+0x1aa>
 8004ac4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004ac6:	e7b1      	b.n	8004a2c <_dtoa_r+0x1ac>
 8004ac8:	9b04      	ldr	r3, [sp, #16]
 8004aca:	9a00      	ldr	r2, [sp, #0]
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	4253      	negs	r3, r2
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad8:	e7bf      	b.n	8004a5a <_dtoa_r+0x1da>
 8004ada:	2300      	movs	r3, #0
 8004adc:	9308      	str	r3, [sp, #32]
 8004ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dc55      	bgt.n	8004b90 <_dtoa_r+0x310>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004aea:	461a      	mov	r2, r3
 8004aec:	9209      	str	r2, [sp, #36]	; 0x24
 8004aee:	e00c      	b.n	8004b0a <_dtoa_r+0x28a>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e7f3      	b.n	8004adc <_dtoa_r+0x25c>
 8004af4:	2300      	movs	r3, #0
 8004af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af8:	9308      	str	r3, [sp, #32]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	9302      	str	r3, [sp, #8]
 8004b00:	3301      	adds	r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	bfb8      	it	lt
 8004b08:	2301      	movlt	r3, #1
 8004b0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	6042      	str	r2, [r0, #4]
 8004b10:	2204      	movs	r2, #4
 8004b12:	f102 0614 	add.w	r6, r2, #20
 8004b16:	429e      	cmp	r6, r3
 8004b18:	6841      	ldr	r1, [r0, #4]
 8004b1a:	d93d      	bls.n	8004b98 <_dtoa_r+0x318>
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fcb7 	bl	8005490 <_Balloc>
 8004b22:	9001      	str	r0, [sp, #4]
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d13b      	bne.n	8004ba0 <_dtoa_r+0x320>
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <_dtoa_r+0x2f0>)
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b30:	e6c0      	b.n	80048b4 <_dtoa_r+0x34>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7df      	b.n	8004af6 <_dtoa_r+0x276>
 8004b36:	bf00      	nop
 8004b38:	636f4361 	.word	0x636f4361
 8004b3c:	3fd287a7 	.word	0x3fd287a7
 8004b40:	8b60c8b3 	.word	0x8b60c8b3
 8004b44:	3fc68a28 	.word	0x3fc68a28
 8004b48:	509f79fb 	.word	0x509f79fb
 8004b4c:	3fd34413 	.word	0x3fd34413
 8004b50:	08006935 	.word	0x08006935
 8004b54:	0800694c 	.word	0x0800694c
 8004b58:	7ff00000 	.word	0x7ff00000
 8004b5c:	08006931 	.word	0x08006931
 8004b60:	08006928 	.word	0x08006928
 8004b64:	08006905 	.word	0x08006905
 8004b68:	3ff80000 	.word	0x3ff80000
 8004b6c:	08006a40 	.word	0x08006a40
 8004b70:	080069a7 	.word	0x080069a7
 8004b74:	2501      	movs	r5, #1
 8004b76:	2300      	movs	r3, #0
 8004b78:	9306      	str	r3, [sp, #24]
 8004b7a:	9508      	str	r5, [sp, #32]
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2312      	movs	r3, #18
 8004b88:	e7b0      	b.n	8004aec <_dtoa_r+0x26c>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9308      	str	r3, [sp, #32]
 8004b8e:	e7f5      	b.n	8004b7c <_dtoa_r+0x2fc>
 8004b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b96:	e7b8      	b.n	8004b0a <_dtoa_r+0x28a>
 8004b98:	3101      	adds	r1, #1
 8004b9a:	6041      	str	r1, [r0, #4]
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	e7b8      	b.n	8004b12 <_dtoa_r+0x292>
 8004ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ba2:	9a01      	ldr	r2, [sp, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	2b0e      	cmp	r3, #14
 8004baa:	f200 809d 	bhi.w	8004ce8 <_dtoa_r+0x468>
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	f000 809a 	beq.w	8004ce8 <_dtoa_r+0x468>
 8004bb4:	9b00      	ldr	r3, [sp, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dd32      	ble.n	8004c20 <_dtoa_r+0x3a0>
 8004bba:	4ab7      	ldr	r2, [pc, #732]	; (8004e98 <_dtoa_r+0x618>)
 8004bbc:	f003 030f 	and.w	r3, r3, #15
 8004bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bc8:	9b00      	ldr	r3, [sp, #0]
 8004bca:	05d8      	lsls	r0, r3, #23
 8004bcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004bd0:	d516      	bpl.n	8004c00 <_dtoa_r+0x380>
 8004bd2:	4bb2      	ldr	r3, [pc, #712]	; (8004e9c <_dtoa_r+0x61c>)
 8004bd4:	ec51 0b19 	vmov	r0, r1, d9
 8004bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bdc:	f7fb fe56 	bl	800088c <__aeabi_ddiv>
 8004be0:	f007 070f 	and.w	r7, r7, #15
 8004be4:	4682      	mov	sl, r0
 8004be6:	468b      	mov	fp, r1
 8004be8:	2503      	movs	r5, #3
 8004bea:	4eac      	ldr	r6, [pc, #688]	; (8004e9c <_dtoa_r+0x61c>)
 8004bec:	b957      	cbnz	r7, 8004c04 <_dtoa_r+0x384>
 8004bee:	4642      	mov	r2, r8
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	f7fb fe49 	bl	800088c <__aeabi_ddiv>
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	468b      	mov	fp, r1
 8004bfe:	e028      	b.n	8004c52 <_dtoa_r+0x3d2>
 8004c00:	2502      	movs	r5, #2
 8004c02:	e7f2      	b.n	8004bea <_dtoa_r+0x36a>
 8004c04:	07f9      	lsls	r1, r7, #31
 8004c06:	d508      	bpl.n	8004c1a <_dtoa_r+0x39a>
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c10:	f7fb fd12 	bl	8000638 <__aeabi_dmul>
 8004c14:	3501      	adds	r5, #1
 8004c16:	4680      	mov	r8, r0
 8004c18:	4689      	mov	r9, r1
 8004c1a:	107f      	asrs	r7, r7, #1
 8004c1c:	3608      	adds	r6, #8
 8004c1e:	e7e5      	b.n	8004bec <_dtoa_r+0x36c>
 8004c20:	f000 809b 	beq.w	8004d5a <_dtoa_r+0x4da>
 8004c24:	9b00      	ldr	r3, [sp, #0]
 8004c26:	4f9d      	ldr	r7, [pc, #628]	; (8004e9c <_dtoa_r+0x61c>)
 8004c28:	425e      	negs	r6, r3
 8004c2a:	4b9b      	ldr	r3, [pc, #620]	; (8004e98 <_dtoa_r+0x618>)
 8004c2c:	f006 020f 	and.w	r2, r6, #15
 8004c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	ec51 0b19 	vmov	r0, r1, d9
 8004c3c:	f7fb fcfc 	bl	8000638 <__aeabi_dmul>
 8004c40:	1136      	asrs	r6, r6, #4
 8004c42:	4682      	mov	sl, r0
 8004c44:	468b      	mov	fp, r1
 8004c46:	2300      	movs	r3, #0
 8004c48:	2502      	movs	r5, #2
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	d17a      	bne.n	8004d44 <_dtoa_r+0x4c4>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1d3      	bne.n	8004bfa <_dtoa_r+0x37a>
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8082 	beq.w	8004d5e <_dtoa_r+0x4de>
 8004c5a:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <_dtoa_r+0x620>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4650      	mov	r0, sl
 8004c60:	4659      	mov	r1, fp
 8004c62:	f7fb ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d079      	beq.n	8004d5e <_dtoa_r+0x4de>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d076      	beq.n	8004d5e <_dtoa_r+0x4de>
 8004c70:	9b02      	ldr	r3, [sp, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd36      	ble.n	8004ce4 <_dtoa_r+0x464>
 8004c76:	9b00      	ldr	r3, [sp, #0]
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	1e5f      	subs	r7, r3, #1
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <_dtoa_r+0x624>)
 8004c82:	f7fb fcd9 	bl	8000638 <__aeabi_dmul>
 8004c86:	9e02      	ldr	r6, [sp, #8]
 8004c88:	4682      	mov	sl, r0
 8004c8a:	468b      	mov	fp, r1
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7fb fc68 	bl	8000564 <__aeabi_i2d>
 8004c94:	4652      	mov	r2, sl
 8004c96:	465b      	mov	r3, fp
 8004c98:	f7fb fcce 	bl	8000638 <__aeabi_dmul>
 8004c9c:	4b82      	ldr	r3, [pc, #520]	; (8004ea8 <_dtoa_r+0x628>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f7fb fb14 	bl	80002cc <__adddf3>
 8004ca4:	46d0      	mov	r8, sl
 8004ca6:	46d9      	mov	r9, fp
 8004ca8:	4682      	mov	sl, r0
 8004caa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004cae:	2e00      	cmp	r6, #0
 8004cb0:	d158      	bne.n	8004d64 <_dtoa_r+0x4e4>
 8004cb2:	4b7e      	ldr	r3, [pc, #504]	; (8004eac <_dtoa_r+0x62c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	f7fb fb05 	bl	80002c8 <__aeabi_dsub>
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	4689      	mov	r9, r1
 8004cc6:	f7fb ff47 	bl	8000b58 <__aeabi_dcmpgt>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f040 8295 	bne.w	80051fa <_dtoa_r+0x97a>
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	4649      	mov	r1, r9
 8004cda:	f7fb ff1f 	bl	8000b1c <__aeabi_dcmplt>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	f040 8289 	bne.w	80051f6 <_dtoa_r+0x976>
 8004ce4:	ec5b ab19 	vmov	sl, fp, d9
 8004ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f2c0 8148 	blt.w	8004f80 <_dtoa_r+0x700>
 8004cf0:	9a00      	ldr	r2, [sp, #0]
 8004cf2:	2a0e      	cmp	r2, #14
 8004cf4:	f300 8144 	bgt.w	8004f80 <_dtoa_r+0x700>
 8004cf8:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <_dtoa_r+0x618>)
 8004cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f280 80d5 	bge.w	8004eb4 <_dtoa_r+0x634>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f300 80d1 	bgt.w	8004eb4 <_dtoa_r+0x634>
 8004d12:	f040 826f 	bne.w	80051f4 <_dtoa_r+0x974>
 8004d16:	4b65      	ldr	r3, [pc, #404]	; (8004eac <_dtoa_r+0x62c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb fc8b 	bl	8000638 <__aeabi_dmul>
 8004d22:	4652      	mov	r2, sl
 8004d24:	465b      	mov	r3, fp
 8004d26:	f7fb ff0d 	bl	8000b44 <__aeabi_dcmpge>
 8004d2a:	9e03      	ldr	r6, [sp, #12]
 8004d2c:	4637      	mov	r7, r6
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f040 8245 	bne.w	80051be <_dtoa_r+0x93e>
 8004d34:	9d01      	ldr	r5, [sp, #4]
 8004d36:	2331      	movs	r3, #49	; 0x31
 8004d38:	f805 3b01 	strb.w	r3, [r5], #1
 8004d3c:	9b00      	ldr	r3, [sp, #0]
 8004d3e:	3301      	adds	r3, #1
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	e240      	b.n	80051c6 <_dtoa_r+0x946>
 8004d44:	07f2      	lsls	r2, r6, #31
 8004d46:	d505      	bpl.n	8004d54 <_dtoa_r+0x4d4>
 8004d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4c:	f7fb fc74 	bl	8000638 <__aeabi_dmul>
 8004d50:	3501      	adds	r5, #1
 8004d52:	2301      	movs	r3, #1
 8004d54:	1076      	asrs	r6, r6, #1
 8004d56:	3708      	adds	r7, #8
 8004d58:	e777      	b.n	8004c4a <_dtoa_r+0x3ca>
 8004d5a:	2502      	movs	r5, #2
 8004d5c:	e779      	b.n	8004c52 <_dtoa_r+0x3d2>
 8004d5e:	9f00      	ldr	r7, [sp, #0]
 8004d60:	9e03      	ldr	r6, [sp, #12]
 8004d62:	e794      	b.n	8004c8e <_dtoa_r+0x40e>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	4b4c      	ldr	r3, [pc, #304]	; (8004e98 <_dtoa_r+0x618>)
 8004d68:	4431      	add	r1, r6
 8004d6a:	910d      	str	r1, [sp, #52]	; 0x34
 8004d6c:	9908      	ldr	r1, [sp, #32]
 8004d6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d043      	beq.n	8004e02 <_dtoa_r+0x582>
 8004d7a:	494d      	ldr	r1, [pc, #308]	; (8004eb0 <_dtoa_r+0x630>)
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7fb fd85 	bl	800088c <__aeabi_ddiv>
 8004d82:	4652      	mov	r2, sl
 8004d84:	465b      	mov	r3, fp
 8004d86:	f7fb fa9f 	bl	80002c8 <__aeabi_dsub>
 8004d8a:	9d01      	ldr	r5, [sp, #4]
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	4649      	mov	r1, r9
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7fb ff00 	bl	8000b98 <__aeabi_d2iz>
 8004d98:	4606      	mov	r6, r0
 8004d9a:	f7fb fbe3 	bl	8000564 <__aeabi_i2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4640      	mov	r0, r8
 8004da4:	4649      	mov	r1, r9
 8004da6:	f7fb fa8f 	bl	80002c8 <__aeabi_dsub>
 8004daa:	3630      	adds	r6, #48	; 0x30
 8004dac:	f805 6b01 	strb.w	r6, [r5], #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	465b      	mov	r3, fp
 8004db4:	4680      	mov	r8, r0
 8004db6:	4689      	mov	r9, r1
 8004db8:	f7fb feb0 	bl	8000b1c <__aeabi_dcmplt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d163      	bne.n	8004e88 <_dtoa_r+0x608>
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	4936      	ldr	r1, [pc, #216]	; (8004ea0 <_dtoa_r+0x620>)
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f7fb fa7e 	bl	80002c8 <__aeabi_dsub>
 8004dcc:	4652      	mov	r2, sl
 8004dce:	465b      	mov	r3, fp
 8004dd0:	f7fb fea4 	bl	8000b1c <__aeabi_dcmplt>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f040 80b5 	bne.w	8004f44 <_dtoa_r+0x6c4>
 8004dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ddc:	429d      	cmp	r5, r3
 8004dde:	d081      	beq.n	8004ce4 <_dtoa_r+0x464>
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <_dtoa_r+0x624>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	f7fb fc26 	bl	8000638 <__aeabi_dmul>
 8004dec:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <_dtoa_r+0x624>)
 8004dee:	4682      	mov	sl, r0
 8004df0:	468b      	mov	fp, r1
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	2200      	movs	r2, #0
 8004df8:	f7fb fc1e 	bl	8000638 <__aeabi_dmul>
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4689      	mov	r9, r1
 8004e00:	e7c6      	b.n	8004d90 <_dtoa_r+0x510>
 8004e02:	4650      	mov	r0, sl
 8004e04:	4659      	mov	r1, fp
 8004e06:	f7fb fc17 	bl	8000638 <__aeabi_dmul>
 8004e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0c:	9d01      	ldr	r5, [sp, #4]
 8004e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e10:	4682      	mov	sl, r0
 8004e12:	468b      	mov	fp, r1
 8004e14:	4649      	mov	r1, r9
 8004e16:	4640      	mov	r0, r8
 8004e18:	f7fb febe 	bl	8000b98 <__aeabi_d2iz>
 8004e1c:	4606      	mov	r6, r0
 8004e1e:	f7fb fba1 	bl	8000564 <__aeabi_i2d>
 8004e22:	3630      	adds	r6, #48	; 0x30
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4640      	mov	r0, r8
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	f7fb fa4c 	bl	80002c8 <__aeabi_dsub>
 8004e30:	f805 6b01 	strb.w	r6, [r5], #1
 8004e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e36:	429d      	cmp	r5, r3
 8004e38:	4680      	mov	r8, r0
 8004e3a:	4689      	mov	r9, r1
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	d124      	bne.n	8004e8c <_dtoa_r+0x60c>
 8004e42:	4b1b      	ldr	r3, [pc, #108]	; (8004eb0 <_dtoa_r+0x630>)
 8004e44:	4650      	mov	r0, sl
 8004e46:	4659      	mov	r1, fp
 8004e48:	f7fb fa40 	bl	80002cc <__adddf3>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb fe80 	bl	8000b58 <__aeabi_dcmpgt>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d173      	bne.n	8004f44 <_dtoa_r+0x6c4>
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	465b      	mov	r3, fp
 8004e60:	4913      	ldr	r1, [pc, #76]	; (8004eb0 <_dtoa_r+0x630>)
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7fb fa30 	bl	80002c8 <__aeabi_dsub>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb fe54 	bl	8000b1c <__aeabi_dcmplt>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f43f af35 	beq.w	8004ce4 <_dtoa_r+0x464>
 8004e7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004e7c:	1e6b      	subs	r3, r5, #1
 8004e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e84:	2b30      	cmp	r3, #48	; 0x30
 8004e86:	d0f8      	beq.n	8004e7a <_dtoa_r+0x5fa>
 8004e88:	9700      	str	r7, [sp, #0]
 8004e8a:	e049      	b.n	8004f20 <_dtoa_r+0x6a0>
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <_dtoa_r+0x624>)
 8004e8e:	f7fb fbd3 	bl	8000638 <__aeabi_dmul>
 8004e92:	4680      	mov	r8, r0
 8004e94:	4689      	mov	r9, r1
 8004e96:	e7bd      	b.n	8004e14 <_dtoa_r+0x594>
 8004e98:	08006a40 	.word	0x08006a40
 8004e9c:	08006a18 	.word	0x08006a18
 8004ea0:	3ff00000 	.word	0x3ff00000
 8004ea4:	40240000 	.word	0x40240000
 8004ea8:	401c0000 	.word	0x401c0000
 8004eac:	40140000 	.word	0x40140000
 8004eb0:	3fe00000 	.word	0x3fe00000
 8004eb4:	9d01      	ldr	r5, [sp, #4]
 8004eb6:	4656      	mov	r6, sl
 8004eb8:	465f      	mov	r7, fp
 8004eba:	4642      	mov	r2, r8
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb fce3 	bl	800088c <__aeabi_ddiv>
 8004ec6:	f7fb fe67 	bl	8000b98 <__aeabi_d2iz>
 8004eca:	4682      	mov	sl, r0
 8004ecc:	f7fb fb4a 	bl	8000564 <__aeabi_i2d>
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	f7fb fbb0 	bl	8000638 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004ee4:	f7fb f9f0 	bl	80002c8 <__aeabi_dsub>
 8004ee8:	f805 6b01 	strb.w	r6, [r5], #1
 8004eec:	9e01      	ldr	r6, [sp, #4]
 8004eee:	9f03      	ldr	r7, [sp, #12]
 8004ef0:	1bae      	subs	r6, r5, r6
 8004ef2:	42b7      	cmp	r7, r6
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	d135      	bne.n	8004f66 <_dtoa_r+0x6e6>
 8004efa:	f7fb f9e7 	bl	80002cc <__adddf3>
 8004efe:	4642      	mov	r2, r8
 8004f00:	464b      	mov	r3, r9
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	f7fb fe27 	bl	8000b58 <__aeabi_dcmpgt>
 8004f0a:	b9d0      	cbnz	r0, 8004f42 <_dtoa_r+0x6c2>
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	4630      	mov	r0, r6
 8004f12:	4639      	mov	r1, r7
 8004f14:	f7fb fdf8 	bl	8000b08 <__aeabi_dcmpeq>
 8004f18:	b110      	cbz	r0, 8004f20 <_dtoa_r+0x6a0>
 8004f1a:	f01a 0f01 	tst.w	sl, #1
 8004f1e:	d110      	bne.n	8004f42 <_dtoa_r+0x6c2>
 8004f20:	4620      	mov	r0, r4
 8004f22:	ee18 1a10 	vmov	r1, s16
 8004f26:	f000 faf3 	bl	8005510 <_Bfree>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9800      	ldr	r0, [sp, #0]
 8004f2e:	702b      	strb	r3, [r5, #0]
 8004f30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f32:	3001      	adds	r0, #1
 8004f34:	6018      	str	r0, [r3, #0]
 8004f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f43f acf1 	beq.w	8004920 <_dtoa_r+0xa0>
 8004f3e:	601d      	str	r5, [r3, #0]
 8004f40:	e4ee      	b.n	8004920 <_dtoa_r+0xa0>
 8004f42:	9f00      	ldr	r7, [sp, #0]
 8004f44:	462b      	mov	r3, r5
 8004f46:	461d      	mov	r5, r3
 8004f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f4c:	2a39      	cmp	r2, #57	; 0x39
 8004f4e:	d106      	bne.n	8004f5e <_dtoa_r+0x6de>
 8004f50:	9a01      	ldr	r2, [sp, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d1f7      	bne.n	8004f46 <_dtoa_r+0x6c6>
 8004f56:	9901      	ldr	r1, [sp, #4]
 8004f58:	2230      	movs	r2, #48	; 0x30
 8004f5a:	3701      	adds	r7, #1
 8004f5c:	700a      	strb	r2, [r1, #0]
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	3201      	adds	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e790      	b.n	8004e88 <_dtoa_r+0x608>
 8004f66:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <_dtoa_r+0x980>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f7fb fb65 	bl	8000638 <__aeabi_dmul>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	4606      	mov	r6, r0
 8004f74:	460f      	mov	r7, r1
 8004f76:	f7fb fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d09d      	beq.n	8004eba <_dtoa_r+0x63a>
 8004f7e:	e7cf      	b.n	8004f20 <_dtoa_r+0x6a0>
 8004f80:	9a08      	ldr	r2, [sp, #32]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f000 80d7 	beq.w	8005136 <_dtoa_r+0x8b6>
 8004f88:	9a06      	ldr	r2, [sp, #24]
 8004f8a:	2a01      	cmp	r2, #1
 8004f8c:	f300 80ba 	bgt.w	8005104 <_dtoa_r+0x884>
 8004f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f92:	2a00      	cmp	r2, #0
 8004f94:	f000 80b2 	beq.w	80050fc <_dtoa_r+0x87c>
 8004f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f9c:	9e07      	ldr	r6, [sp, #28]
 8004f9e:	9d04      	ldr	r5, [sp, #16]
 8004fa0:	9a04      	ldr	r2, [sp, #16]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	9204      	str	r2, [sp, #16]
 8004fa6:	9a05      	ldr	r2, [sp, #20]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	441a      	add	r2, r3
 8004fac:	4620      	mov	r0, r4
 8004fae:	9205      	str	r2, [sp, #20]
 8004fb0:	f000 fb66 	bl	8005680 <__i2b>
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	dd0c      	ble.n	8004fd4 <_dtoa_r+0x754>
 8004fba:	9b05      	ldr	r3, [sp, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dd09      	ble.n	8004fd4 <_dtoa_r+0x754>
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	bfa8      	it	ge
 8004fc6:	462b      	movge	r3, r5
 8004fc8:	1ad2      	subs	r2, r2, r3
 8004fca:	9204      	str	r2, [sp, #16]
 8004fcc:	9a05      	ldr	r2, [sp, #20]
 8004fce:	1aed      	subs	r5, r5, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	9b07      	ldr	r3, [sp, #28]
 8004fd6:	b31b      	cbz	r3, 8005020 <_dtoa_r+0x7a0>
 8004fd8:	9b08      	ldr	r3, [sp, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80af 	beq.w	800513e <_dtoa_r+0x8be>
 8004fe0:	2e00      	cmp	r6, #0
 8004fe2:	dd13      	ble.n	800500c <_dtoa_r+0x78c>
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4632      	mov	r2, r6
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fc09 	bl	8005800 <__pow5mult>
 8004fee:	ee18 2a10 	vmov	r2, s16
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f000 fb58 	bl	80056ac <__multiply>
 8004ffc:	ee18 1a10 	vmov	r1, s16
 8005000:	4680      	mov	r8, r0
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fa84 	bl	8005510 <_Bfree>
 8005008:	ee08 8a10 	vmov	s16, r8
 800500c:	9b07      	ldr	r3, [sp, #28]
 800500e:	1b9a      	subs	r2, r3, r6
 8005010:	d006      	beq.n	8005020 <_dtoa_r+0x7a0>
 8005012:	ee18 1a10 	vmov	r1, s16
 8005016:	4620      	mov	r0, r4
 8005018:	f000 fbf2 	bl	8005800 <__pow5mult>
 800501c:	ee08 0a10 	vmov	s16, r0
 8005020:	2101      	movs	r1, #1
 8005022:	4620      	mov	r0, r4
 8005024:	f000 fb2c 	bl	8005680 <__i2b>
 8005028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	4606      	mov	r6, r0
 800502e:	f340 8088 	ble.w	8005142 <_dtoa_r+0x8c2>
 8005032:	461a      	mov	r2, r3
 8005034:	4601      	mov	r1, r0
 8005036:	4620      	mov	r0, r4
 8005038:	f000 fbe2 	bl	8005800 <__pow5mult>
 800503c:	9b06      	ldr	r3, [sp, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	4606      	mov	r6, r0
 8005042:	f340 8081 	ble.w	8005148 <_dtoa_r+0x8c8>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	6933      	ldr	r3, [r6, #16]
 800504c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005050:	6918      	ldr	r0, [r3, #16]
 8005052:	f000 fac5 	bl	80055e0 <__hi0bits>
 8005056:	f1c0 0020 	rsb	r0, r0, #32
 800505a:	9b05      	ldr	r3, [sp, #20]
 800505c:	4418      	add	r0, r3
 800505e:	f010 001f 	ands.w	r0, r0, #31
 8005062:	f000 8092 	beq.w	800518a <_dtoa_r+0x90a>
 8005066:	f1c0 0320 	rsb	r3, r0, #32
 800506a:	2b04      	cmp	r3, #4
 800506c:	f340 808a 	ble.w	8005184 <_dtoa_r+0x904>
 8005070:	f1c0 001c 	rsb	r0, r0, #28
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	4403      	add	r3, r0
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	9b05      	ldr	r3, [sp, #20]
 800507c:	4403      	add	r3, r0
 800507e:	4405      	add	r5, r0
 8005080:	9305      	str	r3, [sp, #20]
 8005082:	9b04      	ldr	r3, [sp, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dd07      	ble.n	8005098 <_dtoa_r+0x818>
 8005088:	ee18 1a10 	vmov	r1, s16
 800508c:	461a      	mov	r2, r3
 800508e:	4620      	mov	r0, r4
 8005090:	f000 fc10 	bl	80058b4 <__lshift>
 8005094:	ee08 0a10 	vmov	s16, r0
 8005098:	9b05      	ldr	r3, [sp, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	dd05      	ble.n	80050aa <_dtoa_r+0x82a>
 800509e:	4631      	mov	r1, r6
 80050a0:	461a      	mov	r2, r3
 80050a2:	4620      	mov	r0, r4
 80050a4:	f000 fc06 	bl	80058b4 <__lshift>
 80050a8:	4606      	mov	r6, r0
 80050aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d06e      	beq.n	800518e <_dtoa_r+0x90e>
 80050b0:	ee18 0a10 	vmov	r0, s16
 80050b4:	4631      	mov	r1, r6
 80050b6:	f000 fc6d 	bl	8005994 <__mcmp>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	da67      	bge.n	800518e <_dtoa_r+0x90e>
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	ee18 1a10 	vmov	r1, s16
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	220a      	movs	r2, #10
 80050ca:	2300      	movs	r3, #0
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 fa41 	bl	8005554 <__multadd>
 80050d2:	9b08      	ldr	r3, [sp, #32]
 80050d4:	ee08 0a10 	vmov	s16, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 81b1 	beq.w	8005440 <_dtoa_r+0xbc0>
 80050de:	2300      	movs	r3, #0
 80050e0:	4639      	mov	r1, r7
 80050e2:	220a      	movs	r2, #10
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fa35 	bl	8005554 <__multadd>
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	4607      	mov	r7, r0
 80050f0:	f300 808e 	bgt.w	8005210 <_dtoa_r+0x990>
 80050f4:	9b06      	ldr	r3, [sp, #24]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	dc51      	bgt.n	800519e <_dtoa_r+0x91e>
 80050fa:	e089      	b.n	8005210 <_dtoa_r+0x990>
 80050fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005102:	e74b      	b.n	8004f9c <_dtoa_r+0x71c>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1e5e      	subs	r6, r3, #1
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	42b3      	cmp	r3, r6
 800510c:	bfbf      	itttt	lt
 800510e:	9b07      	ldrlt	r3, [sp, #28]
 8005110:	9607      	strlt	r6, [sp, #28]
 8005112:	1af2      	sublt	r2, r6, r3
 8005114:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005116:	bfb6      	itet	lt
 8005118:	189b      	addlt	r3, r3, r2
 800511a:	1b9e      	subge	r6, r3, r6
 800511c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	bfb8      	it	lt
 8005122:	2600      	movlt	r6, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	bfb7      	itett	lt
 8005128:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800512c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005130:	1a9d      	sublt	r5, r3, r2
 8005132:	2300      	movlt	r3, #0
 8005134:	e734      	b.n	8004fa0 <_dtoa_r+0x720>
 8005136:	9e07      	ldr	r6, [sp, #28]
 8005138:	9d04      	ldr	r5, [sp, #16]
 800513a:	9f08      	ldr	r7, [sp, #32]
 800513c:	e73b      	b.n	8004fb6 <_dtoa_r+0x736>
 800513e:	9a07      	ldr	r2, [sp, #28]
 8005140:	e767      	b.n	8005012 <_dtoa_r+0x792>
 8005142:	9b06      	ldr	r3, [sp, #24]
 8005144:	2b01      	cmp	r3, #1
 8005146:	dc18      	bgt.n	800517a <_dtoa_r+0x8fa>
 8005148:	f1ba 0f00 	cmp.w	sl, #0
 800514c:	d115      	bne.n	800517a <_dtoa_r+0x8fa>
 800514e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005152:	b993      	cbnz	r3, 800517a <_dtoa_r+0x8fa>
 8005154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005158:	0d1b      	lsrs	r3, r3, #20
 800515a:	051b      	lsls	r3, r3, #20
 800515c:	b183      	cbz	r3, 8005180 <_dtoa_r+0x900>
 800515e:	9b04      	ldr	r3, [sp, #16]
 8005160:	3301      	adds	r3, #1
 8005162:	9304      	str	r3, [sp, #16]
 8005164:	9b05      	ldr	r3, [sp, #20]
 8005166:	3301      	adds	r3, #1
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	f04f 0801 	mov.w	r8, #1
 800516e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f af6a 	bne.w	800504a <_dtoa_r+0x7ca>
 8005176:	2001      	movs	r0, #1
 8005178:	e76f      	b.n	800505a <_dtoa_r+0x7da>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	e7f6      	b.n	800516e <_dtoa_r+0x8ee>
 8005180:	4698      	mov	r8, r3
 8005182:	e7f4      	b.n	800516e <_dtoa_r+0x8ee>
 8005184:	f43f af7d 	beq.w	8005082 <_dtoa_r+0x802>
 8005188:	4618      	mov	r0, r3
 800518a:	301c      	adds	r0, #28
 800518c:	e772      	b.n	8005074 <_dtoa_r+0x7f4>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	dc37      	bgt.n	8005204 <_dtoa_r+0x984>
 8005194:	9b06      	ldr	r3, [sp, #24]
 8005196:	2b02      	cmp	r3, #2
 8005198:	dd34      	ble.n	8005204 <_dtoa_r+0x984>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	9302      	str	r3, [sp, #8]
 800519e:	9b02      	ldr	r3, [sp, #8]
 80051a0:	b96b      	cbnz	r3, 80051be <_dtoa_r+0x93e>
 80051a2:	4631      	mov	r1, r6
 80051a4:	2205      	movs	r2, #5
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f9d4 	bl	8005554 <__multadd>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4606      	mov	r6, r0
 80051b0:	ee18 0a10 	vmov	r0, s16
 80051b4:	f000 fbee 	bl	8005994 <__mcmp>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f73f adbb 	bgt.w	8004d34 <_dtoa_r+0x4b4>
 80051be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c0:	9d01      	ldr	r5, [sp, #4]
 80051c2:	43db      	mvns	r3, r3
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	4631      	mov	r1, r6
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 f99f 	bl	8005510 <_Bfree>
 80051d2:	2f00      	cmp	r7, #0
 80051d4:	f43f aea4 	beq.w	8004f20 <_dtoa_r+0x6a0>
 80051d8:	f1b8 0f00 	cmp.w	r8, #0
 80051dc:	d005      	beq.n	80051ea <_dtoa_r+0x96a>
 80051de:	45b8      	cmp	r8, r7
 80051e0:	d003      	beq.n	80051ea <_dtoa_r+0x96a>
 80051e2:	4641      	mov	r1, r8
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 f993 	bl	8005510 <_Bfree>
 80051ea:	4639      	mov	r1, r7
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 f98f 	bl	8005510 <_Bfree>
 80051f2:	e695      	b.n	8004f20 <_dtoa_r+0x6a0>
 80051f4:	2600      	movs	r6, #0
 80051f6:	4637      	mov	r7, r6
 80051f8:	e7e1      	b.n	80051be <_dtoa_r+0x93e>
 80051fa:	9700      	str	r7, [sp, #0]
 80051fc:	4637      	mov	r7, r6
 80051fe:	e599      	b.n	8004d34 <_dtoa_r+0x4b4>
 8005200:	40240000 	.word	0x40240000
 8005204:	9b08      	ldr	r3, [sp, #32]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80ca 	beq.w	80053a0 <_dtoa_r+0xb20>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	2d00      	cmp	r5, #0
 8005212:	dd05      	ble.n	8005220 <_dtoa_r+0x9a0>
 8005214:	4639      	mov	r1, r7
 8005216:	462a      	mov	r2, r5
 8005218:	4620      	mov	r0, r4
 800521a:	f000 fb4b 	bl	80058b4 <__lshift>
 800521e:	4607      	mov	r7, r0
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d05b      	beq.n	80052de <_dtoa_r+0xa5e>
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4620      	mov	r0, r4
 800522a:	f000 f931 	bl	8005490 <_Balloc>
 800522e:	4605      	mov	r5, r0
 8005230:	b928      	cbnz	r0, 800523e <_dtoa_r+0x9be>
 8005232:	4b87      	ldr	r3, [pc, #540]	; (8005450 <_dtoa_r+0xbd0>)
 8005234:	4602      	mov	r2, r0
 8005236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800523a:	f7ff bb3b 	b.w	80048b4 <_dtoa_r+0x34>
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	3202      	adds	r2, #2
 8005242:	0092      	lsls	r2, r2, #2
 8005244:	f107 010c 	add.w	r1, r7, #12
 8005248:	300c      	adds	r0, #12
 800524a:	f000 f913 	bl	8005474 <memcpy>
 800524e:	2201      	movs	r2, #1
 8005250:	4629      	mov	r1, r5
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fb2e 	bl	80058b4 <__lshift>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	f103 0901 	add.w	r9, r3, #1
 800525e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005262:	4413      	add	r3, r2
 8005264:	9305      	str	r3, [sp, #20]
 8005266:	f00a 0301 	and.w	r3, sl, #1
 800526a:	46b8      	mov	r8, r7
 800526c:	9304      	str	r3, [sp, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	4631      	mov	r1, r6
 8005272:	ee18 0a10 	vmov	r0, s16
 8005276:	f7ff fa77 	bl	8004768 <quorem>
 800527a:	4641      	mov	r1, r8
 800527c:	9002      	str	r0, [sp, #8]
 800527e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005282:	ee18 0a10 	vmov	r0, s16
 8005286:	f000 fb85 	bl	8005994 <__mcmp>
 800528a:	463a      	mov	r2, r7
 800528c:	9003      	str	r0, [sp, #12]
 800528e:	4631      	mov	r1, r6
 8005290:	4620      	mov	r0, r4
 8005292:	f000 fb9b 	bl	80059cc <__mdiff>
 8005296:	68c2      	ldr	r2, [r0, #12]
 8005298:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800529c:	4605      	mov	r5, r0
 800529e:	bb02      	cbnz	r2, 80052e2 <_dtoa_r+0xa62>
 80052a0:	4601      	mov	r1, r0
 80052a2:	ee18 0a10 	vmov	r0, s16
 80052a6:	f000 fb75 	bl	8005994 <__mcmp>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4629      	mov	r1, r5
 80052ae:	4620      	mov	r0, r4
 80052b0:	9207      	str	r2, [sp, #28]
 80052b2:	f000 f92d 	bl	8005510 <_Bfree>
 80052b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80052ba:	ea43 0102 	orr.w	r1, r3, r2
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	430b      	orrs	r3, r1
 80052c2:	464d      	mov	r5, r9
 80052c4:	d10f      	bne.n	80052e6 <_dtoa_r+0xa66>
 80052c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052ca:	d02a      	beq.n	8005322 <_dtoa_r+0xaa2>
 80052cc:	9b03      	ldr	r3, [sp, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dd02      	ble.n	80052d8 <_dtoa_r+0xa58>
 80052d2:	9b02      	ldr	r3, [sp, #8]
 80052d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80052d8:	f88b a000 	strb.w	sl, [fp]
 80052dc:	e775      	b.n	80051ca <_dtoa_r+0x94a>
 80052de:	4638      	mov	r0, r7
 80052e0:	e7ba      	b.n	8005258 <_dtoa_r+0x9d8>
 80052e2:	2201      	movs	r2, #1
 80052e4:	e7e2      	b.n	80052ac <_dtoa_r+0xa2c>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	db04      	blt.n	80052f6 <_dtoa_r+0xa76>
 80052ec:	9906      	ldr	r1, [sp, #24]
 80052ee:	430b      	orrs	r3, r1
 80052f0:	9904      	ldr	r1, [sp, #16]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	d122      	bne.n	800533c <_dtoa_r+0xabc>
 80052f6:	2a00      	cmp	r2, #0
 80052f8:	ddee      	ble.n	80052d8 <_dtoa_r+0xa58>
 80052fa:	ee18 1a10 	vmov	r1, s16
 80052fe:	2201      	movs	r2, #1
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fad7 	bl	80058b4 <__lshift>
 8005306:	4631      	mov	r1, r6
 8005308:	ee08 0a10 	vmov	s16, r0
 800530c:	f000 fb42 	bl	8005994 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	dc03      	bgt.n	800531c <_dtoa_r+0xa9c>
 8005314:	d1e0      	bne.n	80052d8 <_dtoa_r+0xa58>
 8005316:	f01a 0f01 	tst.w	sl, #1
 800531a:	d0dd      	beq.n	80052d8 <_dtoa_r+0xa58>
 800531c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005320:	d1d7      	bne.n	80052d2 <_dtoa_r+0xa52>
 8005322:	2339      	movs	r3, #57	; 0x39
 8005324:	f88b 3000 	strb.w	r3, [fp]
 8005328:	462b      	mov	r3, r5
 800532a:	461d      	mov	r5, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005332:	2a39      	cmp	r2, #57	; 0x39
 8005334:	d071      	beq.n	800541a <_dtoa_r+0xb9a>
 8005336:	3201      	adds	r2, #1
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e746      	b.n	80051ca <_dtoa_r+0x94a>
 800533c:	2a00      	cmp	r2, #0
 800533e:	dd07      	ble.n	8005350 <_dtoa_r+0xad0>
 8005340:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005344:	d0ed      	beq.n	8005322 <_dtoa_r+0xaa2>
 8005346:	f10a 0301 	add.w	r3, sl, #1
 800534a:	f88b 3000 	strb.w	r3, [fp]
 800534e:	e73c      	b.n	80051ca <_dtoa_r+0x94a>
 8005350:	9b05      	ldr	r3, [sp, #20]
 8005352:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005356:	4599      	cmp	r9, r3
 8005358:	d047      	beq.n	80053ea <_dtoa_r+0xb6a>
 800535a:	ee18 1a10 	vmov	r1, s16
 800535e:	2300      	movs	r3, #0
 8005360:	220a      	movs	r2, #10
 8005362:	4620      	mov	r0, r4
 8005364:	f000 f8f6 	bl	8005554 <__multadd>
 8005368:	45b8      	cmp	r8, r7
 800536a:	ee08 0a10 	vmov	s16, r0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	f04f 020a 	mov.w	r2, #10
 8005376:	4641      	mov	r1, r8
 8005378:	4620      	mov	r0, r4
 800537a:	d106      	bne.n	800538a <_dtoa_r+0xb0a>
 800537c:	f000 f8ea 	bl	8005554 <__multadd>
 8005380:	4680      	mov	r8, r0
 8005382:	4607      	mov	r7, r0
 8005384:	f109 0901 	add.w	r9, r9, #1
 8005388:	e772      	b.n	8005270 <_dtoa_r+0x9f0>
 800538a:	f000 f8e3 	bl	8005554 <__multadd>
 800538e:	4639      	mov	r1, r7
 8005390:	4680      	mov	r8, r0
 8005392:	2300      	movs	r3, #0
 8005394:	220a      	movs	r2, #10
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f8dc 	bl	8005554 <__multadd>
 800539c:	4607      	mov	r7, r0
 800539e:	e7f1      	b.n	8005384 <_dtoa_r+0xb04>
 80053a0:	9b03      	ldr	r3, [sp, #12]
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	9d01      	ldr	r5, [sp, #4]
 80053a6:	ee18 0a10 	vmov	r0, s16
 80053aa:	4631      	mov	r1, r6
 80053ac:	f7ff f9dc 	bl	8004768 <quorem>
 80053b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	f805 ab01 	strb.w	sl, [r5], #1
 80053ba:	1aea      	subs	r2, r5, r3
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	4293      	cmp	r3, r2
 80053c0:	dd09      	ble.n	80053d6 <_dtoa_r+0xb56>
 80053c2:	ee18 1a10 	vmov	r1, s16
 80053c6:	2300      	movs	r3, #0
 80053c8:	220a      	movs	r2, #10
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 f8c2 	bl	8005554 <__multadd>
 80053d0:	ee08 0a10 	vmov	s16, r0
 80053d4:	e7e7      	b.n	80053a6 <_dtoa_r+0xb26>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bfc8      	it	gt
 80053dc:	461d      	movgt	r5, r3
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	bfd8      	it	le
 80053e2:	2501      	movle	r5, #1
 80053e4:	441d      	add	r5, r3
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	ee18 1a10 	vmov	r1, s16
 80053ee:	2201      	movs	r2, #1
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fa5f 	bl	80058b4 <__lshift>
 80053f6:	4631      	mov	r1, r6
 80053f8:	ee08 0a10 	vmov	s16, r0
 80053fc:	f000 faca 	bl	8005994 <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	dc91      	bgt.n	8005328 <_dtoa_r+0xaa8>
 8005404:	d102      	bne.n	800540c <_dtoa_r+0xb8c>
 8005406:	f01a 0f01 	tst.w	sl, #1
 800540a:	d18d      	bne.n	8005328 <_dtoa_r+0xaa8>
 800540c:	462b      	mov	r3, r5
 800540e:	461d      	mov	r5, r3
 8005410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005414:	2a30      	cmp	r2, #48	; 0x30
 8005416:	d0fa      	beq.n	800540e <_dtoa_r+0xb8e>
 8005418:	e6d7      	b.n	80051ca <_dtoa_r+0x94a>
 800541a:	9a01      	ldr	r2, [sp, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d184      	bne.n	800532a <_dtoa_r+0xaaa>
 8005420:	9b00      	ldr	r3, [sp, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2331      	movs	r3, #49	; 0x31
 8005428:	7013      	strb	r3, [r2, #0]
 800542a:	e6ce      	b.n	80051ca <_dtoa_r+0x94a>
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <_dtoa_r+0xbd4>)
 800542e:	f7ff ba95 	b.w	800495c <_dtoa_r+0xdc>
 8005432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005434:	2b00      	cmp	r3, #0
 8005436:	f47f aa6e 	bne.w	8004916 <_dtoa_r+0x96>
 800543a:	4b07      	ldr	r3, [pc, #28]	; (8005458 <_dtoa_r+0xbd8>)
 800543c:	f7ff ba8e 	b.w	800495c <_dtoa_r+0xdc>
 8005440:	9b02      	ldr	r3, [sp, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	dcae      	bgt.n	80053a4 <_dtoa_r+0xb24>
 8005446:	9b06      	ldr	r3, [sp, #24]
 8005448:	2b02      	cmp	r3, #2
 800544a:	f73f aea8 	bgt.w	800519e <_dtoa_r+0x91e>
 800544e:	e7a9      	b.n	80053a4 <_dtoa_r+0xb24>
 8005450:	080069a7 	.word	0x080069a7
 8005454:	08006904 	.word	0x08006904
 8005458:	08006928 	.word	0x08006928

0800545c <_localeconv_r>:
 800545c:	4800      	ldr	r0, [pc, #0]	; (8005460 <_localeconv_r+0x4>)
 800545e:	4770      	bx	lr
 8005460:	20000160 	.word	0x20000160

08005464 <malloc>:
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <malloc+0xc>)
 8005466:	4601      	mov	r1, r0
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f000 bc17 	b.w	8005c9c <_malloc_r>
 800546e:	bf00      	nop
 8005470:	2000000c 	.word	0x2000000c

08005474 <memcpy>:
 8005474:	440a      	add	r2, r1
 8005476:	4291      	cmp	r1, r2
 8005478:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	4770      	bx	lr
 8005480:	b510      	push	{r4, lr}
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548a:	4291      	cmp	r1, r2
 800548c:	d1f9      	bne.n	8005482 <memcpy+0xe>
 800548e:	bd10      	pop	{r4, pc}

08005490 <_Balloc>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005494:	4604      	mov	r4, r0
 8005496:	460d      	mov	r5, r1
 8005498:	b976      	cbnz	r6, 80054b8 <_Balloc+0x28>
 800549a:	2010      	movs	r0, #16
 800549c:	f7ff ffe2 	bl	8005464 <malloc>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6260      	str	r0, [r4, #36]	; 0x24
 80054a4:	b920      	cbnz	r0, 80054b0 <_Balloc+0x20>
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <_Balloc+0x78>)
 80054a8:	4818      	ldr	r0, [pc, #96]	; (800550c <_Balloc+0x7c>)
 80054aa:	2166      	movs	r1, #102	; 0x66
 80054ac:	f000 fc7a 	bl	8005da4 <__assert_func>
 80054b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054b4:	6006      	str	r6, [r0, #0]
 80054b6:	60c6      	str	r6, [r0, #12]
 80054b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054ba:	68f3      	ldr	r3, [r6, #12]
 80054bc:	b183      	cbz	r3, 80054e0 <_Balloc+0x50>
 80054be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054c6:	b9b8      	cbnz	r0, 80054f8 <_Balloc+0x68>
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f605 	lsl.w	r6, r1, r5
 80054ce:	1d72      	adds	r2, r6, #5
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fb60 	bl	8005b98 <_calloc_r>
 80054d8:	b160      	cbz	r0, 80054f4 <_Balloc+0x64>
 80054da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054de:	e00e      	b.n	80054fe <_Balloc+0x6e>
 80054e0:	2221      	movs	r2, #33	; 0x21
 80054e2:	2104      	movs	r1, #4
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fb57 	bl	8005b98 <_calloc_r>
 80054ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ec:	60f0      	str	r0, [r6, #12]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e4      	bne.n	80054be <_Balloc+0x2e>
 80054f4:	2000      	movs	r0, #0
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	6802      	ldr	r2, [r0, #0]
 80054fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054fe:	2300      	movs	r3, #0
 8005500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005504:	e7f7      	b.n	80054f6 <_Balloc+0x66>
 8005506:	bf00      	nop
 8005508:	08006935 	.word	0x08006935
 800550c:	080069b8 	.word	0x080069b8

08005510 <_Bfree>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005514:	4605      	mov	r5, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b976      	cbnz	r6, 8005538 <_Bfree+0x28>
 800551a:	2010      	movs	r0, #16
 800551c:	f7ff ffa2 	bl	8005464 <malloc>
 8005520:	4602      	mov	r2, r0
 8005522:	6268      	str	r0, [r5, #36]	; 0x24
 8005524:	b920      	cbnz	r0, 8005530 <_Bfree+0x20>
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <_Bfree+0x3c>)
 8005528:	4809      	ldr	r0, [pc, #36]	; (8005550 <_Bfree+0x40>)
 800552a:	218a      	movs	r1, #138	; 0x8a
 800552c:	f000 fc3a 	bl	8005da4 <__assert_func>
 8005530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005534:	6006      	str	r6, [r0, #0]
 8005536:	60c6      	str	r6, [r0, #12]
 8005538:	b13c      	cbz	r4, 800554a <_Bfree+0x3a>
 800553a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800553c:	6862      	ldr	r2, [r4, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005544:	6021      	str	r1, [r4, #0]
 8005546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	08006935 	.word	0x08006935
 8005550:	080069b8 	.word	0x080069b8

08005554 <__multadd>:
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	690d      	ldr	r5, [r1, #16]
 800555a:	4607      	mov	r7, r0
 800555c:	460c      	mov	r4, r1
 800555e:	461e      	mov	r6, r3
 8005560:	f101 0c14 	add.w	ip, r1, #20
 8005564:	2000      	movs	r0, #0
 8005566:	f8dc 3000 	ldr.w	r3, [ip]
 800556a:	b299      	uxth	r1, r3
 800556c:	fb02 6101 	mla	r1, r2, r1, r6
 8005570:	0c1e      	lsrs	r6, r3, #16
 8005572:	0c0b      	lsrs	r3, r1, #16
 8005574:	fb02 3306 	mla	r3, r2, r6, r3
 8005578:	b289      	uxth	r1, r1
 800557a:	3001      	adds	r0, #1
 800557c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005580:	4285      	cmp	r5, r0
 8005582:	f84c 1b04 	str.w	r1, [ip], #4
 8005586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800558a:	dcec      	bgt.n	8005566 <__multadd+0x12>
 800558c:	b30e      	cbz	r6, 80055d2 <__multadd+0x7e>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc19      	bgt.n	80055c8 <__multadd+0x74>
 8005594:	6861      	ldr	r1, [r4, #4]
 8005596:	4638      	mov	r0, r7
 8005598:	3101      	adds	r1, #1
 800559a:	f7ff ff79 	bl	8005490 <_Balloc>
 800559e:	4680      	mov	r8, r0
 80055a0:	b928      	cbnz	r0, 80055ae <__multadd+0x5a>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <__multadd+0x84>)
 80055a6:	480d      	ldr	r0, [pc, #52]	; (80055dc <__multadd+0x88>)
 80055a8:	21b5      	movs	r1, #181	; 0xb5
 80055aa:	f000 fbfb 	bl	8005da4 <__assert_func>
 80055ae:	6922      	ldr	r2, [r4, #16]
 80055b0:	3202      	adds	r2, #2
 80055b2:	f104 010c 	add.w	r1, r4, #12
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	300c      	adds	r0, #12
 80055ba:	f7ff ff5b 	bl	8005474 <memcpy>
 80055be:	4621      	mov	r1, r4
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff ffa5 	bl	8005510 <_Bfree>
 80055c6:	4644      	mov	r4, r8
 80055c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055cc:	3501      	adds	r5, #1
 80055ce:	615e      	str	r6, [r3, #20]
 80055d0:	6125      	str	r5, [r4, #16]
 80055d2:	4620      	mov	r0, r4
 80055d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d8:	080069a7 	.word	0x080069a7
 80055dc:	080069b8 	.word	0x080069b8

080055e0 <__hi0bits>:
 80055e0:	0c03      	lsrs	r3, r0, #16
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	b9d3      	cbnz	r3, 800561c <__hi0bits+0x3c>
 80055e6:	0400      	lsls	r0, r0, #16
 80055e8:	2310      	movs	r3, #16
 80055ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80055ee:	bf04      	itt	eq
 80055f0:	0200      	lsleq	r0, r0, #8
 80055f2:	3308      	addeq	r3, #8
 80055f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80055f8:	bf04      	itt	eq
 80055fa:	0100      	lsleq	r0, r0, #4
 80055fc:	3304      	addeq	r3, #4
 80055fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005602:	bf04      	itt	eq
 8005604:	0080      	lsleq	r0, r0, #2
 8005606:	3302      	addeq	r3, #2
 8005608:	2800      	cmp	r0, #0
 800560a:	db05      	blt.n	8005618 <__hi0bits+0x38>
 800560c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005610:	f103 0301 	add.w	r3, r3, #1
 8005614:	bf08      	it	eq
 8005616:	2320      	moveq	r3, #32
 8005618:	4618      	mov	r0, r3
 800561a:	4770      	bx	lr
 800561c:	2300      	movs	r3, #0
 800561e:	e7e4      	b.n	80055ea <__hi0bits+0xa>

08005620 <__lo0bits>:
 8005620:	6803      	ldr	r3, [r0, #0]
 8005622:	f013 0207 	ands.w	r2, r3, #7
 8005626:	4601      	mov	r1, r0
 8005628:	d00b      	beq.n	8005642 <__lo0bits+0x22>
 800562a:	07da      	lsls	r2, r3, #31
 800562c:	d423      	bmi.n	8005676 <__lo0bits+0x56>
 800562e:	0798      	lsls	r0, r3, #30
 8005630:	bf49      	itett	mi
 8005632:	085b      	lsrmi	r3, r3, #1
 8005634:	089b      	lsrpl	r3, r3, #2
 8005636:	2001      	movmi	r0, #1
 8005638:	600b      	strmi	r3, [r1, #0]
 800563a:	bf5c      	itt	pl
 800563c:	600b      	strpl	r3, [r1, #0]
 800563e:	2002      	movpl	r0, #2
 8005640:	4770      	bx	lr
 8005642:	b298      	uxth	r0, r3
 8005644:	b9a8      	cbnz	r0, 8005672 <__lo0bits+0x52>
 8005646:	0c1b      	lsrs	r3, r3, #16
 8005648:	2010      	movs	r0, #16
 800564a:	b2da      	uxtb	r2, r3
 800564c:	b90a      	cbnz	r2, 8005652 <__lo0bits+0x32>
 800564e:	3008      	adds	r0, #8
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	071a      	lsls	r2, r3, #28
 8005654:	bf04      	itt	eq
 8005656:	091b      	lsreq	r3, r3, #4
 8005658:	3004      	addeq	r0, #4
 800565a:	079a      	lsls	r2, r3, #30
 800565c:	bf04      	itt	eq
 800565e:	089b      	lsreq	r3, r3, #2
 8005660:	3002      	addeq	r0, #2
 8005662:	07da      	lsls	r2, r3, #31
 8005664:	d403      	bmi.n	800566e <__lo0bits+0x4e>
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	f100 0001 	add.w	r0, r0, #1
 800566c:	d005      	beq.n	800567a <__lo0bits+0x5a>
 800566e:	600b      	str	r3, [r1, #0]
 8005670:	4770      	bx	lr
 8005672:	4610      	mov	r0, r2
 8005674:	e7e9      	b.n	800564a <__lo0bits+0x2a>
 8005676:	2000      	movs	r0, #0
 8005678:	4770      	bx	lr
 800567a:	2020      	movs	r0, #32
 800567c:	4770      	bx	lr
	...

08005680 <__i2b>:
 8005680:	b510      	push	{r4, lr}
 8005682:	460c      	mov	r4, r1
 8005684:	2101      	movs	r1, #1
 8005686:	f7ff ff03 	bl	8005490 <_Balloc>
 800568a:	4602      	mov	r2, r0
 800568c:	b928      	cbnz	r0, 800569a <__i2b+0x1a>
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <__i2b+0x24>)
 8005690:	4805      	ldr	r0, [pc, #20]	; (80056a8 <__i2b+0x28>)
 8005692:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005696:	f000 fb85 	bl	8005da4 <__assert_func>
 800569a:	2301      	movs	r3, #1
 800569c:	6144      	str	r4, [r0, #20]
 800569e:	6103      	str	r3, [r0, #16]
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	080069a7 	.word	0x080069a7
 80056a8:	080069b8 	.word	0x080069b8

080056ac <__multiply>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	4691      	mov	r9, r2
 80056b2:	690a      	ldr	r2, [r1, #16]
 80056b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	bfb8      	it	lt
 80056bc:	460b      	movlt	r3, r1
 80056be:	460c      	mov	r4, r1
 80056c0:	bfbc      	itt	lt
 80056c2:	464c      	movlt	r4, r9
 80056c4:	4699      	movlt	r9, r3
 80056c6:	6927      	ldr	r7, [r4, #16]
 80056c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056cc:	68a3      	ldr	r3, [r4, #8]
 80056ce:	6861      	ldr	r1, [r4, #4]
 80056d0:	eb07 060a 	add.w	r6, r7, sl
 80056d4:	42b3      	cmp	r3, r6
 80056d6:	b085      	sub	sp, #20
 80056d8:	bfb8      	it	lt
 80056da:	3101      	addlt	r1, #1
 80056dc:	f7ff fed8 	bl	8005490 <_Balloc>
 80056e0:	b930      	cbnz	r0, 80056f0 <__multiply+0x44>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <__multiply+0x14c>)
 80056e6:	4845      	ldr	r0, [pc, #276]	; (80057fc <__multiply+0x150>)
 80056e8:	f240 115d 	movw	r1, #349	; 0x15d
 80056ec:	f000 fb5a 	bl	8005da4 <__assert_func>
 80056f0:	f100 0514 	add.w	r5, r0, #20
 80056f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056f8:	462b      	mov	r3, r5
 80056fa:	2200      	movs	r2, #0
 80056fc:	4543      	cmp	r3, r8
 80056fe:	d321      	bcc.n	8005744 <__multiply+0x98>
 8005700:	f104 0314 	add.w	r3, r4, #20
 8005704:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005708:	f109 0314 	add.w	r3, r9, #20
 800570c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005710:	9202      	str	r2, [sp, #8]
 8005712:	1b3a      	subs	r2, r7, r4
 8005714:	3a15      	subs	r2, #21
 8005716:	f022 0203 	bic.w	r2, r2, #3
 800571a:	3204      	adds	r2, #4
 800571c:	f104 0115 	add.w	r1, r4, #21
 8005720:	428f      	cmp	r7, r1
 8005722:	bf38      	it	cc
 8005724:	2204      	movcc	r2, #4
 8005726:	9201      	str	r2, [sp, #4]
 8005728:	9a02      	ldr	r2, [sp, #8]
 800572a:	9303      	str	r3, [sp, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d80c      	bhi.n	800574a <__multiply+0x9e>
 8005730:	2e00      	cmp	r6, #0
 8005732:	dd03      	ble.n	800573c <__multiply+0x90>
 8005734:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05a      	beq.n	80057f2 <__multiply+0x146>
 800573c:	6106      	str	r6, [r0, #16]
 800573e:	b005      	add	sp, #20
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005744:	f843 2b04 	str.w	r2, [r3], #4
 8005748:	e7d8      	b.n	80056fc <__multiply+0x50>
 800574a:	f8b3 a000 	ldrh.w	sl, [r3]
 800574e:	f1ba 0f00 	cmp.w	sl, #0
 8005752:	d024      	beq.n	800579e <__multiply+0xf2>
 8005754:	f104 0e14 	add.w	lr, r4, #20
 8005758:	46a9      	mov	r9, r5
 800575a:	f04f 0c00 	mov.w	ip, #0
 800575e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005762:	f8d9 1000 	ldr.w	r1, [r9]
 8005766:	fa1f fb82 	uxth.w	fp, r2
 800576a:	b289      	uxth	r1, r1
 800576c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005770:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005774:	f8d9 2000 	ldr.w	r2, [r9]
 8005778:	4461      	add	r1, ip
 800577a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800577e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005782:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005786:	b289      	uxth	r1, r1
 8005788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800578c:	4577      	cmp	r7, lr
 800578e:	f849 1b04 	str.w	r1, [r9], #4
 8005792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005796:	d8e2      	bhi.n	800575e <__multiply+0xb2>
 8005798:	9a01      	ldr	r2, [sp, #4]
 800579a:	f845 c002 	str.w	ip, [r5, r2]
 800579e:	9a03      	ldr	r2, [sp, #12]
 80057a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057a4:	3304      	adds	r3, #4
 80057a6:	f1b9 0f00 	cmp.w	r9, #0
 80057aa:	d020      	beq.n	80057ee <__multiply+0x142>
 80057ac:	6829      	ldr	r1, [r5, #0]
 80057ae:	f104 0c14 	add.w	ip, r4, #20
 80057b2:	46ae      	mov	lr, r5
 80057b4:	f04f 0a00 	mov.w	sl, #0
 80057b8:	f8bc b000 	ldrh.w	fp, [ip]
 80057bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057c0:	fb09 220b 	mla	r2, r9, fp, r2
 80057c4:	4492      	add	sl, r2
 80057c6:	b289      	uxth	r1, r1
 80057c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057cc:	f84e 1b04 	str.w	r1, [lr], #4
 80057d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057d4:	f8be 1000 	ldrh.w	r1, [lr]
 80057d8:	0c12      	lsrs	r2, r2, #16
 80057da:	fb09 1102 	mla	r1, r9, r2, r1
 80057de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057e2:	4567      	cmp	r7, ip
 80057e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057e8:	d8e6      	bhi.n	80057b8 <__multiply+0x10c>
 80057ea:	9a01      	ldr	r2, [sp, #4]
 80057ec:	50a9      	str	r1, [r5, r2]
 80057ee:	3504      	adds	r5, #4
 80057f0:	e79a      	b.n	8005728 <__multiply+0x7c>
 80057f2:	3e01      	subs	r6, #1
 80057f4:	e79c      	b.n	8005730 <__multiply+0x84>
 80057f6:	bf00      	nop
 80057f8:	080069a7 	.word	0x080069a7
 80057fc:	080069b8 	.word	0x080069b8

08005800 <__pow5mult>:
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	4615      	mov	r5, r2
 8005806:	f012 0203 	ands.w	r2, r2, #3
 800580a:	4606      	mov	r6, r0
 800580c:	460f      	mov	r7, r1
 800580e:	d007      	beq.n	8005820 <__pow5mult+0x20>
 8005810:	4c25      	ldr	r4, [pc, #148]	; (80058a8 <__pow5mult+0xa8>)
 8005812:	3a01      	subs	r2, #1
 8005814:	2300      	movs	r3, #0
 8005816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800581a:	f7ff fe9b 	bl	8005554 <__multadd>
 800581e:	4607      	mov	r7, r0
 8005820:	10ad      	asrs	r5, r5, #2
 8005822:	d03d      	beq.n	80058a0 <__pow5mult+0xa0>
 8005824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005826:	b97c      	cbnz	r4, 8005848 <__pow5mult+0x48>
 8005828:	2010      	movs	r0, #16
 800582a:	f7ff fe1b 	bl	8005464 <malloc>
 800582e:	4602      	mov	r2, r0
 8005830:	6270      	str	r0, [r6, #36]	; 0x24
 8005832:	b928      	cbnz	r0, 8005840 <__pow5mult+0x40>
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <__pow5mult+0xac>)
 8005836:	481e      	ldr	r0, [pc, #120]	; (80058b0 <__pow5mult+0xb0>)
 8005838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800583c:	f000 fab2 	bl	8005da4 <__assert_func>
 8005840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005844:	6004      	str	r4, [r0, #0]
 8005846:	60c4      	str	r4, [r0, #12]
 8005848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800584c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005850:	b94c      	cbnz	r4, 8005866 <__pow5mult+0x66>
 8005852:	f240 2171 	movw	r1, #625	; 0x271
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff ff12 	bl	8005680 <__i2b>
 800585c:	2300      	movs	r3, #0
 800585e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005862:	4604      	mov	r4, r0
 8005864:	6003      	str	r3, [r0, #0]
 8005866:	f04f 0900 	mov.w	r9, #0
 800586a:	07eb      	lsls	r3, r5, #31
 800586c:	d50a      	bpl.n	8005884 <__pow5mult+0x84>
 800586e:	4639      	mov	r1, r7
 8005870:	4622      	mov	r2, r4
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff ff1a 	bl	80056ac <__multiply>
 8005878:	4639      	mov	r1, r7
 800587a:	4680      	mov	r8, r0
 800587c:	4630      	mov	r0, r6
 800587e:	f7ff fe47 	bl	8005510 <_Bfree>
 8005882:	4647      	mov	r7, r8
 8005884:	106d      	asrs	r5, r5, #1
 8005886:	d00b      	beq.n	80058a0 <__pow5mult+0xa0>
 8005888:	6820      	ldr	r0, [r4, #0]
 800588a:	b938      	cbnz	r0, 800589c <__pow5mult+0x9c>
 800588c:	4622      	mov	r2, r4
 800588e:	4621      	mov	r1, r4
 8005890:	4630      	mov	r0, r6
 8005892:	f7ff ff0b 	bl	80056ac <__multiply>
 8005896:	6020      	str	r0, [r4, #0]
 8005898:	f8c0 9000 	str.w	r9, [r0]
 800589c:	4604      	mov	r4, r0
 800589e:	e7e4      	b.n	800586a <__pow5mult+0x6a>
 80058a0:	4638      	mov	r0, r7
 80058a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a6:	bf00      	nop
 80058a8:	08006b08 	.word	0x08006b08
 80058ac:	08006935 	.word	0x08006935
 80058b0:	080069b8 	.word	0x080069b8

080058b4 <__lshift>:
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	460c      	mov	r4, r1
 80058ba:	6849      	ldr	r1, [r1, #4]
 80058bc:	6923      	ldr	r3, [r4, #16]
 80058be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	4607      	mov	r7, r0
 80058c6:	4691      	mov	r9, r2
 80058c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058cc:	f108 0601 	add.w	r6, r8, #1
 80058d0:	42b3      	cmp	r3, r6
 80058d2:	db0b      	blt.n	80058ec <__lshift+0x38>
 80058d4:	4638      	mov	r0, r7
 80058d6:	f7ff fddb 	bl	8005490 <_Balloc>
 80058da:	4605      	mov	r5, r0
 80058dc:	b948      	cbnz	r0, 80058f2 <__lshift+0x3e>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b2a      	ldr	r3, [pc, #168]	; (800598c <__lshift+0xd8>)
 80058e2:	482b      	ldr	r0, [pc, #172]	; (8005990 <__lshift+0xdc>)
 80058e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058e8:	f000 fa5c 	bl	8005da4 <__assert_func>
 80058ec:	3101      	adds	r1, #1
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	e7ee      	b.n	80058d0 <__lshift+0x1c>
 80058f2:	2300      	movs	r3, #0
 80058f4:	f100 0114 	add.w	r1, r0, #20
 80058f8:	f100 0210 	add.w	r2, r0, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	4553      	cmp	r3, sl
 8005900:	db37      	blt.n	8005972 <__lshift+0xbe>
 8005902:	6920      	ldr	r0, [r4, #16]
 8005904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005908:	f104 0314 	add.w	r3, r4, #20
 800590c:	f019 091f 	ands.w	r9, r9, #31
 8005910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005914:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005918:	d02f      	beq.n	800597a <__lshift+0xc6>
 800591a:	f1c9 0e20 	rsb	lr, r9, #32
 800591e:	468a      	mov	sl, r1
 8005920:	f04f 0c00 	mov.w	ip, #0
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	fa02 f209 	lsl.w	r2, r2, r9
 800592a:	ea42 020c 	orr.w	r2, r2, ip
 800592e:	f84a 2b04 	str.w	r2, [sl], #4
 8005932:	f853 2b04 	ldr.w	r2, [r3], #4
 8005936:	4298      	cmp	r0, r3
 8005938:	fa22 fc0e 	lsr.w	ip, r2, lr
 800593c:	d8f2      	bhi.n	8005924 <__lshift+0x70>
 800593e:	1b03      	subs	r3, r0, r4
 8005940:	3b15      	subs	r3, #21
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	3304      	adds	r3, #4
 8005948:	f104 0215 	add.w	r2, r4, #21
 800594c:	4290      	cmp	r0, r2
 800594e:	bf38      	it	cc
 8005950:	2304      	movcc	r3, #4
 8005952:	f841 c003 	str.w	ip, [r1, r3]
 8005956:	f1bc 0f00 	cmp.w	ip, #0
 800595a:	d001      	beq.n	8005960 <__lshift+0xac>
 800595c:	f108 0602 	add.w	r6, r8, #2
 8005960:	3e01      	subs	r6, #1
 8005962:	4638      	mov	r0, r7
 8005964:	612e      	str	r6, [r5, #16]
 8005966:	4621      	mov	r1, r4
 8005968:	f7ff fdd2 	bl	8005510 <_Bfree>
 800596c:	4628      	mov	r0, r5
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	f842 0f04 	str.w	r0, [r2, #4]!
 8005976:	3301      	adds	r3, #1
 8005978:	e7c1      	b.n	80058fe <__lshift+0x4a>
 800597a:	3904      	subs	r1, #4
 800597c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005980:	f841 2f04 	str.w	r2, [r1, #4]!
 8005984:	4298      	cmp	r0, r3
 8005986:	d8f9      	bhi.n	800597c <__lshift+0xc8>
 8005988:	e7ea      	b.n	8005960 <__lshift+0xac>
 800598a:	bf00      	nop
 800598c:	080069a7 	.word	0x080069a7
 8005990:	080069b8 	.word	0x080069b8

08005994 <__mcmp>:
 8005994:	b530      	push	{r4, r5, lr}
 8005996:	6902      	ldr	r2, [r0, #16]
 8005998:	690c      	ldr	r4, [r1, #16]
 800599a:	1b12      	subs	r2, r2, r4
 800599c:	d10e      	bne.n	80059bc <__mcmp+0x28>
 800599e:	f100 0314 	add.w	r3, r0, #20
 80059a2:	3114      	adds	r1, #20
 80059a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80059a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059b4:	42a5      	cmp	r5, r4
 80059b6:	d003      	beq.n	80059c0 <__mcmp+0x2c>
 80059b8:	d305      	bcc.n	80059c6 <__mcmp+0x32>
 80059ba:	2201      	movs	r2, #1
 80059bc:	4610      	mov	r0, r2
 80059be:	bd30      	pop	{r4, r5, pc}
 80059c0:	4283      	cmp	r3, r0
 80059c2:	d3f3      	bcc.n	80059ac <__mcmp+0x18>
 80059c4:	e7fa      	b.n	80059bc <__mcmp+0x28>
 80059c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ca:	e7f7      	b.n	80059bc <__mcmp+0x28>

080059cc <__mdiff>:
 80059cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d0:	460c      	mov	r4, r1
 80059d2:	4606      	mov	r6, r0
 80059d4:	4611      	mov	r1, r2
 80059d6:	4620      	mov	r0, r4
 80059d8:	4690      	mov	r8, r2
 80059da:	f7ff ffdb 	bl	8005994 <__mcmp>
 80059de:	1e05      	subs	r5, r0, #0
 80059e0:	d110      	bne.n	8005a04 <__mdiff+0x38>
 80059e2:	4629      	mov	r1, r5
 80059e4:	4630      	mov	r0, r6
 80059e6:	f7ff fd53 	bl	8005490 <_Balloc>
 80059ea:	b930      	cbnz	r0, 80059fa <__mdiff+0x2e>
 80059ec:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <__mdiff+0x10c>)
 80059ee:	4602      	mov	r2, r0
 80059f0:	f240 2132 	movw	r1, #562	; 0x232
 80059f4:	4839      	ldr	r0, [pc, #228]	; (8005adc <__mdiff+0x110>)
 80059f6:	f000 f9d5 	bl	8005da4 <__assert_func>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	bfa4      	itt	ge
 8005a06:	4643      	movge	r3, r8
 8005a08:	46a0      	movge	r8, r4
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a10:	bfa6      	itte	ge
 8005a12:	461c      	movge	r4, r3
 8005a14:	2500      	movge	r5, #0
 8005a16:	2501      	movlt	r5, #1
 8005a18:	f7ff fd3a 	bl	8005490 <_Balloc>
 8005a1c:	b920      	cbnz	r0, 8005a28 <__mdiff+0x5c>
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <__mdiff+0x10c>)
 8005a20:	4602      	mov	r2, r0
 8005a22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a26:	e7e5      	b.n	80059f4 <__mdiff+0x28>
 8005a28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a2c:	6926      	ldr	r6, [r4, #16]
 8005a2e:	60c5      	str	r5, [r0, #12]
 8005a30:	f104 0914 	add.w	r9, r4, #20
 8005a34:	f108 0514 	add.w	r5, r8, #20
 8005a38:	f100 0e14 	add.w	lr, r0, #20
 8005a3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a44:	f108 0210 	add.w	r2, r8, #16
 8005a48:	46f2      	mov	sl, lr
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a54:	fa1f f883 	uxth.w	r8, r3
 8005a58:	fa11 f18b 	uxtah	r1, r1, fp
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	eba1 0808 	sub.w	r8, r1, r8
 8005a62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a6a:	fa1f f888 	uxth.w	r8, r8
 8005a6e:	1419      	asrs	r1, r3, #16
 8005a70:	454e      	cmp	r6, r9
 8005a72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a76:	f84a 3b04 	str.w	r3, [sl], #4
 8005a7a:	d8e7      	bhi.n	8005a4c <__mdiff+0x80>
 8005a7c:	1b33      	subs	r3, r6, r4
 8005a7e:	3b15      	subs	r3, #21
 8005a80:	f023 0303 	bic.w	r3, r3, #3
 8005a84:	3304      	adds	r3, #4
 8005a86:	3415      	adds	r4, #21
 8005a88:	42a6      	cmp	r6, r4
 8005a8a:	bf38      	it	cc
 8005a8c:	2304      	movcc	r3, #4
 8005a8e:	441d      	add	r5, r3
 8005a90:	4473      	add	r3, lr
 8005a92:	469e      	mov	lr, r3
 8005a94:	462e      	mov	r6, r5
 8005a96:	4566      	cmp	r6, ip
 8005a98:	d30e      	bcc.n	8005ab8 <__mdiff+0xec>
 8005a9a:	f10c 0203 	add.w	r2, ip, #3
 8005a9e:	1b52      	subs	r2, r2, r5
 8005aa0:	f022 0203 	bic.w	r2, r2, #3
 8005aa4:	3d03      	subs	r5, #3
 8005aa6:	45ac      	cmp	ip, r5
 8005aa8:	bf38      	it	cc
 8005aaa:	2200      	movcc	r2, #0
 8005aac:	441a      	add	r2, r3
 8005aae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ab2:	b17b      	cbz	r3, 8005ad4 <__mdiff+0x108>
 8005ab4:	6107      	str	r7, [r0, #16]
 8005ab6:	e7a3      	b.n	8005a00 <__mdiff+0x34>
 8005ab8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005abc:	fa11 f288 	uxtah	r2, r1, r8
 8005ac0:	1414      	asrs	r4, r2, #16
 8005ac2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005acc:	f84e 2b04 	str.w	r2, [lr], #4
 8005ad0:	1421      	asrs	r1, r4, #16
 8005ad2:	e7e0      	b.n	8005a96 <__mdiff+0xca>
 8005ad4:	3f01      	subs	r7, #1
 8005ad6:	e7ea      	b.n	8005aae <__mdiff+0xe2>
 8005ad8:	080069a7 	.word	0x080069a7
 8005adc:	080069b8 	.word	0x080069b8

08005ae0 <__d2b>:
 8005ae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ae4:	4689      	mov	r9, r1
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	ec57 6b10 	vmov	r6, r7, d0
 8005aec:	4690      	mov	r8, r2
 8005aee:	f7ff fccf 	bl	8005490 <_Balloc>
 8005af2:	4604      	mov	r4, r0
 8005af4:	b930      	cbnz	r0, 8005b04 <__d2b+0x24>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <__d2b+0xb0>)
 8005afa:	4826      	ldr	r0, [pc, #152]	; (8005b94 <__d2b+0xb4>)
 8005afc:	f240 310a 	movw	r1, #778	; 0x30a
 8005b00:	f000 f950 	bl	8005da4 <__assert_func>
 8005b04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005b08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b0c:	bb35      	cbnz	r5, 8005b5c <__d2b+0x7c>
 8005b0e:	2e00      	cmp	r6, #0
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	d028      	beq.n	8005b66 <__d2b+0x86>
 8005b14:	4668      	mov	r0, sp
 8005b16:	9600      	str	r6, [sp, #0]
 8005b18:	f7ff fd82 	bl	8005620 <__lo0bits>
 8005b1c:	9900      	ldr	r1, [sp, #0]
 8005b1e:	b300      	cbz	r0, 8005b62 <__d2b+0x82>
 8005b20:	9a01      	ldr	r2, [sp, #4]
 8005b22:	f1c0 0320 	rsb	r3, r0, #32
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	40c2      	lsrs	r2, r0
 8005b2e:	6163      	str	r3, [r4, #20]
 8005b30:	9201      	str	r2, [sp, #4]
 8005b32:	9b01      	ldr	r3, [sp, #4]
 8005b34:	61a3      	str	r3, [r4, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2202      	movne	r2, #2
 8005b3c:	2201      	moveq	r2, #1
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	b1d5      	cbz	r5, 8005b78 <__d2b+0x98>
 8005b42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b46:	4405      	add	r5, r0
 8005b48:	f8c9 5000 	str.w	r5, [r9]
 8005b4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b50:	f8c8 0000 	str.w	r0, [r8]
 8005b54:	4620      	mov	r0, r4
 8005b56:	b003      	add	sp, #12
 8005b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b60:	e7d5      	b.n	8005b0e <__d2b+0x2e>
 8005b62:	6161      	str	r1, [r4, #20]
 8005b64:	e7e5      	b.n	8005b32 <__d2b+0x52>
 8005b66:	a801      	add	r0, sp, #4
 8005b68:	f7ff fd5a 	bl	8005620 <__lo0bits>
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	2201      	movs	r2, #1
 8005b72:	6122      	str	r2, [r4, #16]
 8005b74:	3020      	adds	r0, #32
 8005b76:	e7e3      	b.n	8005b40 <__d2b+0x60>
 8005b78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b80:	f8c9 0000 	str.w	r0, [r9]
 8005b84:	6918      	ldr	r0, [r3, #16]
 8005b86:	f7ff fd2b 	bl	80055e0 <__hi0bits>
 8005b8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b8e:	e7df      	b.n	8005b50 <__d2b+0x70>
 8005b90:	080069a7 	.word	0x080069a7
 8005b94:	080069b8 	.word	0x080069b8

08005b98 <_calloc_r>:
 8005b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b9a:	fba1 2402 	umull	r2, r4, r1, r2
 8005b9e:	b94c      	cbnz	r4, 8005bb4 <_calloc_r+0x1c>
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	9201      	str	r2, [sp, #4]
 8005ba4:	f000 f87a 	bl	8005c9c <_malloc_r>
 8005ba8:	9a01      	ldr	r2, [sp, #4]
 8005baa:	4605      	mov	r5, r0
 8005bac:	b930      	cbnz	r0, 8005bbc <_calloc_r+0x24>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
 8005bb4:	220c      	movs	r2, #12
 8005bb6:	6002      	str	r2, [r0, #0]
 8005bb8:	2500      	movs	r5, #0
 8005bba:	e7f8      	b.n	8005bae <_calloc_r+0x16>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f7fe f961 	bl	8003e84 <memset>
 8005bc2:	e7f4      	b.n	8005bae <_calloc_r+0x16>

08005bc4 <_free_r>:
 8005bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d044      	beq.n	8005c54 <_free_r+0x90>
 8005bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bce:	9001      	str	r0, [sp, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd6:	bfb8      	it	lt
 8005bd8:	18e4      	addlt	r4, r4, r3
 8005bda:	f000 f925 	bl	8005e28 <__malloc_lock>
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <_free_r+0x94>)
 8005be0:	9801      	ldr	r0, [sp, #4]
 8005be2:	6813      	ldr	r3, [r2, #0]
 8005be4:	b933      	cbnz	r3, 8005bf4 <_free_r+0x30>
 8005be6:	6063      	str	r3, [r4, #4]
 8005be8:	6014      	str	r4, [r2, #0]
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bf0:	f000 b920 	b.w	8005e34 <__malloc_unlock>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d908      	bls.n	8005c0a <_free_r+0x46>
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf01      	itttt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	1949      	addeq	r1, r1, r5
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	e7ed      	b.n	8005be6 <_free_r+0x22>
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b10b      	cbz	r3, 8005c14 <_free_r+0x50>
 8005c10:	42a3      	cmp	r3, r4
 8005c12:	d9fa      	bls.n	8005c0a <_free_r+0x46>
 8005c14:	6811      	ldr	r1, [r2, #0]
 8005c16:	1855      	adds	r5, r2, r1
 8005c18:	42a5      	cmp	r5, r4
 8005c1a:	d10b      	bne.n	8005c34 <_free_r+0x70>
 8005c1c:	6824      	ldr	r4, [r4, #0]
 8005c1e:	4421      	add	r1, r4
 8005c20:	1854      	adds	r4, r2, r1
 8005c22:	42a3      	cmp	r3, r4
 8005c24:	6011      	str	r1, [r2, #0]
 8005c26:	d1e0      	bne.n	8005bea <_free_r+0x26>
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	4421      	add	r1, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	e7da      	b.n	8005bea <_free_r+0x26>
 8005c34:	d902      	bls.n	8005c3c <_free_r+0x78>
 8005c36:	230c      	movs	r3, #12
 8005c38:	6003      	str	r3, [r0, #0]
 8005c3a:	e7d6      	b.n	8005bea <_free_r+0x26>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	1961      	adds	r1, r4, r5
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf04      	itt	eq
 8005c44:	6819      	ldreq	r1, [r3, #0]
 8005c46:	685b      	ldreq	r3, [r3, #4]
 8005c48:	6063      	str	r3, [r4, #4]
 8005c4a:	bf04      	itt	eq
 8005c4c:	1949      	addeq	r1, r1, r5
 8005c4e:	6021      	streq	r1, [r4, #0]
 8005c50:	6054      	str	r4, [r2, #4]
 8005c52:	e7ca      	b.n	8005bea <_free_r+0x26>
 8005c54:	b003      	add	sp, #12
 8005c56:	bd30      	pop	{r4, r5, pc}
 8005c58:	200007a0 	.word	0x200007a0

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0e      	ldr	r6, [pc, #56]	; (8005c98 <sbrk_aligned+0x3c>)
 8005c60:	460c      	mov	r4, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	4605      	mov	r5, r0
 8005c66:	b911      	cbnz	r1, 8005c6e <sbrk_aligned+0x12>
 8005c68:	f000 f88c 	bl	8005d84 <_sbrk_r>
 8005c6c:	6030      	str	r0, [r6, #0]
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f887 	bl	8005d84 <_sbrk_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d00a      	beq.n	8005c90 <sbrk_aligned+0x34>
 8005c7a:	1cc4      	adds	r4, r0, #3
 8005c7c:	f024 0403 	bic.w	r4, r4, #3
 8005c80:	42a0      	cmp	r0, r4
 8005c82:	d007      	beq.n	8005c94 <sbrk_aligned+0x38>
 8005c84:	1a21      	subs	r1, r4, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f000 f87c 	bl	8005d84 <_sbrk_r>
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d101      	bne.n	8005c94 <sbrk_aligned+0x38>
 8005c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c94:	4620      	mov	r0, r4
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	200007a4 	.word	0x200007a4

08005c9c <_malloc_r>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	1ccd      	adds	r5, r1, #3
 8005ca2:	f025 0503 	bic.w	r5, r5, #3
 8005ca6:	3508      	adds	r5, #8
 8005ca8:	2d0c      	cmp	r5, #12
 8005caa:	bf38      	it	cc
 8005cac:	250c      	movcc	r5, #12
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	4607      	mov	r7, r0
 8005cb2:	db01      	blt.n	8005cb8 <_malloc_r+0x1c>
 8005cb4:	42a9      	cmp	r1, r5
 8005cb6:	d905      	bls.n	8005cc4 <_malloc_r+0x28>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc4:	4e2e      	ldr	r6, [pc, #184]	; (8005d80 <_malloc_r+0xe4>)
 8005cc6:	f000 f8af 	bl	8005e28 <__malloc_lock>
 8005cca:	6833      	ldr	r3, [r6, #0]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb34      	cbnz	r4, 8005d1e <_malloc_r+0x82>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc2 	bl	8005c5c <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d14d      	bne.n	8005d7a <_malloc_r+0xde>
 8005cde:	6834      	ldr	r4, [r6, #0]
 8005ce0:	4626      	mov	r6, r4
 8005ce2:	2e00      	cmp	r6, #0
 8005ce4:	d140      	bne.n	8005d68 <_malloc_r+0xcc>
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4638      	mov	r0, r7
 8005cec:	eb04 0803 	add.w	r8, r4, r3
 8005cf0:	f000 f848 	bl	8005d84 <_sbrk_r>
 8005cf4:	4580      	cmp	r8, r0
 8005cf6:	d13a      	bne.n	8005d6e <_malloc_r+0xd2>
 8005cf8:	6821      	ldr	r1, [r4, #0]
 8005cfa:	3503      	adds	r5, #3
 8005cfc:	1a6d      	subs	r5, r5, r1
 8005cfe:	f025 0503 	bic.w	r5, r5, #3
 8005d02:	3508      	adds	r5, #8
 8005d04:	2d0c      	cmp	r5, #12
 8005d06:	bf38      	it	cc
 8005d08:	250c      	movcc	r5, #12
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <sbrk_aligned>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d02b      	beq.n	8005d6e <_malloc_r+0xd2>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	442b      	add	r3, r5
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	e00e      	b.n	8005d3c <_malloc_r+0xa0>
 8005d1e:	6822      	ldr	r2, [r4, #0]
 8005d20:	1b52      	subs	r2, r2, r5
 8005d22:	d41e      	bmi.n	8005d62 <_malloc_r+0xc6>
 8005d24:	2a0b      	cmp	r2, #11
 8005d26:	d916      	bls.n	8005d56 <_malloc_r+0xba>
 8005d28:	1961      	adds	r1, r4, r5
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	6025      	str	r5, [r4, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	6059      	strne	r1, [r3, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	bf08      	it	eq
 8005d36:	6031      	streq	r1, [r6, #0]
 8005d38:	5162      	str	r2, [r4, r5]
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	f104 060b 	add.w	r6, r4, #11
 8005d42:	f000 f877 	bl	8005e34 <__malloc_unlock>
 8005d46:	f026 0607 	bic.w	r6, r6, #7
 8005d4a:	1d23      	adds	r3, r4, #4
 8005d4c:	1af2      	subs	r2, r6, r3
 8005d4e:	d0b6      	beq.n	8005cbe <_malloc_r+0x22>
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	50a3      	str	r3, [r4, r2]
 8005d54:	e7b3      	b.n	8005cbe <_malloc_r+0x22>
 8005d56:	6862      	ldr	r2, [r4, #4]
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	bf0c      	ite	eq
 8005d5c:	6032      	streq	r2, [r6, #0]
 8005d5e:	605a      	strne	r2, [r3, #4]
 8005d60:	e7ec      	b.n	8005d3c <_malloc_r+0xa0>
 8005d62:	4623      	mov	r3, r4
 8005d64:	6864      	ldr	r4, [r4, #4]
 8005d66:	e7b2      	b.n	8005cce <_malloc_r+0x32>
 8005d68:	4634      	mov	r4, r6
 8005d6a:	6876      	ldr	r6, [r6, #4]
 8005d6c:	e7b9      	b.n	8005ce2 <_malloc_r+0x46>
 8005d6e:	230c      	movs	r3, #12
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4638      	mov	r0, r7
 8005d74:	f000 f85e 	bl	8005e34 <__malloc_unlock>
 8005d78:	e7a1      	b.n	8005cbe <_malloc_r+0x22>
 8005d7a:	6025      	str	r5, [r4, #0]
 8005d7c:	e7de      	b.n	8005d3c <_malloc_r+0xa0>
 8005d7e:	bf00      	nop
 8005d80:	200007a0 	.word	0x200007a0

08005d84 <_sbrk_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d06      	ldr	r5, [pc, #24]	; (8005da0 <_sbrk_r+0x1c>)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fb fc56 	bl	8001640 <_sbrk>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_sbrk_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_sbrk_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	200007a8 	.word	0x200007a8

08005da4 <__assert_func>:
 8005da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005da6:	4614      	mov	r4, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <__assert_func+0x2c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	68d8      	ldr	r0, [r3, #12]
 8005db2:	b14c      	cbz	r4, 8005dc8 <__assert_func+0x24>
 8005db4:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <__assert_func+0x30>)
 8005db6:	9100      	str	r1, [sp, #0]
 8005db8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dbc:	4906      	ldr	r1, [pc, #24]	; (8005dd8 <__assert_func+0x34>)
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	f000 f80e 	bl	8005de0 <fiprintf>
 8005dc4:	f000 fa64 	bl	8006290 <abort>
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <__assert_func+0x38>)
 8005dca:	461c      	mov	r4, r3
 8005dcc:	e7f3      	b.n	8005db6 <__assert_func+0x12>
 8005dce:	bf00      	nop
 8005dd0:	2000000c 	.word	0x2000000c
 8005dd4:	08006b14 	.word	0x08006b14
 8005dd8:	08006b21 	.word	0x08006b21
 8005ddc:	08006b4f 	.word	0x08006b4f

08005de0 <fiprintf>:
 8005de0:	b40e      	push	{r1, r2, r3}
 8005de2:	b503      	push	{r0, r1, lr}
 8005de4:	4601      	mov	r1, r0
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	4805      	ldr	r0, [pc, #20]	; (8005e00 <fiprintf+0x20>)
 8005dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dee:	6800      	ldr	r0, [r0, #0]
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f000 f84f 	bl	8005e94 <_vfiprintf_r>
 8005df6:	b002      	add	sp, #8
 8005df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dfc:	b003      	add	sp, #12
 8005dfe:	4770      	bx	lr
 8005e00:	2000000c 	.word	0x2000000c

08005e04 <__ascii_mbtowc>:
 8005e04:	b082      	sub	sp, #8
 8005e06:	b901      	cbnz	r1, 8005e0a <__ascii_mbtowc+0x6>
 8005e08:	a901      	add	r1, sp, #4
 8005e0a:	b142      	cbz	r2, 8005e1e <__ascii_mbtowc+0x1a>
 8005e0c:	b14b      	cbz	r3, 8005e22 <__ascii_mbtowc+0x1e>
 8005e0e:	7813      	ldrb	r3, [r2, #0]
 8005e10:	600b      	str	r3, [r1, #0]
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	1e10      	subs	r0, r2, #0
 8005e16:	bf18      	it	ne
 8005e18:	2001      	movne	r0, #1
 8005e1a:	b002      	add	sp, #8
 8005e1c:	4770      	bx	lr
 8005e1e:	4610      	mov	r0, r2
 8005e20:	e7fb      	b.n	8005e1a <__ascii_mbtowc+0x16>
 8005e22:	f06f 0001 	mvn.w	r0, #1
 8005e26:	e7f8      	b.n	8005e1a <__ascii_mbtowc+0x16>

08005e28 <__malloc_lock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_lock+0x8>)
 8005e2a:	f000 bbf1 	b.w	8006610 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	200007ac 	.word	0x200007ac

08005e34 <__malloc_unlock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_unlock+0x8>)
 8005e36:	f000 bbec 	b.w	8006612 <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	200007ac 	.word	0x200007ac

08005e40 <__sfputc_r>:
 8005e40:	6893      	ldr	r3, [r2, #8]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	b410      	push	{r4}
 8005e48:	6093      	str	r3, [r2, #8]
 8005e4a:	da08      	bge.n	8005e5e <__sfputc_r+0x1e>
 8005e4c:	6994      	ldr	r4, [r2, #24]
 8005e4e:	42a3      	cmp	r3, r4
 8005e50:	db01      	blt.n	8005e56 <__sfputc_r+0x16>
 8005e52:	290a      	cmp	r1, #10
 8005e54:	d103      	bne.n	8005e5e <__sfputc_r+0x1e>
 8005e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e5a:	f000 b94b 	b.w	80060f4 <__swbuf_r>
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	1c58      	adds	r0, r3, #1
 8005e62:	6010      	str	r0, [r2, #0]
 8005e64:	7019      	strb	r1, [r3, #0]
 8005e66:	4608      	mov	r0, r1
 8005e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <__sfputs_r>:
 8005e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e70:	4606      	mov	r6, r0
 8005e72:	460f      	mov	r7, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	18d5      	adds	r5, r2, r3
 8005e78:	42ac      	cmp	r4, r5
 8005e7a:	d101      	bne.n	8005e80 <__sfputs_r+0x12>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e007      	b.n	8005e90 <__sfputs_r+0x22>
 8005e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e84:	463a      	mov	r2, r7
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff ffda 	bl	8005e40 <__sfputc_r>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d1f3      	bne.n	8005e78 <__sfputs_r+0xa>
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e94 <_vfiprintf_r>:
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e98:	460d      	mov	r5, r1
 8005e9a:	b09d      	sub	sp, #116	; 0x74
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	4698      	mov	r8, r3
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	b118      	cbz	r0, 8005eac <_vfiprintf_r+0x18>
 8005ea4:	6983      	ldr	r3, [r0, #24]
 8005ea6:	b90b      	cbnz	r3, 8005eac <_vfiprintf_r+0x18>
 8005ea8:	f000 fb14 	bl	80064d4 <__sinit>
 8005eac:	4b89      	ldr	r3, [pc, #548]	; (80060d4 <_vfiprintf_r+0x240>)
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	d11b      	bne.n	8005eea <_vfiprintf_r+0x56>
 8005eb2:	6875      	ldr	r5, [r6, #4]
 8005eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eb6:	07d9      	lsls	r1, r3, #31
 8005eb8:	d405      	bmi.n	8005ec6 <_vfiprintf_r+0x32>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	059a      	lsls	r2, r3, #22
 8005ebe:	d402      	bmi.n	8005ec6 <_vfiprintf_r+0x32>
 8005ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec2:	f000 fba5 	bl	8006610 <__retarget_lock_acquire_recursive>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	071b      	lsls	r3, r3, #28
 8005eca:	d501      	bpl.n	8005ed0 <_vfiprintf_r+0x3c>
 8005ecc:	692b      	ldr	r3, [r5, #16]
 8005ece:	b9eb      	cbnz	r3, 8005f0c <_vfiprintf_r+0x78>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f000 f96e 	bl	80061b4 <__swsetup_r>
 8005ed8:	b1c0      	cbz	r0, 8005f0c <_vfiprintf_r+0x78>
 8005eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005edc:	07dc      	lsls	r4, r3, #31
 8005ede:	d50e      	bpl.n	8005efe <_vfiprintf_r+0x6a>
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee4:	b01d      	add	sp, #116	; 0x74
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	4b7b      	ldr	r3, [pc, #492]	; (80060d8 <_vfiprintf_r+0x244>)
 8005eec:	429d      	cmp	r5, r3
 8005eee:	d101      	bne.n	8005ef4 <_vfiprintf_r+0x60>
 8005ef0:	68b5      	ldr	r5, [r6, #8]
 8005ef2:	e7df      	b.n	8005eb4 <_vfiprintf_r+0x20>
 8005ef4:	4b79      	ldr	r3, [pc, #484]	; (80060dc <_vfiprintf_r+0x248>)
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	bf08      	it	eq
 8005efa:	68f5      	ldreq	r5, [r6, #12]
 8005efc:	e7da      	b.n	8005eb4 <_vfiprintf_r+0x20>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	0598      	lsls	r0, r3, #22
 8005f02:	d4ed      	bmi.n	8005ee0 <_vfiprintf_r+0x4c>
 8005f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f06:	f000 fb84 	bl	8006612 <__retarget_lock_release_recursive>
 8005f0a:	e7e9      	b.n	8005ee0 <_vfiprintf_r+0x4c>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	2320      	movs	r3, #32
 8005f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f1a:	2330      	movs	r3, #48	; 0x30
 8005f1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060e0 <_vfiprintf_r+0x24c>
 8005f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f24:	f04f 0901 	mov.w	r9, #1
 8005f28:	4623      	mov	r3, r4
 8005f2a:	469a      	mov	sl, r3
 8005f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f30:	b10a      	cbz	r2, 8005f36 <_vfiprintf_r+0xa2>
 8005f32:	2a25      	cmp	r2, #37	; 0x25
 8005f34:	d1f9      	bne.n	8005f2a <_vfiprintf_r+0x96>
 8005f36:	ebba 0b04 	subs.w	fp, sl, r4
 8005f3a:	d00b      	beq.n	8005f54 <_vfiprintf_r+0xc0>
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff ff93 	bl	8005e6e <__sfputs_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f000 80aa 	beq.w	80060a2 <_vfiprintf_r+0x20e>
 8005f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f50:	445a      	add	r2, fp
 8005f52:	9209      	str	r2, [sp, #36]	; 0x24
 8005f54:	f89a 3000 	ldrb.w	r3, [sl]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80a2 	beq.w	80060a2 <_vfiprintf_r+0x20e>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f68:	f10a 0a01 	add.w	sl, sl, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f74:	931a      	str	r3, [sp, #104]	; 0x68
 8005f76:	4654      	mov	r4, sl
 8005f78:	2205      	movs	r2, #5
 8005f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7e:	4858      	ldr	r0, [pc, #352]	; (80060e0 <_vfiprintf_r+0x24c>)
 8005f80:	f7fa f94e 	bl	8000220 <memchr>
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	b9d8      	cbnz	r0, 8005fc0 <_vfiprintf_r+0x12c>
 8005f88:	06d1      	lsls	r1, r2, #27
 8005f8a:	bf44      	itt	mi
 8005f8c:	2320      	movmi	r3, #32
 8005f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f92:	0713      	lsls	r3, r2, #28
 8005f94:	bf44      	itt	mi
 8005f96:	232b      	movmi	r3, #43	; 0x2b
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa2:	d015      	beq.n	8005fd0 <_vfiprintf_r+0x13c>
 8005fa4:	9a07      	ldr	r2, [sp, #28]
 8005fa6:	4654      	mov	r4, sl
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f04f 0c0a 	mov.w	ip, #10
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb4:	3b30      	subs	r3, #48	; 0x30
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d94e      	bls.n	8006058 <_vfiprintf_r+0x1c4>
 8005fba:	b1b0      	cbz	r0, 8005fea <_vfiprintf_r+0x156>
 8005fbc:	9207      	str	r2, [sp, #28]
 8005fbe:	e014      	b.n	8005fea <_vfiprintf_r+0x156>
 8005fc0:	eba0 0308 	sub.w	r3, r0, r8
 8005fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	46a2      	mov	sl, r4
 8005fce:	e7d2      	b.n	8005f76 <_vfiprintf_r+0xe2>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d19      	adds	r1, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9103      	str	r1, [sp, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfbb      	ittet	lt
 8005fdc:	425b      	neglt	r3, r3
 8005fde:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe2:	9307      	strge	r3, [sp, #28]
 8005fe4:	9307      	strlt	r3, [sp, #28]
 8005fe6:	bfb8      	it	lt
 8005fe8:	9204      	strlt	r2, [sp, #16]
 8005fea:	7823      	ldrb	r3, [r4, #0]
 8005fec:	2b2e      	cmp	r3, #46	; 0x2e
 8005fee:	d10c      	bne.n	800600a <_vfiprintf_r+0x176>
 8005ff0:	7863      	ldrb	r3, [r4, #1]
 8005ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff4:	d135      	bne.n	8006062 <_vfiprintf_r+0x1ce>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	9203      	str	r2, [sp, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfb8      	it	lt
 8006002:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006006:	3402      	adds	r4, #2
 8006008:	9305      	str	r3, [sp, #20]
 800600a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060f0 <_vfiprintf_r+0x25c>
 800600e:	7821      	ldrb	r1, [r4, #0]
 8006010:	2203      	movs	r2, #3
 8006012:	4650      	mov	r0, sl
 8006014:	f7fa f904 	bl	8000220 <memchr>
 8006018:	b140      	cbz	r0, 800602c <_vfiprintf_r+0x198>
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	eba0 000a 	sub.w	r0, r0, sl
 8006020:	fa03 f000 	lsl.w	r0, r3, r0
 8006024:	9b04      	ldr	r3, [sp, #16]
 8006026:	4303      	orrs	r3, r0
 8006028:	3401      	adds	r4, #1
 800602a:	9304      	str	r3, [sp, #16]
 800602c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006030:	482c      	ldr	r0, [pc, #176]	; (80060e4 <_vfiprintf_r+0x250>)
 8006032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006036:	2206      	movs	r2, #6
 8006038:	f7fa f8f2 	bl	8000220 <memchr>
 800603c:	2800      	cmp	r0, #0
 800603e:	d03f      	beq.n	80060c0 <_vfiprintf_r+0x22c>
 8006040:	4b29      	ldr	r3, [pc, #164]	; (80060e8 <_vfiprintf_r+0x254>)
 8006042:	bb1b      	cbnz	r3, 800608c <_vfiprintf_r+0x1f8>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	3307      	adds	r3, #7
 8006048:	f023 0307 	bic.w	r3, r3, #7
 800604c:	3308      	adds	r3, #8
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006052:	443b      	add	r3, r7
 8006054:	9309      	str	r3, [sp, #36]	; 0x24
 8006056:	e767      	b.n	8005f28 <_vfiprintf_r+0x94>
 8006058:	fb0c 3202 	mla	r2, ip, r2, r3
 800605c:	460c      	mov	r4, r1
 800605e:	2001      	movs	r0, #1
 8006060:	e7a5      	b.n	8005fae <_vfiprintf_r+0x11a>
 8006062:	2300      	movs	r3, #0
 8006064:	3401      	adds	r4, #1
 8006066:	9305      	str	r3, [sp, #20]
 8006068:	4619      	mov	r1, r3
 800606a:	f04f 0c0a 	mov.w	ip, #10
 800606e:	4620      	mov	r0, r4
 8006070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006074:	3a30      	subs	r2, #48	; 0x30
 8006076:	2a09      	cmp	r2, #9
 8006078:	d903      	bls.n	8006082 <_vfiprintf_r+0x1ee>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0c5      	beq.n	800600a <_vfiprintf_r+0x176>
 800607e:	9105      	str	r1, [sp, #20]
 8006080:	e7c3      	b.n	800600a <_vfiprintf_r+0x176>
 8006082:	fb0c 2101 	mla	r1, ip, r1, r2
 8006086:	4604      	mov	r4, r0
 8006088:	2301      	movs	r3, #1
 800608a:	e7f0      	b.n	800606e <_vfiprintf_r+0x1da>
 800608c:	ab03      	add	r3, sp, #12
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	462a      	mov	r2, r5
 8006092:	4b16      	ldr	r3, [pc, #88]	; (80060ec <_vfiprintf_r+0x258>)
 8006094:	a904      	add	r1, sp, #16
 8006096:	4630      	mov	r0, r6
 8006098:	f7fd ff9c 	bl	8003fd4 <_printf_float>
 800609c:	4607      	mov	r7, r0
 800609e:	1c78      	adds	r0, r7, #1
 80060a0:	d1d6      	bne.n	8006050 <_vfiprintf_r+0x1bc>
 80060a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060a4:	07d9      	lsls	r1, r3, #31
 80060a6:	d405      	bmi.n	80060b4 <_vfiprintf_r+0x220>
 80060a8:	89ab      	ldrh	r3, [r5, #12]
 80060aa:	059a      	lsls	r2, r3, #22
 80060ac:	d402      	bmi.n	80060b4 <_vfiprintf_r+0x220>
 80060ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b0:	f000 faaf 	bl	8006612 <__retarget_lock_release_recursive>
 80060b4:	89ab      	ldrh	r3, [r5, #12]
 80060b6:	065b      	lsls	r3, r3, #25
 80060b8:	f53f af12 	bmi.w	8005ee0 <_vfiprintf_r+0x4c>
 80060bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060be:	e711      	b.n	8005ee4 <_vfiprintf_r+0x50>
 80060c0:	ab03      	add	r3, sp, #12
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	462a      	mov	r2, r5
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <_vfiprintf_r+0x258>)
 80060c8:	a904      	add	r1, sp, #16
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7fe fa26 	bl	800451c <_printf_i>
 80060d0:	e7e4      	b.n	800609c <_vfiprintf_r+0x208>
 80060d2:	bf00      	nop
 80060d4:	08006c8c 	.word	0x08006c8c
 80060d8:	08006cac 	.word	0x08006cac
 80060dc:	08006c6c 	.word	0x08006c6c
 80060e0:	08006b5a 	.word	0x08006b5a
 80060e4:	08006b64 	.word	0x08006b64
 80060e8:	08003fd5 	.word	0x08003fd5
 80060ec:	08005e6f 	.word	0x08005e6f
 80060f0:	08006b60 	.word	0x08006b60

080060f4 <__swbuf_r>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	460e      	mov	r6, r1
 80060f8:	4614      	mov	r4, r2
 80060fa:	4605      	mov	r5, r0
 80060fc:	b118      	cbz	r0, 8006106 <__swbuf_r+0x12>
 80060fe:	6983      	ldr	r3, [r0, #24]
 8006100:	b90b      	cbnz	r3, 8006106 <__swbuf_r+0x12>
 8006102:	f000 f9e7 	bl	80064d4 <__sinit>
 8006106:	4b21      	ldr	r3, [pc, #132]	; (800618c <__swbuf_r+0x98>)
 8006108:	429c      	cmp	r4, r3
 800610a:	d12b      	bne.n	8006164 <__swbuf_r+0x70>
 800610c:	686c      	ldr	r4, [r5, #4]
 800610e:	69a3      	ldr	r3, [r4, #24]
 8006110:	60a3      	str	r3, [r4, #8]
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	071a      	lsls	r2, r3, #28
 8006116:	d52f      	bpl.n	8006178 <__swbuf_r+0x84>
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	b36b      	cbz	r3, 8006178 <__swbuf_r+0x84>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	6820      	ldr	r0, [r4, #0]
 8006120:	1ac0      	subs	r0, r0, r3
 8006122:	6963      	ldr	r3, [r4, #20]
 8006124:	b2f6      	uxtb	r6, r6
 8006126:	4283      	cmp	r3, r0
 8006128:	4637      	mov	r7, r6
 800612a:	dc04      	bgt.n	8006136 <__swbuf_r+0x42>
 800612c:	4621      	mov	r1, r4
 800612e:	4628      	mov	r0, r5
 8006130:	f000 f93c 	bl	80063ac <_fflush_r>
 8006134:	bb30      	cbnz	r0, 8006184 <__swbuf_r+0x90>
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	3b01      	subs	r3, #1
 800613a:	60a3      	str	r3, [r4, #8]
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	6022      	str	r2, [r4, #0]
 8006142:	701e      	strb	r6, [r3, #0]
 8006144:	6963      	ldr	r3, [r4, #20]
 8006146:	3001      	adds	r0, #1
 8006148:	4283      	cmp	r3, r0
 800614a:	d004      	beq.n	8006156 <__swbuf_r+0x62>
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	07db      	lsls	r3, r3, #31
 8006150:	d506      	bpl.n	8006160 <__swbuf_r+0x6c>
 8006152:	2e0a      	cmp	r6, #10
 8006154:	d104      	bne.n	8006160 <__swbuf_r+0x6c>
 8006156:	4621      	mov	r1, r4
 8006158:	4628      	mov	r0, r5
 800615a:	f000 f927 	bl	80063ac <_fflush_r>
 800615e:	b988      	cbnz	r0, 8006184 <__swbuf_r+0x90>
 8006160:	4638      	mov	r0, r7
 8006162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006164:	4b0a      	ldr	r3, [pc, #40]	; (8006190 <__swbuf_r+0x9c>)
 8006166:	429c      	cmp	r4, r3
 8006168:	d101      	bne.n	800616e <__swbuf_r+0x7a>
 800616a:	68ac      	ldr	r4, [r5, #8]
 800616c:	e7cf      	b.n	800610e <__swbuf_r+0x1a>
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <__swbuf_r+0xa0>)
 8006170:	429c      	cmp	r4, r3
 8006172:	bf08      	it	eq
 8006174:	68ec      	ldreq	r4, [r5, #12]
 8006176:	e7ca      	b.n	800610e <__swbuf_r+0x1a>
 8006178:	4621      	mov	r1, r4
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f81a 	bl	80061b4 <__swsetup_r>
 8006180:	2800      	cmp	r0, #0
 8006182:	d0cb      	beq.n	800611c <__swbuf_r+0x28>
 8006184:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006188:	e7ea      	b.n	8006160 <__swbuf_r+0x6c>
 800618a:	bf00      	nop
 800618c:	08006c8c 	.word	0x08006c8c
 8006190:	08006cac 	.word	0x08006cac
 8006194:	08006c6c 	.word	0x08006c6c

08006198 <__ascii_wctomb>:
 8006198:	b149      	cbz	r1, 80061ae <__ascii_wctomb+0x16>
 800619a:	2aff      	cmp	r2, #255	; 0xff
 800619c:	bf85      	ittet	hi
 800619e:	238a      	movhi	r3, #138	; 0x8a
 80061a0:	6003      	strhi	r3, [r0, #0]
 80061a2:	700a      	strbls	r2, [r1, #0]
 80061a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80061a8:	bf98      	it	ls
 80061aa:	2001      	movls	r0, #1
 80061ac:	4770      	bx	lr
 80061ae:	4608      	mov	r0, r1
 80061b0:	4770      	bx	lr
	...

080061b4 <__swsetup_r>:
 80061b4:	4b32      	ldr	r3, [pc, #200]	; (8006280 <__swsetup_r+0xcc>)
 80061b6:	b570      	push	{r4, r5, r6, lr}
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	4606      	mov	r6, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	b125      	cbz	r5, 80061ca <__swsetup_r+0x16>
 80061c0:	69ab      	ldr	r3, [r5, #24]
 80061c2:	b913      	cbnz	r3, 80061ca <__swsetup_r+0x16>
 80061c4:	4628      	mov	r0, r5
 80061c6:	f000 f985 	bl	80064d4 <__sinit>
 80061ca:	4b2e      	ldr	r3, [pc, #184]	; (8006284 <__swsetup_r+0xd0>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d10f      	bne.n	80061f0 <__swsetup_r+0x3c>
 80061d0:	686c      	ldr	r4, [r5, #4]
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061d8:	0719      	lsls	r1, r3, #28
 80061da:	d42c      	bmi.n	8006236 <__swsetup_r+0x82>
 80061dc:	06dd      	lsls	r5, r3, #27
 80061de:	d411      	bmi.n	8006204 <__swsetup_r+0x50>
 80061e0:	2309      	movs	r3, #9
 80061e2:	6033      	str	r3, [r6, #0]
 80061e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80061e8:	81a3      	strh	r3, [r4, #12]
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061ee:	e03e      	b.n	800626e <__swsetup_r+0xba>
 80061f0:	4b25      	ldr	r3, [pc, #148]	; (8006288 <__swsetup_r+0xd4>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <__swsetup_r+0x46>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7eb      	b.n	80061d2 <__swsetup_r+0x1e>
 80061fa:	4b24      	ldr	r3, [pc, #144]	; (800628c <__swsetup_r+0xd8>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7e6      	b.n	80061d2 <__swsetup_r+0x1e>
 8006204:	0758      	lsls	r0, r3, #29
 8006206:	d512      	bpl.n	800622e <__swsetup_r+0x7a>
 8006208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800620a:	b141      	cbz	r1, 800621e <__swsetup_r+0x6a>
 800620c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006210:	4299      	cmp	r1, r3
 8006212:	d002      	beq.n	800621a <__swsetup_r+0x66>
 8006214:	4630      	mov	r0, r6
 8006216:	f7ff fcd5 	bl	8005bc4 <_free_r>
 800621a:	2300      	movs	r3, #0
 800621c:	6363      	str	r3, [r4, #52]	; 0x34
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	2300      	movs	r3, #0
 8006228:	6063      	str	r3, [r4, #4]
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	f043 0308 	orr.w	r3, r3, #8
 8006234:	81a3      	strh	r3, [r4, #12]
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	b94b      	cbnz	r3, 800624e <__swsetup_r+0x9a>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	d003      	beq.n	800624e <__swsetup_r+0x9a>
 8006246:	4621      	mov	r1, r4
 8006248:	4630      	mov	r0, r6
 800624a:	f000 fa09 	bl	8006660 <__smakebuf_r>
 800624e:	89a0      	ldrh	r0, [r4, #12]
 8006250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006254:	f010 0301 	ands.w	r3, r0, #1
 8006258:	d00a      	beq.n	8006270 <__swsetup_r+0xbc>
 800625a:	2300      	movs	r3, #0
 800625c:	60a3      	str	r3, [r4, #8]
 800625e:	6963      	ldr	r3, [r4, #20]
 8006260:	425b      	negs	r3, r3
 8006262:	61a3      	str	r3, [r4, #24]
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	b943      	cbnz	r3, 800627a <__swsetup_r+0xc6>
 8006268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800626c:	d1ba      	bne.n	80061e4 <__swsetup_r+0x30>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	0781      	lsls	r1, r0, #30
 8006272:	bf58      	it	pl
 8006274:	6963      	ldrpl	r3, [r4, #20]
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	e7f4      	b.n	8006264 <__swsetup_r+0xb0>
 800627a:	2000      	movs	r0, #0
 800627c:	e7f7      	b.n	800626e <__swsetup_r+0xba>
 800627e:	bf00      	nop
 8006280:	2000000c 	.word	0x2000000c
 8006284:	08006c8c 	.word	0x08006c8c
 8006288:	08006cac 	.word	0x08006cac
 800628c:	08006c6c 	.word	0x08006c6c

08006290 <abort>:
 8006290:	b508      	push	{r3, lr}
 8006292:	2006      	movs	r0, #6
 8006294:	f000 fa4c 	bl	8006730 <raise>
 8006298:	2001      	movs	r0, #1
 800629a:	f7fb f959 	bl	8001550 <_exit>
	...

080062a0 <__sflush_r>:
 80062a0:	898a      	ldrh	r2, [r1, #12]
 80062a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	4605      	mov	r5, r0
 80062a8:	0710      	lsls	r0, r2, #28
 80062aa:	460c      	mov	r4, r1
 80062ac:	d458      	bmi.n	8006360 <__sflush_r+0xc0>
 80062ae:	684b      	ldr	r3, [r1, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dc05      	bgt.n	80062c0 <__sflush_r+0x20>
 80062b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dc02      	bgt.n	80062c0 <__sflush_r+0x20>
 80062ba:	2000      	movs	r0, #0
 80062bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	d0f9      	beq.n	80062ba <__sflush_r+0x1a>
 80062c6:	2300      	movs	r3, #0
 80062c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062cc:	682f      	ldr	r7, [r5, #0]
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	d032      	beq.n	8006338 <__sflush_r+0x98>
 80062d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	075a      	lsls	r2, r3, #29
 80062d8:	d505      	bpl.n	80062e6 <__sflush_r+0x46>
 80062da:	6863      	ldr	r3, [r4, #4]
 80062dc:	1ac0      	subs	r0, r0, r3
 80062de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062e0:	b10b      	cbz	r3, 80062e6 <__sflush_r+0x46>
 80062e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062e4:	1ac0      	subs	r0, r0, r3
 80062e6:	2300      	movs	r3, #0
 80062e8:	4602      	mov	r2, r0
 80062ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ec:	6a21      	ldr	r1, [r4, #32]
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b0      	blx	r6
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	d106      	bne.n	8006306 <__sflush_r+0x66>
 80062f8:	6829      	ldr	r1, [r5, #0]
 80062fa:	291d      	cmp	r1, #29
 80062fc:	d82c      	bhi.n	8006358 <__sflush_r+0xb8>
 80062fe:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <__sflush_r+0x108>)
 8006300:	40ca      	lsrs	r2, r1
 8006302:	07d6      	lsls	r6, r2, #31
 8006304:	d528      	bpl.n	8006358 <__sflush_r+0xb8>
 8006306:	2200      	movs	r2, #0
 8006308:	6062      	str	r2, [r4, #4]
 800630a:	04d9      	lsls	r1, r3, #19
 800630c:	6922      	ldr	r2, [r4, #16]
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	d504      	bpl.n	800631c <__sflush_r+0x7c>
 8006312:	1c42      	adds	r2, r0, #1
 8006314:	d101      	bne.n	800631a <__sflush_r+0x7a>
 8006316:	682b      	ldr	r3, [r5, #0]
 8006318:	b903      	cbnz	r3, 800631c <__sflush_r+0x7c>
 800631a:	6560      	str	r0, [r4, #84]	; 0x54
 800631c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800631e:	602f      	str	r7, [r5, #0]
 8006320:	2900      	cmp	r1, #0
 8006322:	d0ca      	beq.n	80062ba <__sflush_r+0x1a>
 8006324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006328:	4299      	cmp	r1, r3
 800632a:	d002      	beq.n	8006332 <__sflush_r+0x92>
 800632c:	4628      	mov	r0, r5
 800632e:	f7ff fc49 	bl	8005bc4 <_free_r>
 8006332:	2000      	movs	r0, #0
 8006334:	6360      	str	r0, [r4, #52]	; 0x34
 8006336:	e7c1      	b.n	80062bc <__sflush_r+0x1c>
 8006338:	6a21      	ldr	r1, [r4, #32]
 800633a:	2301      	movs	r3, #1
 800633c:	4628      	mov	r0, r5
 800633e:	47b0      	blx	r6
 8006340:	1c41      	adds	r1, r0, #1
 8006342:	d1c7      	bne.n	80062d4 <__sflush_r+0x34>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0c4      	beq.n	80062d4 <__sflush_r+0x34>
 800634a:	2b1d      	cmp	r3, #29
 800634c:	d001      	beq.n	8006352 <__sflush_r+0xb2>
 800634e:	2b16      	cmp	r3, #22
 8006350:	d101      	bne.n	8006356 <__sflush_r+0xb6>
 8006352:	602f      	str	r7, [r5, #0]
 8006354:	e7b1      	b.n	80062ba <__sflush_r+0x1a>
 8006356:	89a3      	ldrh	r3, [r4, #12]
 8006358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	e7ad      	b.n	80062bc <__sflush_r+0x1c>
 8006360:	690f      	ldr	r7, [r1, #16]
 8006362:	2f00      	cmp	r7, #0
 8006364:	d0a9      	beq.n	80062ba <__sflush_r+0x1a>
 8006366:	0793      	lsls	r3, r2, #30
 8006368:	680e      	ldr	r6, [r1, #0]
 800636a:	bf08      	it	eq
 800636c:	694b      	ldreq	r3, [r1, #20]
 800636e:	600f      	str	r7, [r1, #0]
 8006370:	bf18      	it	ne
 8006372:	2300      	movne	r3, #0
 8006374:	eba6 0807 	sub.w	r8, r6, r7
 8006378:	608b      	str	r3, [r1, #8]
 800637a:	f1b8 0f00 	cmp.w	r8, #0
 800637e:	dd9c      	ble.n	80062ba <__sflush_r+0x1a>
 8006380:	6a21      	ldr	r1, [r4, #32]
 8006382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006384:	4643      	mov	r3, r8
 8006386:	463a      	mov	r2, r7
 8006388:	4628      	mov	r0, r5
 800638a:	47b0      	blx	r6
 800638c:	2800      	cmp	r0, #0
 800638e:	dc06      	bgt.n	800639e <__sflush_r+0xfe>
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006396:	81a3      	strh	r3, [r4, #12]
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800639c:	e78e      	b.n	80062bc <__sflush_r+0x1c>
 800639e:	4407      	add	r7, r0
 80063a0:	eba8 0800 	sub.w	r8, r8, r0
 80063a4:	e7e9      	b.n	800637a <__sflush_r+0xda>
 80063a6:	bf00      	nop
 80063a8:	20400001 	.word	0x20400001

080063ac <_fflush_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	690b      	ldr	r3, [r1, #16]
 80063b0:	4605      	mov	r5, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	b913      	cbnz	r3, 80063bc <_fflush_r+0x10>
 80063b6:	2500      	movs	r5, #0
 80063b8:	4628      	mov	r0, r5
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	b118      	cbz	r0, 80063c6 <_fflush_r+0x1a>
 80063be:	6983      	ldr	r3, [r0, #24]
 80063c0:	b90b      	cbnz	r3, 80063c6 <_fflush_r+0x1a>
 80063c2:	f000 f887 	bl	80064d4 <__sinit>
 80063c6:	4b14      	ldr	r3, [pc, #80]	; (8006418 <_fflush_r+0x6c>)
 80063c8:	429c      	cmp	r4, r3
 80063ca:	d11b      	bne.n	8006404 <_fflush_r+0x58>
 80063cc:	686c      	ldr	r4, [r5, #4]
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0ef      	beq.n	80063b6 <_fflush_r+0xa>
 80063d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063d8:	07d0      	lsls	r0, r2, #31
 80063da:	d404      	bmi.n	80063e6 <_fflush_r+0x3a>
 80063dc:	0599      	lsls	r1, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_fflush_r+0x3a>
 80063e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e2:	f000 f915 	bl	8006610 <__retarget_lock_acquire_recursive>
 80063e6:	4628      	mov	r0, r5
 80063e8:	4621      	mov	r1, r4
 80063ea:	f7ff ff59 	bl	80062a0 <__sflush_r>
 80063ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063f0:	07da      	lsls	r2, r3, #31
 80063f2:	4605      	mov	r5, r0
 80063f4:	d4e0      	bmi.n	80063b8 <_fflush_r+0xc>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	059b      	lsls	r3, r3, #22
 80063fa:	d4dd      	bmi.n	80063b8 <_fflush_r+0xc>
 80063fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fe:	f000 f908 	bl	8006612 <__retarget_lock_release_recursive>
 8006402:	e7d9      	b.n	80063b8 <_fflush_r+0xc>
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <_fflush_r+0x70>)
 8006406:	429c      	cmp	r4, r3
 8006408:	d101      	bne.n	800640e <_fflush_r+0x62>
 800640a:	68ac      	ldr	r4, [r5, #8]
 800640c:	e7df      	b.n	80063ce <_fflush_r+0x22>
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <_fflush_r+0x74>)
 8006410:	429c      	cmp	r4, r3
 8006412:	bf08      	it	eq
 8006414:	68ec      	ldreq	r4, [r5, #12]
 8006416:	e7da      	b.n	80063ce <_fflush_r+0x22>
 8006418:	08006c8c 	.word	0x08006c8c
 800641c:	08006cac 	.word	0x08006cac
 8006420:	08006c6c 	.word	0x08006c6c

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	; 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	; 0x5c
 8006442:	f7fd fd1f 	bl	8003e84 <memset>
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <std+0x38>)
 8006448:	6263      	str	r3, [r4, #36]	; 0x24
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <std+0x3c>)
 800644c:	62a3      	str	r3, [r4, #40]	; 0x28
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <std+0x40>)
 8006450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <std+0x44>)
 8006454:	6224      	str	r4, [r4, #32]
 8006456:	6323      	str	r3, [r4, #48]	; 0x30
 8006458:	bd10      	pop	{r4, pc}
 800645a:	bf00      	nop
 800645c:	08006769 	.word	0x08006769
 8006460:	0800678b 	.word	0x0800678b
 8006464:	080067c3 	.word	0x080067c3
 8006468:	080067e7 	.word	0x080067e7

0800646c <_cleanup_r>:
 800646c:	4901      	ldr	r1, [pc, #4]	; (8006474 <_cleanup_r+0x8>)
 800646e:	f000 b8af 	b.w	80065d0 <_fwalk_reent>
 8006472:	bf00      	nop
 8006474:	080063ad 	.word	0x080063ad

08006478 <__sfmoreglue>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	2268      	movs	r2, #104	; 0x68
 800647c:	1e4d      	subs	r5, r1, #1
 800647e:	4355      	muls	r5, r2
 8006480:	460e      	mov	r6, r1
 8006482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006486:	f7ff fc09 	bl	8005c9c <_malloc_r>
 800648a:	4604      	mov	r4, r0
 800648c:	b140      	cbz	r0, 80064a0 <__sfmoreglue+0x28>
 800648e:	2100      	movs	r1, #0
 8006490:	e9c0 1600 	strd	r1, r6, [r0]
 8006494:	300c      	adds	r0, #12
 8006496:	60a0      	str	r0, [r4, #8]
 8006498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800649c:	f7fd fcf2 	bl	8003e84 <memset>
 80064a0:	4620      	mov	r0, r4
 80064a2:	bd70      	pop	{r4, r5, r6, pc}

080064a4 <__sfp_lock_acquire>:
 80064a4:	4801      	ldr	r0, [pc, #4]	; (80064ac <__sfp_lock_acquire+0x8>)
 80064a6:	f000 b8b3 	b.w	8006610 <__retarget_lock_acquire_recursive>
 80064aa:	bf00      	nop
 80064ac:	200007ad 	.word	0x200007ad

080064b0 <__sfp_lock_release>:
 80064b0:	4801      	ldr	r0, [pc, #4]	; (80064b8 <__sfp_lock_release+0x8>)
 80064b2:	f000 b8ae 	b.w	8006612 <__retarget_lock_release_recursive>
 80064b6:	bf00      	nop
 80064b8:	200007ad 	.word	0x200007ad

080064bc <__sinit_lock_acquire>:
 80064bc:	4801      	ldr	r0, [pc, #4]	; (80064c4 <__sinit_lock_acquire+0x8>)
 80064be:	f000 b8a7 	b.w	8006610 <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	200007ae 	.word	0x200007ae

080064c8 <__sinit_lock_release>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__sinit_lock_release+0x8>)
 80064ca:	f000 b8a2 	b.w	8006612 <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	200007ae 	.word	0x200007ae

080064d4 <__sinit>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4604      	mov	r4, r0
 80064d8:	f7ff fff0 	bl	80064bc <__sinit_lock_acquire>
 80064dc:	69a3      	ldr	r3, [r4, #24]
 80064de:	b11b      	cbz	r3, 80064e8 <__sinit+0x14>
 80064e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e4:	f7ff bff0 	b.w	80064c8 <__sinit_lock_release>
 80064e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80064ec:	6523      	str	r3, [r4, #80]	; 0x50
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <__sinit+0x68>)
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <__sinit+0x6c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	bf04      	itt	eq
 80064fa:	2301      	moveq	r3, #1
 80064fc:	61a3      	streq	r3, [r4, #24]
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 f820 	bl	8006544 <__sfp>
 8006504:	6060      	str	r0, [r4, #4]
 8006506:	4620      	mov	r0, r4
 8006508:	f000 f81c 	bl	8006544 <__sfp>
 800650c:	60a0      	str	r0, [r4, #8]
 800650e:	4620      	mov	r0, r4
 8006510:	f000 f818 	bl	8006544 <__sfp>
 8006514:	2200      	movs	r2, #0
 8006516:	60e0      	str	r0, [r4, #12]
 8006518:	2104      	movs	r1, #4
 800651a:	6860      	ldr	r0, [r4, #4]
 800651c:	f7ff ff82 	bl	8006424 <std>
 8006520:	68a0      	ldr	r0, [r4, #8]
 8006522:	2201      	movs	r2, #1
 8006524:	2109      	movs	r1, #9
 8006526:	f7ff ff7d 	bl	8006424 <std>
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	2202      	movs	r2, #2
 800652e:	2112      	movs	r1, #18
 8006530:	f7ff ff78 	bl	8006424 <std>
 8006534:	2301      	movs	r3, #1
 8006536:	61a3      	str	r3, [r4, #24]
 8006538:	e7d2      	b.n	80064e0 <__sinit+0xc>
 800653a:	bf00      	nop
 800653c:	080068f0 	.word	0x080068f0
 8006540:	0800646d 	.word	0x0800646d

08006544 <__sfp>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	4607      	mov	r7, r0
 8006548:	f7ff ffac 	bl	80064a4 <__sfp_lock_acquire>
 800654c:	4b1e      	ldr	r3, [pc, #120]	; (80065c8 <__sfp+0x84>)
 800654e:	681e      	ldr	r6, [r3, #0]
 8006550:	69b3      	ldr	r3, [r6, #24]
 8006552:	b913      	cbnz	r3, 800655a <__sfp+0x16>
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff ffbd 	bl	80064d4 <__sinit>
 800655a:	3648      	adds	r6, #72	; 0x48
 800655c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006560:	3b01      	subs	r3, #1
 8006562:	d503      	bpl.n	800656c <__sfp+0x28>
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	b30b      	cbz	r3, 80065ac <__sfp+0x68>
 8006568:	6836      	ldr	r6, [r6, #0]
 800656a:	e7f7      	b.n	800655c <__sfp+0x18>
 800656c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006570:	b9d5      	cbnz	r5, 80065a8 <__sfp+0x64>
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <__sfp+0x88>)
 8006574:	60e3      	str	r3, [r4, #12]
 8006576:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800657a:	6665      	str	r5, [r4, #100]	; 0x64
 800657c:	f000 f847 	bl	800660e <__retarget_lock_init_recursive>
 8006580:	f7ff ff96 	bl	80064b0 <__sfp_lock_release>
 8006584:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006588:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800658c:	6025      	str	r5, [r4, #0]
 800658e:	61a5      	str	r5, [r4, #24]
 8006590:	2208      	movs	r2, #8
 8006592:	4629      	mov	r1, r5
 8006594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006598:	f7fd fc74 	bl	8003e84 <memset>
 800659c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065a4:	4620      	mov	r0, r4
 80065a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a8:	3468      	adds	r4, #104	; 0x68
 80065aa:	e7d9      	b.n	8006560 <__sfp+0x1c>
 80065ac:	2104      	movs	r1, #4
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7ff ff62 	bl	8006478 <__sfmoreglue>
 80065b4:	4604      	mov	r4, r0
 80065b6:	6030      	str	r0, [r6, #0]
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d1d5      	bne.n	8006568 <__sfp+0x24>
 80065bc:	f7ff ff78 	bl	80064b0 <__sfp_lock_release>
 80065c0:	230c      	movs	r3, #12
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	e7ee      	b.n	80065a4 <__sfp+0x60>
 80065c6:	bf00      	nop
 80065c8:	080068f0 	.word	0x080068f0
 80065cc:	ffff0001 	.word	0xffff0001

080065d0 <_fwalk_reent>:
 80065d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d4:	4606      	mov	r6, r0
 80065d6:	4688      	mov	r8, r1
 80065d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065dc:	2700      	movs	r7, #0
 80065de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065e2:	f1b9 0901 	subs.w	r9, r9, #1
 80065e6:	d505      	bpl.n	80065f4 <_fwalk_reent+0x24>
 80065e8:	6824      	ldr	r4, [r4, #0]
 80065ea:	2c00      	cmp	r4, #0
 80065ec:	d1f7      	bne.n	80065de <_fwalk_reent+0xe>
 80065ee:	4638      	mov	r0, r7
 80065f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f4:	89ab      	ldrh	r3, [r5, #12]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d907      	bls.n	800660a <_fwalk_reent+0x3a>
 80065fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065fe:	3301      	adds	r3, #1
 8006600:	d003      	beq.n	800660a <_fwalk_reent+0x3a>
 8006602:	4629      	mov	r1, r5
 8006604:	4630      	mov	r0, r6
 8006606:	47c0      	blx	r8
 8006608:	4307      	orrs	r7, r0
 800660a:	3568      	adds	r5, #104	; 0x68
 800660c:	e7e9      	b.n	80065e2 <_fwalk_reent+0x12>

0800660e <__retarget_lock_init_recursive>:
 800660e:	4770      	bx	lr

08006610 <__retarget_lock_acquire_recursive>:
 8006610:	4770      	bx	lr

08006612 <__retarget_lock_release_recursive>:
 8006612:	4770      	bx	lr

08006614 <__swhatbuf_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	460e      	mov	r6, r1
 8006618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661c:	2900      	cmp	r1, #0
 800661e:	b096      	sub	sp, #88	; 0x58
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	da08      	bge.n	8006638 <__swhatbuf_r+0x24>
 8006626:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	061a      	lsls	r2, r3, #24
 8006630:	d410      	bmi.n	8006654 <__swhatbuf_r+0x40>
 8006632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006636:	e00e      	b.n	8006656 <__swhatbuf_r+0x42>
 8006638:	466a      	mov	r2, sp
 800663a:	f000 f8fb 	bl	8006834 <_fstat_r>
 800663e:	2800      	cmp	r0, #0
 8006640:	dbf1      	blt.n	8006626 <__swhatbuf_r+0x12>
 8006642:	9a01      	ldr	r2, [sp, #4]
 8006644:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006648:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800664c:	425a      	negs	r2, r3
 800664e:	415a      	adcs	r2, r3
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	e7ee      	b.n	8006632 <__swhatbuf_r+0x1e>
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	2000      	movs	r0, #0
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	b016      	add	sp, #88	; 0x58
 800665c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006660 <__smakebuf_r>:
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006664:	079d      	lsls	r5, r3, #30
 8006666:	4606      	mov	r6, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d507      	bpl.n	800667c <__smakebuf_r+0x1c>
 800666c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2301      	movs	r3, #1
 8006676:	6163      	str	r3, [r4, #20]
 8006678:	b002      	add	sp, #8
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	ab01      	add	r3, sp, #4
 800667e:	466a      	mov	r2, sp
 8006680:	f7ff ffc8 	bl	8006614 <__swhatbuf_r>
 8006684:	9900      	ldr	r1, [sp, #0]
 8006686:	4605      	mov	r5, r0
 8006688:	4630      	mov	r0, r6
 800668a:	f7ff fb07 	bl	8005c9c <_malloc_r>
 800668e:	b948      	cbnz	r0, 80066a4 <__smakebuf_r+0x44>
 8006690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006694:	059a      	lsls	r2, r3, #22
 8006696:	d4ef      	bmi.n	8006678 <__smakebuf_r+0x18>
 8006698:	f023 0303 	bic.w	r3, r3, #3
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	81a3      	strh	r3, [r4, #12]
 80066a2:	e7e3      	b.n	800666c <__smakebuf_r+0xc>
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <__smakebuf_r+0x7c>)
 80066a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	6020      	str	r0, [r4, #0]
 80066ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	6163      	str	r3, [r4, #20]
 80066b6:	9b01      	ldr	r3, [sp, #4]
 80066b8:	6120      	str	r0, [r4, #16]
 80066ba:	b15b      	cbz	r3, 80066d4 <__smakebuf_r+0x74>
 80066bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c0:	4630      	mov	r0, r6
 80066c2:	f000 f8c9 	bl	8006858 <_isatty_r>
 80066c6:	b128      	cbz	r0, 80066d4 <__smakebuf_r+0x74>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	81a3      	strh	r3, [r4, #12]
 80066d4:	89a0      	ldrh	r0, [r4, #12]
 80066d6:	4305      	orrs	r5, r0
 80066d8:	81a5      	strh	r5, [r4, #12]
 80066da:	e7cd      	b.n	8006678 <__smakebuf_r+0x18>
 80066dc:	0800646d 	.word	0x0800646d

080066e0 <_raise_r>:
 80066e0:	291f      	cmp	r1, #31
 80066e2:	b538      	push	{r3, r4, r5, lr}
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	d904      	bls.n	80066f4 <_raise_r+0x14>
 80066ea:	2316      	movs	r3, #22
 80066ec:	6003      	str	r3, [r0, #0]
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066f6:	b112      	cbz	r2, 80066fe <_raise_r+0x1e>
 80066f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066fc:	b94b      	cbnz	r3, 8006712 <_raise_r+0x32>
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 f830 	bl	8006764 <_getpid_r>
 8006704:	462a      	mov	r2, r5
 8006706:	4601      	mov	r1, r0
 8006708:	4620      	mov	r0, r4
 800670a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800670e:	f000 b817 	b.w	8006740 <_kill_r>
 8006712:	2b01      	cmp	r3, #1
 8006714:	d00a      	beq.n	800672c <_raise_r+0x4c>
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	d103      	bne.n	8006722 <_raise_r+0x42>
 800671a:	2316      	movs	r3, #22
 800671c:	6003      	str	r3, [r0, #0]
 800671e:	2001      	movs	r0, #1
 8006720:	e7e7      	b.n	80066f2 <_raise_r+0x12>
 8006722:	2400      	movs	r4, #0
 8006724:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006728:	4628      	mov	r0, r5
 800672a:	4798      	blx	r3
 800672c:	2000      	movs	r0, #0
 800672e:	e7e0      	b.n	80066f2 <_raise_r+0x12>

08006730 <raise>:
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <raise+0xc>)
 8006732:	4601      	mov	r1, r0
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	f7ff bfd3 	b.w	80066e0 <_raise_r>
 800673a:	bf00      	nop
 800673c:	2000000c 	.word	0x2000000c

08006740 <_kill_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4d07      	ldr	r5, [pc, #28]	; (8006760 <_kill_r+0x20>)
 8006744:	2300      	movs	r3, #0
 8006746:	4604      	mov	r4, r0
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	f7fa feef 	bl	8001530 <_kill>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d102      	bne.n	800675c <_kill_r+0x1c>
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	b103      	cbz	r3, 800675c <_kill_r+0x1c>
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	bd38      	pop	{r3, r4, r5, pc}
 800675e:	bf00      	nop
 8006760:	200007a8 	.word	0x200007a8

08006764 <_getpid_r>:
 8006764:	f7fa bedc 	b.w	8001520 <_getpid>

08006768 <__sread>:
 8006768:	b510      	push	{r4, lr}
 800676a:	460c      	mov	r4, r1
 800676c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006770:	f000 f894 	bl	800689c <_read_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	bfab      	itete	ge
 8006778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800677a:	89a3      	ldrhlt	r3, [r4, #12]
 800677c:	181b      	addge	r3, r3, r0
 800677e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006782:	bfac      	ite	ge
 8006784:	6563      	strge	r3, [r4, #84]	; 0x54
 8006786:	81a3      	strhlt	r3, [r4, #12]
 8006788:	bd10      	pop	{r4, pc}

0800678a <__swrite>:
 800678a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800678e:	461f      	mov	r7, r3
 8006790:	898b      	ldrh	r3, [r1, #12]
 8006792:	05db      	lsls	r3, r3, #23
 8006794:	4605      	mov	r5, r0
 8006796:	460c      	mov	r4, r1
 8006798:	4616      	mov	r6, r2
 800679a:	d505      	bpl.n	80067a8 <__swrite+0x1e>
 800679c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a0:	2302      	movs	r3, #2
 80067a2:	2200      	movs	r2, #0
 80067a4:	f000 f868 	bl	8006878 <_lseek_r>
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b2:	81a3      	strh	r3, [r4, #12]
 80067b4:	4632      	mov	r2, r6
 80067b6:	463b      	mov	r3, r7
 80067b8:	4628      	mov	r0, r5
 80067ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	f000 b817 	b.w	80067f0 <_write_r>

080067c2 <__sseek>:
 80067c2:	b510      	push	{r4, lr}
 80067c4:	460c      	mov	r4, r1
 80067c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ca:	f000 f855 	bl	8006878 <_lseek_r>
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	bf15      	itete	ne
 80067d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067de:	81a3      	strheq	r3, [r4, #12]
 80067e0:	bf18      	it	ne
 80067e2:	81a3      	strhne	r3, [r4, #12]
 80067e4:	bd10      	pop	{r4, pc}

080067e6 <__sclose>:
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	f000 b813 	b.w	8006814 <_close_r>
	...

080067f0 <_write_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d07      	ldr	r5, [pc, #28]	; (8006810 <_write_r+0x20>)
 80067f4:	4604      	mov	r4, r0
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	602a      	str	r2, [r5, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	f7fa fecd 	bl	800159e <_write>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_write_r+0x1e>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_write_r+0x1e>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	200007a8 	.word	0x200007a8

08006814 <_close_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	; (8006830 <_close_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fa fed9 	bl	80015d6 <_close>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_close_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_close_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200007a8 	.word	0x200007a8

08006834 <_fstat_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	; (8006854 <_fstat_r+0x20>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	4611      	mov	r1, r2
 8006840:	602b      	str	r3, [r5, #0]
 8006842:	f7fa fed4 	bl	80015ee <_fstat>
 8006846:	1c43      	adds	r3, r0, #1
 8006848:	d102      	bne.n	8006850 <_fstat_r+0x1c>
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	b103      	cbz	r3, 8006850 <_fstat_r+0x1c>
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	bd38      	pop	{r3, r4, r5, pc}
 8006852:	bf00      	nop
 8006854:	200007a8 	.word	0x200007a8

08006858 <_isatty_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d06      	ldr	r5, [pc, #24]	; (8006874 <_isatty_r+0x1c>)
 800685c:	2300      	movs	r3, #0
 800685e:	4604      	mov	r4, r0
 8006860:	4608      	mov	r0, r1
 8006862:	602b      	str	r3, [r5, #0]
 8006864:	f7fa fed3 	bl	800160e <_isatty>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_isatty_r+0x1a>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_isatty_r+0x1a>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	200007a8 	.word	0x200007a8

08006878 <_lseek_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d07      	ldr	r5, [pc, #28]	; (8006898 <_lseek_r+0x20>)
 800687c:	4604      	mov	r4, r0
 800687e:	4608      	mov	r0, r1
 8006880:	4611      	mov	r1, r2
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	f7fa fecc 	bl	8001624 <_lseek>
 800688c:	1c43      	adds	r3, r0, #1
 800688e:	d102      	bne.n	8006896 <_lseek_r+0x1e>
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	b103      	cbz	r3, 8006896 <_lseek_r+0x1e>
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	200007a8 	.word	0x200007a8

0800689c <_read_r>:
 800689c:	b538      	push	{r3, r4, r5, lr}
 800689e:	4d07      	ldr	r5, [pc, #28]	; (80068bc <_read_r+0x20>)
 80068a0:	4604      	mov	r4, r0
 80068a2:	4608      	mov	r0, r1
 80068a4:	4611      	mov	r1, r2
 80068a6:	2200      	movs	r2, #0
 80068a8:	602a      	str	r2, [r5, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	f7fa fe5a 	bl	8001564 <_read>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_read_r+0x1e>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_read_r+0x1e>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	200007a8 	.word	0x200007a8

080068c0 <_init>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr

080068cc <_fini>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr
